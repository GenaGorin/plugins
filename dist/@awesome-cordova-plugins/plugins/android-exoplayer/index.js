var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var AndroidExoplayerOriginal = /** @class */ (function (_super) {
    __extends(AndroidExoplayerOriginal, _super);
    function AndroidExoplayerOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AndroidExoplayerOriginal.prototype.show = function (parameters) { return cordova(this, "show", { "observable": true, "clearFunction": "close", "clearWithArgs": false, "successIndex": 1, "errorIndex": 2 }, arguments); };
    AndroidExoplayerOriginal.prototype.setStream = function (url, controller) { return cordova(this, "setStream", {}, arguments); };
    AndroidExoplayerOriginal.prototype.playPause = function () { return cordova(this, "playPause", {}, arguments); };
    AndroidExoplayerOriginal.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    AndroidExoplayerOriginal.prototype.seekTo = function (milliseconds) { return cordova(this, "seekTo", {}, arguments); };
    AndroidExoplayerOriginal.prototype.seekBy = function (milliseconds) { return cordova(this, "seekBy", {}, arguments); };
    AndroidExoplayerOriginal.prototype.getState = function () { return cordova(this, "getState", {}, arguments); };
    AndroidExoplayerOriginal.prototype.showController = function () { return cordova(this, "showController", {}, arguments); };
    AndroidExoplayerOriginal.prototype.hideController = function () { return cordova(this, "hideController", {}, arguments); };
    AndroidExoplayerOriginal.prototype.setController = function (controller) { return cordova(this, "setController", {}, arguments); };
    AndroidExoplayerOriginal.prototype.close = function () { return cordova(this, "close", {}, arguments); };
    AndroidExoplayerOriginal.pluginName = "AndroidExoPlayer";
    AndroidExoplayerOriginal.plugin = "cordova-plugin-exoplayer";
    AndroidExoplayerOriginal.pluginRef = "ExoPlayer";
    AndroidExoplayerOriginal.repo = "https://github.com/frontyard/cordova-plugin-exoplayer";
    AndroidExoplayerOriginal.platforms = ["Android"];
    return AndroidExoplayerOriginal;
}(AwesomeCordovaNativePlugin));
var AndroidExoplayer = new AndroidExoplayerOriginal();
export { AndroidExoplayer };
//# sourceMappingURL=data:application/json;base64,