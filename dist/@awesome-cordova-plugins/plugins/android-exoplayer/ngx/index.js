import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var AndroidExoplayer = /** @class */ (function (_super) {
    __extends(AndroidExoplayer, _super);
    function AndroidExoplayer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AndroidExoplayer.prototype.show = function (parameters) { return cordova(this, "show", { "observable": true, "clearFunction": "close", "clearWithArgs": false, "successIndex": 1, "errorIndex": 2 }, arguments); };
    AndroidExoplayer.prototype.setStream = function (url, controller) { return cordova(this, "setStream", {}, arguments); };
    AndroidExoplayer.prototype.playPause = function () { return cordova(this, "playPause", {}, arguments); };
    AndroidExoplayer.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    AndroidExoplayer.prototype.seekTo = function (milliseconds) { return cordova(this, "seekTo", {}, arguments); };
    AndroidExoplayer.prototype.seekBy = function (milliseconds) { return cordova(this, "seekBy", {}, arguments); };
    AndroidExoplayer.prototype.getState = function () { return cordova(this, "getState", {}, arguments); };
    AndroidExoplayer.prototype.showController = function () { return cordova(this, "showController", {}, arguments); };
    AndroidExoplayer.prototype.hideController = function () { return cordova(this, "hideController", {}, arguments); };
    AndroidExoplayer.prototype.setController = function (controller) { return cordova(this, "setController", {}, arguments); };
    AndroidExoplayer.prototype.close = function () { return cordova(this, "close", {}, arguments); };
    AndroidExoplayer.pluginName = "AndroidExoPlayer";
    AndroidExoplayer.plugin = "cordova-plugin-exoplayer";
    AndroidExoplayer.pluginRef = "ExoPlayer";
    AndroidExoplayer.repo = "https://github.com/frontyard/cordova-plugin-exoplayer";
    AndroidExoplayer.platforms = ["Android"];
    AndroidExoplayer.decorators = [
        { type: Injectable }
    ];
    return AndroidExoplayer;
}(AwesomeCordovaNativePlugin));
export { AndroidExoplayer };
//# sourceMappingURL=data:application/json;base64,