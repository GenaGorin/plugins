import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var NativePageTransitions = /** @class */ (function (_super) {
    __extends(NativePageTransitions, _super);
    function NativePageTransitions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NativePageTransitions.prototype.slide = function (options) { return cordova(this, "slide", {}, arguments); };
    NativePageTransitions.prototype.flip = function (options) { return cordova(this, "flip", {}, arguments); };
    NativePageTransitions.prototype.fade = function (options) { return cordova(this, "fade", { "platforms": ["iOS", "Android"] }, arguments); };
    NativePageTransitions.prototype.drawer = function (options) { return cordova(this, "drawer", { "platforms": ["iOS", "Android"] }, arguments); };
    NativePageTransitions.prototype.curl = function (options) { return cordova(this, "curl", { "platforms": ["iOS"] }, arguments); };
    NativePageTransitions.prototype.executePendingTransition = function () { return cordova(this, "executePendingTransition", {}, arguments); };
    NativePageTransitions.prototype.cancelPendingTransition = function () { return cordova(this, "cancelPendingTransition", {}, arguments); };
    NativePageTransitions.pluginName = "NativePageTransitions";
    NativePageTransitions.plugin = "com.telerik.plugins.nativepagetransitions";
    NativePageTransitions.pluginRef = "plugins.nativepagetransitions";
    NativePageTransitions.repo = "https://github.com/Telerik-Verified-Plugins/NativePageTransitions";
    NativePageTransitions.platforms = ["Android", "iOS", "Windows Phone 8"];
    NativePageTransitions.decorators = [
        { type: Injectable }
    ];
    return NativePageTransitions;
}(AwesomeCordovaNativePlugin));
export { NativePageTransitions };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvbmF0aXZlLXBhZ2UtdHJhbnNpdGlvbnMvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBcUVqRCx5Q0FBMEI7Ozs7SUFRbkUscUNBQUssYUFBQyxPQUFnQztJQVd0QyxvQ0FBSSxhQUFDLE9BQWdDO0lBV3JDLG9DQUFJLGFBQUMsT0FBZ0M7SUFXckMsc0NBQU0sYUFBQyxPQUFnQztJQVd2QyxvQ0FBSSxhQUFDLE9BQWdDO0lBVXJDLHdEQUF3QjtJQVV4Qix1REFBdUI7Ozs7Ozs7Z0JBekV4QixVQUFVOztnQ0FyRVg7RUFzRTJDLDBCQUEwQjtTQUF4RCxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE5hdGl2ZVRyYW5zaXRpb25PcHRpb25zIHtcclxuICBkaXJlY3Rpb24/OiBzdHJpbmc7XHJcbiAgZHVyYXRpb24/OiBudW1iZXI7XHJcbiAgc2xvd2Rvd25mYWN0b3I/OiBudW1iZXI7XHJcbiAgc2xpZGVQaXhlbHM/OiBudW1iZXI7XHJcbiAgaW9zZGVsYXk/OiBudW1iZXI7XHJcbiAgYW5kcm9pZGRlbGF5PzogbnVtYmVyO1xyXG4gIHdpbnBob25lZGVsYXk/OiBudW1iZXI7XHJcbiAgZml4ZWRQaXhlbHNUb3A/OiBudW1iZXI7XHJcbiAgZml4ZWRQaXhlbHNCb3R0b20/OiBudW1iZXI7XHJcbiAgYWN0aW9uPzogc3RyaW5nO1xyXG4gIG9yaWdpbj86IHN0cmluZztcclxuICBocmVmPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgTmF0aXZlIFBhZ2UgVHJhbnNpdGlvbnNcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoZSBOYXRpdmUgUGFnZSBUcmFuc2l0aW9ucyBwbHVnaW4gdXNlcyBuYXRpdmUgaGFyZHdhcmUgYWNjZWxlcmF0aW9uIHRvIGFuaW1hdGUgeW91ciB0cmFuc2l0aW9ucyBiZXR3ZWVuIHZpZXdzLiBZb3UgaGF2ZSBjb21wbGV0ZSBjb250cm9sIG92ZXIgdGhlIHR5cGUgb2YgdHJhbnNpdGlvbiwgdGhlIGR1cmF0aW9uLCBhbmQgZGlyZWN0aW9uLlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBOYXRpdmVQYWdlVHJhbnNpdGlvbnMsIE5hdGl2ZVRyYW5zaXRpb25PcHRpb25zIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL25hdGl2ZS1wYWdlLXRyYW5zaXRpb25zL25neCc7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgbmF0aXZlUGFnZVRyYW5zaXRpb25zOiBOYXRpdmVQYWdlVHJhbnNpdGlvbnMpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICpcclxuICogLy8gZXhhbXBsZSBvZiBhZGRpbmcgYSB0cmFuc2l0aW9uIHdoZW4gYSBwYWdlL21vZGFsIGNsb3Nlc1xyXG4gKiBpb25WaWV3V2lsbExlYXZlKCkge1xyXG4gKlxyXG4gKiAgbGV0IG9wdGlvbnM6IE5hdGl2ZVRyYW5zaXRpb25PcHRpb25zID0ge1xyXG4gKiAgICAgZGlyZWN0aW9uOiAndXAnLFxyXG4gKiAgICAgZHVyYXRpb246IDUwMCxcclxuICogICAgIHNsb3dkb3duZmFjdG9yOiAzLFxyXG4gKiAgICAgc2xpZGVQaXhlbHM6IDIwLFxyXG4gKiAgICAgaW9zZGVsYXk6IDEwMCxcclxuICogICAgIGFuZHJvaWRkZWxheTogMTUwLFxyXG4gKiAgICAgZml4ZWRQaXhlbHNUb3A6IDAsXHJcbiAqICAgICBmaXhlZFBpeGVsc0JvdHRvbTogNjBcclxuICogICAgfVxyXG4gKlxyXG4gKiAgdGhpcy5uYXRpdmVQYWdlVHJhbnNpdGlvbnMuc2xpZGUob3B0aW9ucylcclxuICogICAgLnRoZW4ob25TdWNjZXNzKVxyXG4gKiAgICAuY2F0Y2gob25FcnJvcik7XHJcbiAqXHJcbiAqIH1cclxuICpcclxuICpcclxuICogLy8gZXhhbXBsZSBvZiBhZGRpbmcgYSB0cmFuc2l0aW9uIHdoZW4gcHVzaGluZyBhIG5ldyBwYWdlXHJcbiAqIG9wZW5QYWdlKHBhZ2U6IGFueSkge1xyXG4gKlxyXG4gKiAgIHRoaXMubmF0aXZlUGFnZVRyYW5zaXRpb25zLnNsaWRlKG9wdGlvbnMpO1xyXG4gKiAgIHRoaXMubmF2Q3RybC5wdXNoKHBhZ2UpO1xyXG4gKlxyXG4gKiB9XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ05hdGl2ZVBhZ2VUcmFuc2l0aW9ucycsXHJcbiAgcGx1Z2luOiAnY29tLnRlbGVyaWsucGx1Z2lucy5uYXRpdmVwYWdldHJhbnNpdGlvbnMnLFxyXG4gIHBsdWdpblJlZjogJ3BsdWdpbnMubmF0aXZlcGFnZXRyYW5zaXRpb25zJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL1RlbGVyaWstVmVyaWZpZWQtUGx1Z2lucy9OYXRpdmVQYWdlVHJhbnNpdGlvbnMnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUycsICdXaW5kb3dzIFBob25lIDgnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTmF0aXZlUGFnZVRyYW5zaXRpb25zIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFBlcmZvcm0gYSBzbGlkZSBhbmltYXRpb25cclxuICAgKlxyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtOYXRpdmVUcmFuc2l0aW9uT3B0aW9uc30gT3B0aW9ucyBmb3IgdGhlIHRyYW5zaXRpb25cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzbGlkZShvcHRpb25zOiBOYXRpdmVUcmFuc2l0aW9uT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQZXJmb3JtIGEgZmxpcCBhbmltYXRpb25cclxuICAgKlxyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtOYXRpdmVUcmFuc2l0aW9uT3B0aW9uc30gT3B0aW9ucyBmb3IgdGhlIHRyYW5zaXRpb25cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBmbGlwKG9wdGlvbnM6IE5hdGl2ZVRyYW5zaXRpb25PcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFBlcmZvcm0gYSBmYWRlIGFuaW1hdGlvblxyXG4gICAqXHJcbiAgICogQHBhcmFtIG9wdGlvbnMge05hdGl2ZVRyYW5zaXRpb25PcHRpb25zfSBPcHRpb25zIGZvciB0aGUgdHJhbnNpdGlvblxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnaU9TJywgJ0FuZHJvaWQnXSB9KVxyXG4gIGZhZGUob3B0aW9uczogTmF0aXZlVHJhbnNpdGlvbk9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUGVyZm9ybSBhIHNsaWRlIGFuaW1hdGlvblxyXG4gICAqXHJcbiAgICogQHBhcmFtIG9wdGlvbnMge05hdGl2ZVRyYW5zaXRpb25PcHRpb25zfSBPcHRpb25zIGZvciB0aGUgdHJhbnNpdGlvblxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnaU9TJywgJ0FuZHJvaWQnXSB9KVxyXG4gIGRyYXdlcihvcHRpb25zOiBOYXRpdmVUcmFuc2l0aW9uT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQZXJmb3JtIGEgc2xpZGUgYW5pbWF0aW9uXHJcbiAgICpcclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7TmF0aXZlVHJhbnNpdGlvbk9wdGlvbnN9IE9wdGlvbnMgZm9yIHRoZSB0cmFuc2l0aW9uXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydpT1MnXSB9KVxyXG4gIGN1cmwob3B0aW9uczogTmF0aXZlVHJhbnNpdGlvbk9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRXhlY3V0ZSBwZW5kaW5nIHRyYW5zaXRpb25cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGV4ZWN1dGVQZW5kaW5nVHJhbnNpdGlvbigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FuY2VsIHBlbmRpbmcgdHJhbnNpdGlvblxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgY2FuY2VsUGVuZGluZ1RyYW5zaXRpb24oKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19