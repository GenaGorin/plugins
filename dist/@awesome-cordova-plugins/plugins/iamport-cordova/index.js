var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var IamportCordovaOriginal = /** @class */ (function (_super) {
    __extends(IamportCordovaOriginal, _super);
    function IamportCordovaOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IamportCordovaOriginal.prototype.payment = function (paymentObject) { return cordova(this, "payment", {}, arguments); };
    IamportCordovaOriginal.prototype.certification = function (certificationObject) { return cordova(this, "certification", {}, arguments); };
    IamportCordovaOriginal.pluginName = "IamportCordova";
    IamportCordovaOriginal.plugin = "iamport-cordova";
    IamportCordovaOriginal.pluginRef = "cordova.plugins.IamportCordova";
    IamportCordovaOriginal.repo = "https://github.com/iamport/iamport-cordova";
    IamportCordovaOriginal.platforms = ["ios", "android"];
    return IamportCordovaOriginal;
}(AwesomeCordovaNativePlugin));
var IamportCordova = new IamportCordovaOriginal();
export { IamportCordova };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvaWFtcG9ydC1jb3Jkb3ZhL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQXlGeEQsa0NBQTBCOzs7O0lBUTVELGdDQUFPLGFBQUMsYUFBNEI7SUFXcEMsc0NBQWEsYUFBQyxtQkFBd0M7Ozs7Ozt5QkE3R3hEO0VBMEZvQywwQkFBMEI7U0FBakQsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuXHJcbmRlY2xhcmUgY29uc3QgY29yZG92YTogQ29yZG92YSAmIHsgcGx1Z2luczogYW55IH07XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBheW1lbnRPYmplY3Qge1xyXG4gIHRpdGxlPzogVGl0bGVEYXRhOyAvLyB3ZWJ2aWV3IHRpdGxlIGRhdGFcclxuICB1c2VyQ29kZTogc3RyaW5nOyAvLyB1c2VyIGlkZW50aWZpY2F0aW9uIGNvZGVcclxuICBkYXRhOiBQYXltZW50RGF0YTsgLy8gcGF5bWVudCBkYXRhXHJcbiAgY2FsbGJhY2s6IGFueTsgLy8gY2FsbGJhY2sgZnVuY3Rpb24gYWZ0ZXIgcGF5bWVudFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENlcnRpZmljYXRpb25PYmplY3Qge1xyXG4gIHRpdGxlPzogVGl0bGVEYXRhOyAvLyB3ZWJ2aWV3IHRpdGxlIGRhdGFcclxuICB1c2VyQ29kZTogc3RyaW5nOyAvLyB1c2VyIGlkZW50aWZpY2F0aW9uIGNvZGVcclxuICBkYXRhOiBDZXJ0aWZpY2F0aW9uRGF0YTsgLy8gY2VydGlmaWNhdGlvbiBkYXRhXHJcbiAgY2FsbGJhY2s6IGFueTsgLy8gY2FsbGJhY2sgZnVuY3Rpb24gYWZ0ZXIgY2VydGlmaWNhdGlvblxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRpdGxlRGF0YSB7XHJcbiAgbmFtZT86IHN0cmluZzsgLy8gd2VidmlldyB0aXRsZSBuYW1lXHJcbiAgY29sb3I/OiBzdHJpbmc7IC8vIHdlYnZpZXcgdGl0bGUgYmFja2dyb3VuZCBjb2xvclxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBheW1lbnREYXRhIHtcclxuICBwZz86IHN0cmluZzsgLy8gcGF5bWVudCBnYXRld2F5IHR5cGVcclxuICBwYXlfbWV0aG9kPzogc3RyaW5nOyAvLyBwYXltZW50IG1ldGhvZFxyXG4gIG5hbWU6IHN0cmluZzsgLy8gbmFtZSBvZiBvcmRlclxyXG4gIG1lcmNoYW50X3VpZD86IHN0cmluZzsgLy8gdW5pcXVlIG1lcmNoYW50IGlkXHJcbiAgYW1vdW50OiBzdHJpbmc7IC8vIHBheW1lbnQgYW1vdW50XHJcbiAgYnV5ZXJfbmFtZT86IHN0cmluZzsgLy8gYnV5ZXIgbmFtZVxyXG4gIGJ1eWVyX3RlbD86IHN0cmluZzsgLy8gYnV5ZXIgY29udGFjdFxyXG4gIGJ1eWVyX2VtYWlsPzogc3RyaW5nOyAvLyBidXllciBlbWFpbCBhZGRyZXNzXHJcbiAgYnV5ZXJfYWRkcj86IHN0cmluZzsgLy8gYnV5ZXIgYWRkcmVzc1xyXG4gIGJ1eWVyX3Bvc3Rjb2RlPzogc3RyaW5nOyAvLyBidXllciBwb3N0Y29kZVxyXG4gIGFwcF9zY2hlbWU6IHN0cmluZzsgLy8gY3VzdG9tIGFwcCB1cmwgc2NoZW1lXHJcbiAgY3VzdG9tX2RhdGE/OiBhbnk7IC8vIGN1c3RvbSBkYXRhXHJcbiAgbm90aWNlX3VybD86IHN0cmluZzsgLy8gbm90aWZpY2F0aW9uIHVybFxyXG4gIGVzY3Jvdz86IGJvb2xlYW47IC8vIHdoZXRoZXIgdGhlIHR5cGUgb2YgdGhpcyBvcmRlciBpcyBlc2Nyb3dcclxuICBkaWdpdGFsPzogYm9vbGVhbjsgLy8gd2hldGhlciB0aGlzIG9yZGVyIGlzIGZvciByZWFsIHByb2R1Y3RzIG9yIGNvbnRlbnRzXHJcbiAgZGlzcGxheT86IHtcclxuICAgIGNhcmRfcXVvdGE/OiBudW1iZXJbXTsgLy8gY3JlZGl0IGNhcmQgaW5zdGFsbG1lbnQgc2V0dGluZyB2YWx1ZVxyXG4gIH07XHJcbiAgY3VycmVuY3k/OiBzdHJpbmc7IC8vIHBheW1lbnQgY3VycmVuY3lcclxuICBjdXN0b21lcl91aWQ/OiBzdHJpbmc7IC8vIHVuaXF1ZSBjdXN0b21lciBpZCBmb3Igc3Vic2NyaXB0aW9uIHBheW1lbnRzXHJcbiAgdGF4X2ZyZWU/OiBzdHJpbmc7IC8vIHRheCBhbW91bnRcclxuICBsYW5ndWFnZT86IHN0cmluZzsgLy8gbGFuZ3VhZ2UgdHlwZVxyXG4gIHZiYW5rX2R1ZT86IHN0cmluZzsgLy8gdmJhbmsgZHVlIGRhdGVcclxuICBiaXpfbnVtPzogc3RyaW5nOyAvLyBidXNpbmVzcyBudW1iZXJcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDZXJ0aWZpY2F0aW9uRGF0YSB7XHJcbiAgY29tcGFueT86IHN0cmluZzsgLy8gY29tcGFueSBuYW1lXHJcbiAgcGhvbmU/OiBzdHJpbmc7IC8vIGNlbGwgcGhvbmUgbnVtYmVyXHJcbiAgbmFtZT86IHN0cmluZzsgLy8gbmFtZVxyXG4gIGNhcnJpZXI/OiBzdHJpbmc7IC8vIGNhcnJpZXIgY29kZVxyXG4gIGJpcnRoPzogc3RyaW5nOyAvLyBiaXJ0aCBkYXRlXHJcbiAgbWVyY2hhbnRfdWlkPzogc3RyaW5nOyAvLyB1bmlxdWUgbWVyY2hhbnQgaWRcclxuICBtaW5fYWdlPzogc3RyaW5nOyAvLyBtaW5pbXVtIGFnZSB0byBhbGxvdyBjZXJ0aWZpY2F0aW9uXHJcbiAgcG9wdXA/OiBib29sZWFuOyAvLyB3aGV0aGVyIHRoZSB3ZWJ2aWV3IGlzIHBvcHVwXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBJYW1wb3J0IENvcmRvdmFcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgcGx1Z2luIGRvZXMgc29tZXRoaW5nXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IElhbXBvcnRDb3Jkb3ZhIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2lhbXBvcnQtY29yZG92YS9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGlhbXBvcnRDb3Jkb3ZhOiBJYW1wb3J0Q29yZG92YSkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKlxyXG4gKiB0aGlzLmlhbXBvcnRDb3Jkb3ZhLmZ1bmN0aW9uTmFtZSgnSGVsbG8nLCAxMjMpXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdJYW1wb3J0Q29yZG92YScsXHJcbiAgcGx1Z2luOiAnaWFtcG9ydC1jb3Jkb3ZhJyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuSWFtcG9ydENvcmRvdmEnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vaWFtcG9ydC9pYW1wb3J0LWNvcmRvdmEnLFxyXG4gIHBsYXRmb3JtczogWydpb3MnLCAnYW5kcm9pZCddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBJYW1wb3J0Q29yZG92YSBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIHRvIGxvYWQgYSB3ZWJ2aWV3IG9mIGEgcGF5bWVudCBnYXRld2F5IHRvIHBheSBmb3Igc29tZXRoaW5nXHJcbiAgICpcclxuICAgKiBAcGFyYW0gcGF5bWVudE9iamVjdCB7UGF5bWVudE9iamVjdH0gUGF5bWVudCBkYXRhIHRvIHNldCB0aGUgcGF5bWVudCB3ZWJ2aWV3XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gQSBjYWxsYmFjayBmdW5jdGlvbiBvZiB0aGUgcGF5bWVudCBkYXRhIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSB3ZWJ2aWV3IGlzIGNsb3NlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBwYXltZW50KHBheW1lbnRPYmplY3Q6IFBheW1lbnRPYmplY3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuIGNvcmRvdmEucGx1Z2lucy5JYW1wb3J0Q29yZG92YS5wYXltZW50KHBheW1lbnRPYmplY3QpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBmdW5jdGlvbiBpcyB0byBsb2FkIGEgd2VidmlldyBmb3IgaWRlbnRpZmljYXRpb24gd2l0aCBjYXJyaWVyIHR5cGUobGlrZSBWZXJpem9uKSwgbmFtZSBhbmQgcGhvbmUgbnVtYmVyXHJcbiAgICpcclxuICAgKiBAcGFyYW0gY2VydGlmaWNhdGlvbk9iamVjdCB7Q2VydGlmaWNhdGlvbk9iamVjdH0gQ2VydGlmaWNhdGlvbiBkYXRhIHRvIHNldCB0aGUgY2VydGlmaWNhdGlvbiB3ZWJ2aWV3XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gQSBjYWxsYmFjayBmdW5jdGlvbiBvZiB0aGUgY2VydGlmaWNhdGlvbiBkYXRhIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSB3ZWJ2aWV3IGlzIGNsb3NlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjZXJ0aWZpY2F0aW9uKGNlcnRpZmljYXRpb25PYmplY3Q6IENlcnRpZmljYXRpb25PYmplY3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuIGNvcmRvdmEucGx1Z2lucy5JYW1wb3J0Q29yZG92YS5jZXJ0aWZpY2F0aW9uKGNlcnRpZmljYXRpb25PYmplY3QpO1xyXG4gIH1cclxufVxyXG4iXX0=