import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var CleverTap = /** @class */ (function (_super) {
    __extends(CleverTap, _super);
    function CleverTap() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CleverTap.prototype.notifyDeviceReady = function () { return cordova(this, "notifyDeviceReady", {}, arguments); };
    CleverTap.prototype.enablePersonalization = function () { return cordova(this, "enablePersonalization", {}, arguments); };
    CleverTap.prototype.disablePersonalization = function () { return cordova(this, "disablePersonalization", {}, arguments); };
    CleverTap.prototype.setOptOut = function (optOut) { return cordova(this, "setOptOut", {}, arguments); };
    CleverTap.prototype.setOffline = function (offline) { return cordova(this, "setOffline", {}, arguments); };
    CleverTap.prototype.enableDeviceNetworkInfoReporting = function (enable) { return cordova(this, "enableDeviceNetworkInfoReporting", {}, arguments); };
    CleverTap.prototype.registerPush = function () { return cordova(this, "registerPush", {}, arguments); };
    CleverTap.prototype.setPushToken = function (token) { return cordova(this, "setPushToken", {}, arguments); };
    CleverTap.prototype.setPushXiaomiToken = function (token) { return cordova(this, "setPushXiaomiToken", {}, arguments); };
    CleverTap.prototype.setPushBaiduToken = function (token) { return cordova(this, "setPushBaiduToken", {}, arguments); };
    CleverTap.prototype.setPushHuaweiToken = function (token) { return cordova(this, "setPushHuaweiToken", {}, arguments); };
    CleverTap.prototype.createNotification = function (extras) { return cordova(this, "createNotification", {}, arguments); };
    CleverTap.prototype.createNotificationChannel = function (channelID, channelName, channelDescription, importance, showBadge) { return cordova(this, "createNotificationChannel", {}, arguments); };
    CleverTap.prototype.createNotificationChannelWithSound = function (channelID, channelName, channelDescription, importance, showBadge, sound) { return cordova(this, "createNotificationChannelWithSound", {}, arguments); };
    CleverTap.prototype.createNotificationChannelWithGroupId = function (channelID, channelName, channelDescription, importance, groupId, showBadge) { return cordova(this, "createNotificationChannelWithGroupId", {}, arguments); };
    CleverTap.prototype.createNotificationChannelWithGroupIdAndSound = function (channelID, channelName, channelDescription, importance, groupId, showBadge, sound) { return cordova(this, "createNotificationChannelWithGroupIdAndSound", {}, arguments); };
    CleverTap.prototype.createNotificationChannelGroup = function (groupID, groupName) { return cordova(this, "createNotificationChannelGroup", {}, arguments); };
    CleverTap.prototype.deleteNotificationChannel = function (channelID) { return cordova(this, "deleteNotificationChannel", {}, arguments); };
    CleverTap.prototype.deleteNotificationChannelGroup = function (groupID) { return cordova(this, "deleteNotificationChannelGroup", {}, arguments); };
    CleverTap.prototype.recordScreenView = function (screenName) { return cordova(this, "recordScreenView", {}, arguments); };
    CleverTap.prototype.recordEventWithName = function (eventName) { return cordova(this, "recordEventWithName", {}, arguments); };
    CleverTap.prototype.recordEventWithNameAndProps = function (eventName, eventProps) { return cordova(this, "recordEventWithNameAndProps", {}, arguments); };
    CleverTap.prototype.recordChargedEventWithDetailsAndItems = function (details, items) { return cordova(this, "recordChargedEventWithDetailsAndItems", {}, arguments); };
    CleverTap.prototype.eventGetFirstTime = function (eventName) { return cordova(this, "eventGetFirstTime", {}, arguments); };
    CleverTap.prototype.eventGetLastTime = function (eventName) { return cordova(this, "eventGetLastTime", {}, arguments); };
    CleverTap.prototype.eventGetOccurrences = function (eventName) { return cordova(this, "eventGetOccurrences", {}, arguments); };
    CleverTap.prototype.eventGetDetails = function (eventName) { return cordova(this, "eventGetDetails", {}, arguments); };
    CleverTap.prototype.getEventHistory = function () { return cordova(this, "getEventHistory", {}, arguments); };
    CleverTap.prototype.getLocation = function () { return cordova(this, "getLocation", {}, arguments); };
    CleverTap.prototype.setLocation = function (lat, lon) { return cordova(this, "setLocation", {}, arguments); };
    CleverTap.prototype.onUserLogin = function (profile) { return cordova(this, "onUserLogin", {}, arguments); };
    CleverTap.prototype.profileSet = function (profile) { return cordova(this, "profileSet", {}, arguments); };
    CleverTap.prototype.profileGetProperty = function (propertyName) { return cordova(this, "profileGetProperty", {}, arguments); };
    CleverTap.prototype.profileGetCleverTapAttributionIdentifier = function () { return cordova(this, "profileGetCleverTapAttributionIdentifier", {}, arguments); };
    CleverTap.prototype.profileGetCleverTapID = function () { return cordova(this, "profileGetCleverTapID", {}, arguments); };
    CleverTap.prototype.getCleverTapID = function () { return cordova(this, "getCleverTapID", {}, arguments); };
    CleverTap.prototype.profileRemoveValueForKey = function (key) { return cordova(this, "profileRemoveValueForKey", {}, arguments); };
    CleverTap.prototype.profileSetMultiValues = function (key, values) { return cordova(this, "profileSetMultiValues", {}, arguments); };
    CleverTap.prototype.profileAddMultiValue = function (key, value) { return cordova(this, "profileAddMultiValue", {}, arguments); };
    CleverTap.prototype.profileAddMultiValues = function (key, values) { return cordova(this, "profileAddMultiValues", {}, arguments); };
    CleverTap.prototype.profileRemoveMultiValue = function (key, value) { return cordova(this, "profileRemoveMultiValue", {}, arguments); };
    CleverTap.prototype.profileRemoveMultiValues = function (key, values) { return cordova(this, "profileRemoveMultiValues", {}, arguments); };
    CleverTap.prototype.profileIncrementValueBy = function (key, value) { return cordova(this, "profileIncrementValueBy", {}, arguments); };
    CleverTap.prototype.profileDecrementValueBy = function (key, value) { return cordova(this, "profileDecrementValueBy", {}, arguments); };
    CleverTap.prototype.suspendInAppNotifications = function () { return cordova(this, "suspendInAppNotifications", {}, arguments); };
    CleverTap.prototype.discardInAppNotifications = function () { return cordova(this, "discardInAppNotifications", {}, arguments); };
    CleverTap.prototype.resumeInAppNotifications = function () { return cordova(this, "resumeInAppNotifications", {}, arguments); };
    CleverTap.prototype.sessionGetTimeElapsed = function () { return cordova(this, "sessionGetTimeElapsed", {}, arguments); };
    CleverTap.prototype.sessionGetTotalVisits = function () { return cordova(this, "sessionGetTotalVisits", {}, arguments); };
    CleverTap.prototype.sessionGetScreenCount = function () { return cordova(this, "sessionGetScreenCount", {}, arguments); };
    CleverTap.prototype.sessionGetPreviousVisitTime = function () { return cordova(this, "sessionGetPreviousVisitTime", {}, arguments); };
    CleverTap.prototype.sessionGetUTMDetails = function () { return cordova(this, "sessionGetUTMDetails", {}, arguments); };
    CleverTap.prototype.pushInstallReferrer = function (source, medium, campaign) { return cordova(this, "pushInstallReferrer", {}, arguments); };
    CleverTap.prototype.initializeInbox = function () { return cordova(this, "initializeInbox", {}, arguments); };
    CleverTap.prototype.getInboxMessageUnreadCount = function () { return cordova(this, "getInboxMessageUnreadCount", {}, arguments); };
    CleverTap.prototype.getInboxMessageCount = function () { return cordova(this, "getInboxMessageCount", {}, arguments); };
    CleverTap.prototype.showInbox = function (styleConfig) { return cordova(this, "showInbox", {}, arguments); };
    CleverTap.prototype.getAllInboxMessages = function () { return cordova(this, "getAllInboxMessages", {}, arguments); };
    CleverTap.prototype.getUnreadInboxMessages = function () { return cordova(this, "getUnreadInboxMessages", {}, arguments); };
    CleverTap.prototype.getInboxMessageForId = function (messageId) { return cordova(this, "getInboxMessageForId", {}, arguments); };
    CleverTap.prototype.deleteInboxMessageForId = function (messageId) { return cordova(this, "deleteInboxMessageForId", {}, arguments); };
    CleverTap.prototype.markReadInboxMessageForId = function (messageId) { return cordova(this, "markReadInboxMessageForId", {}, arguments); };
    CleverTap.prototype.pushInboxNotificationViewedEventForId = function (messageId) { return cordova(this, "pushInboxNotificationViewedEventForId", {}, arguments); };
    CleverTap.prototype.pushInboxNotificationClickedEventForId = function (messageId) { return cordova(this, "pushInboxNotificationClickedEventForId", {}, arguments); };
    CleverTap.prototype.getAllDisplayUnits = function () { return cordova(this, "getAllDisplayUnits", {}, arguments); };
    CleverTap.prototype.getDisplayUnitForId = function (id) { return cordova(this, "getDisplayUnitForId", {}, arguments); };
    CleverTap.prototype.pushDisplayUnitViewedEventForID = function (id) { return cordova(this, "pushDisplayUnitViewedEventForID", {}, arguments); };
    CleverTap.prototype.pushDisplayUnitClickedEventForID = function (id) { return cordova(this, "pushDisplayUnitClickedEventForID", {}, arguments); };
    CleverTap.prototype.getFeatureFlag = function (key, defaultValue) { return cordova(this, "getFeatureFlag", {}, arguments); };
    CleverTap.prototype.setDefaultsMap = function (defaults) { return cordova(this, "setDefaultsMap", {}, arguments); };
    CleverTap.prototype.fetch = function () { return cordova(this, "fetch", {}, arguments); };
    CleverTap.prototype.fetchWithMinimumFetchIntervalInSeconds = function (timeInterval) { return cordova(this, "fetchWithMinimumFetchIntervalInSeconds", {}, arguments); };
    CleverTap.prototype.activate = function () { return cordova(this, "activate", {}, arguments); };
    CleverTap.prototype.fetchAndActivate = function () { return cordova(this, "fetchAndActivate", {}, arguments); };
    CleverTap.prototype.setMinimumFetchIntervalInSeconds = function (timeInterval) { return cordova(this, "setMinimumFetchIntervalInSeconds", {}, arguments); };
    CleverTap.prototype.getLastFetchTimeStampInMillis = function () { return cordova(this, "getLastFetchTimeStampInMillis", {}, arguments); };
    CleverTap.prototype.getString = function (key) { return cordova(this, "getString", {}, arguments); };
    CleverTap.prototype.getBoolean = function (key) { return cordova(this, "getBoolean", {}, arguments); };
    CleverTap.prototype.getLong = function (key) { return cordova(this, "getLong", {}, arguments); };
    CleverTap.prototype.getDouble = function (key) { return cordova(this, "getDouble", {}, arguments); };
    CleverTap.prototype.reset = function () { return cordova(this, "reset", {}, arguments); };
    CleverTap.prototype.setDebugLevel = function (level) { return cordova(this, "setDebugLevel", {}, arguments); };
    CleverTap.pluginName = "CleverTap";
    CleverTap.plugin = "clevertap-cordova";
    CleverTap.pluginRef = "CleverTap";
    CleverTap.repo = "https://github.com/CleverTap/clevertap-cordova";
    CleverTap.platforms = ["Android", "iOS"];
    CleverTap.decorators = [
        { type: Injectable }
    ];
    return CleverTap;
}(AwesomeCordovaNativePlugin));
export { CleverTap };
//# sourceMappingURL=data:application/json;base64,