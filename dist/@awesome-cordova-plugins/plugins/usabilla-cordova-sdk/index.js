var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var UsabillaOriginal = /** @class */ (function (_super) {
    __extends(UsabillaOriginal, _super);
    function UsabillaOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UsabillaOriginal.prototype.initialize = function (appId, customVars) { return cordova(this, "initialize", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.loadFeedbackForm = function (formId) { return cordova(this, "loadFeedbackForm", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.loadFeedbackFormWithCurrentViewScreenshot = function (formId) { return cordova(this, "loadFeedbackFormWithCurrentViewScreenshot", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.sendEvent = function (eventId) { return cordova(this, "sendEvent", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.resetCampaignData = function () { return cordova(this, "resetCampaignData", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.dismiss = function () { return cordova(this, "dismiss", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.getDefaultDataMasks = function () { return cordova(this, "getDefaultDataMasks", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.setDataMasking = function (masks, maskCharacter) { return cordova(this, "setDataMasking", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.pluginName = "usabilla-cordova";
    UsabillaOriginal.plugin = "usabilla-cordova";
    UsabillaOriginal.pluginRef = "Usabilla";
    UsabillaOriginal.repo = "https://github.com/usabilla/usabilla-u4a-cordova";
    UsabillaOriginal.platforms = ["Android", "iOS"];
    return UsabillaOriginal;
}(AwesomeCordovaNativePlugin));
var Usabilla = new UsabillaOriginal();
export { Usabilla };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvdXNhYmlsbGEtY29yZG92YS1zZGsvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBeUQ5RCw0QkFBMEI7Ozs7SUFjdEQsNkJBQVUsYUFBQyxLQUFhLEVBQUUsVUFBZTtJQWV6QyxtQ0FBZ0IsYUFBQyxNQUFjO0lBZS9CLDREQUF5QyxhQUFDLE1BQWM7SUFleEQsNEJBQVMsYUFBQyxPQUFlO0lBYXpCLG9DQUFpQjtJQWFqQiwwQkFBTztJQWFQLHNDQUFtQjtJQWlCbkIsaUNBQWMsYUFBQyxLQUFVLEVBQUUsYUFBcUI7Ozs7OzttQkE3S2xEO0VBMEQ4QiwwQkFBMEI7U0FBM0MsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNhYmlsbGFSZXN1bHQge1xyXG4gIGNvbXBsZXRlZDogYm9vbGVhbiB8IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVYkNhbXBhaWduUmVzdWx0IHtcclxuICBjb21wbGV0ZWQ6IHtcclxuICAgIHJlc3VsdDogVWJSZXN1bHQ7XHJcbiAgICBpc1JlZGlyZWN0VG9BcHBTdG9yZUVuYWJsZWQ/OiBib29sZWFuO1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVWJSZXN1bHQge1xyXG4gIHJhdGluZzogbnVtYmVyO1xyXG4gIGFiYW5kb25lZFBhZ2VJbmRleDogbnVtYmVyO1xyXG4gIHNlbnQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBVc2FiaWxsYVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVXNhYmlsbGEgU0RLIGlzIGRlc2lnbmVkIGFuZCBkZXZlbG9wZWQgdG8gY29sbGVjdCBmZWVkYmFjayBmcm9tIHlvdXIgdXNlcnMgd2l0aCBncmVhdCBlYXNlIGFuZCBmbGV4aWJpbGl0eSB0aHJvdWdoIHlvdXIgbW9iaWxlIGFwcGxpY2F0aW9uLlxyXG4gKiBUaGlzIGRvY3VtZW50IGRlc2NyaWJlcyBsaWJyYXJ5IGludGVncmF0aW9uIHN0ZXBzIGZvciB5b3VyIENvcmRvdmEgcHJvamVjdC5cclxuICpcclxuICogRm9yIG1vcmUgaW5mbyBzZWUgW0NvcmRvdmEgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS91c2FiaWxsYS91c2FiaWxsYS11NGEtY29yZG92YSlcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgVXNhYmlsbGEgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvdXNhYmlsbGEtY29yZG92YS1zZGsvbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSB1c2FiaWxsYTogVXNhYmlsbGEpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICpcclxuICogIHRoaXMudXNhYmlsbGEuaW5pdGlhbGl6ZShcclxuICogICAgYXBwSUQ6ICc8eW91cl9hcHBsaWNhdGlvbl9pZD4nLFxyXG4gKiAgICBjdXN0b21fdmFyczoge1xyXG4gKiAgICAgIFwia2V5XCI6IFwidmFsdWVcIlxyXG4gKiAgICB9KTtcclxuICpcclxuICogIHRoaXMudXNhYmlsbGEubG9hZEZlZWRiYWNrRm9ybShcclxuICogICAgZm9ybUlEIDogJzx5b3VyX2Zvcm1faWQ+J1xyXG4gKiAgICApO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcblxyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAndXNhYmlsbGEtY29yZG92YScsXHJcbiAgcGx1Z2luOiAndXNhYmlsbGEtY29yZG92YScsXHJcbiAgcGx1Z2luUmVmOiAnVXNhYmlsbGEnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vdXNhYmlsbGEvdXNhYmlsbGEtdTRhLWNvcmRvdmEnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBVc2FiaWxsYSBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBJbml0aWFsaXplcyBVc2FiaWxsYSBzZGsgZm9yIGNhcHR1cmluZyBmZWVkYmFja3MuXHJcbiAgICpcclxuICAgKiBAbmFtZSBpbml0aWFsaXplXHJcbiAgICogQHBhcmFtIHthcHBJZH0gQVBQX0lEIHVuaXF1ZSBhcHAgaWQgdG8gaW5pdGlhbGl6ZVxyXG4gICAqIEBwYXJhbSBhcHBJZFxyXG4gICAqIEBwYXJhbSBjdXN0b21WYXJzXHJcbiAgICogQHBhcmFtIHtjdXN0b21WYXJzfSBDVVNUT01fVkFSSUFCTEVTIGZvciB0YXJnZXQgYmFzZWQgZXZlbnQgdHJpZ2dlclxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN1Y2Nlc3NJbmRleDogMCxcclxuICAgIGVycm9ySW5kZXg6IDEsXHJcbiAgfSlcclxuICBpbml0aWFsaXplKGFwcElkOiBzdHJpbmcsIGN1c3RvbVZhcnM6IGFueSk6IFByb21pc2U8VXNhYmlsbGFSZXN1bHQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERpc3BsYXlzIEZlZWRiYWNrIGZvcm0gYmFzZWQgb24gdW5pcXVlIGZvcm0gaWQgYWZ0ZXIgc2RrIGluaXRpYWxpemF0aW9uLlxyXG4gICAqXHJcbiAgICogQG5hbWUgbG9hZEZlZWRiYWNrRm9ybVxyXG4gICAqIEBwYXJhbSBmb3JtSWRcclxuICAgKiBAcGFyYW0ge2Zvcm1JZH0gRk9STV9JRCB0byBkaXNwbGF5IEZlZWRiYWNrIGZvcm0gZm9yXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAwLFxyXG4gICAgZXJyb3JJbmRleDogMSxcclxuICB9KVxyXG4gIGxvYWRGZWVkYmFja0Zvcm0oZm9ybUlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGlzcGxheXMgRmVlZGJhY2sgZm9ybSB3aXRoIGN1cnJlbnQgc2NyZWVuJ3Mgc25hcHNob3QgYW5kIGJhc2VkIG9uIHVuaXF1ZSBmb3JtIGlkLCBhZnRlciBzZGsgaW5pdGlhbGl6YXRpb24uXHJcbiAgICpcclxuICAgKiBAbmFtZSBsb2FkRmVlZGJhY2tGb3JtV2l0aEN1cnJlbnRWaWV3U2NyZWVuc2hvdFxyXG4gICAqIEBwYXJhbSBmb3JtSWRcclxuICAgKiBAcGFyYW0ge2Zvcm1JZH0gRk9STV9JRCB0byBkaXNwbGF5IEZlZWRiYWNrIGZvcm0gZm9yXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAwLFxyXG4gICAgZXJyb3JJbmRleDogMSxcclxuICB9KVxyXG4gIGxvYWRGZWVkYmFja0Zvcm1XaXRoQ3VycmVudFZpZXdTY3JlZW5zaG90KGZvcm1JZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERpc3BsYXlzIENhbXBhaWduIGJhbm5lciB0YXJnZXR0ZWQgYmFzZWQgb24gc3BlY2lmaWMgZXZlbnQgYW5kIHZhcmlhYmxlcywgYWZ0ZXIgc2RrIGluaXRpYWxpemF0aW9uLlxyXG4gICAqXHJcbiAgICogQG5hbWUgc2VuZEV2ZW50XHJcbiAgICogQHBhcmFtIGV2ZW50SWRcclxuICAgKiBAcGFyYW0ge2V2ZW50SWR9IEVWRU5UX0lEIHRvIGRpc3BsYXkgQ2FtcGFpZ24gYmFubmVyIGZvclxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN1Y2Nlc3NJbmRleDogMCxcclxuICAgIGVycm9ySW5kZXg6IDEsXHJcbiAgfSlcclxuICBzZW5kRXZlbnQoZXZlbnRJZDogc3RyaW5nKTogUHJvbWlzZTxVYkNhbXBhaWduUmVzdWx0PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNldCBDYW1wYWlnbiBmb3IgbmV4dCB0cmlnZ2VyLlxyXG4gICAqXHJcbiAgICogQG5hbWUgcmVzZXRDYW1wYWlnbkRhdGFcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzdWNjZXNzSW5kZXg6IDAsXHJcbiAgICBlcnJvckluZGV4OiAxLFxyXG4gIH0pXHJcbiAgcmVzZXRDYW1wYWlnbkRhdGEoKTogUHJvbWlzZTxVc2FiaWxsYVJlc3VsdD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGlzbWlzcyBvciByZW1vdmVzIHRoZSBGb3JtL0Jhbm5lciBmcm9tIHRoZSB2aWV3LlxyXG4gICAqXHJcbiAgICogQG5hbWUgZGlzbWlzc1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN1Y2Nlc3NJbmRleDogMCxcclxuICAgIGVycm9ySW5kZXg6IDEsXHJcbiAgfSlcclxuICBkaXNtaXNzKCk6IFByb21pc2U8VXNhYmlsbGFSZXN1bHQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBkZWZhdWx0IG1hc2tpbmcgc3RyYXRlZ3kgdG8gYmUgYXBwbGllZCBmb3IgZGF0YSBtYXNraW5nLlxyXG4gICAqXHJcbiAgICogQG5hbWUgZ2V0RGVmYXVsdERhdGFNYXNrc1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN1Y2Nlc3NJbmRleDogMCxcclxuICAgIGVycm9ySW5kZXg6IDEsXHJcbiAgfSlcclxuICBnZXREZWZhdWx0RGF0YU1hc2tzKCk6IFByb21pc2U8VXNhYmlsbGFSZXN1bHQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCBtYXNraW5nIHN0cmF0ZWd5IGZvciBkYXRhIG1hc2tpbmcuXHJcbiAgICpcclxuICAgKiBAbmFtZSBzZXREYXRhTWFza2luZ1xyXG4gICAqIEBwYXJhbSB7bWFza3N9IEZvcm1hdCByZWdleCB0byBiZSBhcHBsaWVkIGZvciBtYXNraW5nLlxyXG4gICAqIEBwYXJhbSBtYXNrc1xyXG4gICAqIEBwYXJhbSBtYXNrQ2hhcmFjdGVyXHJcbiAgICogQHBhcmFtIHttYXNrQ2hhcmFjdGVyfSBDaGFyYWN0ZXIgdG8gYmUgdXNlZCBhcyBhIG1hc2tpbmcgY2hhcmFjdGVyXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAwLFxyXG4gICAgZXJyb3JJbmRleDogMSxcclxuICB9KVxyXG4gIHNldERhdGFNYXNraW5nKG1hc2tzOiBhbnksIG1hc2tDaGFyYWN0ZXI6IHN0cmluZyk6IFByb21pc2U8VXNhYmlsbGFSZXN1bHQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19