import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var Usabilla = /** @class */ (function (_super) {
    __extends(Usabilla, _super);
    function Usabilla() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Usabilla.prototype.initialize = function (appId, customVars) { return cordova(this, "initialize", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.loadFeedbackForm = function (formId) { return cordova(this, "loadFeedbackForm", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.loadFeedbackFormWithCurrentViewScreenshot = function (formId) { return cordova(this, "loadFeedbackFormWithCurrentViewScreenshot", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.sendEvent = function (eventId) { return cordova(this, "sendEvent", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.resetCampaignData = function () { return cordova(this, "resetCampaignData", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.dismiss = function () { return cordova(this, "dismiss", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.getDefaultDataMasks = function () { return cordova(this, "getDefaultDataMasks", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.setDataMasking = function (masks, maskCharacter) { return cordova(this, "setDataMasking", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.pluginName = "usabilla-cordova";
    Usabilla.plugin = "usabilla-cordova";
    Usabilla.pluginRef = "Usabilla";
    Usabilla.repo = "https://github.com/usabilla/usabilla-u4a-cordova";
    Usabilla.platforms = ["Android", "iOS"];
    Usabilla.decorators = [
        { type: Injectable }
    ];
    return Usabilla;
}(AwesomeCordovaNativePlugin));
export { Usabilla };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvdXNhYmlsbGEtY29yZG92YS1zZGsvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBeUQ5RCw0QkFBMEI7Ozs7SUFjdEQsNkJBQVUsYUFBQyxLQUFhLEVBQUUsVUFBZTtJQWV6QyxtQ0FBZ0IsYUFBQyxNQUFjO0lBZS9CLDREQUF5QyxhQUFDLE1BQWM7SUFleEQsNEJBQVMsYUFBQyxPQUFlO0lBYXpCLG9DQUFpQjtJQWFqQiwwQkFBTztJQWFQLHNDQUFtQjtJQWlCbkIsaUNBQWMsYUFBQyxLQUFVLEVBQUUsYUFBcUI7Ozs7Ozs7Z0JBcEhqRCxVQUFVOzttQkF6RFg7RUEwRDhCLDBCQUEwQjtTQUEzQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2FiaWxsYVJlc3VsdCB7XHJcbiAgY29tcGxldGVkOiBib29sZWFuIHwgc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFViQ2FtcGFpZ25SZXN1bHQge1xyXG4gIGNvbXBsZXRlZDoge1xyXG4gICAgcmVzdWx0OiBVYlJlc3VsdDtcclxuICAgIGlzUmVkaXJlY3RUb0FwcFN0b3JlRW5hYmxlZD86IGJvb2xlYW47XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVYlJlc3VsdCB7XHJcbiAgcmF0aW5nOiBudW1iZXI7XHJcbiAgYWJhbmRvbmVkUGFnZUluZGV4OiBudW1iZXI7XHJcbiAgc2VudDogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIFVzYWJpbGxhXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBVc2FiaWxsYSBTREsgaXMgZGVzaWduZWQgYW5kIGRldmVsb3BlZCB0byBjb2xsZWN0IGZlZWRiYWNrIGZyb20geW91ciB1c2VycyB3aXRoIGdyZWF0IGVhc2UgYW5kIGZsZXhpYmlsaXR5IHRocm91Z2ggeW91ciBtb2JpbGUgYXBwbGljYXRpb24uXHJcbiAqIFRoaXMgZG9jdW1lbnQgZGVzY3JpYmVzIGxpYnJhcnkgaW50ZWdyYXRpb24gc3RlcHMgZm9yIHlvdXIgQ29yZG92YSBwcm9qZWN0LlxyXG4gKlxyXG4gKiBGb3IgbW9yZSBpbmZvIHNlZSBbQ29yZG92YSBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL3VzYWJpbGxhL3VzYWJpbGxhLXU0YS1jb3Jkb3ZhKVxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBVc2FiaWxsYSB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy91c2FiaWxsYS1jb3Jkb3ZhLXNkay9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHVzYWJpbGxhOiBVc2FiaWxsYSkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKlxyXG4gKiAgdGhpcy51c2FiaWxsYS5pbml0aWFsaXplKFxyXG4gKiAgICBhcHBJRDogJzx5b3VyX2FwcGxpY2F0aW9uX2lkPicsXHJcbiAqICAgIGN1c3RvbV92YXJzOiB7XHJcbiAqICAgICAgXCJrZXlcIjogXCJ2YWx1ZVwiXHJcbiAqICAgIH0pO1xyXG4gKlxyXG4gKiAgdGhpcy51c2FiaWxsYS5sb2FkRmVlZGJhY2tGb3JtKFxyXG4gKiAgICBmb3JtSUQgOiAnPHlvdXJfZm9ybV9pZD4nXHJcbiAqICAgICk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICd1c2FiaWxsYS1jb3Jkb3ZhJyxcclxuICBwbHVnaW46ICd1c2FiaWxsYS1jb3Jkb3ZhJyxcclxuICBwbHVnaW5SZWY6ICdVc2FiaWxsYScsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS91c2FiaWxsYS91c2FiaWxsYS11NGEtY29yZG92YScsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFVzYWJpbGxhIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemVzIFVzYWJpbGxhIHNkayBmb3IgY2FwdHVyaW5nIGZlZWRiYWNrcy5cclxuICAgKlxyXG4gICAqIEBuYW1lIGluaXRpYWxpemVcclxuICAgKiBAcGFyYW0ge2FwcElkfSBBUFBfSUQgdW5pcXVlIGFwcCBpZCB0byBpbml0aWFsaXplXHJcbiAgICogQHBhcmFtIGFwcElkXHJcbiAgICogQHBhcmFtIGN1c3RvbVZhcnNcclxuICAgKiBAcGFyYW0ge2N1c3RvbVZhcnN9IENVU1RPTV9WQVJJQUJMRVMgZm9yIHRhcmdldCBiYXNlZCBldmVudCB0cmlnZ2VyXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAwLFxyXG4gICAgZXJyb3JJbmRleDogMSxcclxuICB9KVxyXG4gIGluaXRpYWxpemUoYXBwSWQ6IHN0cmluZywgY3VzdG9tVmFyczogYW55KTogUHJvbWlzZTxVc2FiaWxsYVJlc3VsdD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGlzcGxheXMgRmVlZGJhY2sgZm9ybSBiYXNlZCBvbiB1bmlxdWUgZm9ybSBpZCBhZnRlciBzZGsgaW5pdGlhbGl6YXRpb24uXHJcbiAgICpcclxuICAgKiBAbmFtZSBsb2FkRmVlZGJhY2tGb3JtXHJcbiAgICogQHBhcmFtIGZvcm1JZFxyXG4gICAqIEBwYXJhbSB7Zm9ybUlkfSBGT1JNX0lEIHRvIGRpc3BsYXkgRmVlZGJhY2sgZm9ybSBmb3JcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzdWNjZXNzSW5kZXg6IDAsXHJcbiAgICBlcnJvckluZGV4OiAxLFxyXG4gIH0pXHJcbiAgbG9hZEZlZWRiYWNrRm9ybShmb3JtSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEaXNwbGF5cyBGZWVkYmFjayBmb3JtIHdpdGggY3VycmVudCBzY3JlZW4ncyBzbmFwc2hvdCBhbmQgYmFzZWQgb24gdW5pcXVlIGZvcm0gaWQsIGFmdGVyIHNkayBpbml0aWFsaXphdGlvbi5cclxuICAgKlxyXG4gICAqIEBuYW1lIGxvYWRGZWVkYmFja0Zvcm1XaXRoQ3VycmVudFZpZXdTY3JlZW5zaG90XHJcbiAgICogQHBhcmFtIGZvcm1JZFxyXG4gICAqIEBwYXJhbSB7Zm9ybUlkfSBGT1JNX0lEIHRvIGRpc3BsYXkgRmVlZGJhY2sgZm9ybSBmb3JcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzdWNjZXNzSW5kZXg6IDAsXHJcbiAgICBlcnJvckluZGV4OiAxLFxyXG4gIH0pXHJcbiAgbG9hZEZlZWRiYWNrRm9ybVdpdGhDdXJyZW50Vmlld1NjcmVlbnNob3QoZm9ybUlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGlzcGxheXMgQ2FtcGFpZ24gYmFubmVyIHRhcmdldHRlZCBiYXNlZCBvbiBzcGVjaWZpYyBldmVudCBhbmQgdmFyaWFibGVzLCBhZnRlciBzZGsgaW5pdGlhbGl6YXRpb24uXHJcbiAgICpcclxuICAgKiBAbmFtZSBzZW5kRXZlbnRcclxuICAgKiBAcGFyYW0gZXZlbnRJZFxyXG4gICAqIEBwYXJhbSB7ZXZlbnRJZH0gRVZFTlRfSUQgdG8gZGlzcGxheSBDYW1wYWlnbiBiYW5uZXIgZm9yXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAwLFxyXG4gICAgZXJyb3JJbmRleDogMSxcclxuICB9KVxyXG4gIHNlbmRFdmVudChldmVudElkOiBzdHJpbmcpOiBQcm9taXNlPFViQ2FtcGFpZ25SZXN1bHQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2V0IENhbXBhaWduIGZvciBuZXh0IHRyaWdnZXIuXHJcbiAgICpcclxuICAgKiBAbmFtZSByZXNldENhbXBhaWduRGF0YVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN1Y2Nlc3NJbmRleDogMCxcclxuICAgIGVycm9ySW5kZXg6IDEsXHJcbiAgfSlcclxuICByZXNldENhbXBhaWduRGF0YSgpOiBQcm9taXNlPFVzYWJpbGxhUmVzdWx0PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEaXNtaXNzIG9yIHJlbW92ZXMgdGhlIEZvcm0vQmFubmVyIGZyb20gdGhlIHZpZXcuXHJcbiAgICpcclxuICAgKiBAbmFtZSBkaXNtaXNzXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAwLFxyXG4gICAgZXJyb3JJbmRleDogMSxcclxuICB9KVxyXG4gIGRpc21pc3MoKTogUHJvbWlzZTxVc2FiaWxsYVJlc3VsdD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGRlZmF1bHQgbWFza2luZyBzdHJhdGVneSB0byBiZSBhcHBsaWVkIGZvciBkYXRhIG1hc2tpbmcuXHJcbiAgICpcclxuICAgKiBAbmFtZSBnZXREZWZhdWx0RGF0YU1hc2tzXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAwLFxyXG4gICAgZXJyb3JJbmRleDogMSxcclxuICB9KVxyXG4gIGdldERlZmF1bHREYXRhTWFza3MoKTogUHJvbWlzZTxVc2FiaWxsYVJlc3VsdD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IG1hc2tpbmcgc3RyYXRlZ3kgZm9yIGRhdGEgbWFza2luZy5cclxuICAgKlxyXG4gICAqIEBuYW1lIHNldERhdGFNYXNraW5nXHJcbiAgICogQHBhcmFtIHttYXNrc30gRm9ybWF0IHJlZ2V4IHRvIGJlIGFwcGxpZWQgZm9yIG1hc2tpbmcuXHJcbiAgICogQHBhcmFtIG1hc2tzXHJcbiAgICogQHBhcmFtIG1hc2tDaGFyYWN0ZXJcclxuICAgKiBAcGFyYW0ge21hc2tDaGFyYWN0ZXJ9IENoYXJhY3RlciB0byBiZSB1c2VkIGFzIGEgbWFza2luZyBjaGFyYWN0ZXJcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzdWNjZXNzSW5kZXg6IDAsXHJcbiAgICBlcnJvckluZGV4OiAxLFxyXG4gIH0pXHJcbiAgc2V0RGF0YU1hc2tpbmcobWFza3M6IGFueSwgbWFza0NoYXJhY3Rlcjogc3RyaW5nKTogUHJvbWlzZTxVc2FiaWxsYVJlc3VsdD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=