var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';
export var AppRateReviewTypeIos;
(function (AppRateReviewTypeIos) {
    /**
     * Write review directly in your application (iOS 10.3+), limited to 3 prompts per year.
     * Will fallback to 'AppStoreReview' for other iOS versions
     */
    AppRateReviewTypeIos["InAppReview"] = "InAppReview";
    /**
     * Open the store within the app. Use this option as an alternative to inAppReview to avoid the rate action from doing nothing
     */
    AppRateReviewTypeIos["AppStoreReview"] = "AppStoreReview";
    /**
     * Open the store using the openUrl preference (defaults to InAppBrowser). Be advised that WKWebView might not open the app store links
     */
    AppRateReviewTypeIos["InAppBrowser"] = "InAppBrowser";
})(AppRateReviewTypeIos || (AppRateReviewTypeIos = {}));
export var AppRateReviewTypeAndroid;
(function (AppRateReviewTypeAndroid) {
    /**
     * Write review directly in your application. Will fallback to InAppBrowser if not available
     */
    AppRateReviewTypeAndroid["InAppReview"] = "InAppReview";
    /**
     *  Open the store using the openUrl preference (defaults to InAppBrowser)
     */
    AppRateReviewTypeAndroid["InAppBrowser"] = "InAppBrowser";
})(AppRateReviewTypeAndroid || (AppRateReviewTypeAndroid = {}));
export var AppRatePromptType;
(function (AppRatePromptType) {
    /**
     * Prompt asking to rate the app.
     */
    AppRatePromptType["AppRatingPrompt"] = "AppRatingPrompt";
    /**
     * Prompt asking to rate the app within the store.
     */
    AppRatePromptType["StoreRatingPrompt"] = "StoreRatingPrompt";
    /**
     * Prompt asking to give feedback.
     */
    AppRatePromptType["FeedbackPrompt"] = "FeedbackPrompt";
})(AppRatePromptType || (AppRatePromptType = {}));
var AppRateOriginal = /** @class */ (function (_super) {
    __extends(AppRateOriginal, _super);
    function AppRateOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppRateOriginal.prototype.setPreferences = function (pref) { return cordova(this, "setPreferences", {}, arguments); };
    AppRateOriginal.prototype.getPreferences = function () { return cordova(this, "getPreferences", {}, arguments); };
    AppRateOriginal.prototype.promptForRating = function (immediately) { return cordova(this, "promptForRating", {}, arguments); };
    AppRateOriginal.prototype.navigateToAppStore = function () { return cordova(this, "navigateToAppStore", {}, arguments); };
    Object.defineProperty(AppRateOriginal.prototype, "locales", {
        get: function () { return cordovaPropertyGet(this, "locales"); },
        set: function (value) { cordovaPropertySet(this, "locales", value); },
        enumerable: false,
        configurable: true
    });
    AppRateOriginal.pluginName = "AppRate";
    AppRateOriginal.plugin = "cordova-plugin-apprate";
    AppRateOriginal.pluginRef = "AppRate";
    AppRateOriginal.repo = "https://github.com/pushandplay/cordova-plugin-apprate";
    AppRateOriginal.platforms = ["Android", "BlackBerry 10", "iOS", "Windows"];
    return AppRateOriginal;
}(AwesomeCordovaNativePlugin));
var AppRate = new AppRateOriginal();
export { AppRate };
//# sourceMappingURL=data:application/json;base64,