import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';
export var AppRateReviewTypeIos;
(function (AppRateReviewTypeIos) {
    /**
     * Write review directly in your application (iOS 10.3+), limited to 3 prompts per year.
     * Will fallback to 'AppStoreReview' for other iOS versions
     */
    AppRateReviewTypeIos["InAppReview"] = "InAppReview";
    /**
     * Open the store within the app. Use this option as an alternative to inAppReview to avoid the rate action from doing nothing
     */
    AppRateReviewTypeIos["AppStoreReview"] = "AppStoreReview";
    /**
     * Open the store using the openUrl preference (defaults to InAppBrowser). Be advised that WKWebView might not open the app store links
     */
    AppRateReviewTypeIos["InAppBrowser"] = "InAppBrowser";
})(AppRateReviewTypeIos || (AppRateReviewTypeIos = {}));
export var AppRateReviewTypeAndroid;
(function (AppRateReviewTypeAndroid) {
    /**
     * Write review directly in your application. Will fallback to InAppBrowser if not available
     */
    AppRateReviewTypeAndroid["InAppReview"] = "InAppReview";
    /**
     *  Open the store using the openUrl preference (defaults to InAppBrowser)
     */
    AppRateReviewTypeAndroid["InAppBrowser"] = "InAppBrowser";
})(AppRateReviewTypeAndroid || (AppRateReviewTypeAndroid = {}));
export var AppRatePromptType;
(function (AppRatePromptType) {
    /**
     * Prompt asking to rate the app.
     */
    AppRatePromptType["AppRatingPrompt"] = "AppRatingPrompt";
    /**
     * Prompt asking to rate the app within the store.
     */
    AppRatePromptType["StoreRatingPrompt"] = "StoreRatingPrompt";
    /**
     * Prompt asking to give feedback.
     */
    AppRatePromptType["FeedbackPrompt"] = "FeedbackPrompt";
})(AppRatePromptType || (AppRatePromptType = {}));
var AppRate = /** @class */ (function (_super) {
    __extends(AppRate, _super);
    function AppRate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppRate.prototype.setPreferences = function (pref) { return cordova(this, "setPreferences", {}, arguments); };
    AppRate.prototype.getPreferences = function () { return cordova(this, "getPreferences", {}, arguments); };
    AppRate.prototype.promptForRating = function (immediately) { return cordova(this, "promptForRating", {}, arguments); };
    AppRate.prototype.navigateToAppStore = function () { return cordova(this, "navigateToAppStore", {}, arguments); };
    Object.defineProperty(AppRate.prototype, "locales", {
        get: function () { return cordovaPropertyGet(this, "locales"); },
        set: function (value) { cordovaPropertySet(this, "locales", value); },
        enumerable: false,
        configurable: true
    });
    AppRate.pluginName = "AppRate";
    AppRate.plugin = "cordova-plugin-apprate";
    AppRate.pluginRef = "AppRate";
    AppRate.repo = "https://github.com/pushandplay/cordova-plugin-apprate";
    AppRate.platforms = ["Android", "BlackBerry 10", "iOS", "Windows"];
    AppRate.decorators = [
        { type: Injectable }
    ];
    return AppRate;
}(AwesomeCordovaNativePlugin));
export { AppRate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYXBwLXJhdGUvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sK0VBQWdFLE1BQU0sK0JBQStCLENBQUM7QUFFN0csTUFBTSxDQUFOLElBQVksb0JBY1g7QUFkRCxXQUFZLG9CQUFvQjtJQUM5Qjs7O09BR0c7SUFDSCxtREFBMkIsQ0FBQTtJQUMzQjs7T0FFRztJQUNILHlEQUFpQyxDQUFBO0lBQ2pDOztPQUVHO0lBQ0gscURBQTZCLENBQUE7QUFDL0IsQ0FBQyxFQWRXLG9CQUFvQixLQUFwQixvQkFBb0IsUUFjL0I7QUFFRCxNQUFNLENBQU4sSUFBWSx3QkFTWDtBQVRELFdBQVksd0JBQXdCO0lBQ2xDOztPQUVHO0lBQ0gsdURBQTJCLENBQUE7SUFDM0I7O09BRUc7SUFDSCx5REFBNkIsQ0FBQTtBQUMvQixDQUFDLEVBVFcsd0JBQXdCLEtBQXhCLHdCQUF3QixRQVNuQztBQUVELE1BQU0sQ0FBTixJQUFZLGlCQWVYO0FBZkQsV0FBWSxpQkFBaUI7SUFDM0I7O09BRUc7SUFDSCx3REFBbUMsQ0FBQTtJQUVuQzs7T0FFRztJQUNILDREQUF1QyxDQUFBO0lBRXZDOztPQUVHO0lBQ0gsc0RBQWlDLENBQUE7QUFDbkMsQ0FBQyxFQWZXLGlCQUFpQixLQUFqQixpQkFBaUIsUUFlNUI7O0lBOE00QiwyQkFBMEI7Ozs7SUFjckQsZ0NBQWMsYUFBQyxJQUF3QjtJQVV2QyxnQ0FBYztJQVVkLGlDQUFlLGFBQUMsV0FBcUI7SUFRckMsb0NBQWtCOzBCQXJDbEIsNEJBQU87Ozs7Ozs7Ozs7OztnQkFOUixVQUFVOztrQkExUFg7RUEyUDZCLDBCQUEwQjtTQUExQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBDb3Jkb3ZhUHJvcGVydHksIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG5leHBvcnQgZW51bSBBcHBSYXRlUmV2aWV3VHlwZUlvcyB7XHJcbiAgLyoqXHJcbiAgICogV3JpdGUgcmV2aWV3IGRpcmVjdGx5IGluIHlvdXIgYXBwbGljYXRpb24gKGlPUyAxMC4zKyksIGxpbWl0ZWQgdG8gMyBwcm9tcHRzIHBlciB5ZWFyLlxyXG4gICAqIFdpbGwgZmFsbGJhY2sgdG8gJ0FwcFN0b3JlUmV2aWV3JyBmb3Igb3RoZXIgaU9TIHZlcnNpb25zXHJcbiAgICovXHJcbiAgSW5BcHBSZXZpZXcgPSAnSW5BcHBSZXZpZXcnLFxyXG4gIC8qKlxyXG4gICAqIE9wZW4gdGhlIHN0b3JlIHdpdGhpbiB0aGUgYXBwLiBVc2UgdGhpcyBvcHRpb24gYXMgYW4gYWx0ZXJuYXRpdmUgdG8gaW5BcHBSZXZpZXcgdG8gYXZvaWQgdGhlIHJhdGUgYWN0aW9uIGZyb20gZG9pbmcgbm90aGluZ1xyXG4gICAqL1xyXG4gIEFwcFN0b3JlUmV2aWV3ID0gJ0FwcFN0b3JlUmV2aWV3JyxcclxuICAvKipcclxuICAgKiBPcGVuIHRoZSBzdG9yZSB1c2luZyB0aGUgb3BlblVybCBwcmVmZXJlbmNlIChkZWZhdWx0cyB0byBJbkFwcEJyb3dzZXIpLiBCZSBhZHZpc2VkIHRoYXQgV0tXZWJWaWV3IG1pZ2h0IG5vdCBvcGVuIHRoZSBhcHAgc3RvcmUgbGlua3NcclxuICAgKi9cclxuICBJbkFwcEJyb3dzZXIgPSAnSW5BcHBCcm93c2VyJyxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gQXBwUmF0ZVJldmlld1R5cGVBbmRyb2lkIHtcclxuICAvKipcclxuICAgKiBXcml0ZSByZXZpZXcgZGlyZWN0bHkgaW4geW91ciBhcHBsaWNhdGlvbi4gV2lsbCBmYWxsYmFjayB0byBJbkFwcEJyb3dzZXIgaWYgbm90IGF2YWlsYWJsZVxyXG4gICAqL1xyXG4gIEluQXBwUmV2aWV3ID0gJ0luQXBwUmV2aWV3JyxcclxuICAvKipcclxuICAgKiAgT3BlbiB0aGUgc3RvcmUgdXNpbmcgdGhlIG9wZW5VcmwgcHJlZmVyZW5jZSAoZGVmYXVsdHMgdG8gSW5BcHBCcm93c2VyKVxyXG4gICAqL1xyXG4gIEluQXBwQnJvd3NlciA9ICdJbkFwcEJyb3dzZXInLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBBcHBSYXRlUHJvbXB0VHlwZSB7XHJcbiAgLyoqXHJcbiAgICogUHJvbXB0IGFza2luZyB0byByYXRlIHRoZSBhcHAuXHJcbiAgICovXHJcbiAgQXBwUmF0aW5nUHJvbXB0ID0gJ0FwcFJhdGluZ1Byb21wdCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIFByb21wdCBhc2tpbmcgdG8gcmF0ZSB0aGUgYXBwIHdpdGhpbiB0aGUgc3RvcmUuXHJcbiAgICovXHJcbiAgU3RvcmVSYXRpbmdQcm9tcHQgPSAnU3RvcmVSYXRpbmdQcm9tcHQnLFxyXG5cclxuICAvKipcclxuICAgKiBQcm9tcHQgYXNraW5nIHRvIGdpdmUgZmVlZGJhY2suXHJcbiAgICovXHJcbiAgRmVlZGJhY2tQcm9tcHQgPSAnRmVlZGJhY2tQcm9tcHQnLFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFwcFJhdGVQcmVmZXJlbmNlcyB7XHJcbiAgLyoqXHJcbiAgICogQ3VzdG9tIEJDUCA0NyBsYW5ndWFnZSB0YWdcclxuICAgKi9cclxuICB1c2VMYW5ndWFnZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQ3VzdG9tIGFwcGxpY2F0aW9uIHRpdGxlXHJcbiAgICovXHJcbiAgZGlzcGxheUFwcE5hbWU/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFNob3cgZGlhbG9nIGFnYWluIHdoZW4gYXBwbGljYXRpb24gdmVyc2lvbiB3aWxsIGJlIHVwZGF0ZWQuIERlZmF1bHRzIHRvIGB0cnVlYFxyXG4gICAqL1xyXG4gIHByb21wdEFnYWluRm9yRWFjaE5ld1ZlcnNpb24/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBjb3VudCBvZiBydW5zIG9mIGFwcGxpY2F0aW9uIGJlZm9yZSBkaWFsb2cgd2lsbCBiZSBkaXNwbGF5ZWQuIERlZmF1bHRzIHRvIGAzYFxyXG4gICAqL1xyXG4gIHVzZXNVbnRpbFByb21wdD86IG51bWJlcjtcclxuXHJcbiAgcmV2aWV3VHlwZT86IHtcclxuICAgIC8qKlxyXG4gICAgICogdGhlIHR5cGUgb2YgcmV2aWV3IGRpc3BsYXkgdG8gc2hvdyB0aGUgdXNlciBvbiBpT1NcclxuICAgICAqIERlZmF1bHQ6IEFwcFN0b3JlUmV2aWV3XHJcbiAgICAgKi9cclxuICAgIGlvcz86IEFwcFJhdGVSZXZpZXdUeXBlSW9zO1xyXG4gICAgLyoqXHJcbiAgICAgKiB0aGUgdHlwZSBvZiByZXZpZXcgZGlzcGxheSB0byBzaG93IHRoZSB1c2VyIG9uIEFuZHJvaWRcclxuICAgICAqIERlZmF1bHQ6IEluQXBwQnJvd3NlclxyXG4gICAgICovXHJcbiAgICBhbmRyb2lkPzogQXBwUmF0ZVJldmlld1R5cGVBbmRyb2lkO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFNpbXBsZSBNb2RlIHRvIGRpc3BsYXkgdGhlIHJhdGUgZGlhbG9nIGRpcmVjdGx5IGFuZCBieXBhc3MgbmVnYXRpdmUgZmVlZGJhY2sgZmlsdGVyaW5nIGZsb3dcclxuICAgKi9cclxuICBzaW1wbGVNb2RlPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogRGlzYWJsaW5nIHdvdWxkIHNraXAgZGlzcGxheWluZyBhIHJhdGUgZGlhbG9nIGlmIGluIGFwcCByZXZpZXcgaXMgc2V0IGFuZCBhdmFpbGFibGUuIERlZmF1bHRzIHRvIGB0cnVlYFxyXG4gICAqL1xyXG4gIHNob3dQcm9tcHRGb3JJbkFwcFJldmlldz86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIEN1c3RvbSBsb2NhbGUgb2JqZWN0XHJcbiAgICovXHJcbiAgY3VzdG9tTG9jYWxlPzogQXBwUmF0ZUN1c3RvbUxvY2FsZTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbGJhY2tzIGZvciBldmVudHNcclxuICAgKi9cclxuICBjYWxsYmFja3M/OiBBcHBSYXRlQ2FsbGJhY2tzO1xyXG5cclxuICAvKipcclxuICAgKiBBcHAgU3RvcmUgVVJMU1xyXG4gICAqL1xyXG4gIHN0b3JlQXBwVVJMPzogQXBwVXJscztcclxuXHJcbiAgLyoqXHJcbiAgICogT3BlbiBVUkwgZnVuY3Rpb25cclxuICAgKi9cclxuICBvcGVuVXJsPzogKHVybDogc3RyaW5nKSA9PiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFwcFJhdGVDdXN0b21Mb2NhbGUge1xyXG4gIC8qKiBUaXRsZSAqL1xyXG4gIHRpdGxlPzogc3RyaW5nO1xyXG5cclxuICAvKiogTWVzc2FnZSAqL1xyXG4gIG1lc3NhZ2U/OiBzdHJpbmc7XHJcblxyXG4gIC8qKiBDYW5jZWwgYnV0dG9uIGxhYmVsICovXHJcbiAgY2FuY2VsQnV0dG9uTGFiZWw/OiBzdHJpbmc7XHJcblxyXG4gIC8qKiBMYXRlciBidXR0b24gbGFiZWwgKi9cclxuICBsYXRlckJ1dHRvbkxhYmVsPzogc3RyaW5nO1xyXG5cclxuICAvKiogUmF0ZSBidXR0b24gbGFiZWwgKi9cclxuICByYXRlQnV0dG9uTGFiZWw/OiBzdHJpbmc7XHJcblxyXG4gIC8qKiBZZXMgYnV0dG9uIGxhYmVsICovXHJcbiAgeWVzQnV0dG9uTGFiZWw/OiBzdHJpbmc7XHJcblxyXG4gIC8qKiBObyBidXR0b24gbGFiZWwgKi9cclxuICBub0J1dHRvbkxhYmVsPzogc3RyaW5nO1xyXG5cclxuICAvKiogQXBwIHJhdGUgcHJvbXB0IHRpdGxlICovXHJcbiAgYXBwUmF0ZVByb21wdFRpdGxlPzogc3RyaW5nO1xyXG5cclxuICAvKiogRmVlZGJhY2sgcHJvbXB0IHRpdGxlICovXHJcbiAgZmVlZGJhY2tQcm9tcHRUaXRsZT86IHN0cmluZztcclxuXHJcbiAgLyoqIEZlZWRiYWNrIHByb21wdCBtZXNzYWdlICovXHJcbiAgYXBwUmF0ZVByb21wdE1lc3NhZ2U/OiBzdHJpbmc7XHJcblxyXG4gIC8qKiBGZWVkYmFjayBwcm9tcHQgbWVzc2FnZSAqL1xyXG4gIGZlZWRiYWNrUHJvbXB0TWVzc2FnZT86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBcHBSYXRlTG9jYWxlcyB7XHJcbiAgYWRkTG9jYWxlKGxvY2FsZU9iamVjdDogQXBwUmF0ZUN1c3RvbUxvY2FsZSk6IEFwcFJhdGVDdXN0b21Mb2NhbGU7XHJcblxyXG4gIGdldExvY2FsZShsYW5ndWFnZTogc3RyaW5nLCBhcHBsaWNhdGlvblRpdGxlPzogc3RyaW5nLCBjdXN0b21Mb2NhbGU/OiBBcHBSYXRlQ3VzdG9tTG9jYWxlKTogQXBwUmF0ZUN1c3RvbUxvY2FsZTtcclxuXHJcbiAgZ2V0TG9jYWxlc05hbWVzKCk6IHsgW3Byb3A6IHN0cmluZ106IEFwcFJhdGVDdXN0b21Mb2NhbGUgfTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBcHBSYXRlQ2FsbGJhY2tzIHtcclxuICAvKipcclxuICAgKiBjYWxsIGJhY2sgZnVuY3Rpb24uIGNhbGxlZCB3aGVuIHVzZXIgY2xpY2tlZCBvbiByYXRlLWRpYWxvZyBidXR0b25zXHJcbiAgICovXHJcbiAgb25CdXR0b25DbGlja2VkPzogKGJ1dHRvbkluZGV4OiBudW1iZXIsIGJ1dHRvbkxhYmVsOiBzdHJpbmcsIHByb21wdFR5cGU6IEFwcFJhdGVQcm9tcHRUeXBlKSA9PiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBjYWxsIGJhY2sgZnVuY3Rpb24uIGNhbGxlZCB3aGVuIHJhdGUtZGlhbG9nIHNob3dpbmdcclxuICAgKi9cclxuICBvblJhdGVEaWFsb2dTaG93PzogKHJhdGVDYWxsYmFjazogKGJ1dHRvbkluZGV4OiBudW1iZXIpID0+IHZvaWQpID0+IHZvaWQ7XHJcbiAgLyoqXHJcbiAgICogY2FsbCBiYWNrIGZ1bmN0aW9uLiBjYWxsZWQgd2hlbiB1c2VyIGNsaWNrZWQgb24gbmVnYXRpdmUgZmVlZGJhY2tcclxuICAgKi9cclxuICBoYW5kbGVOZWdhdGl2ZUZlZWRiYWNrPzogKCkgPT4gdm9pZDtcclxuXHJcbiAgZG9uZT86ICgpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXBwVXJscyB7XHJcbiAgLyoqXHJcbiAgICogYXBwbGljYXRpb24gaWQgaW4gQXBwU3RvcmVcclxuICAgKi9cclxuICBpb3M/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIGFwcGxpY2F0aW9uIFVSTCBpbiBHb29nbGVQbGF5XHJcbiAgICovXHJcbiAgYW5kcm9pZD86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogYXBwbGljYXRpb24gVVJMIGluIFdpbmRvd3MgU3RvcmVcclxuICAgKi9cclxuICB3aW5kb3dzPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBhcHBsaWNhdGlvbiBVUkwgaW4gQXBwV29ybGRcclxuICAgKi9cclxuICBibGFja2JlcnJ5Pzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBhcHBsaWNhdGlvbiBVUkwgaW4gV2luZG93c1N0b3JlXHJcbiAgICovXHJcbiAgd2luZG93czg/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBBcHAgUmF0ZVxyXG4gKiBAcHJlbWllciBhcHAtcmF0ZVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhlIEFwcFJhdGUgcGx1Z2luIG1ha2VzIGl0IGVhc3kgdG8gcHJvbXB0IHRoZSB1c2VyIHRvIHJhdGUgeW91ciBhcHAsIGVpdGhlciBub3csIGxhdGVyLCBvciBuZXZlci5cclxuICpcclxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGNvcmRvdmEtcGx1Z2luLWFwcHJhdGUuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtBcHBSYXRlIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vcHVzaGFuZHBsYXkvY29yZG92YS1wbHVnaW4tYXBwcmF0ZSkuXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IEFwcFJhdGUgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvYXBwLXJhdGUvbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBhcHBSYXRlOiBBcHBSYXRlKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqIC8vIHNldCBjZXJ0YWluIHByZWZlcmVuY2VzXHJcbiAqIHRoaXMuYXBwUmF0ZS5zZXRQcmVmZXJlbmNlcyh7XHJcbiAqICAgc3RvcmVBcHBVUkw6IHtcclxuICogICAgIGlvczogJzxhcHBfaWQ+JyxcclxuICogICAgIGFuZHJvaWQ6ICdtYXJrZXQ6Ly9kZXRhaWxzP2lkPTxwYWNrYWdlX25hbWU+JyxcclxuICogICAgIHdpbmRvd3M6ICdtcy13aW5kb3dzLXN0b3JlOi8vcmV2aWV3Lz9Qcm9kdWN0SWQ9PHN0b3JlX2lkPidcclxuICogICB9XHJcbiAqIH0pO1xyXG4gKlxyXG4gKiB0aGlzLmFwcFJhdGUucHJvbXB0Rm9yUmF0aW5nKHRydWUpO1xyXG4gKlxyXG4gKiAvLyBvciwgb3ZlcnJpZGUgdGhlIHdob2xlIHByZWZlcmVuY2VzIG9iamVjdFxyXG4gKiB0aGlzLmFwcFJhdGUuc2V0UHJlZmVyZW5jZXMoe1xyXG4gKiAgIHVzZXNVbnRpbFByb21wdDogMyxcclxuICogICBzdG9yZUFwcFVSTDoge1xyXG4gKiAgICBpb3M6ICc8YXBwX2lkPicsXHJcbiAqICAgIGFuZHJvaWQ6ICdtYXJrZXQ6Ly9kZXRhaWxzP2lkPTxwYWNrYWdlX25hbWU+JyxcclxuICogICAgd2luZG93czogJ21zLXdpbmRvd3Mtc3RvcmU6Ly9yZXZpZXcvP1Byb2R1Y3RJZD08c3RvcmVfaWQ+J1xyXG4gKiAgIH1cclxuICogfSk7XHJcbiAqXHJcbiAqIHRoaXMuYXBwUmF0ZS5wcm9tcHRGb3JSYXRpbmcoZmFsc2UpO1xyXG4gKiBgYGBcclxuICogQGludGVyZmFjZXNcclxuICogQXBwUmF0ZVByZWZlcmVuY2VzXHJcbiAqIEFwcFVybHNcclxuICogQXBwUmF0ZUNhbGxiYWNrc1xyXG4gKiBBcHBSYXRlQ3VzdG9tTG9jYWxcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdBcHBSYXRlJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1hcHByYXRlJyxcclxuICBwbHVnaW5SZWY6ICdBcHBSYXRlJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3B1c2hhbmRwbGF5L2NvcmRvdmEtcGx1Z2luLWFwcHJhdGUnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ0JsYWNrQmVycnkgMTAnLCAnaU9TJywgJ1dpbmRvd3MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQXBwUmF0ZSBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBNYW5hZ2VyIGN1c3RvbSBsb2NhbGVzXHJcbiAgICovXHJcbiAgQENvcmRvdmFQcm9wZXJ0eSgpXHJcbiAgbG9jYWxlczogQXBwUmF0ZUxvY2FsZXM7XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCBwcmVmZXJlbmNlc1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHByZWZcclxuICAgKiBAcmV0dXJucyB2b2lkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldFByZWZlcmVuY2VzKHByZWY6IEFwcFJhdGVQcmVmZXJlbmNlcyk6IHZvaWQge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHByZWZlcmVuY2VzXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyBBcHBSYXRlUHJlZmVyZW5jZXNcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0UHJlZmVyZW5jZXMoKTogQXBwUmF0ZVByZWZlcmVuY2VzIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFByb21wdHMgdGhlIHVzZXIgZm9yIHJhdGluZ1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBpbW1lZGlhdGVseSAgU2hvdyB0aGUgcmF0aW5nIHByb21wdCBpbW1lZGlhdGVseS5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcHJvbXB0Rm9yUmF0aW5nKGltbWVkaWF0ZWx5PzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW1tZWRpYXRlbHkgc2VuZCB0aGUgdXNlciB0byB0aGUgYXBwIHN0b3JlIHJhdGluZyBwYWdlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIG5hdmlnYXRlVG9BcHBTdG9yZSgpOiB2b2lkIHt9XHJcbn1cclxuIl19