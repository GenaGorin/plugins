var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var DeviceMotionOriginal = /** @class */ (function (_super) {
    __extends(DeviceMotionOriginal, _super);
    function DeviceMotionOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeviceMotionOriginal.prototype.getCurrentAcceleration = function () { return cordova(this, "getCurrentAcceleration", {}, arguments); };
    DeviceMotionOriginal.prototype.watchAcceleration = function (options) { return cordova(this, "watchAcceleration", { "callbackOrder": "reverse", "observable": true, "clearFunction": "clearWatch" }, arguments); };
    DeviceMotionOriginal.pluginName = "DeviceMotion";
    DeviceMotionOriginal.plugin = "cordova-plugin-device-motion";
    DeviceMotionOriginal.pluginRef = "navigator.accelerometer";
    DeviceMotionOriginal.repo = "https://github.com/apache/cordova-plugin-device-motion";
    DeviceMotionOriginal.platforms = ["Android", "BlackBerry 10", "Browser", "Firefox OS", "iOS", "Tizen", "Ubuntu", "Windows", "Windows Phone 8"];
    return DeviceMotionOriginal;
}(AwesomeCordovaNativePlugin));
var DeviceMotion = new DeviceMotionOriginal();
export { DeviceMotion };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZGV2aWNlLW1vdGlvbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQztBQUM1RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQWdGQSxnQ0FBMEI7Ozs7SUFPMUQsNkNBQXNCO0lBZXRCLHdDQUFpQixhQUFDLE9BQTBDOzs7Ozs7dUJBeEc5RDtFQWtGa0MsMEJBQTBCO1NBQS9DLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGV2aWNlTW90aW9uQWNjZWxlcmF0aW9uRGF0YSB7XHJcbiAgLyoqXHJcbiAgICogQW1vdW50IG9mIGFjY2VsZXJhdGlvbiBvbiB0aGUgeC1heGlzLiAoaW4gbS9zXjIpXHJcbiAgICovXHJcbiAgeDogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBBbW91bnQgb2YgYWNjZWxlcmF0aW9uIG9uIHRoZSB5LWF4aXMuIChpbiBtL3NeMilcclxuICAgKi9cclxuICB5OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEFtb3VudCBvZiBhY2NlbGVyYXRpb24gb24gdGhlIHotYXhpcy4gKGluIG0vc14yKVxyXG4gICAqL1xyXG4gIHo6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRpb24gdGltZXN0YW1wIGluIG1pbGxpc2Vjb25kcy5cclxuICAgKi9cclxuICB0aW1lc3RhbXA6IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEZXZpY2VNb3Rpb25BY2NlbGVyb21ldGVyT3B0aW9ucyB7XHJcbiAgLyoqXHJcbiAgICogUmVxdWVzdGVkIHBlcmlvZCBvZiBjYWxscyB0byBhY2NlbGVyb21ldGVyU3VjY2VzcyB3aXRoIGFjY2VsZXJhdGlvbiBkYXRhIGluIE1pbGxpc2Vjb25kcy4gRGVmYXVsdDogMTAwMDBcclxuICAgKi9cclxuICBmcmVxdWVuY3k/OiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBEZXZpY2UgTW90aW9uXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLWRldmljZS1tb3Rpb25gLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbRGV2aWNlIE1vdGlvbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLWRldmljZS1tb3Rpb24pLlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBEZXZpY2VNb3Rpb24sIERldmljZU1vdGlvbkFjY2VsZXJhdGlvbkRhdGEgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvZGV2aWNlLW1vdGlvbi9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGRldmljZU1vdGlvbjogRGV2aWNlTW90aW9uKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIC8vIEdldCB0aGUgZGV2aWNlIGN1cnJlbnQgYWNjZWxlcmF0aW9uXHJcbiAqIHRoaXMuZGV2aWNlTW90aW9uLmdldEN1cnJlbnRBY2NlbGVyYXRpb24oKS50aGVuKFxyXG4gKiAgIChhY2NlbGVyYXRpb246IERldmljZU1vdGlvbkFjY2VsZXJhdGlvbkRhdGEpID0+IGNvbnNvbGUubG9nKGFjY2VsZXJhdGlvbiksXHJcbiAqICAgKGVycm9yOiBhbnkpID0+IGNvbnNvbGUubG9nKGVycm9yKVxyXG4gKiApO1xyXG4gKlxyXG4gKiAvLyBXYXRjaCBkZXZpY2UgYWNjZWxlcmF0aW9uXHJcbiAqIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLmRldmljZU1vdGlvbi53YXRjaEFjY2VsZXJhdGlvbigpLnN1YnNjcmliZSgoYWNjZWxlcmF0aW9uOiBEZXZpY2VNb3Rpb25BY2NlbGVyYXRpb25EYXRhKSA9PiB7XHJcbiAqICAgY29uc29sZS5sb2coYWNjZWxlcmF0aW9uKTtcclxuICogfSk7XHJcbiAqXHJcbiAqIC8vIFN0b3Agd2F0Y2hcclxuICogc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBEZXZpY2VNb3Rpb25BY2NlbGVyYXRpb25EYXRhXHJcbiAqIERldmljZU1vdGlvbkFjY2VsZXJvbWV0ZXJPcHRpb25zXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnRGV2aWNlTW90aW9uJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1kZXZpY2UtbW90aW9uJyxcclxuICBwbHVnaW5SZWY6ICduYXZpZ2F0b3IuYWNjZWxlcm9tZXRlcicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tZGV2aWNlLW1vdGlvbicsXHJcbiAgcGxhdGZvcm1zOiBbXHJcbiAgICAnQW5kcm9pZCcsXHJcbiAgICAnQmxhY2tCZXJyeSAxMCcsXHJcbiAgICAnQnJvd3NlcicsXHJcbiAgICAnRmlyZWZveCBPUycsXHJcbiAgICAnaU9TJyxcclxuICAgICdUaXplbicsXHJcbiAgICAnVWJ1bnR1JyxcclxuICAgICdXaW5kb3dzJyxcclxuICAgICdXaW5kb3dzIFBob25lIDgnLFxyXG4gIF0sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIERldmljZU1vdGlvbiBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBHZXQgdGhlIGN1cnJlbnQgYWNjZWxlcmF0aW9uIGFsb25nIHRoZSB4LCB5LCBhbmQgeiBheGVzLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8RGV2aWNlTW90aW9uQWNjZWxlcmF0aW9uRGF0YT59IFJldHVybnMgb2JqZWN0IHdpdGggeCwgeSwgeiwgYW5kIHRpbWVzdGFtcCBwcm9wZXJ0aWVzXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldEN1cnJlbnRBY2NlbGVyYXRpb24oKTogUHJvbWlzZTxEZXZpY2VNb3Rpb25BY2NlbGVyYXRpb25EYXRhPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBXYXRjaCB0aGUgZGV2aWNlIGFjY2VsZXJhdGlvbi4gQ2xlYXIgdGhlIHdhdGNoIGJ5IHVuc3Vic2NyaWJpbmcgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7QWNjZWxlcm9tZXRlck9wdGlvbnN9IG9wdGlvbnMgbGlzdCBvZiBvcHRpb25zIGZvciB0aGUgYWNjZWxlcm9tZXRlci5cclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxEZXZpY2VNb3Rpb25BY2NlbGVyYXRpb25EYXRhPn0gT2JzZXJ2YWJsZSByZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCB5b3UgY2FuIHN1YnNjcmliZSB0b1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICAgIG9ic2VydmFibGU6IHRydWUsXHJcbiAgICBjbGVhckZ1bmN0aW9uOiAnY2xlYXJXYXRjaCcsXHJcbiAgfSlcclxuICB3YXRjaEFjY2VsZXJhdGlvbihvcHRpb25zPzogRGV2aWNlTW90aW9uQWNjZWxlcm9tZXRlck9wdGlvbnMpOiBPYnNlcnZhYmxlPERldmljZU1vdGlvbkFjY2VsZXJhdGlvbkRhdGE+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19