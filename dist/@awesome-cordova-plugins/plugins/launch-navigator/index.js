var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';
var LaunchNavigatorOriginal = /** @class */ (function (_super) {
    __extends(LaunchNavigatorOriginal, _super);
    function LaunchNavigatorOriginal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.APP = {
            USER_SELECT: 'user_select',
            APPLE_MAPS: 'apple_maps',
            GOOGLE_MAPS: 'google_maps',
            WAZE: 'waze',
            CITYMAPPER: 'citymapper',
            NAVIGON: 'navigon',
            TRANSIT_APP: 'transit_app',
            YANDEX: 'yandex',
            UBER: 'uber',
            TOMTOM: 'tomtom',
            BING_MAPS: 'bing_maps',
            SYGIC: 'sygic',
            HERE_MAPS: 'here_maps',
            MOOVIT: 'moovit',
        };
        _this.TRANSPORT_MODE = {
            DRIVING: 'driving',
            WALKING: 'walking',
            BICYCLING: 'bicycling',
            TRANSIT: 'transit',
        };
        return _this;
    }
    LaunchNavigatorOriginal.prototype.navigate = function (destination, options) { return cordova(this, "navigate", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    LaunchNavigatorOriginal.prototype.isAppAvailable = function (app) { return cordova(this, "isAppAvailable", {}, arguments); };
    LaunchNavigatorOriginal.prototype.availableApps = function () { return cordova(this, "availableApps", {}, arguments); };
    LaunchNavigatorOriginal.prototype.getAppDisplayName = function (app) { return cordova(this, "getAppDisplayName", { "sync": true }, arguments); };
    LaunchNavigatorOriginal.prototype.getAppsForPlatform = function (platform) { return cordova(this, "getAppsForPlatform", { "sync": true }, arguments); };
    LaunchNavigatorOriginal.prototype.supportsTransportMode = function (app, platform) { return cordova(this, "supportsTransportMode", { "sync": true }, arguments); };
    LaunchNavigatorOriginal.prototype.getTransportModes = function (app, platform) { return cordova(this, "getTransportModes", { "sync": true }, arguments); };
    LaunchNavigatorOriginal.prototype.supportsDestName = function (app, platform) { return cordova(this, "supportsDestName", { "sync": true }, arguments); };
    LaunchNavigatorOriginal.prototype.supportsStart = function (app, platform) { return cordova(this, "supportsStart", { "sync": true }, arguments); };
    LaunchNavigatorOriginal.prototype.supportsStartName = function (app, platform) { return cordova(this, "supportsStartName", { "sync": true }, arguments); };
    LaunchNavigatorOriginal.prototype.supportsLaunchMode = function (app, platform) { return cordova(this, "supportsLaunchMode", { "sync": true }, arguments); };
    LaunchNavigatorOriginal.prototype.userSelect = function (destination, options) { return cordova(this, "userSelect", { "sync": true }, arguments); };
    Object.defineProperty(LaunchNavigatorOriginal.prototype, "appSelection", {
        get: function () { return cordovaPropertyGet(this, "appSelection"); },
        set: function (value) { cordovaPropertySet(this, "appSelection", value); },
        enumerable: false,
        configurable: true
    });
    LaunchNavigatorOriginal.pluginName = "LaunchNavigator";
    LaunchNavigatorOriginal.plugin = "uk.co.workingedge.phonegap.plugin.launchnavigator";
    LaunchNavigatorOriginal.pluginRef = "launchnavigator";
    LaunchNavigatorOriginal.repo = "https://github.com/dpa99c/phonegap-launch-navigator";
    LaunchNavigatorOriginal.platforms = ["Android", "iOS", "Windows", "Windows Phone 8"];
    return LaunchNavigatorOriginal;
}(AwesomeCordovaNativePlugin));
var LaunchNavigator = new LaunchNavigatorOriginal();
export { LaunchNavigator };
//# sourceMappingURL=data:application/json;base64,