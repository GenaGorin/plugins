var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var DeviceOrientationOriginal = /** @class */ (function (_super) {
    __extends(DeviceOrientationOriginal, _super);
    function DeviceOrientationOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeviceOrientationOriginal.prototype.getCurrentHeading = function () { return cordova(this, "getCurrentHeading", {}, arguments); };
    DeviceOrientationOriginal.prototype.watchHeading = function (options) { return cordova(this, "watchHeading", { "callbackOrder": "reverse", "observable": true, "clearFunction": "clearWatch" }, arguments); };
    DeviceOrientationOriginal.pluginName = "DeviceOrientation";
    DeviceOrientationOriginal.plugin = "cordova-plugin-device-orientation";
    DeviceOrientationOriginal.pluginRef = "navigator.compass";
    DeviceOrientationOriginal.repo = "https://github.com/apache/cordova-plugin-device-orientation";
    DeviceOrientationOriginal.platforms = ["Amazon Fire OS", "Android", "BlackBerry 10", "Browser", "Firefox OS", "iOS", "Tizen", "Ubuntu", "Windows", "Windows Phone"];
    return DeviceOrientationOriginal;
}(AwesomeCordovaNativePlugin));
var DeviceOrientation = new DeviceOrientationOriginal();
export { DeviceOrientation };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZGV2aWNlLW9yaWVudGF0aW9uL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDO0FBQzVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBc0ZLLHFDQUEwQjs7OztJQU8vRCw2Q0FBaUI7SUFpQmpCLHdDQUFZLGFBQUMsT0FBeUM7Ozs7Ozs0QkFoSHhEO0VBd0Z1QywwQkFBMEI7U0FBcEQsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERldmljZU9yaWVudGF0aW9uQ29tcGFzc0hlYWRpbmcge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBoZWFkaW5nIGluIGRlZ3JlZXMgZnJvbSAwLTM1OS45OSBhdCBhIHNpbmdsZSBtb21lbnQgaW4gdGltZS4gKE51bWJlcilcclxuICAgKi9cclxuICBtYWduZXRpY0hlYWRpbmc6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGhlYWRpbmcgcmVsYXRpdmUgdG8gdGhlIGdlb2dyYXBoaWMgTm9ydGggUG9sZSBpbiBkZWdyZWVzIDAtMzU5Ljk5IGF0IGEgc2luZ2xlIG1vbWVudCBpbiB0aW1lLiBBIG5lZ2F0aXZlIHZhbHVlIGluZGljYXRlcyB0aGF0IHRoZSB0cnVlIGhlYWRpbmcgY2FuJ3QgYmUgZGV0ZXJtaW5lZC4gKE51bWJlcilcclxuICAgKi9cclxuICB0cnVlSGVhZGluZzogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgZGV2aWF0aW9uIGluIGRlZ3JlZXMgYmV0d2VlbiB0aGUgcmVwb3J0ZWQgaGVhZGluZyBhbmQgdGhlIHRydWUgaGVhZGluZy4gKE51bWJlcilcclxuICAgKi9cclxuICBoZWFkaW5nQWNjdXJhY3k6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHRpbWUgYXQgd2hpY2ggdGhpcyBoZWFkaW5nIHdhcyBkZXRlcm1pbmVkLiAoRE9NVGltZVN0YW1wKVxyXG4gICAqL1xyXG4gIHRpbWVzdGFtcDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERldmljZU9yaWVudGF0aW9uQ29tcGFzc09wdGlvbnMge1xyXG4gIC8qKlxyXG4gICAqIEhvdyBvZnRlbiB0byByZXRyaWV2ZSB0aGUgY29tcGFzcyBoZWFkaW5nIGluIG1pbGxpc2Vjb25kcy4gKE51bWJlcikgKERlZmF1bHQ6IDEwMClcclxuICAgKi9cclxuICBmcmVxdWVuY3k/OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBjaGFuZ2UgaW4gZGVncmVlcyByZXF1aXJlZCB0byBpbml0aWF0ZSBhIHdhdGNoSGVhZGluZyBzdWNjZXNzIGNhbGxiYWNrLiBXaGVuIHRoaXMgdmFsdWUgaXMgc2V0LCBmcmVxdWVuY3kgaXMgaWdub3JlZC4gKE51bWJlcilcclxuICAgKi9cclxuICBmaWx0ZXI/OiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBEZXZpY2UgT3JpZW50YXRpb25cclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4tZGV2aWNlLW9yaWVudGF0aW9uYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0RldmljZSBPcmllbnRhdGlvbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLWRldmljZS1vcmllbnRhdGlvbikuXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIC8vIERldmljZU9yaWVudGF0aW9uQ29tcGFzc0hlYWRpbmcgaXMgYW4gaW50ZXJmYWNlIGZvciBjb21wYXNzXHJcbiAqIGltcG9ydCB7IERldmljZU9yaWVudGF0aW9uLCBEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NIZWFkaW5nIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2RldmljZS1vcmllbnRhdGlvbi9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGRldmljZU9yaWVudGF0aW9uOiBEZXZpY2VPcmllbnRhdGlvbikgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiAvLyBHZXQgdGhlIGRldmljZSBjdXJyZW50IGNvbXBhc3MgaGVhZGluZ1xyXG4gKiB0aGlzLmRldmljZU9yaWVudGF0aW9uLmdldEN1cnJlbnRIZWFkaW5nKCkudGhlbihcclxuICogICAoZGF0YTogRGV2aWNlT3JpZW50YXRpb25Db21wYXNzSGVhZGluZykgPT4gY29uc29sZS5sb2coZGF0YSksXHJcbiAqICAgKGVycm9yOiBhbnkpID0+IGNvbnNvbGUubG9nKGVycm9yKVxyXG4gKiApO1xyXG4gKlxyXG4gKiAvLyBXYXRjaCB0aGUgZGV2aWNlIGNvbXBhc3MgaGVhZGluZyBjaGFuZ2VcclxuICogdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuZGV2aWNlT3JpZW50YXRpb24ud2F0Y2hIZWFkaW5nKCkuc3Vic2NyaWJlKFxyXG4gKiAgIChkYXRhOiBEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NIZWFkaW5nKSA9PiBjb25zb2xlLmxvZyhkYXRhKVxyXG4gKiApO1xyXG4gKlxyXG4gKiAvLyBTdG9wIHdhdGNoaW5nIGhlYWRpbmcgY2hhbmdlXHJcbiAqIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gKiBgYGBcclxuICogQGludGVyZmFjZXNcclxuICogRGV2aWNlT3JpZW50YXRpb25Db21wYXNzT3B0aW9uc1xyXG4gKiBEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NIZWFkaW5nXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnRGV2aWNlT3JpZW50YXRpb24nLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWRldmljZS1vcmllbnRhdGlvbicsXHJcbiAgcGx1Z2luUmVmOiAnbmF2aWdhdG9yLmNvbXBhc3MnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLWRldmljZS1vcmllbnRhdGlvbicsXHJcbiAgcGxhdGZvcm1zOiBbXHJcbiAgICAnQW1hem9uIEZpcmUgT1MnLFxyXG4gICAgJ0FuZHJvaWQnLFxyXG4gICAgJ0JsYWNrQmVycnkgMTAnLFxyXG4gICAgJ0Jyb3dzZXInLFxyXG4gICAgJ0ZpcmVmb3ggT1MnLFxyXG4gICAgJ2lPUycsXHJcbiAgICAnVGl6ZW4nLFxyXG4gICAgJ1VidW50dScsXHJcbiAgICAnV2luZG93cycsXHJcbiAgICAnV2luZG93cyBQaG9uZScsXHJcbiAgXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRGV2aWNlT3JpZW50YXRpb24gZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBjdXJyZW50IGNvbXBhc3MgaGVhZGluZy5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPERldmljZU9yaWVudGF0aW9uQ29tcGFzc0hlYWRpbmc+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRDdXJyZW50SGVhZGluZygpOiBQcm9taXNlPERldmljZU9yaWVudGF0aW9uQ29tcGFzc0hlYWRpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB0aGUgZGV2aWNlIGN1cnJlbnQgaGVhZGluZyBhdCBhIHJlZ3VsYXIgaW50ZXJ2YWxcclxuICAgKlxyXG4gICAqIFN0b3AgdGhlIHdhdGNoIGJ5IHVuc3Vic2NyaWJpbmcgZnJvbSB0aGUgb2JzZXJ2YWJsZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NPcHRpb25zfSBbb3B0aW9uc10gT3B0aW9ucyBmb3IgY29tcGFzcy4gRnJlcXVlbmN5IGFuZCBGaWx0ZXIuIE9wdGlvbmFsXHJcbiAgICogQHJldHVybnMge09ic2VydmFibGU8RGV2aWNlT3JpZW50YXRpb25Db21wYXNzSGVhZGluZz59IFJldHVybnMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNvbnRhaW5zIHRoZSBjb21wYXNzIGhlYWRpbmdcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxyXG4gICAgY2xlYXJGdW5jdGlvbjogJ2NsZWFyV2F0Y2gnLFxyXG4gIH0pXHJcbiAgd2F0Y2hIZWFkaW5nKG9wdGlvbnM/OiBEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NPcHRpb25zKTogT2JzZXJ2YWJsZTxEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NIZWFkaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==