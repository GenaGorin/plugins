import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var DeviceOrientation = /** @class */ (function (_super) {
    __extends(DeviceOrientation, _super);
    function DeviceOrientation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeviceOrientation.prototype.getCurrentHeading = function () { return cordova(this, "getCurrentHeading", {}, arguments); };
    DeviceOrientation.prototype.watchHeading = function (options) { return cordova(this, "watchHeading", { "callbackOrder": "reverse", "observable": true, "clearFunction": "clearWatch" }, arguments); };
    DeviceOrientation.pluginName = "DeviceOrientation";
    DeviceOrientation.plugin = "cordova-plugin-device-orientation";
    DeviceOrientation.pluginRef = "navigator.compass";
    DeviceOrientation.repo = "https://github.com/apache/cordova-plugin-device-orientation";
    DeviceOrientation.platforms = ["Amazon Fire OS", "Android", "BlackBerry 10", "Browser", "Firefox OS", "iOS", "Tizen", "Ubuntu", "Windows", "Windows Phone"];
    DeviceOrientation.decorators = [
        { type: Injectable }
    ];
    return DeviceOrientation;
}(AwesomeCordovaNativePlugin));
export { DeviceOrientation };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZGV2aWNlLW9yaWVudGF0aW9uL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDO0FBQzVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBc0ZLLHFDQUEwQjs7OztJQU8vRCw2Q0FBaUI7SUFpQmpCLHdDQUFZLGFBQUMsT0FBeUM7Ozs7Ozs7Z0JBekJ2RCxVQUFVOzs0QkF2Rlg7RUF3RnVDLDBCQUEwQjtTQUFwRCxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGV2aWNlT3JpZW50YXRpb25Db21wYXNzSGVhZGluZyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGhlYWRpbmcgaW4gZGVncmVlcyBmcm9tIDAtMzU5Ljk5IGF0IGEgc2luZ2xlIG1vbWVudCBpbiB0aW1lLiAoTnVtYmVyKVxyXG4gICAqL1xyXG4gIG1hZ25ldGljSGVhZGluZzogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgaGVhZGluZyByZWxhdGl2ZSB0byB0aGUgZ2VvZ3JhcGhpYyBOb3J0aCBQb2xlIGluIGRlZ3JlZXMgMC0zNTkuOTkgYXQgYSBzaW5nbGUgbW9tZW50IGluIHRpbWUuIEEgbmVnYXRpdmUgdmFsdWUgaW5kaWNhdGVzIHRoYXQgdGhlIHRydWUgaGVhZGluZyBjYW4ndCBiZSBkZXRlcm1pbmVkLiAoTnVtYmVyKVxyXG4gICAqL1xyXG4gIHRydWVIZWFkaW5nOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBkZXZpYXRpb24gaW4gZGVncmVlcyBiZXR3ZWVuIHRoZSByZXBvcnRlZCBoZWFkaW5nIGFuZCB0aGUgdHJ1ZSBoZWFkaW5nLiAoTnVtYmVyKVxyXG4gICAqL1xyXG4gIGhlYWRpbmdBY2N1cmFjeTogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgdGltZSBhdCB3aGljaCB0aGlzIGhlYWRpbmcgd2FzIGRldGVybWluZWQuIChET01UaW1lU3RhbXApXHJcbiAgICovXHJcbiAgdGltZXN0YW1wOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGV2aWNlT3JpZW50YXRpb25Db21wYXNzT3B0aW9ucyB7XHJcbiAgLyoqXHJcbiAgICogSG93IG9mdGVuIHRvIHJldHJpZXZlIHRoZSBjb21wYXNzIGhlYWRpbmcgaW4gbWlsbGlzZWNvbmRzLiAoTnVtYmVyKSAoRGVmYXVsdDogMTAwKVxyXG4gICAqL1xyXG4gIGZyZXF1ZW5jeT86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGNoYW5nZSBpbiBkZWdyZWVzIHJlcXVpcmVkIHRvIGluaXRpYXRlIGEgd2F0Y2hIZWFkaW5nIHN1Y2Nlc3MgY2FsbGJhY2suIFdoZW4gdGhpcyB2YWx1ZSBpcyBzZXQsIGZyZXF1ZW5jeSBpcyBpZ25vcmVkLiAoTnVtYmVyKVxyXG4gICAqL1xyXG4gIGZpbHRlcj86IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIERldmljZSBPcmllbnRhdGlvblxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBjb3Jkb3ZhLXBsdWdpbi1kZXZpY2Utb3JpZW50YXRpb25gLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbRGV2aWNlIE9yaWVudGF0aW9uIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tZGV2aWNlLW9yaWVudGF0aW9uKS5cclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogLy8gRGV2aWNlT3JpZW50YXRpb25Db21wYXNzSGVhZGluZyBpcyBhbiBpbnRlcmZhY2UgZm9yIGNvbXBhc3NcclxuICogaW1wb3J0IHsgRGV2aWNlT3JpZW50YXRpb24sIERldmljZU9yaWVudGF0aW9uQ29tcGFzc0hlYWRpbmcgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvZGV2aWNlLW9yaWVudGF0aW9uL25neCc7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZGV2aWNlT3JpZW50YXRpb246IERldmljZU9yaWVudGF0aW9uKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIC8vIEdldCB0aGUgZGV2aWNlIGN1cnJlbnQgY29tcGFzcyBoZWFkaW5nXHJcbiAqIHRoaXMuZGV2aWNlT3JpZW50YXRpb24uZ2V0Q3VycmVudEhlYWRpbmcoKS50aGVuKFxyXG4gKiAgIChkYXRhOiBEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NIZWFkaW5nKSA9PiBjb25zb2xlLmxvZyhkYXRhKSxcclxuICogICAoZXJyb3I6IGFueSkgPT4gY29uc29sZS5sb2coZXJyb3IpXHJcbiAqICk7XHJcbiAqXHJcbiAqIC8vIFdhdGNoIHRoZSBkZXZpY2UgY29tcGFzcyBoZWFkaW5nIGNoYW5nZVxyXG4gKiB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5kZXZpY2VPcmllbnRhdGlvbi53YXRjaEhlYWRpbmcoKS5zdWJzY3JpYmUoXHJcbiAqICAgKGRhdGE6IERldmljZU9yaWVudGF0aW9uQ29tcGFzc0hlYWRpbmcpID0+IGNvbnNvbGUubG9nKGRhdGEpXHJcbiAqICk7XHJcbiAqXHJcbiAqIC8vIFN0b3Agd2F0Y2hpbmcgaGVhZGluZyBjaGFuZ2VcclxuICogc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NPcHRpb25zXHJcbiAqIERldmljZU9yaWVudGF0aW9uQ29tcGFzc0hlYWRpbmdcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdEZXZpY2VPcmllbnRhdGlvbicsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZGV2aWNlLW9yaWVudGF0aW9uJyxcclxuICBwbHVnaW5SZWY6ICduYXZpZ2F0b3IuY29tcGFzcycsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tZGV2aWNlLW9yaWVudGF0aW9uJyxcclxuICBwbGF0Zm9ybXM6IFtcclxuICAgICdBbWF6b24gRmlyZSBPUycsXHJcbiAgICAnQW5kcm9pZCcsXHJcbiAgICAnQmxhY2tCZXJyeSAxMCcsXHJcbiAgICAnQnJvd3NlcicsXHJcbiAgICAnRmlyZWZveCBPUycsXHJcbiAgICAnaU9TJyxcclxuICAgICdUaXplbicsXHJcbiAgICAnVWJ1bnR1JyxcclxuICAgICdXaW5kb3dzJyxcclxuICAgICdXaW5kb3dzIFBob25lJyxcclxuICBdLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBEZXZpY2VPcmllbnRhdGlvbiBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBHZXQgdGhlIGN1cnJlbnQgY29tcGFzcyBoZWFkaW5nLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8RGV2aWNlT3JpZW50YXRpb25Db21wYXNzSGVhZGluZz59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldEN1cnJlbnRIZWFkaW5nKCk6IFByb21pc2U8RGV2aWNlT3JpZW50YXRpb25Db21wYXNzSGVhZGluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBkZXZpY2UgY3VycmVudCBoZWFkaW5nIGF0IGEgcmVndWxhciBpbnRlcnZhbFxyXG4gICAqXHJcbiAgICogU3RvcCB0aGUgd2F0Y2ggYnkgdW5zdWJzY3JpYmluZyBmcm9tIHRoZSBvYnNlcnZhYmxlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0RldmljZU9yaWVudGF0aW9uQ29tcGFzc09wdGlvbnN9IFtvcHRpb25zXSBPcHRpb25zIGZvciBjb21wYXNzLiBGcmVxdWVuY3kgYW5kIEZpbHRlci4gT3B0aW9uYWxcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NIZWFkaW5nPn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgY29udGFpbnMgdGhlIGNvbXBhc3MgaGVhZGluZ1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICAgIG9ic2VydmFibGU6IHRydWUsXHJcbiAgICBjbGVhckZ1bmN0aW9uOiAnY2xlYXJXYXRjaCcsXHJcbiAgfSlcclxuICB3YXRjaEhlYWRpbmcob3B0aW9ucz86IERldmljZU9yaWVudGF0aW9uQ29tcGFzc09wdGlvbnMpOiBPYnNlcnZhYmxlPERldmljZU9yaWVudGF0aW9uQ29tcGFzc0hlYWRpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19