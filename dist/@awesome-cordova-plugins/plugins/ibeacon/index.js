var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova, checkAvailability } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var IBeaconOriginal = /** @class */ (function (_super) {
    __extends(IBeaconOriginal, _super);
    function IBeaconOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IBeaconOriginal.prototype.Delegate = function () {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                var delegate = new window.cordova.plugins.locationManager.Delegate();
                delegate.didChangeAuthorizationStatus = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didChangeAuthorizationStatus = cb);
                    });
                };
                delegate.didDetermineStateForRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didDetermineStateForRegion = cb);
                    });
                };
                delegate.didEnterRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didEnterRegion = cb);
                    });
                };
                delegate.didExitRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didExitRegion = cb);
                    });
                };
                delegate.didRangeBeaconsInRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didRangeBeaconsInRegion = cb);
                    });
                };
                delegate.didStartMonitoringForRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didStartMonitoringForRegion = cb);
                    });
                };
                delegate.monitoringDidFailForRegionWithError = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.monitoringDidFailForRegionWithError = cb);
                    });
                };
                delegate.peripheralManagerDidStartAdvertising = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.peripheralManagerDidStartAdvertising = cb);
                    });
                };
                delegate.peripheralManagerDidUpdateState = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.peripheralManagerDidUpdateState = cb);
                    });
                };
                window.cordova.plugins.locationManager.setDelegate(delegate);
                return delegate;
            }
        })();
    };
    IBeaconOriginal.prototype.BeaconRegion = function (identifer, uuid, major, minor, notifyEntryStateOnDisplay) {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return new window.cordova.plugins.locationManager.BeaconRegion(identifer, uuid, major, minor, notifyEntryStateOnDisplay);
            }
        })();
    };
    IBeaconOriginal.prototype.getDelegate = function () { return cordova(this, "getDelegate", {}, arguments); };
    IBeaconOriginal.prototype.setDelegate = function (delegate) { return cordova(this, "setDelegate", {}, arguments); };
    IBeaconOriginal.prototype.onDomDelegateReady = function () { return cordova(this, "onDomDelegateReady", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.isBluetoothEnabled = function () { return cordova(this, "isBluetoothEnabled", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.enableBluetooth = function () { return cordova(this, "enableBluetooth", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.disableBluetooth = function () { return cordova(this, "disableBluetooth", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.startMonitoringForRegion = function (region) { return cordova(this, "startMonitoringForRegion", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.stopMonitoringForRegion = function (region) { return cordova(this, "stopMonitoringForRegion", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.requestStateForRegion = function (region) { return cordova(this, "requestStateForRegion", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.startRangingBeaconsInRegion = function (region) { return cordova(this, "startRangingBeaconsInRegion", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.stopRangingBeaconsInRegion = function (region) { return cordova(this, "stopRangingBeaconsInRegion", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.getAuthorizationStatus = function () { return cordova(this, "getAuthorizationStatus", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.requestWhenInUseAuthorization = function () { return cordova(this, "requestWhenInUseAuthorization", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.requestAlwaysAuthorization = function () { return cordova(this, "requestAlwaysAuthorization", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.getMonitoredRegions = function () { return cordova(this, "getMonitoredRegions", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.getRangedRegions = function () { return cordova(this, "getRangedRegions", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.isRangingAvailable = function () { return cordova(this, "isRangingAvailable", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.isMonitoringAvailableForClass = function (region) { return cordova(this, "isMonitoringAvailableForClass", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.startAdvertising = function (region, measuredPower) { return cordova(this, "startAdvertising", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.stopAdvertising = function (region) { return cordova(this, "stopAdvertising", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.isAdvertisingAvailable = function () { return cordova(this, "isAdvertisingAvailable", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.isAdvertising = function () { return cordova(this, "isAdvertising", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.disableDebugLogs = function () { return cordova(this, "disableDebugLogs", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.enableDebugNotifications = function () { return cordova(this, "enableDebugNotifications", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.disableDebugNotifications = function () { return cordova(this, "disableDebugNotifications", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.enableDebugLogs = function () { return cordova(this, "enableDebugLogs", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.appendToDeviceLog = function (message) { return cordova(this, "appendToDeviceLog", { "otherPromise": true }, arguments); };
    IBeaconOriginal.pluginName = "IBeacon";
    IBeaconOriginal.plugin = "cordova-plugin-ibeacon";
    IBeaconOriginal.pluginRef = "cordova.plugins.locationManager";
    IBeaconOriginal.repo = "https://github.com/petermetz/cordova-plugin-ibeacon";
    IBeaconOriginal.platforms = ["Android", "iOS"];
    return IBeaconOriginal;
}(AwesomeCordovaNativePlugin));
var IBeacon = new IBeaconOriginal();
export { IBeacon };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvaWJlYWNvbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTywwREFBNkQsTUFBTSwrQkFBK0IsQ0FBQztBQUMxRyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQTBSTCwyQkFBMEI7Ozs7SUFRckQsMEJBQVE7OzttREFBb0I7Z0JBQzFCLElBQU0sUUFBUSxHQUFHLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUV2RSxRQUFRLENBQUMsNEJBQTRCLEdBQUcsVUFBQyxZQUFrQztvQkFDekUsT0FBTyxJQUFJLFVBQVUsQ0FBc0IsVUFBQyxRQUFhO3dCQUN2RCxJQUFNLEVBQUUsR0FBRyxVQUFDLElBQXlCLElBQUssT0FBQSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFuQixDQUFtQixDQUFDO3dCQUM5RCxPQUFPLENBQUMsUUFBUSxDQUFDLDRCQUE0QixHQUFHLEVBQUUsQ0FBQyxDQUFDO29CQUN0RCxDQUFDLENBQUMsQ0FBQztnQkFDTCxDQUFDLENBQUM7Z0JBRUYsUUFBUSxDQUFDLDBCQUEwQixHQUFHLFVBQUMsWUFBa0M7b0JBQ3ZFLE9BQU8sSUFBSSxVQUFVLENBQXNCLFVBQUMsUUFBYTt3QkFDdkQsSUFBTSxFQUFFLEdBQUcsVUFBQyxJQUF5QixJQUFLLE9BQUEsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBbkIsQ0FBbUIsQ0FBQzt3QkFDOUQsT0FBTyxDQUFDLFFBQVEsQ0FBQywwQkFBMEIsR0FBRyxFQUFFLENBQUMsQ0FBQztvQkFDcEQsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDO2dCQUVGLFFBQVEsQ0FBQyxjQUFjLEdB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QU8sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDN0QsT0FBTyxRQUFRLENBQUM7YUFDakI7OztJQWVELDhCQUFZLGFBQ1YsU0FBaUIsRUFDakIsSUFBWSxFQUNaLEtBQWMsRUFDZCxLQUFjLEVBQ2QseUJBQW1DOzs7bURBQ3JCO2dCQUNkLE9BQU8sSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUM1RCxTQUFTLEVBQ1QsSUFBSSxFQUNKLEtBQUssRUFDTCxLQUFLLEVBQ0wseUJBQXlCLENBQzFCLENBQUM7YUFDSDs7O0lBTUQsNkJBQVc7SUFTWCw2QkFBVyxhQUFDLFFBQXlCO0lBeUJyQyxvQ0FBa0I7SUFXbEIsb0NBQWtCO0lBV2xCLGlDQUFlO0lBV2Ysa0NBQWdCO0lBcUJoQiwwQ0FBd0IsYUFBQyxNQUFjO0lBa0J2Qyx5Q0FBdUIsYUFBQyxNQUFjO0lBaUJ0Qyx1Q0FBcUIsYUFBQyxNQUFjO0lBa0JwQyw2Q0FBMkIsYUFBQyxNQUFjO0lBa0IxQyw0Q0FBMEIsYUFBQyxNQUFjO0lBV3pDLHdDQUFzQjtJQWV0QiwrQ0FBNkI7SUFXN0IsNENBQTBCO0lBVTFCLHFDQUFtQjtJQVVuQixrQ0FBZ0I7SUFXaEIsb0NBQWtCO0lBYWxCLCtDQUE2QixhQUFDLE1BQWM7SUFzQjVDLGtDQUFnQixhQUFDLE1BQWMsRUFBRSxhQUFzQjtJQWN2RCxpQ0FBZSxhQUFDLE1BQWM7SUFXOUIsd0NBQXNCO0lBV3RCLCtCQUFhO0lBWWIsa0NBQWdCO0lBYWhCLDBDQUF3QjtJQVl4QiwyQ0FBeUI7SUFZekIsaUNBQWU7SUFjZixtQ0FBaUIsYUFBQyxPQUFlOzs7Ozs7a0JBcHZCbkM7RUE0UjZCLDBCQUEwQjtTQUExQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBDb3Jkb3ZhQ2hlY2ssIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmRlY2xhcmUgY29uc3QgY29yZG92YTogYW55O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCZWFjb24ge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwaHlzaWNhbCBkZXZpY2UncyBpZGVudGlmaWVyLlxyXG4gICAqL1xyXG4gIHV1aWQ6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGJlYWNvbidzIG1ham9yIGlkZW50aWZpZXIgbnVtYmVyLlxyXG4gICAqL1xyXG4gIG1ham9yOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBiZWFjb24ncyBtaW5vciBpZGVudGlmaWVyIG51bWJlci5cclxuICAgKi9cclxuICBtaW5vcjogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgcHJveGltaXR5IG9mIHRoZSBiZWFjb24gcmVsYXRpdmUgdG8gdGhlIHBob25lLlxyXG4gICAqXHJcbiAgICogUG9zc2libGUgb3B0aW9ucyBhcmU6XHJcbiAgICogUHJveGltaXR5SW1tZWRpYXRlXHJcbiAgICogUHJveGltaXR5TmVhclxyXG4gICAqIFByb3hpbWl0eUZhclxyXG4gICAqIFByb3hpbWl0eVVua25vd25cclxuICAgKi9cclxuICBwcm94aW1pdHk6ICdQcm94aW1pdHlJbW1lZGlhdGUnIHwgJ1Byb3hpbWl0eU5lYXInIHwgJ1Byb3hpbWl0eUZhcicgfCAnUHJveGltaXR5VW5rbm93bic7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRyYW5zbWlzc2lvbiBQb3dlciBvZiB0aGUgYmVhY29uLiBBIGNvbnN0YW50IGVtaXR0ZWQgYnkgdGhlIGJlYWNvbiB3aGljaCBpbmRpY2F0ZXMgd2hhdCdzIHRoZSBleHBlY3RlZCBSU1NJIGF0IGEgZGlzdGFuY2Ugb2YgMSBtZXRlciB0byB0aGUgYmVhY29uLlxyXG4gICAqL1xyXG4gIHR4OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlY2VpdmVkIFNpZ25hbCBTdHJlbmd0aCBJbmRpY2F0b3IuIFRoZSBzdHJlbmd0aCBvZiB0aGUgYmVhY29uJ3Mgc2lnbmFsIHdoZW4gaXQgcmVhY2hlcyB0aGUgZGV2aWNlLlxyXG4gICAqICBSU1NJIHJhbmdlcyBmcm9tIGFwcm94IC0yNiAoYSBmZXcgaW5jaGVzKSB0byAtMTAwICg0MC01MCBtIGRpc3RhbmNlKS5cclxuICAgKi9cclxuICByc3NpOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBhY2N1cmFjeSBvZiB0aGUgcmFuZ2luZy5cclxuICAgKi9cclxuICBhY2N1cmFjeTogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJlYWNvblJlZ2lvbiB7XHJcbiAgLyoqXHJcbiAgICogQSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyByZWdpb24uXHJcbiAgICovXHJcbiAgaWRlbnRpZmllcjogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgdGhlIGJlYWNvbiBpZGVudGlmaWVyIHRoZSBkZXZpY2Ugd2lsbCBcIndhdGNoXCIgZm9yLiBNYW55IGJlYWNvbnMgY2FuIHNoYXJlIHRoZSBzYW1lIHV1aWQuXHJcbiAgICovXHJcbiAgdXVpZDogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgYmVhY29uJ3MgbWFqb3IgaWRlbnRpZmllciBudW1iZXIuIE9wdGlvbmFsLCBvZiBub3RoaW5nIGlzIHN1cHBsaWVkXHJcbiAgICogdGhlIHBsdWdpbiB3aWxsIHRyZWF0IGl0IGFzIGEgd2lsZGNhcmQuXHJcbiAgICovXHJcbiAgbWFqb3I/OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBiZWFjb24ncyBtaW5vciBpZGVudGlmaWVyIG51bWJlci4gT3B0aW9uYWwsIG9mIG5vdGhpbmcgaXMgc3VwcGxpZWRcclxuICAgKiB0aGUgcGx1Z2luIHdpbGwgdHJlYXQgaXQgYXMgYSB3aWxkY2FyZC5cclxuICAgKi9cclxuICBtaW5vcj86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogSWYgc2V0IHRvIHRydWUgdGhlIGRldmljZSB3aWxsIHNjYW4gZm9yIGJlYWNvbnMgYW5kIGRldGVybWluZSByZWdpb24gc3RhdGUgYW55dGltZVxyXG4gICAqIHRoZSBkZXZpY2UncyBzY3JlZW4gaXMgdHVybmVkIG9uIG9yIG9mZi4gVXNlZnVsIGZvciBkZWJ1Z2dpbmcuXHJcbiAgICovXHJcbiAgbm90aWZ5RW50cnlTdGF0ZU9uRGlzcGxheT86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2lyY3VsYXJSZWdpb24ge1xyXG4gIC8qKlxyXG4gICAqIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgcmVnaW9uLlxyXG4gICAqL1xyXG4gIGlkZW50aWZpZXI6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGxhdGl0dWRlIG9mIHRoaXMgcmVnaW9uLlxyXG4gICAqL1xyXG4gIGxhdGl0dWRlOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBsb25naXR1ZGUgb2YgdGhpcyByZWdpb24uXHJcbiAgICovXHJcbiAgbG9uZ2l0dWRlOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSByYWRpdXMgb2YgdGhlIGdlb2ZlbmNlIGZvciB0aGlzIHJlZ2lvbi5cclxuICAgKi9cclxuICByYWRpdXM6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgUmVnaW9uID0gQmVhY29uUmVnaW9uIHwgQ2lyY3VsYXJSZWdpb247XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElCZWFjb25QbHVnaW5SZXN1bHQge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBkZWxlZ2F0ZSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VkIHRoZSBQbHVnaW5SZXN1bHQgb2JqZWN0LlxyXG4gICAqL1xyXG4gIGV2ZW50VHlwZTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgcmVnaW9uIHRoYXQgdHJpZ2dlcmVkIHRoZSBldmVudC5cclxuICAgKi9cclxuICByZWdpb246IFJlZ2lvbjtcclxuXHJcbiAgLyoqXHJcbiAgICogQW4gYXJyYXkgb2YgYmVhY29uIG9iamVjdHNcclxuICAgKi9cclxuICBiZWFjb25zOiBCZWFjb25bXTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHN0YXR1cyBvZiB0aGUgbG9jYXRpb24gcGVybWlzc2lvbiBmb3IgaU9TLlxyXG4gICAqL1xyXG4gIGF1dGhvcml6YXRpb25TdGF0dXM6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHN0YXRlIG9mIHRoZSBwaG9uZSBpbiByZWxhdGlvbiB0byB0aGUgcmVnaW9uLiBJbnNpZGUvb3V0c2lkZSBmb3IgZXhhbXBsZS5cclxuICAgKi9cclxuICBzdGF0ZTogJ0NMUmVnaW9uU3RhdGVJbnNpZGUnIHwgJ0NMUmVnaW9uU3RhdGVPdXRzaWRlJztcclxuXHJcbiAgLyoqXHJcbiAgICogRXJyb3IgbWVzc2FnZSwgdXNlZCBvbmx5IHdpdGggbW9uaXRvcmluZ0RpZEZhaWxGb3JSZWdpb25XaXRoRXJyb3IgZGVsZWdhdGUuXHJcbiAgICovXHJcbiAgZXJyb3I6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJQmVhY29uRGVsZWdhdGUge1xyXG4gIC8qKlxyXG4gICAqIEFuIG9ic2VydmFibGUgdGhhdCBwdWJsaXNoZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGxvY2F0aW9uIHBlcm1pc3Npb24gYXV0aG9yaXphdGlvbiBzdGF0dXMuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxzdHJpbmc+fSBSZXR1cm5zIGEgc3RyaW5nLlxyXG4gICAqL1xyXG4gIGRpZENoYW5nZUF1dGhvcml6YXRpb25TdGF0dXMoKTogT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG5cclxuICAvKipcclxuICAgKiBBbiBPYnNlcnZhYmxlIHRoYXQgcHVibGlzaGVzIGV2ZW50IGRhdGEgdG8gaXQncyBzdWJzY3JpYmVyc1xyXG4gICAqIHdoZW4gdGhlIG5hdGl2ZSBsYXllciBpcyBhYmxlIHRvIGRldGVybWluZSB0aGUgZGV2aWNlJ3Mgc3RhdGUuXHJcbiAgICpcclxuICAgKiBUaGlzIGV2ZW50IGlzIGNhbGxlZCB3aGVuIHRoZSBwaG9uZSBiZWdpbnMgc3RhcnRzIG1vbml0b3JpbmcsXHJcbiAgICogd2hlbiByZXF1ZXN0U3RhdGVGb3JSZWdpb24gaXMgY2FsbGVkLCBldGMuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0Pn0gUmV0dXJucyBhIElCZWFjb25QbHVnaW5SZXN1bHQgb2JqZWN0IHdpdGggaW5mb3JtYXRpb24gYWJvdXQgdGhlIGV2ZW50LCByZWdpb24sIGFuZCBiZWFjb24ocykuXHJcbiAgICovXHJcbiAgZGlkRGV0ZXJtaW5lU3RhdGVGb3JSZWdpb24oKTogT2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0PjtcclxuXHJcbiAgLyoqXHJcbiAgICogQW4gT2JzZXJ2YWJsZSB0aGF0IHB1Ymxpc2hlcyBldmVudCBkYXRhIHRvIGl0J3Mgc3Vic2NyaWJlcnNcclxuICAgKiB3aGVuIHRoZSBwaG9uZSBlbnRlcnMgYSByZWdpb24gdGhhdCBpdCB3YXMgYXNrZWQgdG8gbW9uaXRvci5cclxuICAgKlxyXG4gICAqIElmIHRoZSB1c2VyIGhhcyBnaXZlbiB0aGUgYXBwIEFsd2F5cy1Mb2NhdGlvbiBwZXJtaXNzaW9uLCB0aGlzIGZ1bmN0aW9uXHJcbiAgICogIHdpbGwgYmUgY2FsbGVkIGV2ZW4gd2hlbiB0aGUgYXBwIGlzIG5vdCBydW5uaW5nIG9uIGlPUy5cclxuICAgKiBUaGUgYXBwIHdpbGwgcnVuIHNpbGVudGx5IGluIHRoZSBiYWNrZ3JvdW5kIGZvciBhIHNtYWxsIGFtb3VudCBvZiB0aW1lLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge09ic2VydmFibGU8SUJlYWNvblBsdWdpblJlc3VsdD59IFJldHVybnMgYSBJQmVhY29uUGx1Z2luUmVzdWx0IG9iamVjdCB3aXRoIGluZm9ybWF0aW9uIGFib3V0IHRoZSBldmVudCwgcmVnaW9uLCBhbmQgYmVhY29uKHMpLlxyXG4gICAqL1xyXG4gIGRpZEVudGVyUmVnaW9uKCk6IE9ic2VydmFibGU8SUJlYWNvblBsdWdpblJlc3VsdD47XHJcblxyXG4gIC8qKlxyXG4gICAqIEFuIE9ic2VydmFibGUgdGhhdCBwdWJsaXNoZXMgZXZlbnQgZGF0YSB0byBpdCdzIHN1YnNjcmliZXJzXHJcbiAgICogd2hlbiB0aGUgcGhvbmUgZXhpdHMgYSByZWdpb24gdGhhdCBpdCB3YXMgYXNrZWQgdG8gbW9uaXRvci5cclxuICAgKlxyXG4gICAqIElmIHRoZSB1c2VyIGhhcyBnaXZlbiB0aGUgYXBwIEFsd2F5cy1Mb2NhdGlvbiBwZXJtaXNzaW9uLCB0aGlzIGZ1bmN0aW9uXHJcbiAgICogIHdpbGwgYmUgY2FsbGVkIGV2ZW4gd2hlbiB0aGUgYXBwIGlzIG5vdCBydW5uaW5nIG9uIGlPUy5cclxuICAgKiBUaGUgYXBwIHdpbGwgcnVuIHNpbGVudGx5IGluIHRoZSBiYWNrZ3JvdW5kIGZvciBhIHNtYWxsIGFtb3VudCBvZiB0aW1lLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge09ic2VydmFibGU8SUJlYWNvblBsdWdpblJlc3VsdD59IFJldHVybnMgYSBJQmVhY29uUGx1Z2luUmVzdWx0IG9iamVjdCB3aXRoIGluZm9ybWF0aW9uIGFib3V0IHRoZSBldmVudCwgcmVnaW9uLCBhbmQgYmVhY29uKHMpLlxyXG4gICAqL1xyXG4gIGRpZEV4aXRSZWdpb24oKTogT2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0PjtcclxuXHJcbiAgLyoqXHJcbiAgICogQW4gT2JzZXJ2YWJsZSB0aGF0IHB1Ymxpc2hlcyBldmVudCBkYXRhIHRvIGl0J3Mgc3Vic2NyaWJlcnNcclxuICAgKiAgZWFjaCB0aW1lIHRoYXQgdGhlIGRldmljZSByYW5nZXMgYmVhY29ucy4gTW9kZXJuIEFuZHJvaWQgYW5kIGlPUyBkZXZpY2VzIHJhbmdlXHJcbiAgICogYXByb3hpbWF0ZWx5IG9uY2UgcGVyIHNlY29uZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPElCZWFjb25QbHVnaW5SZXN1bHQ+fSBSZXR1cm5zIGEgSUJlYWNvblBsdWdpblJlc3VsdCBvYmplY3Qgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZXZlbnQsIHJlZ2lvbiwgYW5kIGJlYWNvbihzKS5cclxuICAgKi9cclxuICBkaWRSYW5nZUJlYWNvbnNJblJlZ2lvbigpOiBPYnNlcnZhYmxlPElCZWFjb25QbHVnaW5SZXN1bHQ+O1xyXG5cclxuICAvKipcclxuICAgKiBBbiBPYnNlcnZhYmxlIHRoYXQgcHVibGlzaGVzIGV2ZW50IGRhdGEgdG8gaXQncyBzdWJzY3JpYmVyc1xyXG4gICAqICB3aGVuIHRoZSBkZXZpY2UgYmVnaW5zIG1vbml0b3JpbmcgYSByZWdpb24uXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0Pn0gUmV0dXJucyBhIElCZWFjb25QbHVnaW5SZXN1bHQgb2JqZWN0IHdpdGggaW5mb3JtYXRpb24gYWJvdXQgdGhlIGV2ZW50LCByZWdpb24sIGFuZCBiZWFjb24ocykuXHJcbiAgICovXHJcbiAgZGlkU3RhcnRNb25pdG9yaW5nRm9yUmVnaW9uKCk6IE9ic2VydmFibGU8SUJlYWNvblBsdWdpblJlc3VsdD47XHJcblxyXG4gIC8qKlxyXG4gICAqIEFuIE9ic2VydmFibGUgdGhhdCBwdWJsaXNoZXMgZXZlbnQgZGF0YSB0byBpdCdzIHN1YnNjcmliZXJzXHJcbiAgICogIHdoZW4gdGhlIGRldmljZSBmYWlscyB0byBtb25pdG9yIGEgcmVnaW9uLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge09ic2VydmFibGU8SUJlYWNvblBsdWdpblJlc3VsdD59IFJldHVybnMgYSBJQmVhY29uUGx1Z2luUmVzdWx0IG9iamVjdCB3aXRoIGluZm9ybWF0aW9uIGFib3V0IHRoZSBldmVudCwgcmVnaW9uLCBhbmQgYmVhY29uKHMpLlxyXG4gICAqL1xyXG4gIG1vbml0b3JpbmdEaWRGYWlsRm9yUmVnaW9uV2l0aEVycm9yKCk6IE9ic2VydmFibGU8SUJlYWNvblBsdWdpblJlc3VsdD47XHJcblxyXG4gIC8qKlxyXG4gICAqIEFuIE9ic2VydmFibGUgdGhhdCBwdWJsaXNoZXMgZXZlbnQgZGF0YSB0byBpdCdzIHN1YnNjcmliZXJzXHJcbiAgICogIHdoZW4gdGhlIGRldmljZSBiZWdpbnMgYWR2ZXJ0aXNpbmcgYXMgYW4gaUJlYWNvbi5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPElCZWFjb25QbHVnaW5SZXN1bHQ+fSBSZXR1cm5zIGEgSUJlYWNvblBsdWdpblJlc3VsdCBvYmplY3Qgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZXZlbnQsIHJlZ2lvbiwgYW5kIGJlYWNvbihzKS5cclxuICAgKi9cclxuICBwZXJpcGhlcmFsTWFuYWdlckRpZFN0YXJ0QWR2ZXJ0aXNpbmcoKTogT2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0PjtcclxuXHJcbiAgLyoqXHJcbiAgICogQW4gT2JzZXJ2YWJsZSB0aGF0IHB1Ymxpc2hlcyBldmVudCBkYXRhIHRvIGl0J3Mgc3Vic2NyaWJlcnNcclxuICAgKiB3aGVuIHRoZSBzdGF0ZSBvZiB0aGUgcGVyaXBoZXJhbCBtYW5hZ2VyJ3Mgc3RhdGUgdXBkYXRlcy5cclxuICAgKlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge09ic2VydmFibGU8SUJlYWNvblBsdWdpblJlc3VsdD59IFJldHVybnMgYSBJQmVhY29uUGx1Z2luUmVzdWx0IG9iamVjdCB3aXRoIGluZm9ybWF0aW9uIGFib3V0IHRoZSBldmVudCwgcmVnaW9uLCBhbmQgYmVhY29uKHMpLlxyXG4gICAqL1xyXG4gIHBlcmlwaGVyYWxNYW5hZ2VyRGlkVXBkYXRlU3RhdGUoKTogT2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0PjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIElCZWFjb25cclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgcGx1Z2luIHByb3ZpZGVzIGZ1bmN0aW9ucyBmb3Igd29ya2luZyB3aXRoIGlCZWFjb25zLlxyXG4gKlxyXG4gKiAgVGhlIHBsdWdpbidzIEFQSSBjbG9zZWx5IG1pbWljcyB0aGUgb25lIGV4cG9zZWQgdGhyb3VnaCB0aGUgW0NMTG9jYXRpb25NYW5hZ2VyXShodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9pb3MvZG9jdW1lbnRhdGlvbi9Db3JlTG9jYXRpb24vUmVmZXJlbmNlL0NMTG9jYXRpb25NYW5hZ2VyX0NsYXNzL2luZGV4Lmh0bWwpIGludHJvZHVjZWQgaW4gaU9TIDcuXHJcbiAqIEB1c2FnZVxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IElCZWFjb24gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvaWJlYWNvbi9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGliZWFjb246IElCZWFjb24pIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICpcclxuICogLy8gUmVxdWVzdCBwZXJtaXNzaW9uIHRvIHVzZSBsb2NhdGlvbiBvbiBpT1NcclxuICogdGhpcy5pYmVhY29uLnJlcXVlc3RBbHdheXNBdXRob3JpemF0aW9uKCk7XHJcbiAqIC8vIGNyZWF0ZSBhIG5ldyBkZWxlZ2F0ZSBhbmQgcmVnaXN0ZXIgaXQgd2l0aCB0aGUgbmF0aXZlIGxheWVyXHJcbiAqIGxldCBkZWxlZ2F0ZSA9IHRoaXMuaWJlYWNvbi5EZWxlZ2F0ZSgpO1xyXG4gKlxyXG4gKiAvLyBTdWJzY3JpYmUgdG8gc29tZSBvZiB0aGUgZGVsZWdhdGUncyBldmVudCBoYW5kbGVyc1xyXG4gKiBkZWxlZ2F0ZS5kaWRSYW5nZUJlYWNvbnNJblJlZ2lvbigpXHJcbiAqICAgLnN1YnNjcmliZShcclxuICogICAgIGRhdGEgPT4gY29uc29sZS5sb2coJ2RpZFJhbmdlQmVhY29uc0luUmVnaW9uOiAnLCBkYXRhKSxcclxuICogICAgIGVycm9yID0+IGNvbnNvbGUuZXJyb3IoKVxyXG4gKiAgICk7XHJcbiAqIGRlbGVnYXRlLmRpZFN0YXJ0TW9uaXRvcmluZ0ZvclJlZ2lvbigpXHJcbiAqICAgLnN1YnNjcmliZShcclxuICogICAgIGRhdGEgPT4gY29uc29sZS5sb2coJ2RpZFN0YXJ0TW9uaXRvcmluZ0ZvclJlZ2lvbjogJywgZGF0YSksXHJcbiAqICAgICBlcnJvciA9PiBjb25zb2xlLmVycm9yKClcclxuICogICApO1xyXG4gKiBkZWxlZ2F0ZS5kaWRFbnRlclJlZ2lvbigpXHJcbiAqICAgLnN1YnNjcmliZShcclxuICogICAgIGRhdGEgPT4ge1xyXG4gKiAgICAgICBjb25zb2xlLmxvZygnZGlkRW50ZXJSZWdpb246ICcsIGRhdGEpO1xyXG4gKiAgICAgfVxyXG4gKiAgICk7XHJcbiAqXHJcbiAqIGxldCBiZWFjb25SZWdpb24gPSB0aGlzLmliZWFjb24uQmVhY29uUmVnaW9uKCdkZXNrQmVhY29uJywnRjc4MjZEQTYtQVNERi1BU0RGLTgwMjQtQkM1QjcxRTA4OTNFJyk7XHJcbiAqXHJcbiAqIHRoaXMuaWJlYWNvbi5zdGFydE1vbml0b3JpbmdGb3JSZWdpb24oYmVhY29uUmVnaW9uKVxyXG4gKiAgIC50aGVuKFxyXG4gKiAgICAgKCkgPT4gY29uc29sZS5sb2coJ05hdGl2ZSBsYXllciByZWNlaXZlZCB0aGUgcmVxdWVzdCB0byBtb25pdG9yaW5nJyksXHJcbiAqICAgICBlcnJvciA9PiBjb25zb2xlLmVycm9yKCdOYXRpdmUgbGF5ZXIgZmFpbGVkIHRvIGJlZ2luIG1vbml0b3Jpbmc6ICcsIGVycm9yKVxyXG4gKiAgICk7XHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBCZWFjb25cclxuICogQmVhY29uUmVnaW9uXHJcbiAqIENpcmN1bGFyUmVnaW9uXHJcbiAqIElCZWFjb25QbHVnaW5SZXN1bHRcclxuICogSUJlYWNvbkRlbGVnYXRlXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnSUJlYWNvbicsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4taWJlYWNvbicsXHJcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLmxvY2F0aW9uTWFuYWdlcicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9wZXRlcm1ldHovY29yZG92YS1wbHVnaW4taWJlYWNvbicsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIElCZWFjb24gZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogSW5zdGFuY2VzIG9mIHRoaXMgY2xhc3MgYXJlIGRlbGVnYXRlcyBiZXR3ZWVuIHRoZSB7QGxpbmsgTG9jYXRpb25NYW5hZ2VyfSBhbmRcclxuICAgKiB0aGUgY29kZSB0aGF0IGNvbnN1bWVzIHRoZSBtZXNzYWdlcyBnZW5lcmF0ZWQgb24gaW4gdGhlIG5hdGl2ZSBsYXllci5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtJQmVhY29uRGVsZWdhdGV9IEFuIGluc3RhbmNlIG9mIHRoZSB0eXBlIHtAdHlwZSBEZWxlZ2F0ZX0uXHJcbiAgICovXHJcbiAgQENvcmRvdmFDaGVjayh7IHN5bmM6IHRydWUgfSlcclxuICBEZWxlZ2F0ZSgpOiBJQmVhY29uRGVsZWdhdGUge1xyXG4gICAgY29uc3QgZGVsZWdhdGUgPSBuZXcgd2luZG93LmNvcmRvdmEucGx1Z2lucy5sb2NhdGlvbk1hbmFnZXIuRGVsZWdhdGUoKTtcclxuXHJcbiAgICBkZWxlZ2F0ZS5kaWRDaGFuZ2VBdXRob3JpemF0aW9uU3RhdHVzID0gKHBsdWdpblJlc3VsdD86IElCZWFjb25QbHVnaW5SZXN1bHQpID0+IHtcclxuICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPElCZWFjb25QbHVnaW5SZXN1bHQ+KChvYnNlcnZlcjogYW55KSA9PiB7XHJcbiAgICAgICAgY29uc3QgY2IgPSAoZGF0YTogSUJlYWNvblBsdWdpblJlc3VsdCkgPT4gb2JzZXJ2ZXIubmV4dChkYXRhKTtcclxuICAgICAgICByZXR1cm4gKGRlbGVnYXRlLmRpZENoYW5nZUF1dGhvcml6YXRpb25TdGF0dXMgPSBjYik7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBkZWxlZ2F0ZS5kaWREZXRlcm1pbmVTdGF0ZUZvclJlZ2lvbiA9IChwbHVnaW5SZXN1bHQ/OiBJQmVhY29uUGx1Z2luUmVzdWx0KSA9PiB7XHJcbiAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0Pigob2JzZXJ2ZXI6IGFueSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNiID0gKGRhdGE6IElCZWFjb25QbHVnaW5SZXN1bHQpID0+IG9ic2VydmVyLm5leHQoZGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIChkZWxlZ2F0ZS5kaWREZXRlcm1pbmVTdGF0ZUZvclJlZ2lvbiA9IGNiKTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGRlbGVnYXRlLmRpZEVudGVyUmVnaW9uID0gKHBsdWdpblJlc3VsdD86IElCZWFjb25QbHVnaW5SZXN1bHQpID0+IHtcclxuICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPElCZWFjb25QbHVnaW5SZXN1bHQ+KChvYnNlcnZlcjogYW55KSA9PiB7XHJcbiAgICAgICAgY29uc3QgY2IgPSAoZGF0YTogSUJlYWNvblBsdWdpblJlc3VsdCkgPT4gb2JzZXJ2ZXIubmV4dChkYXRhKTtcclxuICAgICAgICByZXR1cm4gKGRlbGVnYXRlLmRpZEVudGVyUmVnaW9uID0gY2IpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgZGVsZWdhdGUuZGlkRXhpdFJlZ2lvbiA9IChwbHVnaW5SZXN1bHQ/OiBJQmVhY29uUGx1Z2luUmVzdWx0KSA9PiB7XHJcbiAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0Pigob2JzZXJ2ZXI6IGFueSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNiID0gKGRhdGE6IElCZWFjb25QbHVnaW5SZXN1bHQpID0+IG9ic2VydmVyLm5leHQoZGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIChkZWxlZ2F0ZS5kaWRFeGl0UmVnaW9uID0gY2IpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgZGVsZWdhdGUuZGlkUmFuZ2VCZWFjb25zSW5SZWdpb24gPSAocGx1Z2luUmVzdWx0PzogSUJlYWNvblBsdWdpblJlc3VsdCkgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8SUJlYWNvblBsdWdpblJlc3VsdD4oKG9ic2VydmVyOiBhbnkpID0+IHtcclxuICAgICAgICBjb25zdCBjYiA9IChkYXRhOiBJQmVhY29uUGx1Z2luUmVzdWx0KSA9PiBvYnNlcnZlci5uZXh0KGRhdGEpO1xyXG4gICAgICAgIHJldHVybiAoZGVsZWdhdGUuZGlkUmFuZ2VCZWFjb25zSW5SZWdpb24gPSBjYik7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBkZWxlZ2F0ZS5kaWRTdGFydE1vbml0b3JpbmdGb3JSZWdpb24gPSAocGx1Z2luUmVzdWx0PzogSUJlYWNvblBsdWdpblJlc3VsdCkgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8SUJlYWNvblBsdWdpblJlc3VsdD4oKG9ic2VydmVyOiBhbnkpID0+IHtcclxuICAgICAgICBjb25zdCBjYiA9IChkYXRhOiBJQmVhY29uUGx1Z2luUmVzdWx0KSA9PiBvYnNlcnZlci5uZXh0KGRhdGEpO1xyXG4gICAgICAgIHJldHVybiAoZGVsZWdhdGUuZGlkU3RhcnRNb25pdG9yaW5nRm9yUmVnaW9uID0gY2IpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgZGVsZWdhdGUubW9uaXRvcmluZ0RpZEZhaWxGb3JSZWdpb25XaXRoRXJyb3IgPSAocGx1Z2luUmVzdWx0PzogSUJlYWNvblBsdWdpblJlc3VsdCkgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8SUJlYWNvblBsdWdpblJlc3VsdD4oKG9ic2VydmVyOiBhbnkpID0+IHtcclxuICAgICAgICBjb25zdCBjYiA9IChkYXRhOiBJQmVhY29uUGx1Z2luUmVzdWx0KSA9PiBvYnNlcnZlci5uZXh0KGRhdGEpO1xyXG4gICAgICAgIHJldHVybiAoZGVsZWdhdGUubW9uaXRvcmluZ0RpZEZhaWxGb3JSZWdpb25XaXRoRXJyb3IgPSBjYik7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBkZWxlZ2F0ZS5wZXJpcGhlcmFsTWFuYWdlckRpZFN0YXJ0QWR2ZXJ0aXNpbmcgPSAocGx1Z2luUmVzdWx0PzogSUJlYWNvblBsdWdpblJlc3VsdCkgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8SUJlYWNvblBsdWdpblJlc3VsdD4oKG9ic2VydmVyOiBhbnkpID0+IHtcclxuICAgICAgICBjb25zdCBjYiA9IChkYXRhOiBJQmVhY29uUGx1Z2luUmVzdWx0KSA9PiBvYnNlcnZlci5uZXh0KGRhdGEpO1xyXG4gICAgICAgIHJldHVybiAoZGVsZWdhdGUucGVyaXBoZXJhbE1hbmFnZXJEaWRTdGFydEFkdmVydGlzaW5nID0gY2IpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgZGVsZWdhdGUucGVyaXBoZXJhbE1hbmFnZXJEaWRVcGRhdGVTdGF0ZSA9IChwbHVnaW5SZXN1bHQ/OiBJQmVhY29uUGx1Z2luUmVzdWx0KSA9PiB7XHJcbiAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0Pigob2JzZXJ2ZXI6IGFueSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNiID0gKGRhdGE6IElCZWFjb25QbHVnaW5SZXN1bHQpID0+IG9ic2VydmVyLm5leHQoZGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIChkZWxlZ2F0ZS5wZXJpcGhlcmFsTWFuYWdlckRpZFVwZGF0ZVN0YXRlID0gY2IpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgd2luZG93LmNvcmRvdmEucGx1Z2lucy5sb2NhdGlvbk1hbmFnZXIuc2V0RGVsZWdhdGUoZGVsZWdhdGUpO1xyXG4gICAgcmV0dXJuIGRlbGVnYXRlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIG5ldyBCZWFjb25SZWdpb25cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZGVudGlmaWVyIEBzZWUge0NMUmVnaW9ufVxyXG4gICAqIEBwYXJhbSBpZGVudGlmZXJcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXVpZCBUaGUgcHJveGltaXR5IElEIG9mIHRoZSBiZWFjb24gYmVpbmcgdGFyZ2V0ZWQuXHJcbiAgICogVGhpcyB2YWx1ZSBtdXN0IG5vdCBiZSBibGFuayBub3IgaW52YWxpZCBhcyBhIFVVSUQuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1ham9yIFRoZSBtYWpvciB2YWx1ZSB0aGF0IHlvdSB1c2UgdG8gaWRlbnRpZnkgb25lIG9yIG1vcmUgYmVhY29ucy5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gbWlub3IgVGhlIG1pbm9yIHZhbHVlIHRoYXQgeW91IHVzZSB0byBpZGVudGlmeSBhIHNwZWNpZmljIGJlYWNvbi5cclxuICAgKiBAcGFyYW0ge0JPT0x9IG5vdGlmeUVudHJ5U3RhdGVPbkRpc3BsYXlcclxuICAgKiBAcmV0dXJucyB7QmVhY29uUmVnaW9ufSBSZXR1cm5zIHRoZSBCZWFjb25SZWdpb24gdGhhdCB3YXMgY3JlYXRlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhQ2hlY2soeyBzeW5jOiB0cnVlIH0pXHJcbiAgQmVhY29uUmVnaW9uKFxyXG4gICAgaWRlbnRpZmVyOiBzdHJpbmcsXHJcbiAgICB1dWlkOiBzdHJpbmcsXHJcbiAgICBtYWpvcj86IG51bWJlcixcclxuICAgIG1pbm9yPzogbnVtYmVyLFxyXG4gICAgbm90aWZ5RW50cnlTdGF0ZU9uRGlzcGxheT86IGJvb2xlYW5cclxuICApOiBCZWFjb25SZWdpb24ge1xyXG4gICAgcmV0dXJuIG5ldyB3aW5kb3cuY29yZG92YS5wbHVnaW5zLmxvY2F0aW9uTWFuYWdlci5CZWFjb25SZWdpb24oXHJcbiAgICAgIGlkZW50aWZlcixcclxuICAgICAgdXVpZCxcclxuICAgICAgbWFqb3IsXHJcbiAgICAgIG1pbm9yLFxyXG4gICAgICBub3RpZnlFbnRyeVN0YXRlT25EaXNwbGF5XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHJldHVybnMge0lCZWFjb25EZWxlZ2F0ZX0gUmV0dXJucyB0aGUgSUJlYWNvbkRlbGVnYXRlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldERlbGVnYXRlKCk6IElCZWFjb25EZWxlZ2F0ZSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0lCZWFjb25EZWxlZ2F0ZX0gZGVsZWdhdGUgQW4gaW5zdGFuY2Ugb2YgYSBkZWxlZ2F0ZSB0byByZWdpc3RlciB3aXRoIHRoZSBuYXRpdmUgbGF5ZXIuXHJcbiAgICogQHJldHVybnMge0lCZWFjb25EZWxlZ2F0ZX0gUmV0dXJucyB0aGUgSUJlYWNvbkRlbGVnYXRlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldERlbGVnYXRlKGRlbGVnYXRlOiBJQmVhY29uRGVsZWdhdGUpOiBJQmVhY29uRGVsZWdhdGUge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2lnbmFscyB0aGUgbmF0aXZlIGxheWVyIHRoYXQgdGhlIGNsaWVudCBzaWRlIGlzIHJlYWR5IHRvIGNvbnN1bWUgbWVzc2FnZXMuXHJcbiAgICogUmVhZGluZXNzIGhlcmUgbWVhbnMgdGhhdCBpdCBoYXMgYSB7SUJlYWNvbkRlbGVnYXRlfSBzZXQgYnkgdGhlIGNvbnN1bWVyIGphdmFzY3JpcHRcclxuICAgKiBjb2RlLlxyXG4gICAqXHJcbiAgICogVGhlIHtMb2NhdGlvbk1hbmFnZXIuc2V0RGVsZWdhdGUoKX0gd2lsbCBpbXBsaWNpdGx5IGNhbGwgdGhpcyBtZXRob2QgYXMgd2VsbCxcclxuICAgKiB0aGVyZWZvcmUgdGhlIG9ubHkgY2FzZSB3aGVuIHlvdSBoYXZlIHRvIGNhbGwgdGhpcyBtYW51YWxseSBpcyBpZiB5b3UgZG9uJ3RcclxuICAgKiB3aXNoIHRvIHNwZWNpZnkgYSB7SUJlYWNvbkRlbGVnYXRlfSBvZiB5b3Vycy5cclxuICAgKlxyXG4gICAqIFRoZSBwdXJwb3NlIG9mIHRoaXMgc2lnbmFsaW5nIG1lY2hhbmlzbSBpcyB0byBtYWtlIHRoZSBldmVudHMgd29yayB3aGVuIHRoZVxyXG4gICAqIGFwcCBpcyBiZWluZyB3b2tlbiB1cCBieSB0aGUgT3BlcmF0aW5nIFN5c3RlbSB0byBnaXZlIGl0IGEgY2hhbmNlIHRvIGhhbmRsZVxyXG4gICAqIHJlZ2lvbiBtb25pdG9yaW5nIGV2ZW50cyBmb3IgZXhhbXBsZS5cclxuICAgKlxyXG4gICAqIElmIHlvdSBkb24ndCBzZXQgYSB7SUJlYWNvbkRlbGVnYXRlfSBhbmQgZG9uJ3QgY2FsbCB0aGlzIG1ldGhvZCBtYW51YWxseSwgYW4gZXJyb3JcclxuICAgKiBtZXNzYWdlIGdldCBlbWl0dGVkIGluIHRoZSBuYXRpdmUgcnVudGltZSBhbmQgdGhlIERPTSBhcyB3ZWxsIGFmdGVyIGEgY2VydGFpblxyXG4gICAqIHBlcmlvZCBvZiB0aW1lLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlIHdoaWNoIGlzIHJlc29sdmVkIGFzIHNvb24gYXMgdGhlXHJcbiAgICogbmF0aXZlIGxheWVyIGFja25vd2xlZGdlZCB0aGUgcmVxdWVzdCBhbmQgc3RhcnRlZCB0byBzZW5kIGV2ZW50cy5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxyXG4gIG9uRG9tRGVsZWdhdGVSZWFkeSgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERldGVybWluZXMgaWYgYmx1ZXRvb3RoIGlzIHN3aXRjaGVkIG9uLCBhY2NvcmRpbmcgdG8gdGhlIG5hdGl2ZSBsYXllci5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aGljaCBpcyByZXNvbHZlZCB3aXRoIGEge0Jvb2xlYW59XHJcbiAgICogaW5kaWNhdGluZyB3aGV0aGVyIGJsdWV0b290aCBpcyBhY3RpdmUuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcclxuICBpc0JsdWV0b290aEVuYWJsZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFbmFibGVzIEJsdWV0b290aCB1c2luZyB0aGUgbmF0aXZlIExheWVyLiAoQU5EUk9JRCBPTkxZKVxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlIHdoaWNoIGlzIHJlc29sdmVkIHdoZW4gQmx1ZXRvb3RoXHJcbiAgICogY291bGQgYmUgZW5hYmxlZC4gSWYgbm90LCB0aGUgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIHdpdGggYW4gZXJyb3IuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcclxuICBlbmFibGVCbHVldG9vdGgoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEaXNhYmxlcyBCbHVldG9vdGggdXNpbmcgdGhlIG5hdGl2ZSBMYXllci4gKEFORFJPSUQgT05MWSlcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aGljaCBpcyByZXNvbHZlZCB3aGVuIEJsdWV0b290aFxyXG4gICAqIGNvdWxkIGJlIGVuYWJsZWQuIElmIG5vdCwgdGhlIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoIGFuIGVycm9yLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXHJcbiAgZGlzYWJsZUJsdWV0b290aCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0YXJ0IG1vbml0b3JpbmcgdGhlIHNwZWNpZmllZCByZWdpb24uXHJcbiAgICpcclxuICAgKiBJZiBhIHJlZ2lvbiBvZiB0aGUgc2FtZSB0eXBlIHdpdGggdGhlIHNhbWUgaWRlbnRpZmllciBpcyBhbHJlYWR5IGJlaW5nXHJcbiAgICogbW9uaXRvcmVkIGZvciB0aGlzIGFwcGxpY2F0aW9uLFxyXG4gICAqIGl0IHdpbGwgYmUgcmVtb3ZlZCBmcm9tIG1vbml0b3JpbmcuIEZvciBjaXJjdWxhciByZWdpb25zLCB0aGUgcmVnaW9uXHJcbiAgICogbW9uaXRvcmluZyBzZXJ2aWNlIHdpbGwgcHJpb3JpdGl6ZVxyXG4gICAqIHJlZ2lvbnMgYnkgdGhlaXIgc2l6ZSwgZmF2b3Jpbmcgc21hbGxlciByZWdpb25zIG92ZXIgbGFyZ2VyIHJlZ2lvbnMuXHJcbiAgICpcclxuICAgKiBUaGlzIGlzIGRvbmUgYXN5bmNocm9ub3VzbHkgYW5kIG1heSBub3QgYmUgaW1tZWRpYXRlbHkgcmVmbGVjdGVkIGluIG1vbml0b3JlZFJlZ2lvbnMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1JlZ2lvbn0gcmVnaW9uIEFuIGluc3RhbmNlIG9mIHtSZWdpb259IHdoaWNoIHdpbGwgYmUgbW9uaXRvcmVkXHJcbiAgICogYnkgdGhlIG9wZXJhdGluZyBzeXN0ZW0uXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWQgYXMgc29vbiBhcyB0aGVcclxuICAgKiBuYXRpdmUgbGF5ZXIgYWNrbm93bGVkZ2VkIHRoZSBkaXNwYXRjaCBvZiB0aGUgbW9uaXRvcmluZyByZXF1ZXN0LlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXHJcbiAgc3RhcnRNb25pdG9yaW5nRm9yUmVnaW9uKHJlZ2lvbjogUmVnaW9uKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0b3AgbW9uaXRvcmluZyB0aGUgc3BlY2lmaWVkIHJlZ2lvbi4gIEl0IGlzIHZhbGlkIHRvIGNhbGxcclxuICAgKiBzdG9wTW9uaXRvcmluZ0ZvclJlZ2lvbjogZm9yIGEgcmVnaW9uIHRoYXQgd2FzIHJlZ2lzdGVyZWQgZm9yIG1vbml0b3JpbmdcclxuICAgKiB3aXRoIGEgZGlmZmVyZW50IGxvY2F0aW9uIG1hbmFnZXIgb2JqZWN0LCBkdXJpbmcgdGhpcyBvciBwcmV2aW91c1xyXG4gICAqIGxhdW5jaGVzIG9mIHlvdXIgYXBwbGljYXRpb24uXHJcbiAgICpcclxuICAgKiBUaGlzIGlzIGRvbmUgYXN5bmNocm9ub3VzbHkgYW5kIG1heSBub3QgYmUgaW1tZWRpYXRlbHkgcmVmbGVjdGVkIGluIG1vbml0b3JlZFJlZ2lvbnMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1JlZ2lvbn0gcmVnaW9uIEFuIGluc3RhbmNlIG9mIHtSZWdpb259IHdoaWNoIHdpbGwgYmUgbW9uaXRvcmVkXHJcbiAgICogYnkgdGhlIG9wZXJhdGluZyBzeXN0ZW0uXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlIHdoaWNoIGlzIHJlc29sdmVkIGFzIHNvb24gYXMgdGhlXHJcbiAgICogbmF0aXZlIGxheWVyIGFja25vd2xlZGdlZCB0aGUgZGlzcGF0Y2ggb2YgdGhlIHJlcXVlc3QgdG8gc3RvcCBtb25pdG9yaW5nLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXHJcbiAgc3RvcE1vbml0b3JpbmdGb3JSZWdpb24ocmVnaW9uOiBSZWdpb24pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlcXVlc3Qgc3RhdGUgdGhlIGZvciBzcGVjaWZpZWQgcmVnaW9uLiBXaGVuIHJlc3VsdCBpcyByZWFkeVxyXG4gICAqIGRpZERldGVybWluZVN0YXRlRm9yUmVnaW9uIGlzIHRyaWdnZXJlZC4gVGhpcyBjYW4gYmUgYW55IHJlZ2lvbixcclxuICAgKiBhbHNvIHRob3NlIHdoaWNoIGlzIG5vdCBjdXJyZW50bHkgbW9uaXRvcmVkLlxyXG4gICAqXHJcbiAgICogVGhpcyBpcyBkb25lIGFzeW5jaHJvbm91c2x5IGFuZCBtYXkgbm90IGJlIGltbWVkaWF0ZWx5IHJlZmxlY3RlZCBpbiBtb25pdG9yZWRSZWdpb25zLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtSZWdpb259IHJlZ2lvbiBBbiBpbnN0YW5jZSBvZiB7UmVnaW9ufSB3aGljaCB3aWxsIGJlIG1vbml0b3JlZFxyXG4gICAqIGJ5IHRoZSBvcGVyYXRpbmcgc3lzdGVtLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aGljaCBpcyByZXNvbHZlZCBhcyBzb29uIGFzIHRoZVxyXG4gICAqIG5hdGl2ZSBsYXllciBhY2tub3dsZWRnZWQgdGhlIGRpc3BhdGNoIG9mIHRoZSByZXF1ZXN0IHRvIHN0b3AgbW9uaXRvcmluZy5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxyXG4gIHJlcXVlc3RTdGF0ZUZvclJlZ2lvbihyZWdpb246IFJlZ2lvbik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RhcnQgcmFuZ2luZyB0aGUgc3BlY2lmaWVkIGJlYWNvbiByZWdpb24uXHJcbiAgICpcclxuICAgKiBJZiBhIHJlZ2lvbiBvZiB0aGUgc2FtZSB0eXBlIHdpdGggdGhlIHNhbWUgaWRlbnRpZmllciBpcyBhbHJlYWR5IGJlaW5nXHJcbiAgICogbW9uaXRvcmVkIGZvciB0aGlzIGFwcGxpY2F0aW9uLCBpdCB3aWxsIGJlIHJlbW92ZWQgZnJvbSBtb25pdG9yaW5nLlxyXG4gICAqXHJcbiAgICogVGhpcyBpcyBkb25lIGFzeW5jaHJvbm91c2x5IGFuZCBtYXkgbm90IGJlIGltbWVkaWF0ZWx5IHJlZmxlY3RlZCBpbiByYW5nZWRSZWdpb25zLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtSZWdpb259IHJlZ2lvbiBBbiBpbnN0YW5jZSBvZiB7QmVhY29uUmVnaW9ufSB3aGljaCB3aWxsIGJlIG1vbml0b3JlZFxyXG4gICAqIGJ5IHRoZSBvcGVyYXRpbmcgc3lzdGVtLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aGljaCBpcyByZXNvbHZlZCBhcyBzb29uIGFzIHRoZVxyXG4gICAqIG5hdGl2ZSBsYXllciBhY2tub3dsZWRnZWQgdGhlIGRpc3BhdGNoIG9mIHRoZSBtb25pdG9yaW5nIHJlcXVlc3QuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcclxuICBzdGFydFJhbmdpbmdCZWFjb25zSW5SZWdpb24ocmVnaW9uOiBSZWdpb24pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0b3AgcmFuZ2luZyB0aGUgc3BlY2lmaWVkIHJlZ2lvbi4gIEl0IGlzIHZhbGlkIHRvIGNhbGxcclxuICAgKiBzdG9wTW9uaXRvcmluZ0ZvclJlZ2lvbjogZm9yIGEgcmVnaW9uIHRoYXQgd2FzIHJlZ2lzdGVyZWQgZm9yIHJhbmdpbmdcclxuICAgKiB3aXRoIGEgZGlmZmVyZW50IGxvY2F0aW9uIG1hbmFnZXIgb2JqZWN0LCBkdXJpbmcgdGhpcyBvciBwcmV2aW91c1xyXG4gICAqIGxhdW5jaGVzIG9mIHlvdXIgYXBwbGljYXRpb24uXHJcbiAgICpcclxuICAgKiBUaGlzIGlzIGRvbmUgYXN5bmNocm9ub3VzbHkgYW5kIG1heSBub3QgYmUgaW1tZWRpYXRlbHkgcmVmbGVjdGVkIGluIHJhbmdlZFJlZ2lvbnMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1JlZ2lvbn0gcmVnaW9uIEFuIGluc3RhbmNlIG9mIHtCZWFjb25SZWdpb259IHdoaWNoIHdpbGwgYmUgbW9uaXRvcmVkXHJcbiAgICogYnkgdGhlIG9wZXJhdGluZyBzeXN0ZW0uXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlIHdoaWNoIGlzIHJlc29sdmVkIGFzIHNvb24gYXMgdGhlXHJcbiAgICogbmF0aXZlIGxheWVyIGFja25vd2xlZGdlZCB0aGUgZGlzcGF0Y2ggb2YgdGhlIHJlcXVlc3QgdG8gc3RvcCBtb25pdG9yaW5nLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXHJcbiAgc3RvcFJhbmdpbmdCZWFjb25zSW5SZWdpb24ocmVnaW9uOiBSZWdpb24pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFF1ZXJpZXMgdGhlIG5hdGl2ZSBsYXllciB0byBkZXRlcm1pbmUgdGhlIGN1cnJlbnQgYXV0aG9yaXphdGlvbiBpbiBlZmZlY3QuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxJQmVhY29uUGx1Z2luUmVzdWx0Pn0gUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWQgd2l0aCB0aGVcclxuICAgKiByZXF1ZXN0ZWQgYXV0aG9yaXphdGlvbiBzdGF0dXMuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcclxuICBnZXRBdXRob3JpemF0aW9uU3RhdHVzKCk6IFByb21pc2U8SUJlYWNvblBsdWdpblJlc3VsdD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRm9yIGlPUyA4IGFuZCBhYm92ZSBvbmx5LiBUaGUgcGVybWlzc2lvbiBtb2RlbCBoYXMgY2hhbmdlZCBieSBBcHBsZSBpbiBpT1MgOCwgbWFraW5nIGl0IG5lY2Vzc2FyeSBmb3IgYXBwcyB0b1xyXG4gICAqIGV4cGxpY2l0bHkgcmVxdWVzdCBwZXJtaXNzaW9ucyB2aWEgbWV0aG9kcyBsaWtlIHRoZXNlOlxyXG4gICAqIDxhIGhyZWY9XCJodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9wcmVyZWxlYXNlL2lPUy9kb2N1bWVudGF0aW9uL0NvcmVMb2NhdGlvbi9SZWZlcmVuY2UvQ0xMb2NhdGlvbk1hbmFnZXJfQ2xhc3MvaW5kZXguaHRtbCMvL2FwcGxlX3JlZi9vY2MvaW5zdG0vQ0xMb2NhdGlvbk1hbmFnZXIvcmVxdWVzdFdoZW5JblVzZUF1dGhvcml6YXRpb25cIj5yZXF1ZXN0V2hlbkluVXNlQXV0aG9yaXphdGlvbjwvYT5cclxuICAgKiA8YSBocmVmPVwiaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvcHJlcmVsZWFzZS9pT1MvZG9jdW1lbnRhdGlvbi9Db3JlTG9jYXRpb24vUmVmZXJlbmNlL0NMTG9jYXRpb25NYW5hZ2VyX0NsYXNzL2luZGV4Lmh0bWwjLy9hcHBsZV9yZWYvb2NjL2luc3RtL0NMTG9jYXRpb25NYW5hZ2VyL3JlcXVlc3RBbHdheXNBdXRob3JpemF0aW9uXCI+cmVxdWVzdEFsd2F5c0F1dGhvcml6YXRpb248L2E+XHJcbiAgICpcclxuICAgKiBJZiB5b3UgYXJlIHVzaW5nIHRoaXMgcGx1Z2luIG9uIEFuZHJvaWQgZGV2aWNlcyBvbmx5LCB5b3Ugd2lsbCBuZXZlciBoYXZlIHRvIHVzZSB0aGlzLCBub3Ige0Bjb2RlIHJlcXVlc3RBbHdheXNBdXRob3JpemF0aW9ufVxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiB0aGUgcmVxdWVzdCBkaWFsb2cgaXMgc2hvd24uXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcclxuICByZXF1ZXN0V2hlbkluVXNlQXV0aG9yaXphdGlvbigpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNlZSB0aGUgZG9jdW1lbnRhdGlvbiBvZiB7QGNvZGUgcmVxdWVzdFdoZW5JblVzZUF1dGhvcml6YXRpb259IGZvciBmdXJ0aGVyIGRldGFpbHMuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWQgd2hlbiB0aGUgbmF0aXZlIGxheWVyXHJcbiAgICogc2hvd3MgdGhlIHJlcXVlc3QgZGlhbG9nLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXHJcbiAgcmVxdWVzdEFsd2F5c0F1dGhvcml6YXRpb24oKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFJlZ2lvbltdPn0gUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWQgd2l0aCBhbiB7QXJyYXl9XHJcbiAgICogb2Yge1JlZ2lvbn0gaW5zdGFuY2VzIHRoYXQgYXJlIGJlaW5nIG1vbml0b3JlZCBieSB0aGUgbmF0aXZlIGxheWVyLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXHJcbiAgZ2V0TW9uaXRvcmVkUmVnaW9ucygpOiBQcm9taXNlPFJlZ2lvbltdPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFJlZ2lvbltdPn0gUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWQgd2l0aCBhbiB7QXJyYXl9XHJcbiAgICogb2Yge1JlZ2lvbn0gaW5zdGFuY2VzIHRoYXQgYXJlIGJlaW5nIHJhbmdlZCBieSB0aGUgbmF0aXZlIGxheWVyLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXHJcbiAgZ2V0UmFuZ2VkUmVnaW9ucygpOiBQcm9taXNlPFJlZ2lvbltdPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZXRlcm1pbmVzIGlmIHJhbmdpbmcgaXMgYXZhaWxhYmxlIG9yIG5vdCwgYWNjb3JkaW5nIHRvIHRoZSBuYXRpdmUgbGF5ZXIuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWQgd2l0aCBhIHtCb29sZWFufVxyXG4gICAqIGluZGljYXRpbmcgd2hldGhlciByYW5naW5nIGlzIGF2YWlsYWJsZSBvciBub3QuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcclxuICBpc1JhbmdpbmdBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZXRlcm1pbmVzIGlmIHJlZ2lvbiB0eXBlIGlzIHN1cHBvcnRlZCBvciBub3QsIGFjY29yZGluZyB0byB0aGUgbmF0aXZlIGxheWVyLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtSZWdpb259IHJlZ2lvbiBBbiBpbnN0YW5jZSBvZiB7UmVnaW9ufSB3aGljaCB3aWxsIGJlIGNoZWNrZWRcclxuICAgKiBieSB0aGUgb3BlcmF0aW5nIHN5c3RlbS5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWQgd2l0aCBhIHtCb29sZWFufVxyXG4gICAqIGluZGljYXRpbmcgd2hldGhlciB0aGUgcmVnaW9uIHR5cGUgaXMgc3VwcG9ydGVkIG9yIG5vdC5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxyXG4gIGlzTW9uaXRvcmluZ0F2YWlsYWJsZUZvckNsYXNzKHJlZ2lvbjogUmVnaW9uKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdGFydCBhZHZlcnRpc2luZyB0aGUgc3BlY2lmaWVkIHJlZ2lvbi5cclxuICAgKlxyXG4gICAqIElmIGEgcmVnaW9uIGEgZGlmZmVyZW50IGlkZW50aWZpZXIgaXMgYWxyZWFkeSBiZWluZyBhZHZlcnRpc2VkIGZvclxyXG4gICAqIHRoaXMgYXBwbGljYXRpb24sIGl0IHdpbGwgYmUgcmVwbGFjZWQgd2l0aCB0aGUgbmV3IGlkZW50aWZpZXIuXHJcbiAgICpcclxuICAgKiBUaGlzIGNhbGwgd2lsbCBhY2NlcHQgYSB2YWxpZCBiZWFjb24gZXZlbiB3aGVuIG5vIEJsdWVUb290aCBpcyBhdmFpbGFibGUsXHJcbiAgICogYW5kIHdpbGwgc3RhcnQgd2hlbiBCbHVlVG9vdGggaXMgcG93ZXJlZCBvbi4gU2VlIHtJQmVhY29uRGVsZWdhdGUufVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtSZWdpb259IHJlZ2lvbiBBbiBpbnN0YW5jZSBvZiB7UmVnaW9ufSB3aGljaCB3aWxsIGJlIGFkdmVydGlzZWRcclxuICAgKiBieSB0aGUgb3BlcmF0aW5nIHN5c3RlbS5cclxuICAgKiBAcGFyYW0ge0ludGVnZXJ9IG1lYXN1cmVkUG93ZXI6IE9wdGlvbmFsIHBhcmFtZXRlciwgaWYgbGVmdCBlbXB0eSwgdGhlIGRldmljZSB3aWxsXHJcbiAgICogdXNlIGl0J3Mgb3duIGRlZmF1bHQgdmFsdWUuXHJcbiAgICogQHBhcmFtIG1lYXN1cmVkUG93ZXJcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWQgYXMgc29vbiBhcyB0aGVcclxuICAgKiBuYXRpdmUgbGF5ZXIgYWNrbm93bGVkZ2VkIHRoZSBkaXNwYXRjaCBvZiB0aGUgYWR2ZXJ0aXNpbmcgcmVxdWVzdC5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxyXG4gIHN0YXJ0QWR2ZXJ0aXNpbmcocmVnaW9uOiBSZWdpb24sIG1lYXN1cmVkUG93ZXI/OiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0b3AgYWR2ZXJ0aXNpbmcgYXMgYSBiZWFjb24uXHJcbiAgICpcclxuICAgKiBUaGlzIGlzIGRvbmUgYXN5bmNocm9ub3VzbHkgYW5kIG1heSBub3QgYmUgaW1tZWRpYXRlbHkgcmVmbGVjdGVkIGluIGlzQWR2ZXJ0aXNpbmcuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gcmVnaW9uXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlIHdoaWNoIGlzIHJlc29sdmVkIGFzIHNvb24gYXMgdGhlXHJcbiAgICogbmF0aXZlIGxheWVyIGFja25vd2xlZGdlZCB0aGUgZGlzcGF0Y2ggb2YgdGhlIHJlcXVlc3QgdG8gc3RvcCBhZHZlcnRpc2luZy5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxyXG4gIHN0b3BBZHZlcnRpc2luZyhyZWdpb246IFJlZ2lvbik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGV0ZXJtaW5lcyBpZiBhZHZlcnRpc2luZyBpcyBhdmFpbGFibGUgb3Igbm90LCBhY2NvcmRpbmcgdG8gdGhlIG5hdGl2ZSBsYXllci5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aGljaCBpcyByZXNvbHZlZCB3aXRoIGEge0Jvb2xlYW59XHJcbiAgICogaW5kaWNhdGluZyB3aGV0aGVyIGFkdmVydGlzaW5nIGlzIGF2YWlsYWJsZSBvciBub3QuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcclxuICBpc0FkdmVydGlzaW5nQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGV0ZXJtaW5lcyBpZiBhZHZlcnRpc2luZyBpcyBjdXJyZW50bHkgYWN0aXZlLCBhY2NvcmRpbmcgdG8gdGhlIG5hdGl2ZSBsYXllci5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aGljaCBpcyByZXNvbHZlZCB3aXRoIGEge0Jvb2xlYW59XHJcbiAgICogaW5kaWNhdGluZyB3aGV0aGVyIGFkdmVydGlzaW5nIGlzIGFjdGl2ZS5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxyXG4gIGlzQWR2ZXJ0aXNpbmcoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEaXNhYmxlcyBkZWJ1ZyBsb2dnaW5nIGluIHRoZSBuYXRpdmUgbGF5ZXIuIFVzZSB0aGlzIG1ldGhvZCBpZiB5b3Ugd2FudFxyXG4gICAqIHRvIHByZXZlbnQgdGhpcyBwbHVnaW4gZnJvbSB3cml0aW5nIHRvIHRoZSBkZXZpY2UgbG9ncy5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aGljaCBpcyByZXNvbHZlZCBhcyBzb29uIGFzIHRoZVxyXG4gICAqIG5hdGl2ZSBsYXllciBoYXMgc2V0IHRoZSBsb2dnaW5nIGxldmVsIGFjY29yZGluZ2x5LlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXHJcbiAgZGlzYWJsZURlYnVnTG9ncygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEVuYWJsZXMgdGhlIHBvc3Rpbmcgb2YgZGVidWcgbm90aWZpY2F0aW9ucyBpbiB0aGUgbmF0aXZlIGxheWVyLiBVc2UgdGhpcyBtZXRob2QgaWYgeW91IHdhbnRcclxuICAgKiB0byBhbGxvdyB0aGUgcGx1Z2luIHRoZSBwb3N0aW5nIGxvY2FsIG5vdGlmaWNhdGlvbnMuXHJcbiAgICogVGhpcyBjYW4gYmUgdmVyeSBoZWxwZnVsIHdoZW4gZGVidWdnaW5nIGhvdyB0byBhcHBzIGJlaGF2ZSB3aGVuIGxhdW5jaGVkIGludG8gdGhlIGJhY2tncm91bmQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWQgYXMgc29vbiBhcyB0aGVcclxuICAgKiBuYXRpdmUgbGF5ZXIgaGFzIHNldCB0aGUgZmxhZyB0byBlbmFibGVkLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXHJcbiAgZW5hYmxlRGVidWdOb3RpZmljYXRpb25zKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGlzYWJsZXMgdGhlIHBvc3Rpbmcgb2YgZGVidWcgbm90aWZpY2F0aW9ucyBpbiB0aGUgbmF0aXZlIGxheWVyLiBVc2UgdGhpcyBtZXRob2QgaWYgeW91IHdhbnRcclxuICAgKiB0byBwcmV2ZW50IHRoZSBwbHVnaW4gZnJvbSBwb3N0aW5nIGxvY2FsIG5vdGlmaWNhdGlvbnMuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWQgYXMgc29vbiBhcyB0aGVcclxuICAgKiBuYXRpdmUgbGF5ZXIgaGFzIHNldCB0aGUgZmxhZyB0byBkaXNhYmxlZC5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxyXG4gIGRpc2FibGVEZWJ1Z05vdGlmaWNhdGlvbnMoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFbmFibGVzIGRlYnVnIGxvZ2dpbmcgaW4gdGhlIG5hdGl2ZSBsYXllci4gVXNlIHRoaXMgbWV0aG9kIGlmIHlvdSB3YW50XHJcbiAgICogYSBkZWJ1ZyB0aGUgaW5uZXIgd29ya2luZ3Mgb2YgdGhpcyBwbHVnaW4uXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWQgYXMgc29vbiBhcyB0aGVcclxuICAgKiBuYXRpdmUgbGF5ZXIgaGFzIHNldCB0aGUgbG9nZ2luZyBsZXZlbCBhY2NvcmRpbmdseS5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxyXG4gIGVuYWJsZURlYnVnTG9ncygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFwcGVuZHMgdGhlIHByb3ZpZGVkIFttZXNzYWdlXSB0byB0aGUgZGV2aWNlIGxvZ3MuXHJcbiAgICogTm90ZTogSWYgZGVidWcgbG9nZ2luZyBpcyB0dXJuZWQgb2ZmLCB0aGlzIHdvbid0IGRvIGFueXRoaW5nLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gYXBwZW5kIHRvIHRoZSBkZXZpY2UgbG9ncy5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWQgd2l0aCB0aGUgbG9nXHJcbiAgICogbWVzc2FnZSByZWNlaXZlZCBieSB0aGUgbmF0aXZlIGxheWVyIGZvciBhcHBlbmRpbmcuIFRoZSByZXR1cm5lZCBtZXNzYWdlXHJcbiAgICogaXMgZXhwZWN0ZWQgdG8gYmUgZXF1aXZhbGVudCB0byB0aGUgb25lIHByb3ZpZGVkIGluIHRoZSBvcmlnaW5hbCBjYWxsLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXHJcbiAgYXBwZW5kVG9EZXZpY2VMb2cobWVzc2FnZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==