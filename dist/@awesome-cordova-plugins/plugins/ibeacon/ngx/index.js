import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova, checkAvailability } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var IBeacon = /** @class */ (function (_super) {
    __extends(IBeacon, _super);
    function IBeacon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IBeacon.prototype.Delegate = function () {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                var delegate = new window.cordova.plugins.locationManager.Delegate();
                delegate.didChangeAuthorizationStatus = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didChangeAuthorizationStatus = cb);
                    });
                };
                delegate.didDetermineStateForRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didDetermineStateForRegion = cb);
                    });
                };
                delegate.didEnterRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didEnterRegion = cb);
                    });
                };
                delegate.didExitRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didExitRegion = cb);
                    });
                };
                delegate.didRangeBeaconsInRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didRangeBeaconsInRegion = cb);
                    });
                };
                delegate.didStartMonitoringForRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didStartMonitoringForRegion = cb);
                    });
                };
                delegate.monitoringDidFailForRegionWithError = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.monitoringDidFailForRegionWithError = cb);
                    });
                };
                delegate.peripheralManagerDidStartAdvertising = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.peripheralManagerDidStartAdvertising = cb);
                    });
                };
                delegate.peripheralManagerDidUpdateState = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.peripheralManagerDidUpdateState = cb);
                    });
                };
                window.cordova.plugins.locationManager.setDelegate(delegate);
                return delegate;
            }
        })();
    };
    IBeacon.prototype.BeaconRegion = function (identifer, uuid, major, minor, notifyEntryStateOnDisplay) {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return new window.cordova.plugins.locationManager.BeaconRegion(identifer, uuid, major, minor, notifyEntryStateOnDisplay);
            }
        })();
    };
    IBeacon.prototype.getDelegate = function () { return cordova(this, "getDelegate", {}, arguments); };
    IBeacon.prototype.setDelegate = function (delegate) { return cordova(this, "setDelegate", {}, arguments); };
    IBeacon.prototype.onDomDelegateReady = function () { return cordova(this, "onDomDelegateReady", { "otherPromise": true }, arguments); };
    IBeacon.prototype.isBluetoothEnabled = function () { return cordova(this, "isBluetoothEnabled", { "otherPromise": true }, arguments); };
    IBeacon.prototype.enableBluetooth = function () { return cordova(this, "enableBluetooth", { "otherPromise": true }, arguments); };
    IBeacon.prototype.disableBluetooth = function () { return cordova(this, "disableBluetooth", { "otherPromise": true }, arguments); };
    IBeacon.prototype.startMonitoringForRegion = function (region) { return cordova(this, "startMonitoringForRegion", { "otherPromise": true }, arguments); };
    IBeacon.prototype.stopMonitoringForRegion = function (region) { return cordova(this, "stopMonitoringForRegion", { "otherPromise": true }, arguments); };
    IBeacon.prototype.requestStateForRegion = function (region) { return cordova(this, "requestStateForRegion", { "otherPromise": true }, arguments); };
    IBeacon.prototype.startRangingBeaconsInRegion = function (region) { return cordova(this, "startRangingBeaconsInRegion", { "otherPromise": true }, arguments); };
    IBeacon.prototype.stopRangingBeaconsInRegion = function (region) { return cordova(this, "stopRangingBeaconsInRegion", { "otherPromise": true }, arguments); };
    IBeacon.prototype.getAuthorizationStatus = function () { return cordova(this, "getAuthorizationStatus", { "otherPromise": true }, arguments); };
    IBeacon.prototype.requestWhenInUseAuthorization = function () { return cordova(this, "requestWhenInUseAuthorization", { "otherPromise": true }, arguments); };
    IBeacon.prototype.requestAlwaysAuthorization = function () { return cordova(this, "requestAlwaysAuthorization", { "otherPromise": true }, arguments); };
    IBeacon.prototype.getMonitoredRegions = function () { return cordova(this, "getMonitoredRegions", { "otherPromise": true }, arguments); };
    IBeacon.prototype.getRangedRegions = function () { return cordova(this, "getRangedRegions", { "otherPromise": true }, arguments); };
    IBeacon.prototype.isRangingAvailable = function () { return cordova(this, "isRangingAvailable", { "otherPromise": true }, arguments); };
    IBeacon.prototype.isMonitoringAvailableForClass = function (region) { return cordova(this, "isMonitoringAvailableForClass", { "otherPromise": true }, arguments); };
    IBeacon.prototype.startAdvertising = function (region, measuredPower) { return cordova(this, "startAdvertising", { "otherPromise": true }, arguments); };
    IBeacon.prototype.stopAdvertising = function (region) { return cordova(this, "stopAdvertising", { "otherPromise": true }, arguments); };
    IBeacon.prototype.isAdvertisingAvailable = function () { return cordova(this, "isAdvertisingAvailable", { "otherPromise": true }, arguments); };
    IBeacon.prototype.isAdvertising = function () { return cordova(this, "isAdvertising", { "otherPromise": true }, arguments); };
    IBeacon.prototype.disableDebugLogs = function () { return cordova(this, "disableDebugLogs", { "otherPromise": true }, arguments); };
    IBeacon.prototype.enableDebugNotifications = function () { return cordova(this, "enableDebugNotifications", { "otherPromise": true }, arguments); };
    IBeacon.prototype.disableDebugNotifications = function () { return cordova(this, "disableDebugNotifications", { "otherPromise": true }, arguments); };
    IBeacon.prototype.enableDebugLogs = function () { return cordova(this, "enableDebugLogs", { "otherPromise": true }, arguments); };
    IBeacon.prototype.appendToDeviceLog = function (message) { return cordova(this, "appendToDeviceLog", { "otherPromise": true }, arguments); };
    IBeacon.pluginName = "IBeacon";
    IBeacon.plugin = "cordova-plugin-ibeacon";
    IBeacon.pluginRef = "cordova.plugins.locationManager";
    IBeacon.repo = "https://github.com/petermetz/cordova-plugin-ibeacon";
    IBeacon.platforms = ["Android", "iOS"];
    IBeacon.decorators = [
        { type: Injectable }
    ];
    return IBeacon;
}(AwesomeCordovaNativePlugin));
export { IBeacon };
//# sourceMappingURL=data:application/json;base64,