var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var BarcodeScannerOriginal = /** @class */ (function (_super) {
    __extends(BarcodeScannerOriginal, _super);
    function BarcodeScannerOriginal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.Encode = {
            TEXT_TYPE: 'TEXT_TYPE',
            EMAIL_TYPE: 'EMAIL_TYPE',
            PHONE_TYPE: 'PHONE_TYPE',
            SMS_TYPE: 'SMS_TYPE',
        };
        return _this;
    }
    BarcodeScannerOriginal.prototype.scan = function (options) { return cordova(this, "scan", { "callbackOrder": "reverse" }, arguments); };
    BarcodeScannerOriginal.prototype.encode = function (type, data) { return cordova(this, "encode", {}, arguments); };
    BarcodeScannerOriginal.pluginName = "BarcodeScanner";
    BarcodeScannerOriginal.plugin = "phonegap-plugin-barcodescanner";
    BarcodeScannerOriginal.pluginRef = "cordova.plugins.barcodeScanner";
    BarcodeScannerOriginal.repo = "https://github.com/phonegap/phonegap-plugin-barcodescanner";
    BarcodeScannerOriginal.platforms = ["Android", "BlackBerry 10", "Browser", "iOS", "Windows"];
    return BarcodeScannerOriginal;
}(AwesomeCordovaNativePlugin));
var BarcodeScanner = new BarcodeScannerOriginal();
export { BarcodeScanner };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYmFyY29kZS1zY2FubmVyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQWtIeEQsa0NBQTBCOzs7UUFDNUQsWUFBTSxHQUtGO1lBQ0YsU0FBUyxFQUFFLFdBQVc7WUFDdEIsVUFBVSxFQUFFLFlBQVk7WUFDeEIsVUFBVSxFQUFFLFlBQVk7WUFDeEIsUUFBUSxFQUFFLFVBQVU7U0FDckIsQ0FBQzs7O0lBV0YsNkJBQUksYUFBQyxPQUErQjtJQWFwQywrQkFBTSxhQUFDLElBQVksRUFBRSxJQUFTOzs7Ozs7eUJBdEpoQztFQW1Ib0MsMEJBQTBCO1NBQWpELGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJhcmNvZGVTY2FubmVyT3B0aW9ucyB7XHJcbiAgLyoqXHJcbiAgICogUHJlZmVyIGZyb250IGNhbWVyYS4gU3VwcG9ydGVkIG9uIGlPUyBhbmQgQW5kcm9pZC5cclxuICAgKi9cclxuICBwcmVmZXJGcm9udENhbWVyYT86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFNob3cgZmxpcCBjYW1lcmEgYnV0dG9uLiBTdXBwb3J0ZWQgb24gaU9TIGFuZCBBbmRyb2lkLlxyXG4gICAqL1xyXG4gIHNob3dGbGlwQ2FtZXJhQnV0dG9uPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogU2hvdyB0b3JjaCBidXR0b24uIFN1cHBvcnRlZCBvbiBpT1MgYW5kIEFuZHJvaWQuXHJcbiAgICovXHJcbiAgc2hvd1RvcmNoQnV0dG9uPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogRGlzYWJsZSBhbmltYXRpb25zLiBTdXBwb3J0ZWQgb24gaU9TIG9ubHkuXHJcbiAgICovXHJcbiAgZGlzYWJsZUFuaW1hdGlvbnM/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBEaXNhYmxlIHN1Y2Nlc3MgYmVlcC4gU3VwcG9ydGVkIG9uIGlPUyBvbmx5LlxyXG4gICAqL1xyXG4gIGRpc2FibGVTdWNjZXNzQmVlcD86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFByb21wdCB0ZXh0LiBTdXBwb3J0ZWQgb24gQW5kcm9pZCBvbmx5LlxyXG4gICAqL1xyXG4gIHByb21wdD86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogRm9ybWF0cyBzZXBhcmF0ZWQgYnkgY29tbWFzLiBEZWZhdWx0cyB0byBhbGwgZm9ybWF0cyBleGNlcHQgYFBERl80MTdgIGFuZCBgUlNTX0VYUEFOREVEYC5cclxuICAgKi9cclxuICBmb3JtYXRzPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBPcmllbnRhdGlvbi4gU3VwcG9ydGVkIG9uIEFuZHJvaWQgb25seS4gQ2FuIGJlIHNldCB0byBgcG9ydHJhaXRgIG9yIGBsYW5kc2NhcGVgLiBEZWZhdWx0cyB0byBub25lIHNvIHRoZSB1c2VyIGNhbiByb3RhdGUgdGhlIHBob25lIGFuZCBwaWNrIGFuIG9yaWVudGF0aW9uLlxyXG4gICAqL1xyXG4gIG9yaWVudGF0aW9uPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBMYXVuY2ggd2l0aCB0aGUgdG9yY2ggc3dpdGNoZWQgb24gKGlmIGF2YWlsYWJsZSkuIFN1cHBvcnRlZCBvbiBBbmRyb2lkIG9ubHkuXHJcbiAgICovXHJcbiAgdG9yY2hPbj86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFNhdmUgc2NhbiBoaXN0b3J5LiBEZWZhdWx0cyB0byBgZmFsc2VgLiBTdXBwb3J0ZWQgb24gQW5kcm9pZCBvbmx5LlxyXG4gICAqL1xyXG4gIHNhdmVIaXN0b3J5PzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogRGlzcGxheSBzY2FubmVkIHRleHQgZm9yIFggbXMuIDAgc3VwcHJlc3NlcyBpdCBlbnRpcmVseSwgZGVmYXVsdCAxNTAwLiBTdXBwb3J0ZWQgb24gQW5kcm9pZCBvbmx5LlxyXG4gICAqL1xyXG4gIHJlc3VsdERpc3BsYXlEdXJhdGlvbj86IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCYXJjb2RlU2NhblJlc3VsdCB7XHJcbiAgZm9ybWF0OlxyXG4gICAgfCAnUVJfQ09ERSdcclxuICAgIHwgJ0RBVEFfTUFUUklYJ1xyXG4gICAgfCAnVVBDX0UnXHJcbiAgICB8ICdVUENfQSdcclxuICAgIHwgJ0VBTl84J1xyXG4gICAgfCAnRUFOXzEzJ1xyXG4gICAgfCAnQ09ERV8xMjgnXHJcbiAgICB8ICdDT0RFXzM5J1xyXG4gICAgfCAnQ09ERV85MydcclxuICAgIHwgJ0NPREFCQVInXHJcbiAgICB8ICdJVEYnXHJcbiAgICB8ICdSU1MxNCdcclxuICAgIHwgJ1JTU19FWFBBTkRFRCdcclxuICAgIHwgJ1BERl80MTcnXHJcbiAgICB8ICdBWlRFQydcclxuICAgIHwgJ01TSSc7XHJcbiAgY2FuY2VsbGVkOiBib29sZWFuO1xyXG4gIHRleHQ6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIEJhcmNvZGUgU2Nhbm5lclxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhlIEJhcmNvZGUgU2Nhbm5lciBQbHVnaW4gb3BlbnMgYSBjYW1lcmEgdmlldyBhbmQgYXV0b21hdGljYWxseSBzY2FucyBhIGJhcmNvZGUsIHJldHVybmluZyB0aGUgZGF0YSBiYWNrIHRvIHlvdS5cclxuICpcclxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBwaG9uZWdhcC1wbHVnaW4tYmFyY29kZXNjYW5uZXJgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbQmFyY29kZVNjYW5uZXIgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9waG9uZWdhcC9waG9uZWdhcC1wbHVnaW4tYmFyY29kZXNjYW5uZXIpLlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBCYXJjb2RlU2Nhbm5lciB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9iYXJjb2RlLXNjYW5uZXIvbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBiYXJjb2RlU2Nhbm5lcjogQmFyY29kZVNjYW5uZXIpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICpcclxuICogdGhpcy5iYXJjb2RlU2Nhbm5lci5zY2FuKCkudGhlbihiYXJjb2RlRGF0YSA9PiB7XHJcbiAqICBjb25zb2xlLmxvZygnQmFyY29kZSBkYXRhJywgYmFyY29kZURhdGEpO1xyXG4gKiB9KS5jYXRjaChlcnIgPT4ge1xyXG4gKiBcdGNvbnNvbGUubG9nKCdFcnJvcicsIGVycik7XHJcbiAqIH0pO1xyXG4gKiBgYGBcclxuICogQGludGVyZmFjZXNcclxuICogQmFyY29kZVNjYW5uZXJPcHRpb25zXHJcbiAqIEJhcmNvZGVTY2FuUmVzdWx0XHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnQmFyY29kZVNjYW5uZXInLFxyXG4gIHBsdWdpbjogJ3Bob25lZ2FwLXBsdWdpbi1iYXJjb2Rlc2Nhbm5lcicsXHJcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLmJhcmNvZGVTY2FubmVyJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3Bob25lZ2FwL3Bob25lZ2FwLXBsdWdpbi1iYXJjb2Rlc2Nhbm5lcicsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnQmxhY2tCZXJyeSAxMCcsICdCcm93c2VyJywgJ2lPUycsICdXaW5kb3dzJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEJhcmNvZGVTY2FubmVyIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIEVuY29kZToge1xyXG4gICAgVEVYVF9UWVBFOiBzdHJpbmc7XHJcbiAgICBFTUFJTF9UWVBFOiBzdHJpbmc7XHJcbiAgICBQSE9ORV9UWVBFOiBzdHJpbmc7XHJcbiAgICBTTVNfVFlQRTogc3RyaW5nO1xyXG4gIH0gPSB7XHJcbiAgICBURVhUX1RZUEU6ICdURVhUX1RZUEUnLFxyXG4gICAgRU1BSUxfVFlQRTogJ0VNQUlMX1RZUEUnLFxyXG4gICAgUEhPTkVfVFlQRTogJ1BIT05FX1RZUEUnLFxyXG4gICAgU01TX1RZUEU6ICdTTVNfVFlQRScsXHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogT3BlbiB0aGUgYmFyY29kZSBzY2FubmVyLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtCYXJjb2RlU2Nhbm5lck9wdGlvbnN9IFtvcHRpb25zXSBPcHRpb25hbCBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIHNjYW5uZXJcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggc2Nhbm5lciBkYXRhLCBvciByZWplY3RzIHdpdGggYW4gZXJyb3IuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxyXG4gIH0pXHJcbiAgc2NhbihvcHRpb25zPzogQmFyY29kZVNjYW5uZXJPcHRpb25zKTogUHJvbWlzZTxCYXJjb2RlU2NhblJlc3VsdD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRW5jb2RlcyBkYXRhIGludG8gYSBiYXJjb2RlLlxyXG4gICAqIE5PVEU6IG5vdCB3ZWxsIHN1cHBvcnRlZCBvbiBBbmRyb2lkXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUeXBlIG9mIGVuY29kaW5nXHJcbiAgICogQHBhcmFtIHthbnl9IGRhdGEgRGF0YSB0byBlbmNvZGVcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBlbmNvZGUodHlwZTogc3RyaW5nLCBkYXRhOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=