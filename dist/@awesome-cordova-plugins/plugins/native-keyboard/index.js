var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var NativeKeyboardOriginal = /** @class */ (function (_super) {
    __extends(NativeKeyboardOriginal, _super);
    function NativeKeyboardOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NativeKeyboardOriginal.prototype.showMessenger = function (options) { return cordova(this, "showMessenger", { "sync": true }, arguments); };
    NativeKeyboardOriginal.prototype.hideMessenger = function (options) { return cordova(this, "hideMessenger", { "sync": true }, arguments); };
    NativeKeyboardOriginal.prototype.showMessengerKeyboard = function () { return cordova(this, "showMessengerKeyboard", {}, arguments); };
    NativeKeyboardOriginal.prototype.hideMessengerKeyboard = function () { return cordova(this, "hideMessengerKeyboard", {}, arguments); };
    NativeKeyboardOriginal.prototype.updateMessenger = function (options) { return cordova(this, "updateMessenger", {}, arguments); };
    NativeKeyboardOriginal.pluginName = "NativeKeyboard";
    NativeKeyboardOriginal.plugin = "cordova-plugin-native-keyboard";
    NativeKeyboardOriginal.pluginRef = "NativeKeyboard";
    NativeKeyboardOriginal.repo = "https://github.com/EddyVerbruggen/cordova-plugin-native-keyboard";
    NativeKeyboardOriginal.platforms = ["Android", "iOS"];
    return NativeKeyboardOriginal;
}(AwesomeCordovaNativePlugin));
var NativeKeyboard = new NativeKeyboardOriginal();
export { NativeKeyboard };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvbmF0aXZlLWtleWJvYXJkL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQXlNeEQsa0NBQTBCOzs7O0lBTzVELHNDQUFhLGFBQUMsT0FBOEI7SUFRNUMsc0NBQWEsYUFBQyxPQUE4QjtJQVE1Qyw4Q0FBcUI7SUFRckIsOENBQXFCO0lBVXJCLHdDQUFlLGFBQUMsT0FBNkM7Ozs7Ozt5QkFsUC9EO0VBeU1vQywwQkFBMEI7U0FBakQsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTmF0aXZlS2V5Ym9hcmRPcHRpb25zIHtcclxuICAvKipcclxuICAgKiBBIGZ1bmN0aW9uIGludm9rZWQgd2hlbiB0aGUgdXNlciBzdWJtaXRzIGhpcyBpbnB1dC4gUmVjZWl2ZXMgdGhlIHRleHQgYXMgYSBzaW5nbGUgcHJvcGVydHkuIE1ha2Ugc3VyZSB5b3VyIHBhZ2UgaXMgVVRGLTggZW5jb2RlZCBzbyBDaGluZXNlIGFuZCBFbW9qaSBhcmUgcmVuZGVyZWQgT0suXHJcbiAgICovXHJcbiAgb25TdWJtaXQ6IEZ1bmN0aW9uO1xyXG5cclxuICAvKipcclxuICAgKiBBIGZ1bmN0aW9uIGludm9rZWQgd2hlbiB0aGUga2V5Ym9hcmQgaXMgYWJvdXQgdG8gcG9wIHVwLiBSZWNlaXZlcyB0aGUgaGVpZ2h0IGFzIGEgc2luZ2xlIHByb3BlcnR5LiAoaU9TIG9ubHkpXHJcbiAgICovXHJcbiAgb25LZXlib2FyZFdpbGxTaG93OiBGdW5jdGlvbjtcclxuXHJcbiAgLyoqXHJcbiAgICogQSBmdW5jdGlvbiBpbnZva2VkIHdoZW4gdGhlIGtleWJvYXJkIHBvcHBlZCB1cC4gUmVjZWl2ZXMgdGhlIGhlaWdodCBhcyBhIHNpbmdsZSBwcm9wZXJ0eS5cclxuICAgKi9cclxuICBvbktleWJvYXJkRGlkU2hvdzogRnVuY3Rpb247XHJcblxyXG4gIC8qKlxyXG4gICAqIEEgZnVuY3Rpb24gaW52b2tlZCB3aGVuIHRoZSBrZXlib2FyZCBpcyBhYm91dCB0byBjbG9zZS4gKGlPUyBvbmx5KVxyXG4gICAqL1xyXG4gIG9uS2V5Ym9hcmRXaWxsSGlkZTogRnVuY3Rpb247XHJcblxyXG4gIC8qKlxyXG4gICAqIEEgZnVuY3Rpb24gaW52b2tlZCB3aGVuIHRoZSBrZXlib2FyZCBjbG9zZWQuXHJcbiAgICovXHJcbiAgb25LZXlib2FyZERpZEhpZGU6IEZ1bmN0aW9uO1xyXG5cclxuICAvKipcclxuICAgKiBBIGZ1bmN0aW9uIGludm9rZWQgd2hlbiBhbnkga2V5IGlzIHByZXNzZWQsIHNlbmRzIHRoZSBlbnRpcmUgdGV4dCBhcyByZXNwb25zZS5cclxuICAgKi9cclxuICBvblRleHRDaGFuZ2VkOiBGdW5jdGlvbjtcclxuXHJcbiAgLyoqXHJcbiAgICogSGlnaGx5IHJlY29tbWVuZGVkIHRvIHBhc3MgaW4gaWYgeW91IHdhbnQgdG8gcmVwbGljYXRlIHRoZSBiZWhhdmlvciBvZiB0aGUgdmlkZW8ncyBhYm92ZSAoc2Nyb2xsIGRvd24gd2hlbiB0aGUga2V5Ym9hcmQgb3BlbnMpLiBQYXNzIGluIHRoZSBzY3JvbGxhYmxlIERPTSBlbGVtZW50IGNvbnRhaW5pbmcgdGhlIG1lc3NhZ2VzLlxyXG4gICAqL1xyXG4gIGF1dG9zY3JvbGxFbGVtZW50OiBIVE1MRWxlbWVudDtcclxuXHJcbiAgLyoqXHJcbiAgICogSWYgYGF1dG9zY3JvbGxFbGVtZW50YCB3YXMgc2V0IHlvdSBjYW4gYWxzbyBtYWtlIHRoZSBsaXN0IHNjcm9sbCBkb3duIGluaXRpYWxseSwgd2hlbiB0aGUgbWVzc2VuZ2VyIGJhciAod2l0aG91dCB0aGUga2V5Ym9hcmQgcG9wcGluZyB1cCkgaXMgc2hvd24uXHJcbiAgICovXHJcbiAgc2Nyb2xsVG9Cb3R0b21BZnRlck1lc3NlbmdlclNob3dzOiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBTZXR0aW5nIHRoaXMgdG8gYHRydWVgIGlzIGxpa2UgdGhlIHZpZGVvJ3MgYWJvdmU6IHRoZSBrZXlib2FyZCBkb2Vzbid0IGNsb3NlIHVwb24gc3VibWl0LiBEZWZhdWx0cyB0byBgZmFsc2VgLlxyXG4gICAqL1xyXG4gIGtlZXBPcGVuQWZ0ZXJTdWJtaXQ6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIE1ha2VzIHRoZSBtZXNzZW5nZXIgYmFyIHNsaWRlIGluIGZyb20gdGhlIGJvdHRvbS4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cclxuICAgKi9cclxuICBhbmltYXRlZDogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogT3BlbiB0aGUga2V5Ym9hcmQgd2hlbiBzaG93aW5nIHRoZSBtZXNzZW5nZXIuIERlZmF1bHRzIHRvIGBmYWxzZWAuXHJcbiAgICovXHJcbiAgc2hvd0tleWJvYXJkOiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgZGVmYXVsdCB0ZXh0IHNldCBpbiB0aGUgbWVzc2VuZ2VyIGlucHV0IGJhci5cclxuICAgKi9cclxuICB0ZXh0OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgdHlwZWQgdGV4dC4gRGVmYXVsdHMgdG8gYCM0NDQ0NDRgLlxyXG4gICAqL1xyXG4gIHRleHRDb2xvcjogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBMaWtlIGEgcmVndWxhciBIVE1MIGlucHV0IHBsYWNlaG9sZGVyLlxyXG4gICAqL1xyXG4gIHBsYWNlaG9sZGVyOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgcGxhY2Vob2xkZXIgdGV4dC4gRGVmYXVsdHMgdG8gYCNDQ0NDQ0NgLlxyXG4gICAqL1xyXG4gIHBsYWNlaG9sZGVyQ29sb3I6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGJhY2tncm91bmQgY29sb3Igb2YgdGhlIG1lc3NlbmdlciBiYXIuIERlZmF1bHRzIHRvIGAjRjZGNkY2YC5cclxuICAgKi9cclxuICBiYWNrZ3JvdW5kQ29sb3I6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGJhY2tncm91bmQgY29sb3Igb2YgdGhlIHRleHR2aWV3LiBMb29rcyBuaWNlc3Qgb24gQW5kcm9pZCBpZiBpdCdzIHRoZSBzYW1lIGNvbG9yIGFzIHRoZSBgYmFja2dyb3VuZENvbG9yYCBwcm9wZXJ0eS4gRGVmYXVsdHMgdG8gYCNGNkY2RjZgLlxyXG4gICAqL1xyXG4gIHRleHRWaWV3QmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBib3JkZXIgY29sb3Igb2YgdGhlIHRleHR2aWV3LiBEZWZhdWx0cyB0byBgIzY2NjY2NmAuIChpT1Mgb25seSlcclxuICAgKi9cclxuICB0ZXh0Vmlld0JvcmRlckNvbG9yOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHRpbmcgdGhpcyA+IDAgd2lsbCBtYWtlIGEgY291bnRlciBzaG93IHVwIG9uIGlPUyAoYW5kIGlnbm9yZSBzdXBlcmZsdW91cyBpbnB1dCBvbiBBbmRyb2lkLCBmb3Igbm93KVxyXG4gICAqL1xyXG4gIG1heENoYXJzOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIE9wdGlvbnMgYXJlOiBgXCJub25lXCJgLCBgXCJzcGxpdFwiYCwgYFwiY291bnRkb3duXCJgLCBgXCJjb3VudGRvd25yZXZlcnNlZFwiYC4gTm90ZSB0aGF0IGlmIGBtYXhDaGFyc2AgaXMgc2V0LCBgXCJub25lXCJgIHdpbGwgc3RpbGwgc2hvdyBhIGNvdW50ZXIuIERlZmF1bHRzIHRvIGBcIm5vbmVcImAuIChpT1Mgb25seSlcclxuICAgKi9cclxuICBjb3VudGVyU3R5bGU6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogT3B0aW9ucyBhcmU6IFwiZGVmYXVsdFwiLCBcImRlY2ltYWxwYWRcIiwgXCJwaG9uZXBhZFwiLCBcIm51bWJlcnBhZFwiLCBcIm5hbWVwaG9uZXBhZFwiLCBcIm51bWJlclwiLCBcImVtYWlsXCIsIFwidHdpdHRlclwiLCBcInVybFwiLCBcImFscGhhYmV0XCIsIFwic2VhcmNoXCIsIFwiYXNjaWlcIi4gKGlPUyBvbmx5KVxyXG4gICAqL1xyXG4gIHR5cGU6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogT3B0aW9ucyBhcmU6IFwibGlnaHRcIiwgXCJkYXJrXCIuIChpT1Mgb25seSlcclxuICAgKi9cclxuICBhcHBlYXJhbmNlOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIERpc2FibGVzIHRoaW5ncyBsaWtlIHRoZSBFbW9qaSBrZXlib2FyZCBhbmQgdGhlIFByZWRpY2l2ZSB0ZXh0IGVudHJ5IGJhciAoaU9TIG9ubHkpXHJcbiAgICovXHJcbiAgc2VjdXJlOiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqL1xyXG4gIGxlZnRCdXR0b246IE5hdGl2ZUtleWJvYXJkTGVmdEJ1dHRvbjtcclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKi9cclxuICByaWdodEJ1dHRvbjogTmF0aXZlS2V5Ym9hcmRCdXR0b247XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTmF0aXZlS2V5Ym9hcmRCdXR0b24ge1xyXG4gIC8qKlxyXG4gICAqIEVpdGhlciBcInRleHRcIiAoQW5kcm9pZCBvbmx5IGN1cnJlbnRseSksIFwiZm9udGF3ZXNvbWVcIiBvciBcImlvbmljb25cIi5cclxuICAgKi9cclxuICB0eXBlOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogRGVwZW5kcyBvbiB0aGUgdHlwZS4gRXhhbXBsZXM6IGZvciBcInRleHRcIiB1c2UgXCJTZW5kXCIsIGZvciBcImZvbnRhd2Vzb21lXCIgdXNlIFwiZmEtYmF0dGVyeS1xdWFydGVyXCIsIGZvciBcImlvbmljb25cIiB1c2UgXCJcXHVmNDhhXCIgKGdvIHRvIGh0dHA6Ly9pb25pY29ucy5jb20sIHJpZ2h0LWNsaWNrIGFuZCBpbnNwZWN0IHRoZSBpY29uIGFuZCB1c2UgdGhlIHZhbHVlIHlvdSBmaW5kIGluIDpiZWZvcmUpLiBOb3RlIHRoYXQgc29tZSBmb250aWNvbnMgYXJlIG5vdCBzdXBwb3J0ZWQgYXMgdGhlIGVtYmVkZGVkIGZvbnRzIGluIHRoZSBwbHVnaW4gbWF5IGxhZyBiZWhpbmQgYSBsaXR0bGUuIFNvIHRyeSBvbmUgb2YgdGhlIG9sZGVyIGljb25zIGZpcnN0LlxyXG4gICAqL1xyXG4gIHZhbHVlOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogSWYgdHlwZSBpcyBcInRleHRcIiB5b3UgY2FuIHNldCB0aGlzIHRvIGVpdGhlciBcIm5vcm1hbFwiLCBcImJvbGRcIiBvciBcIml0YWxpY1wiLlxyXG4gICAqL1xyXG4gIHRleHRTdHlsZTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIEEgZnVuY3Rpb24gaW52b2tlZCB3aGVuIHRoZSBidXR0b24gaXMgcHJlc3NlZC4gVXNlIHRoaXMgYnV0dG9uIHRvIHByb21wdCB0aGUgdXNlciB3aGF0IGhlIHdhbnRzIHRvIGRvIG5leHQgYnkgZm9yIGluc3RhbmNlIHJlbmRlcmluZyBhbiBBY3Rpb25TaGVldC5cclxuICAgKi9cclxuICBvblByZXNzOiBGdW5jdGlvbjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBOYXRpdmVLZXlib2FyZExlZnRCdXR0b24gZXh0ZW5kcyBOYXRpdmVLZXlib2FyZEJ1dHRvbiB7XHJcbiAgLyoqXHJcbiAgICogU2V0IHRvIGB0cnVlYCB0byBkaXNhYmxlIHRoZSBidXR0b24gb25jZSB0ZXh0IGhhcyBiZWVuIGVudGVyZWQuXHJcbiAgICovXHJcbiAgZGlzYWJsZWRXaGVuVGV4dEVudGVyZWQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTmF0aXZlS2V5Ym9hcmRVcGRhdGVNZXNzZW5nZXJPcHRpb25zIHtcclxuICAvKipcclxuICAgKiBSZXBsYWNlIHRoZSBtZXNzZW5nZXIncyB0ZXh0IGJ5IHRoaXMuIFRoZSBjdXJyZW50IHRleHQgcmVtYWlucyBpZiBvbWl0dGVkLlxyXG4gICAqL1xyXG4gIHRleHQ6IHN0cmluZztcclxuICAvKipcclxuICAgKiBQb3NpdGlvbiB0aGUgY3Vyc29yIGFueXdoZXJlIGluIHRoZSB0ZXh0IHJhbmdlLiBEZWZhdWx0cyB0byB0aGUgZW5kIG9mIHRoZSB0ZXh0LlxyXG4gICAqL1xyXG4gIGNhcmV0SW5kZXg6IG51bWJlcjtcclxuICAvKipcclxuICAgKiBJZiBgZmFsc2VgIG9yIG9taXR0ZWQgbm8gY2hhbmdlcyB0byB0aGUga2V5Ym9hcmQgc3RhdGUgYXJlIG1hZGUuXHJcbiAgICovXHJcbiAgc2hvd0tleWJvYXJkOiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogQHBhaWRcclxuICogQG5hbWUgTmF0aXZlIEtleWJvYXJkXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBIGNyb3NzIHBsYXRmb3JtIFdoYXRzQXBwIC8gTWVzc2VuZ2VyIC8gU2xhY2sgLXN0eWxlIGtleWJvYXJkIGV2ZW4uIEZvciB5b3VyIENvcmRvdmEgYXBwLlxyXG4gKiBAdXNhZ2VcclxuICogYGBgXHJcbiAqIGltcG9ydCB7IE5hdGl2ZUtleWJvYXJkIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL25hdGl2ZS1rZXlib2FyZC9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIG5hdGl2ZUtleWJvYXJkOiBOYXRpdmVLZXlib2FyZCkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKlxyXG4gKiBgYGBcclxuICogQGludGVyZmFjZXNcclxuICogTmF0aXZlS2V5Ym9hcmRPcHRpb25zXHJcbiAqIE5hdGl2ZUtleWJvYXJkQnV0dG9uXHJcbiAqIE5hdGl2ZUtleWJvYXJkTGVmdEJ1dHRvblxyXG4gKiBOYXRpdmVLZXlib2FyZFVwZGF0ZU1lc3Nlbmdlck9wdGlvbnNcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdOYXRpdmVLZXlib2FyZCcsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tbmF0aXZlLWtleWJvYXJkJyxcclxuICBwbHVnaW5SZWY6ICdOYXRpdmVLZXlib2FyZCcsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9jb3Jkb3ZhLXBsdWdpbi1uYXRpdmUta2V5Ym9hcmQnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOYXRpdmVLZXlib2FyZCBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBTaG93IG1lc3NlbmdlclxyXG4gICAqXHJcbiAgICogQHBhcmFtIG9wdGlvbnMge05hdGl2ZUtleWJvYXJkT3B0aW9uc31cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzaG93TWVzc2VuZ2VyKG9wdGlvbnM6IE5hdGl2ZUtleWJvYXJkT3B0aW9ucyk6IHZvaWQge31cclxuXHJcbiAgLyoqXHJcbiAgICogSGlkZSBtZXNzZW5nZXJcclxuICAgKlxyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtOYXRpdmVLZXlib2FyZE9wdGlvbnN9XHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgaGlkZU1lc3NlbmdlcihvcHRpb25zOiBOYXRpdmVLZXlib2FyZE9wdGlvbnMpOiB2b2lkIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIFByb2dyYW1tYXRpY2FsbHkgcG9wIHVwIHRoZSBrZXlib2FyZCBhZ2FpbiBpZiB0aGUgdXNlciBkaXNtaXNzZWQgaXQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzaG93TWVzc2VuZ2VyS2V5Ym9hcmQoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFByb2dyYW1tYXRpY2FsbHkgaGlkZSB0aGUga2V5Ym9hcmQgKGJ1dCBub3QgdGhlIG1lc3NlbmdlciBiYXIpXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGhpZGVNZXNzZW5nZXJLZXlib2FyZCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWFuaXB1bGF0ZSB0aGUgbWVzc2VuZ2VyIHdoaWxlIGl0J3Mgb3Blbi4gRm9yIGluc3RhbmNlIGlmIHlvdSB3YW50IHRvIHVwZGF0ZSB0aGUgdGV4dCBwcm9ncmFtbWF0aWNhbGx5IGJhc2VkIG9uIHdoYXQgdGhlIHVzZXIgdHlwZWQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gb3B0aW9uc1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB1cGRhdGVNZXNzZW5nZXIob3B0aW9uczogTmF0aXZlS2V5Ym9hcmRVcGRhdGVNZXNzZW5nZXJPcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19