var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
export var ConnectionType;
(function (ConnectionType) {
    /**
     * Clear-text connection for the protocol.
     */
    ConnectionType["Clear"] = "Clear";
    /**
     * Starts with clear-text connection at the beginning, then switch to encrypted connection using TLS/SSL.
     */
    ConnectionType["StartTLS"] = "StartTLS";
    /**
     * Encrypted connection using TLS/SSL.
     */
    ConnectionType["TLSSSL"] = "TLS/SSL";
})(ConnectionType || (ConnectionType = {}));
export var Comparison;
(function (Comparison) {
    /**
     * Android ONLY
     * The less than or equal to operator.
     */
    Comparison["LE"] = "LE";
    /**
     * The less than operator.
     */
    Comparison["LT"] = "LT";
    /**
     * The equality operator.
     */
    Comparison["EQ"] = "EQ";
    /**
     * The not equal to operator.
     */
    Comparison["NE"] = "NE";
    /**
     * Android ONLY
     * The greater than operator.
     */
    Comparison["GT"] = "GT";
    /**
     * The greater than or equal to operator.
     */
    Comparison["GE"] = "GE";
})(Comparison || (Comparison = {}));
/**
 * All available message flags. Set or remove flag using "setFlag()".
 */
export var FlagEnum;
(function (FlagEnum) {
    /**
     * "ANSWERED" message flag
     */
    FlagEnum["ANSWERED"] = "ANSWERED";
    /**
     * "DRAFT" message flag
     */
    FlagEnum["DRAFT"] = "DRAFT";
    /**
     * "FLAGGED" message flag
     */
    FlagEnum["FLAGGED"] = "FLAGGED";
    /**
     * Android ONLY
     * "RECENT" message flag
     */
    FlagEnum["RECENT"] = "RECENT";
    /**
     * "SEEN" message flag
     */
    FlagEnum["SEEN"] = "SEEN";
    /**
     * Android ONLY
     * "USER" message flag
     */
    FlagEnum["USER"] = "USER";
    /**
     * "DELETED" message flag. Note: Add this flag to delete the message from the mailbox
     */
    FlagEnum["DELETED"] = "DELETED";
    /**
     * iOS ONLY
     * "SENT" message flag.
     */
    FlagEnum["SENT"] = "Sent";
    /**
     * iOS ONLY
     * "FORWARDED" message flag.
     */
    FlagEnum["FORWARDED"] = "Forwarded";
    /**
     * iOS ONLY
     * "SubmitPending" message flag.
     */
    FlagEnum["SubmitPending"] = "SubmitPending";
    /**
     * iOS ONLY
     * "SUBMITTED" message flag.
     */
    FlagEnum["SUBMITTED"] = "Submitted";
})(FlagEnum || (FlagEnum = {}));
var ImapOriginal = /** @class */ (function (_super) {
    __extends(ImapOriginal, _super);
    function ImapOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ImapOriginal.prototype.connect = function (clientData) { return cordova(this, "connect", {}, arguments); };
    ImapOriginal.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    ImapOriginal.prototype.isConnected = function () { return cordova(this, "isConnected", {}, arguments); };
    ImapOriginal.prototype.listMailFolders = function (pattern) { return cordova(this, "listMailFolders", {}, arguments); };
    ImapOriginal.prototype.getMessageCountByFolderName = function (folderName) { return cordova(this, "getMessageCountByFolderName", {}, arguments); };
    ImapOriginal.prototype.searchMessagesByDatePeriod = function (folderName, dateInMilliseconds, comparison) { return cordova(this, "searchMessagesByDatePeriod", {}, arguments); };
    ImapOriginal.prototype.listMessagesHeadersByConsecutiveNumber = function (folderName, start, end) { return cordova(this, "listMessagesHeadersByConsecutiveNumber", {}, arguments); };
    ImapOriginal.prototype.listMessagesHeadersByDate = function (folderName, dateInMilliseconds, comparison) { return cordova(this, "listMessagesHeadersByDate", {}, arguments); };
    ImapOriginal.prototype.getFullMessageData = function (folderName, messageNumber) { return cordova(this, "getFullMessageData", {}, arguments); };
    ImapOriginal.prototype.getFullMessageDataOnNewSession = function (clientData, folderName, messageNumber) { return cordova(this, "getFullMessageDataOnNewSession", {}, arguments); };
    ImapOriginal.prototype.copyToFolder = function (sourceFolder, destinationFolder, messageNums) { return cordova(this, "copyToFolder", {}, arguments); };
    ImapOriginal.prototype.setFlag = function (folderName, messageNums, flag, status) { return cordova(this, "setFlag", {}, arguments); };
    ImapOriginal.pluginName = "Imap";
    ImapOriginal.plugin = "cordova-plugin-imap";
    ImapOriginal.pluginRef = "imap";
    ImapOriginal.repo = "https://github.com/aleksandar888/cordova-plugin-imap.git";
    ImapOriginal.platforms = ["Android", "iOS"];
    return ImapOriginal;
}(AwesomeCordovaNativePlugin));
var Imap = new ImapOriginal();
export { Imap };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvaW1hcC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQztBQW9ONUYsTUFBTSxDQUFOLElBQVksY0FhWDtBQWJELFdBQVksY0FBYztJQUN4Qjs7T0FFRztJQUNILGlDQUFlLENBQUE7SUFDZjs7T0FFRztJQUNILHVDQUFxQixDQUFBO0lBQ3JCOztPQUVHO0lBQ0gsb0NBQWtCLENBQUE7QUFDcEIsQ0FBQyxFQWJXLGNBQWMsS0FBZCxjQUFjLFFBYXpCO0FBRUQsTUFBTSxDQUFOLElBQVksVUEyQlg7QUEzQkQsV0FBWSxVQUFVO0lBQ3BCOzs7T0FHRztJQUNILHVCQUFTLENBQUE7SUFDVDs7T0FFRztJQUNILHVCQUFTLENBQUE7SUFDVDs7T0FFRztJQUNILHVCQUFTLENBQUE7SUFDVDs7T0FFRztJQUNILHVCQUFTLENBQUE7SUFDVDs7O09BR0c7SUFDSCx1QkFBUyxDQUFBO0lBQ1Q7O09BRUc7SUFDSCx1QkFBUyxDQUFBO0FBQ1gsQ0FBQyxFQTNCVyxVQUFVLEtBQVYsVUFBVSxRQTJCckI7QUFFRDs7R0FFRztBQUNILE1BQU0sQ0FBTixJQUFZLFFBbURYO0FBbkRELFdBQVksUUFBUTtJQUNsQjs7T0FFRztJQUNILGlDQUFxQixDQUFBO0lBQ3JCOztPQUVHO0lBQ0gsMkJBQWUsQ0FBQTtJQUNmOztPQUVHO0lBQ0gsK0JBQW1CLENBQUE7SUFDbkI7OztPQUdHO0lBQ0gsNkJBQWlCLENBQUE7SUFDakI7O09BRUc7SUFDSCx5QkFBYSxDQUFBO0lBQ2I7OztPQUdHO0lBQ0gseUJBQWEsQ0FBQTtJQUNiOztPQUVHO0lBQ0gsK0JBQW1CLENBQUE7SUFDbkI7OztPQUdHO0lBQ0gseUJBQWEsQ0FBQTtJQUNiOzs7T0FHRztJQUNILG1DQUF1QixDQUFBO0lBQ3ZCOzs7T0FHRztJQUNILDJDQUErQixDQUFBO0lBQy9COzs7T0FHRztJQUNILG1DQUF1QixDQUFBO0FBQ3pCLENBQUMsRUFuRFcsUUFBUSxLQUFSLFFBQVEsUUFtRG5COztJQTJKeUIsd0JBQTBCOzs7O0lBT2xELHNCQUFPLGFBQUMsVUFBa0I7SUFTMUIseUJBQVU7SUFTViwwQkFBVztJQW9CWCw4QkFBZSxhQUFDLE9BQWU7SUFVL0IsMENBQTJCLGFBQUMsVUFBa0I7SUFZOUMseUNBQTBCLGFBQ3hCLFVBQWtCLEVBQ2xCLGtCQUEwQixFQUMxQixVQUFzQjtJQWF4QixxREFBc0MsYUFBQyxVQUFrQixFQUFFLEtBQWEsRUFBRSxHQUFXO0lBWXJGLHdDQUF5QixhQUN2QixVQUFrQixFQUNsQixrQkFBMEIsRUFDMUIsVUFBc0I7SUFZeEIsaUNBQWtCLGFBQUMsVUFBa0IsRUFBRSxhQUFxQjtJQWU1RCw2Q0FBOEIsYUFBQyxVQUFrQixFQUFFLFVBQWtCLEVBQUUsYUFBcUI7SUFZNUYsMkJBQVksYUFBQyxZQUFvQixFQUFFLGlCQUF5QixFQUFFLFdBQXFCO0lBYW5GLHNCQUFPLGFBQUMsVUFBa0IsRUFBRSxXQUFxQixFQUFFLElBQWMsRUFBRSxNQUFlOzs7Ozs7ZUF4bUJwRjtFQWtkMEIsMEJBQTBCO1NBQXZDLElBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZyB7XHJcbiAgLyoqXHJcbiAgICogSG9zdG5hbWUgb3IgSVAgYWRkcmVzcyBvZiB0aGUgSU1BUCBzZXJ2aWNlLCBmb3IgZXhhbXBsZTogaW1hcC5nbWFpbC5jb20sIGltYXAtbWFpbC5vdXRsb29rLmNvbS4uLi5cclxuICAgKi9cclxuICBob3N0OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogT3B0aW9uYWwgcGFyYW1ldGVyLiBQb3J0IG9mIHRoZSBJTUFQIHNlcnZlciB0byBjb25uZWN0LlxyXG4gICAqIERlZmF1bHQgc2V0IHRvOiA5OTNcclxuICAgKi9cclxuICBwb3J0PzogbnVtYmVyO1xyXG4gIC8qKlxyXG4gICAqIGlPUyBPTkxZXHJcbiAgICogT3B0aW9uYWwgcGFyYW1ldGVyLiBFbmNyeXB0aW9uIHR5cGUgdG8gdXNlLlxyXG4gICAqIERlZmF1bHQgc2V0IHRvOiBUTFMvU1NMXHJcbiAgICovXHJcbiAgY29ubmVjdGlvblR5cGU/OiBDb25uZWN0aW9uVHlwZTtcclxuICAvKipcclxuICAgKiBVc2VybmFtZSBvciBlbWFpbCBhZGRyZXNzIGZvciBhdXRoZW50aWNhdGlvbi5cclxuICAgKi9cclxuICB1c2VyOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogUGFzc3dvcmQgZm9yIGF1dGhlbnRpY2F0aW9uLlxyXG4gICAqL1xyXG4gIHBhc3N3b3JkOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29ubmVjdGlvbiB7XHJcbiAgLyoqXHJcbiAgICogQ29ubmVjdGlvbiBTdGF0dXM6IHRydWUgb3IgZmFsc2UsIFwidHJ1ZVwiIG1lYW5zIGNvbm5lY3RlZCBzdWNjZXNzZnVsbHk7IFwiZmFsc2VcIiBtZWFucyBmYWlsZWQgdG8gY29ubmVjdC5cclxuICAgKi9cclxuICBzdGF0dXM6IGJvb2xlYW47XHJcbiAgLyoqXHJcbiAgICogT3B0aW9uYWwgcGFyYW1ldGVyLiBBIGNvbm5lY3Rpb24gc3RyaW5nLCByZXR1cm5lZCBhcyBhIGNvbmZpcm1hdGlvbiBmb3Igc3VjY2Vzc2Z1bCBjb25uZWN0aW9uLlxyXG4gICAqL1xyXG4gIGNvbm5lY3Rpb24/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogT3B0aW9uYWwgcGFyYW1ldGVyLiBFcnJvciwgcmV0dXJuZWQgaWYgdGhlIGNvbm5lY3RpbmcgcHJvY2VzcyBoYXMgZmFpbGVkLlxyXG4gICAqL1xyXG4gIGV4Y2VwdGlvbj86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlSGVhZGVycyB7XHJcbiAgLyoqXHJcbiAgICogTWVzc2FnZSBjb25zZWN1dGl2ZSBudW1iZXIuXHJcbiAgICovXHJcbiAgbWVzc2FnZU51bWJlcjogbnVtYmVyO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBmb2xkZXIgd2hlcmUgdGhlIG1lc3NhZ2UgaXMgY29udGFpbmVkLlxyXG4gICAqL1xyXG4gIGZvbGRlcjogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFNlbmRlcidzIGRhdGEuXHJcbiAgICovXHJcbiAgZnJvbTogQWRkcmVzc1tdO1xyXG4gIC8qKlxyXG4gICAqIFRPIHJlY2lwaWVudHMgZGF0YS5cclxuICAgKi9cclxuICB0b1JlY2lwaWVudHM6IEFkZHJlc3NbXTtcclxuICAvKipcclxuICAgKiBDQyByZWNpcGllbnRzIGRhdGEuXHJcbiAgICovXHJcbiAgY2NSZWNpcGllbnRzOiBBZGRyZXNzW107XHJcbiAgLyoqXHJcbiAgICogQkNDIHJlY2lwaWVudHMgZGF0YS5cclxuICAgKi9cclxuICBiY2NSZWNpcGllbnRzOiBBZGRyZXNzW107XHJcbiAgLyoqXHJcbiAgICogVGhlIGRhdGUgd2hlbiB0aGUgbWVzc2FnZSB3YXMgcmVjZWl2ZWQuXHJcbiAgICovXHJcbiAgcmVjZWl2ZWREYXRlOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogTWVzc2FnZSdzIHN1YmplY3QgaGVhZGVyLlxyXG4gICAqL1xyXG4gIHN1YmplY3Q6IHN0cmluZztcclxuICAvKipcclxuICAgKiBNZXNzYWdlJ3MgYWN0aXZlIGZsYWdzLlxyXG4gICAqL1xyXG4gIGZsYWdzOiBzdHJpbmdbXTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlIHtcclxuICAvKipcclxuICAgKiBNZXNzYWdlIGNvbnNlY3V0aXZlIG51bWJlci5cclxuICAgKi9cclxuICBtZXNzYWdlTnVtYmVyOiBudW1iZXI7XHJcbiAgLyoqXHJcbiAgICogVGhlIG5hbWUgb2YgdGhlIGZvbGRlciB3aGVyZSB0aGUgbWVzc2FnZSBpcyBjb250YWluZWQuXHJcbiAgICovXHJcbiAgZm9sZGVyOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogU2VuZGVyJ3MgZGF0YS5cclxuICAgKi9cclxuICBmcm9tOiBBZGRyZXNzW107XHJcbiAgLyoqXHJcbiAgICogQWxsIHJlY2lwaWVudHMgZGF0YS5cclxuICAgKi9cclxuICBhbGxSZWNpcGllbnRzOiBBZGRyZXNzW107XHJcbiAgLyoqXHJcbiAgICogVE8gcmVjaXBpZW50cyBkYXRhLlxyXG4gICAqL1xyXG4gIHRvUmVjaXBpZW50czogQWRkcmVzc1tdO1xyXG4gIC8qKlxyXG4gICAqIENDIHJlY2lwaWVudHMgZGF0YS5cclxuICAgKi9cclxuICBjY1JlY2lwaWVudHM6IEFkZHJlc3NbXTtcclxuICAvKipcclxuICAgKiBCQ0MgcmVjaXBpZW50cyBkYXRhLlxyXG4gICAqL1xyXG4gIGJjY1JlY2lwaWVudHM6IEFkZHJlc3NbXTtcclxuICAvKipcclxuICAgKiBSZXBseSBkYXRhLlxyXG4gICAqL1xyXG4gIHJlcGx5VG86IEFkZHJlc3NbXTtcclxuICAvKipcclxuICAgKiBEYXRlIHdoZW4gdGhlIG1lc3NhZ2Ugd2FzIHNlbnQuXHJcbiAgICovXHJcbiAgc2VudERhdGU6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgZGF0ZSB3aGVuIHRoZSBtZXNzYWdlIHdhcyByZWNlaXZlZC5cclxuICAgKi9cclxuICByZWNlaXZlZERhdGU6IHN0cmluZztcclxuICAvKipcclxuICAgKiBNZXNzYWdlJ3Mgc3ViamVjdCBoZWFkZXIuXHJcbiAgICovXHJcbiAgc3ViamVjdDogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIEFuZHJvaWQgT05MWVxyXG4gICAqIE9wdGlvbmFsLiBTaG9ydCBkZXNjcmlwdGlvbiBmb3IgdGhlIG1lc3NhZ2UuXHJcbiAgICovXHJcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICpcclxuICAgKi9cclxuICBmaWxlTmFtZTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIEFuZHJvaWQgT05MWVxyXG4gICAqIE9wdGlvbmFsLlxyXG4gICAqL1xyXG4gIGRpc3Bvc2l0aW9uPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIE1lc3NhZ2UncyBhY3RpdmUgZmxhZ3MuXHJcbiAgICovXHJcbiAgZmxhZ3M6IHN0cmluZ1tdO1xyXG4gIC8qKlxyXG4gICAqIEFuZHJvaWQgT05MWVxyXG4gICAqIE9wdGlvbmFsLlxyXG4gICAqL1xyXG4gIGxpbmVDb3VudD86IG51bWJlcjtcclxuICAvKipcclxuICAgKiBBbmRyb2lkIE9OTFlcclxuICAgKiBPcHRpb25hbC4gQWxsIEhlYWRlcnMgYXZhaWxhYmxlIG9uIGEgbWVzc2FnZS5cclxuICAgKi9cclxuICBhbGxNZXNzYWdlSGVhZGVycz86IG9iamVjdDtcclxuICAvKipcclxuICAgKiBBbmRyb2lkIE9OTFlcclxuICAgKiBPcHRpb25hbC4gVHlwZSBvZiBtZXNzYWdlJ3MgY29udGVudC5cclxuICAgKi9cclxuICBjb250ZW50VHlwZT86IHN0cmluZztcclxuICAvKipcclxuICAgKiBNZXNzYWdlJ3MgYm9keSB3aXRoIGl0cyBjb250ZW50IGFuZCBhdHRhY2htZW50cy5cclxuICAgKi9cclxuICBib2R5Q29udGVudDogQ29udGVudFtdO1xyXG4gIC8qKlxyXG4gICAqIE1lc3NhZ2UncyBtZW1vcnkgc2l6ZS5cclxuICAgKi9cclxuICBzaXplOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWRkcmVzcyB7XHJcbiAgLyoqXHJcbiAgICogRW1haWwgYWRkcmVzcy5cclxuICAgKi9cclxuICBhZGRyZXNzOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogT3B0aW9uYWwuIE5hbWUgb2YgdGhlIGVtYWlsIGFkZHJlc3MncyBvd25lci5cclxuICAgKi9cclxuICBwZXJzb25hbD86IHN0cmluZztcclxuICAvKipcclxuICAgKiBBbmRyb2lkIE9OTFlcclxuICAgKiBPcHRpb25hbC4gRGF0YSB0eXBlLlxyXG4gICAqL1xyXG4gIHR5cGU/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29udGVudCB7XHJcbiAgLyoqXHJcbiAgICogQ29udGVudCBkYXRhIHR5cGUuXHJcbiAgICovXHJcbiAgdHlwZTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIE9wdGlvbmFsLiBUaGUgbmFtZSBvZiB0aGUgZmlsZS5cclxuICAgKi9cclxuICBmaWxlTmFtZT86IHN0cmluZztcclxuICAvKipcclxuICAgKiBNZXNzYWdlJ3MgY29udGVudC5cclxuICAgKi9cclxuICBjb250ZW50OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTW9kaWZpY2F0aW9uUmVzdWx0IHtcclxuICAvKipcclxuICAgKiBTdGF0dXMgb2YgdGhlIGFwcGxpZWQgY2hhbmdlcy4gXCJUcnVlXCIgc3VjY2VzczsgXCJGYWxzZVwiIGZhaWx1cmVcclxuICAgKi9cclxuICBzdGF0dXM6IGJvb2xlYW47XHJcbiAgLyoqXHJcbiAgICogQXJyYXkgd2l0aCBjb25zZWN1dGl2ZSBudW1iZXJzIG9mIG1vZGlmaWVkIG1lc3NhZ2VzLlxyXG4gICAqL1xyXG4gIG1vZGlmaWVkTWVzc2FnZXM6IG51bWJlcltdO1xyXG59XHJcblxyXG5leHBvcnQgZW51bSBDb25uZWN0aW9uVHlwZSB7XHJcbiAgLyoqXHJcbiAgICogQ2xlYXItdGV4dCBjb25uZWN0aW9uIGZvciB0aGUgcHJvdG9jb2wuXHJcbiAgICovXHJcbiAgQ2xlYXIgPSAnQ2xlYXInLFxyXG4gIC8qKlxyXG4gICAqIFN0YXJ0cyB3aXRoIGNsZWFyLXRleHQgY29ubmVjdGlvbiBhdCB0aGUgYmVnaW5uaW5nLCB0aGVuIHN3aXRjaCB0byBlbmNyeXB0ZWQgY29ubmVjdGlvbiB1c2luZyBUTFMvU1NMLlxyXG4gICAqL1xyXG4gIFN0YXJ0VExTID0gJ1N0YXJ0VExTJyxcclxuICAvKipcclxuICAgKiBFbmNyeXB0ZWQgY29ubmVjdGlvbiB1c2luZyBUTFMvU1NMLlxyXG4gICAqL1xyXG4gIFRMU1NTTCA9ICdUTFMvU1NMJyxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gQ29tcGFyaXNvbiB7XHJcbiAgLyoqXHJcbiAgICogQW5kcm9pZCBPTkxZXHJcbiAgICogVGhlIGxlc3MgdGhhbiBvciBlcXVhbCB0byBvcGVyYXRvci5cclxuICAgKi9cclxuICBMRSA9ICdMRScsXHJcbiAgLyoqXHJcbiAgICogVGhlIGxlc3MgdGhhbiBvcGVyYXRvci5cclxuICAgKi9cclxuICBMVCA9ICdMVCcsXHJcbiAgLyoqXHJcbiAgICogVGhlIGVxdWFsaXR5IG9wZXJhdG9yLlxyXG4gICAqL1xyXG4gIEVRID0gJ0VRJyxcclxuICAvKipcclxuICAgKiBUaGUgbm90IGVxdWFsIHRvIG9wZXJhdG9yLlxyXG4gICAqL1xyXG4gIE5FID0gJ05FJyxcclxuICAvKipcclxuICAgKiBBbmRyb2lkIE9OTFlcclxuICAgKiBUaGUgZ3JlYXRlciB0aGFuIG9wZXJhdG9yLlxyXG4gICAqL1xyXG4gIEdUID0gJ0dUJyxcclxuICAvKipcclxuICAgKiBUaGUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIG9wZXJhdG9yLlxyXG4gICAqL1xyXG4gIEdFID0gJ0dFJyxcclxufVxyXG5cclxuLyoqXHJcbiAqIEFsbCBhdmFpbGFibGUgbWVzc2FnZSBmbGFncy4gU2V0IG9yIHJlbW92ZSBmbGFnIHVzaW5nIFwic2V0RmxhZygpXCIuXHJcbiAqL1xyXG5leHBvcnQgZW51bSBGbGFnRW51bSB7XHJcbiAgLyoqXHJcbiAgICogXCJBTlNXRVJFRFwiIG1lc3NhZ2UgZmxhZ1xyXG4gICAqL1xyXG4gIEFOU1dFUkVEID0gJ0FOU1dFUkVEJyxcclxuICAvKipcclxuICAgKiBcIkRSQUZUXCIgbWVzc2FnZSBmbGFnXHJcbiAgICovXHJcbiAgRFJBRlQgPSAnRFJBRlQnLFxyXG4gIC8qKlxyXG4gICAqIFwiRkxBR0dFRFwiIG1lc3NhZ2UgZmxhZ1xyXG4gICAqL1xyXG4gIEZMQUdHRUQgPSAnRkxBR0dFRCcsXHJcbiAgLyoqXHJcbiAgICogQW5kcm9pZCBPTkxZXHJcbiAgICogXCJSRUNFTlRcIiBtZXNzYWdlIGZsYWdcclxuICAgKi9cclxuICBSRUNFTlQgPSAnUkVDRU5UJyxcclxuICAvKipcclxuICAgKiBcIlNFRU5cIiBtZXNzYWdlIGZsYWdcclxuICAgKi9cclxuICBTRUVOID0gJ1NFRU4nLFxyXG4gIC8qKlxyXG4gICAqIEFuZHJvaWQgT05MWVxyXG4gICAqIFwiVVNFUlwiIG1lc3NhZ2UgZmxhZ1xyXG4gICAqL1xyXG4gIFVTRVIgPSAnVVNFUicsXHJcbiAgLyoqXHJcbiAgICogXCJERUxFVEVEXCIgbWVzc2FnZSBmbGFnLiBOb3RlOiBBZGQgdGhpcyBmbGFnIHRvIGRlbGV0ZSB0aGUgbWVzc2FnZSBmcm9tIHRoZSBtYWlsYm94XHJcbiAgICovXHJcbiAgREVMRVRFRCA9ICdERUxFVEVEJyxcclxuICAvKipcclxuICAgKiBpT1MgT05MWVxyXG4gICAqIFwiU0VOVFwiIG1lc3NhZ2UgZmxhZy5cclxuICAgKi9cclxuICBTRU5UID0gJ1NlbnQnLFxyXG4gIC8qKlxyXG4gICAqIGlPUyBPTkxZXHJcbiAgICogXCJGT1JXQVJERURcIiBtZXNzYWdlIGZsYWcuXHJcbiAgICovXHJcbiAgRk9SV0FSREVEID0gJ0ZvcndhcmRlZCcsXHJcbiAgLyoqXHJcbiAgICogaU9TIE9OTFlcclxuICAgKiBcIlN1Ym1pdFBlbmRpbmdcIiBtZXNzYWdlIGZsYWcuXHJcbiAgICovXHJcbiAgU3VibWl0UGVuZGluZyA9ICdTdWJtaXRQZW5kaW5nJyxcclxuICAvKipcclxuICAgKiBpT1MgT05MWVxyXG4gICAqIFwiU1VCTUlUVEVEXCIgbWVzc2FnZSBmbGFnLlxyXG4gICAqL1xyXG4gIFNVQk1JVFRFRCA9ICdTdWJtaXR0ZWQnLFxyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgSW1hcFxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gd2lsbCBlbmFibGUgYSBDb3Jkb3ZhIGFwcGxpY2F0aW9uIHRvIHVzZSB0aGUgSU1BUCAoSW50ZXJuZXQgTWVzc2FnZSBBY2Nlc3MgUHJvdG9jb2wpIGZlYXR1cmVzXHJcbiAqIFRoZSBwbHVnaW4gb2ZmZXJzIHN1cHBvcnQgZm9yIEFuZHJvaWQgYW5kIGlPUy5cclxuICogVG8gZW5hYmxlIHRoZSBJTUFQIGZlYXR1cmVzIG9uIEFuZHJvaWQsIHRoaXMgcGx1Z2luIHVzZXMgdGhlIGZyYW1ld29yayBbSmF2YSBNYWlsIEFQSV0oaHR0cHM6Ly9qYXZhZWUuZ2l0aHViLmlvL2phdmFtYWlsLykgYW5kIGZvciBpT1MsIGl0IHVzZXMgdGhlIFtNYWlsQ29yZSAyXShodHRwOi8vbGlibWFpbGNvcmUuY29tLykgbGlicmFyeS5cclxuICpcclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgSW1hcCB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9pbWFwL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgaW1hcDogSW1hcCkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKlxyXG4gKiB0aGlzLmltYXAuY29ubmVjdCh7XHJcbiAqICBob3N0OiAnaW1hcC5nbWFpbC5jb20nLFxyXG4gKiAgcG9ydDogOTkzLFxyXG4gKiAgY29ubmVjdGlvblR5cGU6IENvbm5lY3Rpb25UeXBlLlRMU1NTTCAgLy8gKGlPUyBPTkxZKSBFbmNyeXB0aW9uIHR5cGUgdG8gdXNlLiBEZWZhdWx0IHNldCB0bzogVExTL1NTTFxyXG4gKiAgdXNlcjogJ215X2VtYWlsQGdtYWlsLmNvbScsXHJcbiAqICBwYXNzd29yZDogJ215LXBhc3MnXHJcbiAqIH0pXHJcbiAqICAgLnRoZW4oKHJlczogQ29ubmVjdGlvbikgPT4gY29uc29sZS5sb2cocmVzKSlcclxuICogICAuY2F0Y2goKGVycm9yKSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqXHJcbiAqXHJcbiAqICB0aGlzLmltYXAuZGlzY29ubmVjdCgpXHJcbiAqICAgLnRoZW4oKHJlczogYm9vbGVhbikgPT4gY29uc29sZS5sb2cocmVzKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICpcclxuICpcclxuICogdGhpcy5pbWFwLmlzQ29ubmVjdGVkKClcclxuICogICAudGhlbigocmVzOiBib29sZWFuKSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiAvLyBOb3RlOiBDb25uZWN0ZWQgdG8gYW4gSU1BUCBzZXJ2aWNlIGlzIFJFUVVJUkVEIHRvIGJlIGFibGUgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgYmVsb3cgZnVuY3Rpb25zLlxyXG4gKlxyXG4gKlxyXG4gKiAvLyBsaXN0TWFpbEZvbGRlcnMoJyonKSB1c2luZyBhICcqJyBwYXR0ZXJuIHdpbGwgcmV0dXJuIGFsbCBmb2xkZXIgbmFtZXNcclxuICogLy8gbGlzdE1haWxGb2xkZXJzKCdJTkJPWConKSB1c2luZyBhIHBhdHRlcm4gd2l0aCBhIGZvbGRlciBuYW1lIHdpbGwgbGlzdCBhbGwgdGhlIHN1YmZvbGRlciBuYW1lcyBvZiB0aGF0IGZvbGRlciB0aGF0IG1hdGNoIHRoZSBwYXR0ZXJuXHJcbiAqXHJcbiAqICAgdGhpcy5pbWFwLmxpc3RNYWlsRm9sZGVycygnKicpXHJcbiAqICAgLnRoZW4oKHJlczogYm9vbGVhbikgPT4gY29uc29sZS5sb2cocmVzKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICpcclxuICogICB0aGlzLmltYXAuZ2V0TWVzc2FnZUNvdW50QnlGb2xkZXJOYW1lKCdJTkJPWCcpXHJcbiAqICAgLnRoZW4oKHJlczogbnVtYmVyKSA9PiB7XHJcbiAqICAgLy8gUmV0dXJucyB0aGUgY291bnQgb2YgdGhlIG1lc3NhZ2VzIGluIHRoZSBmb2xkZXIgYXMgYSByZXN1bHRcclxuICogICAgY29uc29sZS5sb2cocmVzKVxyXG4gKiAgIH0pXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiB7XHJcbiAqICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxyXG4gKiAgIH0pO1xyXG4gKlxyXG4gKlxyXG4gKlxyXG4gKiAgIHRoaXMuaW1hcC5zZWFyY2hNZXNzYWdlc0J5RGF0ZVBlcmlvZCgnSU5CT1gnLCAxNjAxNTAzMjAwMDAwLCBDb21wYXJpc29uLkdFKVxyXG4gKiAgIC50aGVuKChyZXM6IG51bWJlcltdKSA9PiB7XHJcbiAqICAgLy8gUmV0dXJucyBhcnJheSB3aXRoIG1lc3NhZ2VzJyBjb25zZWN1dGl2ZSBudW1iZXJzXHJcbiAqICAgLy8gZXguIFsxMjA3LCAxMjA4LCAxMjA5XVxyXG4gKiAgICBjb25zb2xlLmxvZyhyZXMpXHJcbiAqICAgfSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IHtcclxuICogICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpXHJcbiAqICAgfSk7XHJcbiAqXHJcbiAqXHJcbiAqICAgdGhpcy5pbWFwLmxpc3RNZXNzYWdlc0hlYWRlcnNCeUNvbnNlY3V0aXZlTnVtYmVyKCdJTkJPWCcsIDEyMDAsIDEyODApXHJcbiAqICAgLnRoZW4oKHJlczogTWVzc2FnZUhlYWRlcnNbXSkgPT4ge1xyXG4gKiAgIC8vICBSZXR1cm5zIGFycmF5IHdpdGggbWVzc2FnZXMnIGhlYWRlcnMgZGF0YVxyXG4gKiAgICBjb25zb2xlLmxvZyhyZXMpXHJcbiAqICAgfSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IHtcclxuICogICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpXHJcbiAqICAgfSk7XHJcbiAqXHJcbiAqXHJcbiAqICAgdGhpcy5pbWFwLmxpc3RNZXNzYWdlc0hlYWRlcnNCeURhdGUoJ0lOQk9YJywgMTYwMTUwMzIwMDAwMCwgQ29tcGFyaXNvbi5HRSlcclxuICogICAudGhlbigocmVzOiBNZXNzYWdlSGVhZGVyc1tdKSA9PiB7XHJcbiAqICAgLy8gUmV0dXJucyBhcnJheSB3aXRoIG1lc3NhZ2VzJyBoZWFkZXJzIGRhdGFcclxuICogICAgY29uc29sZS5sb2cocmVzKVxyXG4gKiAgIH0pXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiB7XHJcbiAqICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxyXG4gKiAgIH0pO1xyXG4gKlxyXG4gKlxyXG4gKiAgIHRoaXMuaW1hcC5nZXRGdWxsTWVzc2FnZURhdGEoJ0lOQk9YJywgMTIwNSlcclxuICogICAudGhlbigocmVzOiBNZXNzYWdlKSA9PiB7XHJcbiAqICAgLy8gUmV0dXJucyBcIk1lc3NhZ2VcIiBvYmplY3Qgd2l0aCB0aGUgZnVsbCBtZXNzYWdlIGRhdGEgaW5jbHVkaW5nIGF0dGFjaG1lbnRzLlxyXG4gKiAgICBjb25zb2xlLmxvZyhyZXMpXHJcbiAqICAgfSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IHtcclxuICogICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpXHJcbiAqICAgfSk7XHJcbiAqXHJcbiAqXHJcbiAqICB0aGlzLmltYXAuZ2V0RnVsbE1lc3NhZ2VEYXRhT25OZXdTZXNzaW9uKHtcclxuICogICAgICBob3N0OiAnaW1hcC5nbWFpbC5jb20nLFxyXG4gKiAgICAgIHBvcnQ6IDk5MyxcclxuICogICAgICBjb25uZWN0aW9uVHlwZTogQ29ubmVjdGlvblR5cGUuVExTU1NMICAvLyAoaU9TIE9OTFkpIEVuY3J5cHRpb24gdHlwZSB0byB1c2UuIERlZmF1bHQgc2V0IHRvOiBUTFMvU1NMXHJcbiAqICAgICAgdXNlcjogJ215X2VtYWlsQGdtYWlsLmNvbScsXHJcbiAqICAgICAgcGFzc3dvcmQ6ICdteS1wYXNzJ1xyXG4gKiAgICB9LCAnSU5CT1gnLCAxMjA1KVxyXG4gKiAgIC50aGVuKChyZXM6IE1lc3NhZ2UpID0+IHtcclxuICogICAvLyBSZXR1cm5zIFwiTWVzc2FnZVwiIG9iamVjdCB3aXRoIHRoZSBmdWxsIG1lc3NhZ2UgZGF0YSBpbmNsdWRpbmcgYXR0YWNobWVudHMuXHJcbiAqICAgIGNvbnNvbGUubG9nKHJlcylcclxuICogICB9KVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4ge1xyXG4gKiAgICAgY29uc29sZS5lcnJvcihlcnJvcilcclxuICogICB9KTtcclxuICpcclxuICpcclxuICogICB0aGlzLmltYXAuY29weVRvRm9sZGVyKCdJTkJPWCcsICdTcGFtJywgWzEyMDQsIDEyMDUsIDEyMDYsIDEyMDddKVxyXG4gKiAgIC50aGVuKChyZXM6IGJvb2xlYW4pID0+IHtcclxuICogICAvLyBSZXR1cm5zIFwidHJ1ZVwiIGlmIHRoZSBwcm9jZXNzIGlzIHN1Y2Nlc3NmdWwsIGVsc2UgcmV0dXJucyBcImZhbHNlXCIuXHJcbiAqICAgIGNvbnNvbGUubG9nKHJlcylcclxuICogICB9KVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4ge1xyXG4gKiAgICAgY29uc29sZS5lcnJvcihlcnJvcilcclxuICogICB9KTtcclxuICpcclxuICpcclxuICogICAqIFNldHMgYSBmbGFnIG9uIGEgbWVzc2FnZVxyXG4gKiAgICogXCJzZXRGbGFnKClcIiBjYW4gYmUgdXNlZCBmb3IgZGVsZXRpbmcgbWVzc2FnZXMgc2V0dGluZyB0aGUgRGVsZXRlIGZsYWcgdG8gXCJGbGFnRW51bS5ERUxFVEVEXCJcclxuICogICB0aGlzLmltYXAuc2V0RmxhZygnSU5CT1gnLCBbMTIwNiwgMTIwNSwgMTIwNF0sIEZsYWdFbnVtLlNFRU4sIHRydWUpXHJcbiAqICAgLnRoZW4oKHJlczogTW9kaWZpY2F0aW9uUmVzdWx0KSA9PiB7XHJcbiAqXHJcbiAqICAgIC8vIHJlcy5zdGF0dXMgLSByZXR1cm4gdHJ1ZSBvciBmYWxzZSBiYXNlZCBvbiB0aGUgZGVsZXRpb24gc3VjY2Vzc1xyXG4gKlxyXG4gKiAgIC8vcmVzLm1vZGlmaWVkTWVzc2FnZXMgLSBmb3IgZXguWzEyMDYsIDEyMDUsIDEyMDRdO1xyXG4gKlxyXG4gKiAgIH0pXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiB7XHJcbiAqICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxyXG4gKiAgIH0pO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdJbWFwJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1pbWFwJyxcclxuICBwbHVnaW5SZWY6ICdpbWFwJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FsZWtzYW5kYXI4ODgvY29yZG92YS1wbHVnaW4taW1hcC5naXQnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBJbWFwIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZnVuY3Rpb24gXCJjb25uZWN0KGNsaWVudERhdGE6IENvbmZpZylcIiB0cmllcyB0byBjb25uZWN0IGFuZCBhdXRoZW50aWNhdGUgd2l0aCB0aGUgSU1BUCBzZXJ2ZXIuXHJcbiAgICogQHBhcmFtIGNsaWVudERhdGEge0NvbmZpZ30gQ29ubmVjdGlvbiBjb25maWd1cmF0aW9uXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxDb25uZWN0aW9uPn0gUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgY29ubmVjdGlvbiBkYXRhXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNvbm5lY3QoY2xpZW50RGF0YTogQ29uZmlnKTogUHJvbWlzZTxDb25uZWN0aW9uPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBcImRpc2Nvbm5lY3QoKVwiIENsb3NlcyB0aGUgY29ubmVjdGlvbiB3aXRoIHRoZSBzZXJ2ZXIuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2Ugc3RhdHVzLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBkaXNjb25uZWN0KCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogXCJpc0Nvbm5lY3RlZCgpXCIgQ2hlY2tzIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBjb25uZWN0aW9uLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59IFJldHVybnMgYSBwcm9taXNlIHdpdGggY29ubmVjdGlvbiBzdGF0dXNcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaXNDb25uZWN0ZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKiogIE5vdGU6IENvbm5lY3RlZCB0byBhbiBJTUFQIHNlcnZpY2UgaXMgUkVRVUlSRUQgdG8gYmUgYWJsZSB0byBnZXQgZGF0YSBmcm9tIHRoZSBiZWxvdyBmdW5jdGlvbnMuICAqL1xyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIEZvbGRlciBuYW1lcyBiYXNlZCBvbiBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBwYXR0ZXJuLlxyXG4gICAqXHJcbiAgICogRXhhbXBsZTpcclxuICAgKlxyXG4gICAqIGxpc3RNYWlsRm9sZGVycygnKicpIHVzaW5nIGEgJyonIHBhdHRlcm4gd2lsbCByZXR1cm4gYWxsIGZvbGRlciBuYW1lc1xyXG4gICAqIGxpc3RNYWlsRm9sZGVycygnSU5CT1gqJykgdXNpbmcgYSBwYXR0ZXJuIHdpdGggYSBmb2xkZXIgbmFtZSB3aWxsIGxpc3QgYWxsIHRoZSBzdWJmb2xkZXIgbmFtZXMgdGhhdCBtYXRjaCB0aGUgcGF0dGVyblxyXG4gICAqXHJcbiAgICpcclxuICAgKiBcImxpc3RNYWlsRm9sZGVycyhwYXR0ZXJuOiBzdHJpbmcpXCIgTGlzdHMgdGhlIG5hbWUgb2YgbWFpbCBmb2xkZXJzIGluIHRoZSBtYWlsYm94LlxyXG4gICAqIEBwYXJhbSBwYXR0ZXJuIHtzdHJpbmd9IFJlZ3VsYXIgZXhwcmVzc2lvbiBwYXR0ZXJuLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nW10+fSBSZXR1cm5zIGFycmF5IG9mIGZvbGRlciBuYW1lcyBtYXRjaGluZyB0aGUgcGF0dGVybi5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgbGlzdE1haWxGb2xkZXJzKHBhdHRlcm46IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFwiZ2V0TWVzc2FnZUNvdW50QnlGb2xkZXJOYW1lKGZvbGRlck5hbWU6IHN0cmluZylcIiBHZXRzIHRoZSBjb3VudCBvZiB0aGUgbWVzc2FnZXMgaW4gdGhlIGZvbGRlci5cclxuICAgKiBAcGFyYW0gZm9sZGVyTmFtZSB7c3RyaW5nfSBUaGUgbmFtZSBvZiB0aGUgZGVzaXJlZCBmb2xkZXIuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxudW1iZXI+fSBSZXR1cm5zIHRoZSBjb25zZWN1dGl2ZSBudW1iZXIgb2YgdGhlIGxhc3QgbWVzc2FnZS5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0TWVzc2FnZUNvdW50QnlGb2xkZXJOYW1lKGZvbGRlck5hbWU6IHN0cmluZyk6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBcInNlYXJjaE1lc3NhZ2VzQnlEYXRlUGVyaW9kKGZvbGRlck5hbWU6IHN0cmluZywgZGF0ZUluTWlsbGlzZWNvbmRzOiBudW1iZXIsIGNvbXBhcmlzb246IENvbXBhcmlzb24pXCIgUmV0dXJucyB0aGUgbWVzc2FnZXMnIGNvbnNlY3V0aXZlIG51bWJlci5cclxuICAgKiBAcGFyYW0gZm9sZGVyTmFtZSB7c3RyaW5nfSBUaGUgbmFtZSBvZiB0aGUgZGVzaXJlZCBmb2xkZXJcclxuICAgKiBAcGFyYW0gZGF0ZUluTWlsbGlzZWNvbmRzIHtudW1iZXJ9IERhdGUgaW4gbWlsbGlzZWNvbmRzXHJcbiAgICogQHBhcmFtIGNvbXBhcmlzb24ge0NvbXBhcmlzb259IEEgY29tcGFyaXNvbiBvcGVyYXRvclxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8bnVtYmVyW10+fSBSZXR1cm5zIGFycmF5IHdpdGggdGhlIG1lc3NhZ2VzJyBjb25zZWN1dGl2ZSBudW1iZXJzLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZWFyY2hNZXNzYWdlc0J5RGF0ZVBlcmlvZChcclxuICAgIGZvbGRlck5hbWU6IHN0cmluZyxcclxuICAgIGRhdGVJbk1pbGxpc2Vjb25kczogbnVtYmVyLFxyXG4gICAgY29tcGFyaXNvbjogQ29tcGFyaXNvblxyXG4gICk6IFByb21pc2U8bnVtYmVyW10+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFwibGlzdE1lc3NhZ2VzSGVhZGVyc0J5Q29uc2VjdXRpdmVOdW1iZXIoZm9sZGVyTmFtZTogc3RyaW5nLCBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcilcIiBSZXR1cm5zIG1lc3NhZ2VzJyBoZWFkZXJzIGRhdGEgYmFzZWQgb24gYSBcInN0YXJ0XCIgYW5kIFwiZW5kXCIgbWVzc2FnZSBjb25zZWN1dGl2ZSBudW1iZXIuXHJcbiAgICogQHBhcmFtIGZvbGRlck5hbWUge3N0cmluZ30gVGhlIG5hbWUgb2YgdGhlIGRlc2lyZWQgZm9sZGVyXHJcbiAgICogQHBhcmFtIHN0YXJ0IHtudW1iZXJ9IENvbnNlY3V0aXZlIG51bWJlciBvZiB0aGUgZmlyc3QgbWVzc2FnZS5cclxuICAgKiBAcGFyYW0gZW5kIHtudW1iZXJ9IENvbnNlY3V0aXZlIG51bWJlciBvZiB0aGUgbGFzdCBtZXNzYWdlXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxNZXNzYWdlSGVhZGVyc1tdPn0gUmV0dXJucyBhcnJheSB3aXRoIHRoZSBtZXNzYWdlcycgaGVhZGVycyBkYXRhLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBsaXN0TWVzc2FnZXNIZWFkZXJzQnlDb25zZWN1dGl2ZU51bWJlcihmb2xkZXJOYW1lOiBzdHJpbmcsIHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTogUHJvbWlzZTxNZXNzYWdlSGVhZGVyc1tdPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBcImxpc3RNZXNzYWdlc0hlYWRlcnNCeURhdGUoZm9sZGVyTmFtZTogc3RyaW5nLCBkYXRlSW5NaWxsaXNlY29uZHM6IG51bWJlciwgY29tcGFyaXNvbjogQ29tcGFyaXNvbilcIiBSZXR1cm5zIG1lc3NhZ2VzJyBoZWFkZXJzIGRhdGEgYmFzZWQgb24gYSBkYXRlLlxyXG4gICAqIEBwYXJhbSBmb2xkZXJOYW1lIHtzdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSBkZXNpcmVkIGZvbGRlclxyXG4gICAqIEBwYXJhbSBkYXRlSW5NaWxsaXNlY29uZHMge251bWJlcn0gRGF0ZSBpbiBtaWxsaXNlY29uZHMuXHJcbiAgICogQHBhcmFtIGNvbXBhcmlzb24ge0NvbXBhcmlzb259IEEgY29tcGFyaXNvbiBvcGVyYXRvclxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8TWVzc2FnZUhlYWRlcnNbXT59IFJldHVybnMgYXJyYXkgbWVzc2FnZXMnIGhlYWRlcnMgZGF0YS5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgbGlzdE1lc3NhZ2VzSGVhZGVyc0J5RGF0ZShcclxuICAgIGZvbGRlck5hbWU6IHN0cmluZyxcclxuICAgIGRhdGVJbk1pbGxpc2Vjb25kczogbnVtYmVyLFxyXG4gICAgY29tcGFyaXNvbjogQ29tcGFyaXNvblxyXG4gICk6IFByb21pc2U8TWVzc2FnZUhlYWRlcnNbXT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogXCJnZXRGdWxsTWVzc2FnZURhdGEoZm9sZGVyTmFtZTogc3RyaW5nLCBtZXNzYWdlTnVtYmVyOiBudW1iZXIpXCIgUmV0dXJucyB0aGUgZnVsbCBtZXNzYWdlIGRhdGEgaW5jbHVkaW5nIGl0cyBhdHRhY2htZW50cy5cclxuICAgKiBAcGFyYW0gZm9sZGVyTmFtZSB7c3RyaW5nfSBUaGUgbmFtZSB0aGUgbWVzc2FnZSdzIGZvbGRlci5cclxuICAgKiBAcGFyYW0gbWVzc2FnZU51bWJlciB7bnVtYmVyfSBNZXNzYWdlJ3MgY29uc2VjdXRpdmUgbnVtYmVyLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8TWVzc2FnZT59IFJldHVybnMgXCJNZXNzYWdlXCIgb2JqZWN0IHdpdGggZnVsbCBtZXNzYWdlIGRhdGEuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldEZ1bGxNZXNzYWdlRGF0YShmb2xkZXJOYW1lOiBzdHJpbmcsIG1lc3NhZ2VOdW1iZXI6IG51bWJlcik6IFByb21pc2U8TWVzc2FnZT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBUaGlzIGZ1bmN0aW9uIFwiZ2V0RnVsbE1lc3NhZ2VEYXRhT25OZXdTZXNzaW9uKGNsaWVudERhdGE6IENvbmZpZywgZm9sZGVyTmFtZTogc3RyaW5nLCBtZXNzYWdlTnVtYmVyOiBudW1iZXIpXCIgZG93bmxvYWRzIHRoZSBmdWxsIG1lc3NhZ2UgZGF0YSB1c2luZyBhXHJcbiAgICogc2VwYXJhdGUgc2Vzc2lvbiB3aXRoIHRoZSBzZXJ2ZXIuIEl0IGlzIHN1aXRhYmxlIGZvciBkb3dubG9hZGluZyBtZXNzYWdlIGRhdGEgd2hpbGUgdGhlIGFwcCBpcyBhbHJlYWR5IGNvbm5lY3RlZCB0byBhIHRoaXJkIHNlcnZlci5cclxuICAgKiBcImdldEZ1bGxNZXNzYWdlRGF0YU9uTmV3U2Vzc2lvbihjbGllbnREYXRhOiBDb25maWcsIGZvbGRlck5hbWU6IHN0cmluZywgbWVzc2FnZU51bWJlcjogbnVtYmVyKVwiIFJldHVybnMgdGhlIGZ1bGwgbWVzc2FnZSBkYXRhIGluY2x1ZGluZyBpdHMgYXR0YWNobWVudHMuXHJcbiAgICogQHBhcmFtIGNsaWVudERhdGEge0NvbmZpZ30gQ29ubmVjdGlvbiBjb25maWd1cmF0aW9uLlxyXG4gICAqIEBwYXJhbSBmb2xkZXJOYW1lIHtzdHJpbmd9IFRoZSBuYW1lIHRoZSBtZXNzYWdlJ3MgZm9sZGVyLlxyXG4gICAqIEBwYXJhbSBtZXNzYWdlTnVtYmVyIHtudW1iZXJ9IE1lc3NhZ2UncyBjb25zZWN1dGl2ZSBudW1iZXIuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxNZXNzYWdlPn0gUmV0dXJucyBcIk1lc3NhZ2VcIiBvYmplY3Qgd2l0aCBmdWxsIG1lc3NhZ2UgZGF0YS5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0RnVsbE1lc3NhZ2VEYXRhT25OZXdTZXNzaW9uKGNsaWVudERhdGE6IENvbmZpZywgZm9sZGVyTmFtZTogc3RyaW5nLCBtZXNzYWdlTnVtYmVyOiBudW1iZXIpOiBQcm9taXNlPE1lc3NhZ2U+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFwiY29weVRvRm9sZGVyKHNvdXJjZUZvbGRlcjogc3RyaW5nLCBkZXN0aW5hdGlvbkZvbGRlcjogc3RyaW5nLCBtZXNzYWdlTnVtczogbnVtYmVyW10pXCIgQ29weSBtZXNzYWdlcyB0byBhIGRlc2lyZWQgZm9sZGVyLlxyXG4gICAqIEBwYXJhbSBzb3VyY2VGb2xkZXIge3N0cmluZ30gVGhlIG5hbWUgb2YgdGhlIHNvdXJjZSBmb2xkZXIuXHJcbiAgICogQHBhcmFtIGRlc3RpbmF0aW9uRm9sZGVyIHtzdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSBkZXN0aW5hdGlvbiBmb2xkZXIuXHJcbiAgICogQHBhcmFtIG1lc3NhZ2VOdW1zIHtudW1iZXJbXX0gQXJyYXkgd2l0aCBtZXNzYWdlcycgY29uc2VjdXRpdmUgbnVtYmVycyBvciBhcnJheSB3aXRoIHNpbmdsZSBtZXNzYWdlIGNvbnNlY3V0aXZlIG51bWJlci5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPE1lc3NhZ2U+fSBSZXR1cm5zIGJvb2xlYW4gc3RhdHVzIG9mIHRoZSBwcm9jZXNzLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjb3B5VG9Gb2xkZXIoc291cmNlRm9sZGVyOiBzdHJpbmcsIGRlc3RpbmF0aW9uRm9sZGVyOiBzdHJpbmcsIG1lc3NhZ2VOdW1zOiBudW1iZXJbXSk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogXCJzZXRGbGFnKGZvbGRlck5hbWU6IHN0cmluZywgbWVzc2FnZU51bXM6IG51bWJlcltdLCBmbGFnOiBGbGFnRW51bSwgc3RhdHVzOiBib29sZWFuKVwiIFNldCBvciByZW1vdmUgZmxhZyBmcm9tIGEgbWVzc2FnZVxyXG4gICAqIEBwYXJhbSBmb2xkZXJOYW1lIHtzdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSBzb3VyY2UgZm9sZGVyIHdoZXJlIHRoZSBtZXNzYWdlcyBhcmUgY29udGFpbmVkLlxyXG4gICAqIEBwYXJhbSBtZXNzYWdlTnVtcyB7bnVtYmVyW119IEFycmF5IHdpdGggbWVzc2FnZXMnIGNvbnNlY3V0aXZlIG51bWJlcnMgb3IgYXJyYXkgd2l0aCBzaW5nbGUgbWVzc2FnZSBjb25zZWN1dGl2ZSBudW1iZXJcclxuICAgKiBAcGFyYW0gZmxhZyB7RmxhZ0VudW19IERlc2lyZWQgbWVzc2FnZSBmbGFnLlxyXG4gICAqIEBwYXJhbSBzdGF0dXMge2Jvb2xlYW59IFNldCBzdGF0dXMgdG8gXCJ0cnVlXCIgdG8gc2V0IHRoZSBmbGFnIG9uIGEgbWVzc2FnZTsgb3IgdG8gXCJmYWxzZVwiIHRvIHJlbW92ZSB0aGUgZmxhZyBmcm9tIHRoZSBtZXNzYWdlXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxNb2RpZmljYXRpb25SZXN1bHQ+fSBSZXR1cm5zIG9iamVjdCB3aXRoIHN0YXR1cyBhbmQgYXJyYXkgd2l0aCBtZXNzYWdlcycgY29uc2VjdXRpdmUgbnVtYmVycyBvZiB0aGUgbW9kaWZpZWQgbWVzc2FnZXNcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2V0RmxhZyhmb2xkZXJOYW1lOiBzdHJpbmcsIG1lc3NhZ2VOdW1zOiBudW1iZXJbXSwgZmxhZzogRmxhZ0VudW0sIHN0YXR1czogYm9vbGVhbik6IFByb21pc2U8TW9kaWZpY2F0aW9uUmVzdWx0PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==