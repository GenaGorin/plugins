import { __extends, __spreadArrays } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova, getPromise } from '@awesome-cordova-plugins/core';
var NestedObject = /** @class */ (function () {
    function NestedObject(pluginObj) {
        this.pluginObj = pluginObj;
    }
    NestedObject.prototype.wrap = function (functionName, args) {
        var plugin = WonderPush.getPlugin();
        var userPreferences = plugin ? plugin.UserPreferences : null;
        if (!plugin || !userPreferences || !userPreferences[functionName]) {
            return getPromise(function (res, rej) {
                rej(new Error('Could not find plugin'));
            });
        }
        return getPromise(function (res, rej) {
            userPreferences[functionName].apply(userPreferences, __spreadArrays(args, [res]));
        });
    };
    return NestedObject;
}());
export { NestedObject };
var UserPreferencesMethods = /** @class */ (function (_super) {
    __extends(UserPreferencesMethods, _super);
    function UserPreferencesMethods() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get the default channel id
     *
     * @returns {Promise<string>}
     */
    UserPreferencesMethods.prototype.getDefaultChannelId = function () {
        return this.wrap('getDefaultChannelId', []);
    };
    /**
     * Set the default channel id
     *
     * @param {string} id
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.setDefaultChannelId = function (id) {
        return this.wrap('setDefaultChannelId', [id]);
    };
    /**
     * Get a channel group
     *
     * @param {string} groupId
     * @returns {Promise<WonderPushChannelGroup | null>}
     */
    UserPreferencesMethods.prototype.getChannelGroup = function (groupId) {
        return this.wrap('getChannelGroup', [groupId]);
    };
    /**
     * Get a channel
     *
     * @param {string} channelId
     * @returns {Promise<WonderPushChannel | null>}
     */
    UserPreferencesMethods.prototype.getChannel = function (channelId) {
        return this.wrap('getChannel', [channelId]);
    };
    /**
     * Create, update and remove channel existing groups to match the given channel groups
     *
     * @param {WonderPushChannelGroup[]} channelGroups
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.setChannelGroups = function (channelGroups) {
        return this.wrap('setChannelGroups', [channelGroups]);
    };
    /**
     * Create, update and remove channels to match the given channels
     *
     * @param {WonderPushChannel[]} channels
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.setChannels = function (channels) {
        return this.wrap('setChannels', [channels]);
    };
    /**
     * Create or update a channel group
     *
     * @param {WonderPushChannelGroup} channelGroup
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.putChannelGroup = function (channelGroup) {
        return this.wrap('putChannelGroup', [channelGroup]);
    };
    /**
     * Create or update a channel
     *
     * @param {WonderPushChannel} channel
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.putChannel = function (channel) {
        return this.wrap('putChannel', [channel]);
    };
    /**
     * Remove a channel group
     *
     * @param {string} groupId
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.removeChannelGroup = function (groupId) {
        return this.wrap('removeChannelGroup', [groupId]);
    };
    /**
     * Remove a channel
     *
     * @param {string} channelId
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.removeChannel = function (channelId) {
        return this.wrap('removeChannel', [channelId]);
    };
    return UserPreferencesMethods;
}(NestedObject));
export { UserPreferencesMethods };
var WonderPush = /** @class */ (function (_super) {
    __extends(WonderPush, _super);
    function WonderPush() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.UserPreferences = new UserPreferencesMethods(_this);
        return _this;
    }
    WonderPush.prototype.setUserId = function (userId) { return cordova(this, "setUserId", {}, arguments); };
    WonderPush.prototype.setLogging = function (enabled) { return cordova(this, "setLogging", {}, arguments); };
    WonderPush.prototype.setDelegate = function (delegate) { return cordova(this, "setDelegate", {}, arguments); };
    WonderPush.prototype.getDelegate = function () { return cordova(this, "getDelegate", {}, arguments); };
    WonderPush.prototype.getUserId = function () { return cordova(this, "getUserId", {}, arguments); };
    WonderPush.prototype.getInstallationId = function () { return cordova(this, "getInstallationId", {}, arguments); };
    WonderPush.prototype.getDeviceId = function () { return cordova(this, "getDeviceId", {}, arguments); };
    WonderPush.prototype.getPushToken = function () { return cordova(this, "getPushToken", {}, arguments); };
    WonderPush.prototype.getAccessToken = function () { return cordova(this, "getAccessToken", {}, arguments); };
    WonderPush.prototype.trackEvent = function (type, attributes) { return cordova(this, "trackEvent", {}, arguments); };
    WonderPush.prototype.addTag = function (tag) { return cordova(this, "addTag", {}, arguments); };
    WonderPush.prototype.removeTag = function (tag) { return cordova(this, "removeTag", {}, arguments); };
    WonderPush.prototype.removeAllTags = function () { return cordova(this, "removeAllTags", {}, arguments); };
    WonderPush.prototype.getTags = function () { return cordova(this, "getTags", {}, arguments); };
    WonderPush.prototype.hasTag = function (tag) { return cordova(this, "hasTag", {}, arguments); };
    WonderPush.prototype.setProperty = function (field, value) { return cordova(this, "setProperty", {}, arguments); };
    WonderPush.prototype.unsetProperty = function (field) { return cordova(this, "unsetProperty", {}, arguments); };
    WonderPush.prototype.addProperty = function (field, value) { return cordova(this, "addProperty", {}, arguments); };
    WonderPush.prototype.removeProperty = function (field, value) { return cordova(this, "removeProperty", {}, arguments); };
    WonderPush.prototype.getPropertyValue = function (field) { return cordova(this, "getPropertyValue", {}, arguments); };
    WonderPush.prototype.getPropertyValues = function (field) { return cordova(this, "getPropertyValues", {}, arguments); };
    WonderPush.prototype.getProperties = function () { return cordova(this, "getProperties", {}, arguments); };
    WonderPush.prototype.putProperties = function (properties) { return cordova(this, "putProperties", {}, arguments); };
    WonderPush.prototype.subscribeToNotifications = function () { return cordova(this, "subscribeToNotifications", {}, arguments); };
    WonderPush.prototype.isSubscribedToNotifications = function () { return cordova(this, "isSubscribedToNotifications", {}, arguments); };
    WonderPush.prototype.unsubscribeFromNotifications = function () { return cordova(this, "unsubscribeFromNotifications", {}, arguments); };
    WonderPush.prototype.getUserConsent = function () { return cordova(this, "getUserConsent", {}, arguments); };
    WonderPush.prototype.setUserConsent = function (consent) { return cordova(this, "setUserConsent", {}, arguments); };
    WonderPush.prototype.clearAllData = function () { return cordova(this, "clearAllData", {}, arguments); };
    WonderPush.prototype.clearEventsHistory = function () { return cordova(this, "clearEventsHistory", {}, arguments); };
    WonderPush.prototype.clearPreferences = function () { return cordova(this, "clearPreferences", {}, arguments); };
    WonderPush.prototype.downloadAllData = function () { return cordova(this, "downloadAllData", {}, arguments); };
    WonderPush.pluginName = "WonderPush";
    WonderPush.plugin = "wonderpush-cordova-sdk";
    WonderPush.pluginRef = "WonderPush";
    WonderPush.repo = "https://github.com/wonderpush/wonderpush-cordova-sdk";
    WonderPush.install = "ionic cordova plugin add wonderpush-cordova-sdk --variable CLIENT_ID=YOUR_CLIENT_ID --variable CLIENT_SECRET=YOUR_CLIENT_SECRET ";
    WonderPush.installVariables = ["CLIENT_ID", "CLIENT_SECRET"];
    WonderPush.platforms = ["Android", "iOS"];
    WonderPush.decorators = [
        { type: Injectable }
    ];
    return WonderPush;
}(AwesomeCordovaNativePlugin));
export { WonderPush };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvd29uZGVycHVzaC9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyx1Q0FBK0MsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7O0lBZ0N0RyxzQkFBWSxTQUFjO1FBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBQzdCLENBQUM7SUFFRCwyQkFBSSxHQUFKLFVBQVEsWUFBb0IsRUFBRSxJQUFXO1FBQ3ZDLElBQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN0QyxJQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUMvRCxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsZUFBZSxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ2pFLE9BQU8sVUFBVSxDQUFJLFVBQUMsR0FBRyxFQUFFLEdBQUc7Z0JBQzVCLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUM7WUFDMUMsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sVUFBVSxDQUFJLFVBQUMsR0FBRyxFQUFFLEdBQUc7WUFDNUIsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxlQUFlLGlCQUFNLElBQUksR0FBRSxHQUFHLEdBQUUsQ0FBQztRQUN2RSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7dUJBaERIOzs7O0lBbUQ0QywwQ0FBWTs7OztJQUN0RDs7OztPQUlHO0lBQ0gsb0RBQW1CLEdBQW5CO1FBQ0UsT0FBTyxJQUFJLENBQUMsSUFBSSxD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Ozs7Ozs7O2dCQXRZaEIsVUFBVTs7cUJBbE9YO0VBbU9nQywwQkFBMEI7U0FBN0MsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgZ2V0UHJvbWlzZSB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgV29uZGVyUHVzaERlbGVnYXRlIHtcclxuICB1cmxGb3JEZWVwTGluayh1cmw6IHN0cmluZywgY2FsbGJhY2s6ICh1cmw/OiBzdHJpbmcpID0+IHZvaWQpOiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFdvbmRlclB1c2hDaGFubmVsIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIGdyb3VwSWQ/OiBzdHJpbmc7XHJcbiAgbmFtZT86IHN0cmluZztcclxuICBkZXNjcmlwdGlvbj86IHN0cmluZztcclxuICBieXBhc3NEbmQ/OiBib29sZWFuO1xyXG4gIHNob3dCYWRnZT86IGJvb2xlYW47XHJcbiAgaW1wb3J0YW5jZT86IG51bWJlcjtcclxuICBsaWdodHM/OiBib29sZWFuO1xyXG4gIGxpZ2h0Q29sb3I/OiBudW1iZXI7XHJcbiAgdmlicmF0ZT86IGJvb2xlYW47XHJcbiAgc291bmQ/OiBib29sZWFuO1xyXG4gIHNvdW5kVXJpPzogc3RyaW5nO1xyXG4gIGxvY2tzY3JlZW5WaXNpYmlsaXR5PzogbnVtYmVyO1xyXG4gIHZpYnJhdGVJblNpbGVudE1vZGU/OiBib29sZWFuO1xyXG4gIGNvbG9yPzogbnVtYmVyO1xyXG4gIGxvY2FsT25seT86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgV29uZGVyUHVzaENoYW5uZWxHcm91cCB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBuYW1lPzogc3RyaW5nO1xyXG59XHJcblxyXG5jbGFzcyBOZXN0ZWRPYmplY3Qge1xyXG4gIHBsdWdpbk9iajogYW55O1xyXG4gIGNvbnN0cnVjdG9yKHBsdWdpbk9iajogYW55KSB7XHJcbiAgICB0aGlzLnBsdWdpbk9iaiA9IHBsdWdpbk9iajtcclxuICB9XHJcblxyXG4gIHdyYXA8VD4oZnVuY3Rpb25OYW1lOiBzdHJpbmcsIGFyZ3M6IGFueVtdKTogUHJvbWlzZTxUPiB7XHJcbiAgICBjb25zdCBwbHVnaW4gPSBXb25kZXJQdXNoLmdldFBsdWdpbigpO1xyXG4gICAgY29uc3QgdXNlclByZWZlcmVuY2VzID0gcGx1Z2luID8gcGx1Z2luLlVzZXJQcmVmZXJlbmNlcyA6IG51bGw7XHJcbiAgICBpZiAoIXBsdWdpbiB8fCAhdXNlclByZWZlcmVuY2VzIHx8ICF1c2VyUHJlZmVyZW5jZXNbZnVuY3Rpb25OYW1lXSkge1xyXG4gICAgICByZXR1cm4gZ2V0UHJvbWlzZTxUPigocmVzLCByZWopID0+IHtcclxuICAgICAgICByZWoobmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCBwbHVnaW4nKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGdldFByb21pc2U8VD4oKHJlcywgcmVqKSA9PiB7XHJcbiAgICAgIHVzZXJQcmVmZXJlbmNlc1tmdW5jdGlvbk5hbWVdLmFwcGx5KHVzZXJQcmVmZXJlbmNlcywgWy4uLmFyZ3MsIHJlc10pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVXNlclByZWZlcmVuY2VzTWV0aG9kcyBleHRlbmRzIE5lc3RlZE9iamVjdCB7XHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBkZWZhdWx0IGNoYW5uZWwgaWRcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XHJcbiAgICovXHJcbiAgZ2V0RGVmYXVsdENoYW5uZWxJZCgpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuIHRoaXMud3JhcDxzdHJpbmcgfCBudWxsPignZ2V0RGVmYXVsdENoYW5uZWxJZCcsIFtdKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCB0aGUgZGVmYXVsdCBjaGFubmVsIGlkXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIHNldERlZmF1bHRDaGFubmVsSWQoaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy53cmFwKCdzZXREZWZhdWx0Q2hhbm5lbElkJywgW2lkXSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgYSBjaGFubmVsIGdyb3VwXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZ3JvdXBJZFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFdvbmRlclB1c2hDaGFubmVsR3JvdXAgfCBudWxsPn1cclxuICAgKi9cclxuICBnZXRDaGFubmVsR3JvdXAoZ3JvdXBJZDogc3RyaW5nKTogUHJvbWlzZTxXb25kZXJQdXNoQ2hhbm5lbEdyb3VwIHwgbnVsbD4ge1xyXG4gICAgcmV0dXJuIHRoaXMud3JhcDxXb25kZXJQdXNoQ2hhbm5lbEdyb3VwIHwgbnVsbD4oJ2dldENoYW5uZWxHcm91cCcsIFtncm91cElkXSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgYSBjaGFubmVsXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hhbm5lbElkXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8V29uZGVyUHVzaENoYW5uZWwgfCBudWxsPn1cclxuICAgKi9cclxuICBnZXRDaGFubmVsKGNoYW5uZWxJZDogc3RyaW5nKTogUHJvbWlzZTxXb25kZXJQdXNoQ2hhbm5lbCB8IG51bGw+IHtcclxuICAgIHJldHVybiB0aGlzLndyYXA8V29uZGVyUHVzaENoYW5uZWwgfCBudWxsPignZ2V0Q2hhbm5lbCcsIFtjaGFubmVsSWRdKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSwgdXBkYXRlIGFuZCByZW1vdmUgY2hhbm5lbCBleGlzdGluZyBncm91cHMgdG8gbWF0Y2ggdGhlIGdpdmVuIGNoYW5uZWwgZ3JvdXBzXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1dvbmRlclB1c2hDaGFubmVsR3JvdXBbXX0gY2hhbm5lbEdyb3Vwc1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgc2V0Q2hhbm5lbEdyb3VwcyhjaGFubmVsR3JvdXBzOiBXb25kZXJQdXNoQ2hhbm5lbEdyb3VwW10pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMud3JhcCgnc2V0Q2hhbm5lbEdyb3VwcycsIFtjaGFubmVsR3JvdXBzXSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUsIHVwZGF0ZSBhbmQgcmVtb3ZlIGNoYW5uZWxzIHRvIG1hdGNoIHRoZSBnaXZlbiBjaGFubmVsc1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtXb25kZXJQdXNoQ2hhbm5lbFtdfSBjaGFubmVsc1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgc2V0Q2hhbm5lbHMoY2hhbm5lbHM6IFdvbmRlclB1c2hDaGFubmVsW10pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMud3JhcCgnc2V0Q2hhbm5lbHMnLCBbY2hhbm5lbHNdKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBvciB1cGRhdGUgYSBjaGFubmVsIGdyb3VwXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1dvbmRlclB1c2hDaGFubmVsR3JvdXB9IGNoYW5uZWxHcm91cFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgcHV0Q2hhbm5lbEdyb3VwKGNoYW5uZWxHcm91cDogV29uZGVyUHVzaENoYW5uZWxHcm91cCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy53cmFwKCdwdXRDaGFubmVsR3JvdXAnLCBbY2hhbm5lbEdyb3VwXSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgb3IgdXBkYXRlIGEgY2hhbm5lbFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtXb25kZXJQdXNoQ2hhbm5lbH0gY2hhbm5lbFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgcHV0Q2hhbm5lbChjaGFubmVsOiBXb25kZXJQdXNoQ2hhbm5lbCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy53cmFwKCdwdXRDaGFubmVsJywgW2NoYW5uZWxdKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZSBhIGNoYW5uZWwgZ3JvdXBcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBncm91cElkXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICByZW1vdmVDaGFubmVsR3JvdXAoZ3JvdXBJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLndyYXAoJ3JlbW92ZUNoYW5uZWxHcm91cCcsIFtncm91cElkXSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmUgYSBjaGFubmVsXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hhbm5lbElkXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICByZW1vdmVDaGFubmVsKGNoYW5uZWxJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLndyYXAoJ3JlbW92ZUNoYW5uZWwnLCBbY2hhbm5lbElkXSk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgUHVzaCBOb3RpZmljYXRpb25zIC0gV29uZGVyUHVzaFxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogU2VuZCB1bmxpbWl0ZWQgcHVzaCBub3RpZmljYXRpb25zIHRvIGlPUyBhbmQgQW5kcm9pZCBkZXZpY2VzLlxyXG4gKlxyXG4gKiBHZXQgc3RhcnRlZCBpbiBtaW51dGVzOiBbSW9uaWMgUXVpY2tzdGFydCBHdWlkZV0oaHR0cHM6Ly9kb2NzLndvbmRlcnB1c2guY29tL2RvY3MvaW9uaWMtcXVpY2tzdGFydCkuXHJcbiAqXHJcbiAqIEFkdmFuY2VkIHNlZ21lbnRhdGlvbiwgYXV0b21hdGlvbiBhbmQgcGVyc29uYWxpemF0aW9uIG9mIHB1c2ggbWVzc2FnZXMgZm9yIOKCrDEgcGVyIDEwMDAgc3Vic2NyaWJlcnMuXHJcbiAqXHJcbiAqIFJlcXVpcmVzIHRoZSBDb3Jkb3ZhIHBsdWdpbiBgd29uZGVycHVzaC1jb3Jkb3ZhLXNka2AuXHJcbiAqXHJcbiAqIFtXb25kZXJQdXNoIHB1c2ggbm90aWZpY2F0aW9uc10oaHR0cHM6Ly93d3cud29uZGVycHVzaC5jb20pIGFyZSB0aGUgbW9zdCBlZmZlY3RpdmUgd2F5XHJcbiAqIHRvIHJldGFpbiB5b3VyIHVzZXJzIGFuZCBncm93IHlvdXIgYXVkaWVuY2Ugd2hpbGUgcmVtYWluaW5nIGZ1bGx5IEdEUFIgY29tcGxpYW50LlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBXb25kZXJQdXNoIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3dvbmRlcnB1c2gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHdvbmRlclB1c2g6IFdvbmRlclB1c2gpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogLy8gU3Vic2NyaWJlIHVzZXJcclxuICogdGhpcy53b25kZXJQdXNoLnN1YnNjcmliZVRvTm90aWZpY2F0aW9ucygpXHJcbiAqICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coXCJVc2VyIHN1YnNjcmliZWQgdG8gbm90aWZpY2F0aW9uc1wiKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICpcclxuICogLy8gU2VuZCBhbiBldmVudCAoYSBwdXJjaGFzZSBpbiB0aGlzIGV4YW1wbGUpXHJcbiAqIHRoaXMud29uZGVyUHVzaC5zZW5kRXZlbnQoJ3B1cmNoYXNlJywge1xyXG4gKiAgIGZsb2F0X3ByaWNlOiAxMi45OSxcclxuICogICBzdHJpbmdfc2t1OiBcIlgxMjM0NTZcIlxyXG4gKiB9KTtcclxuICpcclxuICogLy8gVGFnIHVzZXJzIChhcyBjdXN0b21lcnMpXHJcbiAqIHRoaXMud29uZGVyUHVzaC5hZGRUYWcoJ2N1c3RvbWVyJyk7XHJcbiAqXHJcbiAqIC8vIFBlcnNvbmFsaXplXHJcbiAqIC8vIDEuIFN0b3JlIHVzZXIgZGV0YWlscy5cclxuICogLy8gMi4gVXNlIHRob3NlIGRldGFpbHMgdG8gY3JlYXRlIHNlZ21lbnRzLlxyXG4gKiAvLyAzLiBJbmNsdWRlIHRob3NlIGRldGFpbHMgaW4geW91ciBub3RpZmljYXRpb25zLlxyXG4gKiB0aGlzLndvbmRlclB1c2gucHV0UHJvcGVydGllcyh7XHJcbiAqICAgc3RyaW5nX25hbWU6ICdKb2huIEQuJyxcclxuICogICBpbnRfYWdlOiAyNFxyXG4gKiB9KTtcclxuICpcclxuICogLy8gR0RQUlxyXG4gKiAvLyAxLiBzZXQgUkVRVUlSRVNfVVNFUl9DT05TRU5UPXRydWUgdG8gZW5hYmxlIEdEUFIgY29tcGxpYW5jZS5cclxuICogLy8gMi4gV29uZGVyUHVzaCBkb2Vzbid0IHN0YXJ0IHVudGlsIHNldFVzZXJDb25zZW50KHRydWUpIGlzIGNhbGxlZC5cclxuICogY29uc3Qgb25DbGljayA9ICh1c2VyQ29uc2VudDogYm9vbGVhbikgPT4gdGhpcy53b25kZXJQdXNoLnNldFVzZXJDb25zZW50KHVzZXJDb25zZW50KTtcclxuICpcclxuICogLy8gTGlzdGVuIHRvIG5vdGlmaWNhdGlvbiBjbGlja3NcclxuICogZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignd29uZGVycHVzaC5ub3RpZmljYXRpb25PcGVuJywgZnVuY3Rpb24oZXZlbnQpIHtcclxuICogICBjb25zb2xlLmxvZygnTm90aWZpY2F0aW9uIG9wZW5lZCcsIGV2ZW50Lm5vdGlmaWNhdGlvbik7XHJcbiAqICAgaWYgKGV2ZW50Lm5vdGlmaWNhdGlvblR5cGUgPT09ICdkYXRhJykge1xyXG4gKiAgICAgY29uc29sZS5sb2coJ1NpbGVudCBub3RpZmljYXRpb24nLCBldmVudC5ub3RpZmljYXRpb24pO1xyXG4gKiAgIH1cclxuICogfSk7XHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBXb25kZXJQdXNoQ2hhbm5lbFxyXG4gKiBXb25kZXJQdXNoQ2hhbm5lbEdyb3VwXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnV29uZGVyUHVzaCcsXHJcbiAgcGx1Z2luOiAnd29uZGVycHVzaC1jb3Jkb3ZhLXNkaycsXHJcbiAgcGx1Z2luUmVmOiAnV29uZGVyUHVzaCcsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS93b25kZXJwdXNoL3dvbmRlcnB1c2gtY29yZG92YS1zZGsnLFxyXG4gIGluc3RhbGw6XHJcbiAgICAnaW9uaWMgY29yZG92YSBwbHVnaW4gYWRkIHdvbmRlcnB1c2gtY29yZG92YS1zZGsgLS12YXJpYWJsZSBDTElFTlRfSUQ9WU9VUl9DTElFTlRfSUQgLS12YXJpYWJsZSBDTElFTlRfU0VDUkVUPVlPVVJfQ0xJRU5UX1NFQ1JFVCAnLFxyXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnQ0xJRU5UX0lEJywgJ0NMSUVOVF9TRUNSRVQnXSxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgV29uZGVyUHVzaCBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBTZXRzIHRoZSB1c2VyIGlkLCB1c2VkIHRvIGlkZW50aWZ5IGEgc2luZ2xlIGlkZW50aXR5IGFjcm9zcyBtdWx0aXBsZSBkZXZpY2VzLFxyXG4gICAqIGFuZCB0byBjb3JyZWN0bHkgaWRlbnRpZnkgbXVsdGlwbGUgdXNlcnMgb24gYSBzaW5nbGUgZGV2aWNlLlxyXG4gICAqXHJcbiAgICogSWYgbm90IGNhbGxlZCwgdGhlIGxhc3QgdXNlZCB1c2VyIGlkIGl0IGFzc3VtZWQuIERlZmF1bHRpbmcgdG8gYG51bGxgIGlmIG5vbmUgaXMga25vd24uXHJcbiAgICpcclxuICAgKiBVcG9uIGNoYW5naW5nIHVzZXJJZCwgdGhlIGFjY2VzcyB0b2tlbiBpcyB3aXBlZCwgc28gYXZvaWQgdW5uZWNlc3NhcnkgY2FsbHMsIGxpa2UgY2FsbGluZyB3aXRoIGBudWxsYFxyXG4gICAqIGp1c3QgYmVmb3JlIGNhbGxpbmcgd2l0aCBhIHVzZXIgaWQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gez9zdHJpbmd9IHVzZXJJZCAtIFRoZSB1c2VyIGlkLCB1bmlxdWUgdG8geW91ciBhcHBsaWNhdGlvbi5cclxuICAgKiAgIFVzZSBgbnVsbGAgZm9yIGFub255bW91cyB1c2Vycy5cclxuICAgKlxyXG4gICAqICAgWW91IGFyZSBzdHJvbmdseSBlbmNvdXJhZ2VkIHRvIHVzZSB5b3VyIG93biB1bmlxdWUgaW50ZXJuYWwgaWRlbnRpZmllci5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG5cclxuICBAQ29yZG92YSgpXHJcbiAgc2V0VXNlcklkKHVzZXJJZDogc3RyaW5nIHwgbnVsbCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb250cm9scyBuYXRpdmUgU0RLIGxvZ2dpbmcuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGVuYWJsZWQgLSBXaGV0aGVyIHRvIGVuYWJsZSBsb2dzLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldExvZ2dpbmcoZW5hYmxlZDogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIHVwIGEgZGVsZWdhdGUgZm9yIHRpZ2h0ZXIgaW50ZWdyYXRpb24sIG9yIHJlbW92ZXMgaXQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gez9Xb25kZXJQdXNoRGVsZWdhdGV9IGRlbGVnYXRlIC0gVGhlIGRlbGVnYXRlIHRvIHNldCwgb3IgYG51bGxgIHRvIHJlbW92ZSBpdC5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXREZWxlZ2F0ZShkZWxlZ2F0ZTogV29uZGVyUHVzaERlbGVnYXRlIHwgbnVsbCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSBjdXJyZW50IGRlbGVnYXRlLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8V29uZGVyUHVzaERlbGVnYXRlIHwgbnVsbD59IEEgcHJvbWlzZSB3aXRoIHRoZSBkZWxlZ2F0ZSBvZiBudWxsXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldERlbGVnYXRlKCk6IFByb21pc2U8V29uZGVyUHVzaERlbGVnYXRlIHwgbnVsbD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgdXNlcklkIGN1cnJlbnRseSBpbiB1c2UsIGBudWxsYCBieSBkZWZhdWx0LlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nIHwgbnVsbD59IEEgcHJvbWlzZSB3aXRoIHRoZSB1c2VyIElEIG9yIG51bGxcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0VXNlcklkKCk6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgaW5zdGFsbGF0aW9uSWQgaWRlbnRpZnlpbmcgeW91ciBhcHBsaWNhdGlvbiBvbiBhIGRldmljZSwgYm9uZCB0byBhIHNwZWNpZmljIHVzZXJJZC5cclxuICAgKiBJZiB5b3Ugd2FudCB0byBzdG9yZSB0aGlzIGluZm9ybWF0aW9uIG9uIHlvdXIgc2VydmVycywga2VlcCB0aGUgY29ycmVzcG9uZGluZyB1c2VySWQgd2l0aCBpdC5cclxuICAgKiBXaWxsIHJldHVybiBgbnVsbGAgdW50aWwgdGhlIFNESyBpcyBwcm9wZXJseSBpbml0aWFsaXplZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZyB8IG51bGw+fSBBIHByb21pc2Ugd2l0aCB0aGUgaW5zdGFsbGF0aW9uIElEIG9yIG51bGxcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0SW5zdGFsbGF0aW9uSWQoKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSB1bmlxdWUgZGV2aWNlIGlkZW50aWZpZXJcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZyB8IG51bGw+fSBBIHByb21pc2Ugd2l0aCB0aGUgZGV2aWNlIElEIG9yIG51bGxcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0RGV2aWNlSWQoKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBwdXNoIHRva2VuLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nIHwgbnVsbD59IEEgcHJvbWlzZSB3aXRoIHRoZSBwdXNoIHRva2VuIG9yIGBudWxsYFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRQdXNoVG9rZW4oKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50bHkgdXNlZCBhY2Nlc3MgdG9rZW4uXHJcbiAgICogUmV0dXJucyBgbnVsbGAgdW50aWwgdGhlIFNESyBpcyBwcm9wZXJseSBpbml0aWFsaXplZC5cclxuICAgKiBUaGlzIHRvZ2V0aGVyIHdpdGggeW91ciBjbGllbnQgc2VjcmV0IGdpdmVzIGVudGlyZSBjb250cm9sIHRvIHRoZSBjdXJyZW50IGluc3RhbGxhdGlvbiBhbmQgYXNzb2NpYXRlZCB1c2VyLCB5b3Ugc2hvdWxkIG5vdCBkaXNjbG9zZSBpdCB1bm5lY2Vzc2FyaWx5LlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nIHwgbnVsbD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldEFjY2Vzc1Rva2VuKCk6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2VuZCBhbiBldmVudCB0byBiZSB0cmFja2VkIHRvIFdvbmRlclB1c2guXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSBldmVudCB0eXBlLCBvciBuYW1lLiBFdmVudCB0eXBlcyBzdGFydGluZyB3aXRoIGFuIGBAYCBjaGFyYWN0ZXIgYXJlIHJlc2VydmVkLlxyXG4gICAqIEBwYXJhbSB7P29iamVjdH0gW2F0dHJpYnV0ZXNdIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgY3VzdG9tIHByb3BlcnRpZXMgdG8gYmUgYXR0YWNoZWQgdG8gdGhlIGV2ZW50LlxyXG4gICAqICAgVGhlIGtleXMgc2hvdWxkIGJlIHByZWZpeGVkIGFjY29yZGluZyB0byB0aGUgdHlwZSBvZiB0aGVpciB2YWx1ZXMuXHJcbiAgICogICBZb3UgY2FuIGZpbmQgdGhlIGRldGFpbHMgaW4gdGhlIFtDb25jZXB0cyA+IEN1c3RvbSBmaWVsZHNdKGh0dHBzOi8vd3d3LndvbmRlcnB1c2guY29tL2RvY3MvZ3VpZGUvY3VzdG9tLWZpZWxkcykgc2VjdGlvbiBvZiB0aGUgZG9jdW1lbnRhdGlvbi5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB0cmFja0V2ZW50KHR5cGU6IHN0cmluZywgYXR0cmlidXRlczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIG9uZSBvciBtb3JlIHRhZ3MgdG8gdGhlIGluc3RhbGxhdGlvbi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSB0YWcgLSBUaGUgdGFncyB0byBhZGQgdG8gdGhlIGluc3RhbGxhdGlvbi4gWW91IGNhbiB1c2UgZWl0aGVyIGEgc2luZ2xlIHN0cmluZyBhcmd1bWVudCBvciBhbiBhcnJheSBvZiBzdHJpbmdzLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGFkZFRhZyh0YWc6IHN0cmluZyB8IHN0cmluZ1tdKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZXMgb25lIG9yIG1vcmUgdGFncyBmcm9tIHRoZSBpbnN0YWxsYXRpb24uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gdGFnIC0gVGhlIHRhZ3MgdG8gcmVtb3ZlIGZyb20gdGhlIGluc3RhbGxhdGlvbi4gWW91IGNhbiB1c2UgZWl0aGVyIGEgc2luZ2xlIHN0cmluZyBhcmd1bWVudCBvciBhbiBhcnJheSBvZiBzdHJpbmdzLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlbW92ZVRhZyh0YWc6IHN0cmluZyB8IHN0cmluZ1tdKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZXMgYWxsIHRhZ3MgZnJvbSB0aGUgaW5zdGFsbGF0aW9uLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVtb3ZlQWxsVGFncygpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBhbGwgdGhlIHRhZ3Mgb2YgdGhlIGluc3RhbGxhdGlvbi5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZ1tdPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0VGFncygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUZXN0cyB3aGV0aGVyIHRoZSBpbnN0YWxsYXRpb24gaGFzIHRoZSBnaXZlbiB0YWcgYXR0YWNoZWQgdG8gaXQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIC0gVGhlIHRhZyB0byB0ZXN0LlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBoYXNUYWcodGFnOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIHZhbHVlIHRvIGEgZ2l2ZW4gaW5zdGFsbGF0aW9uIHByb3BlcnR5LlxyXG4gICAqXHJcbiAgICogVGhlIHByZXZpb3VzIHZhbHVlIGlzIHJlcGxhY2VkIGVudGlyZWx5LlxyXG4gICAqIFNldHRpbmcgYHVuZGVmaW5lZGAgb3IgYG51bGxgIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXMge0BsaW5rIGNvcmRvdmEucGx1Z2lucy5Xb25kZXJQdXNoI3Vuc2V0UHJvcGVydHl9LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkIC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIHNldFxyXG4gICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldFByb3BlcnR5KGZpZWxkOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlcyB0aGUgdmFsdWUgb2YgYSBnaXZlbiBpbnN0YWxsYXRpb24gcHJvcGVydHkuXHJcbiAgICpcclxuICAgKiBUaGUgcHJldmlvdXMgdmFsdWUgaXMgcmVwbGFjZWQgd2l0aCBgbnVsbGAuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmllbGQgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHlcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB1bnNldFByb3BlcnR5KGZpZWxkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkcyB0aGUgdmFsdWUgdG8gYSBnaXZlbiBpbnN0YWxsYXRpb24gcHJvcGVydHkuXHJcbiAgICpcclxuICAgKiBUaGUgc3RvcmVkIHZhbHVlIGlzIG1hZGUgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgb25lLlxyXG4gICAqIElmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBhcnJheSwgYWxsIGl0cyB2YWx1ZXMgYXJlIGFkZGVkLlxyXG4gICAqIElmIGEgdmFsdWUgaXMgYWxyZWFkeSBwcmVzZW50IGluIHRoZSBzdG9yZWQgdmFsdWUsIGl0IHdvbid0IGJlIGFkZGVkLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkIC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5XHJcbiAgICogQHBhcmFtIHZhbHVlXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGFkZFByb3BlcnR5KGZpZWxkOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZXMgdGhlIHZhbHVlIGZyb20gYSBnaXZlbiBpbnN0YWxsYXRpb24gcHJvcGVydHkuXHJcbiAgICpcclxuICAgKiBUaGUgc3RvcmVkIHZhbHVlIGlzIG1hZGUgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgb25lLlxyXG4gICAqIElmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBhcnJheSwgYWxsIGl0cyB2YWx1ZXMgYXJlIHJlbW92ZWQuXHJcbiAgICogSWYgYSB2YWx1ZSBpcyBwcmVzZW50IG11bHRpcGxlIHRpbWVzIGluIHRoZSBzdG9yZWQgdmFsdWUsIHRoZXkgd2lsbCBhbGwgYmUgcmVtb3ZlZC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZCAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlbW92ZVByb3BlcnR5KGZpZWxkOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgYSBnaXZlbiBpbnN0YWxsYXRpb24gcHJvcGVydHkuXHJcbiAgICpcclxuICAgKiBJZiB0aGUgcHJvcGVydHkgc3RvcmVzIGFuIGFycmF5LCBvbmx5IHRoZSBmaXJzdCB2YWx1ZSBpcyByZXR1cm5lZC5cclxuICAgKiBUaGlzIHdheSB5b3UgZG9uJ3QgaGF2ZSB0byBkZWFsIHdpdGggcG90ZW50aWFsIGFycmF5cyBpZiB0aGF0IHByb3BlcnR5IGlzIG5vdCBzdXBwb3NlZCB0byBob2xkIG9uZS5cclxuICAgKiBSZXR1cm5zIGBudWxsYCBpZiB0aGUgcHJvcGVydHkgaXMgYWJzZW50IG9yIGhhcyBhbiBlbXB0eSBhcnJheSB2YWx1ZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZCAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byByZWFkIHZhbHVlcyBmcm9tXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0UHJvcGVydHlWYWx1ZShmaWVsZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHZhbHVlcyBvZiBhIGdpdmVuIGluc3RhbGxhdGlvbiBwcm9wZXJ0eS5cclxuICAgKlxyXG4gICAqIElmIHRoZSBwcm9wZXJ0eSBkb2VzIG5vdCBzdG9yZSBhbiBhcnJheSwgYW4gYXJyYXkgaXMgcmV0dXJuZWQgbmV2ZXJ0aGVsZXNzLlxyXG4gICAqIFRoaXMgd2F5IHlvdSBkb24ndCBoYXZlIHRvIGRlYWwgd2l0aCBwb3RlbnRpYWwgc2NhbGFyIHZhbHVlcyBpZiB0aGF0IHByb3BlcnR5IGlzIHN1cHBvc2VkIHRvIGhvbGQgYW4gYXJyYXkuXHJcbiAgICogUmV0dXJucyBhbiBlbXB0eSBhcnJheSBpbnN0ZWFkIG9mIGBudWxsYCBpZiB0aGUgcHJvcGVydHkgaXMgYWJzZW50LlxyXG4gICAqIFJldHVybnMgYW4gYXJyYXkgd3JhcHBpbmcgYW55IHNjYWxhciB2YWx1ZSBoZWxkIGJ5IHRoZSBwcm9wZXJ0eS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZCAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byByZWFkIHZhbHVlcyBmcm9tXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55W10+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRQcm9wZXJ0eVZhbHVlcyhmaWVsZDogc3RyaW5nKTogUHJvbWlzZTxhbnlbXT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgbGF0ZXN0IGtub3duIGN1c3RvbSBwcm9wZXJ0aWVzIGF0dGFjaGVkIHRvIHRoZSBjdXJyZW50IGluc3RhbGxhdGlvbiBvYmplY3Qgc3RvcmVkIGJ5IFdvbmRlclB1c2guXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7W3A6IHN0cmluZ106IGFueX0+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRQcm9wZXJ0aWVzKCk6IFByb21pc2U8eyBba2V5OiBzdHJpbmddOiBhbnkgfT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlcyB0aGUgcHJvcGVydGllcyBhdHRhY2hlZCB0byB0aGUgY3VycmVudCBpbnN0YWxsYXRpb24gb2JqZWN0IHN0b3JlZCBieSBXb25kZXJQdXNoLlxyXG4gICAqXHJcbiAgICogSW4gb3JkZXIgdG8gcmVtb3ZlIGEgdmFsdWUsIHVzZSBgbnVsbGAuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3tbcDogc3RyaW5nXTogYW55fX0gcHJvcGVydGllcy4gVGhlIGtleXMgc2hvdWxkIGJlIHByZWZpeGVkIGFjY29yZGluZyB0byB0aGUgdHlwZSBvZiB0aGVpciB2YWx1ZXMuIFlvdSBjYW4gZmluZCB0aGUgZGV0YWlscyBpbiB0aGUgW1NlZ21lbnRhdGlvbiA+IFByb3BlcnRpZXNdKGh0dHBzOi8vZG9jcy53b25kZXJwdXNoLmNvbS9kb2NzL3Byb3BlcnRpZXMjc2VjdGlvbi1jdXN0b20tcHJvcGVydGllcykgc2VjdGlvbiBvZiB0aGUgZG9jdW1lbnRhdGlvbi5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBwdXRQcm9wZXJ0aWVzKHByb3BlcnRpZXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3Vic2NyaWJlcyB0byBwdXNoIG5vdGlmaWNhdGlvbiBhbmQgcmVnaXN0ZXJzIHRoZSBkZXZpY2UgdG9rZW4gd2l0aCBXb25kZVB1c2guXHJcbiAgICpcclxuICAgKiBPbiBpT1MsIHlvdSAqKm11c3QqKiBjYWxsIHRoZSBmb2xsb3dpbmcgbWV0aG9kIGF0IGxlYXN0IG9uY2UgdG8gbWFrZSB0aGUgbm90aWZpY2F0aW9uIHZpc2libGUgdG8gdGhlIHVzZXIuXHJcbiAgICpcclxuICAgKiAtIFlvdSBjYW4gY2FsbCB0aGlzIG1ldGhvZCBtdWx0aXBsZSB0aW1lcy4gVGhlIHVzZXIgaXMgb25seSBwcm9tcHRlZCBmb3IgcGVybWlzc2lvbiBieSBpT1Mgb25jZS5cclxuICAgKiAtIFRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCB0aGlzIG1ldGhvZCBpZiB0aGUgcGVybWlzc2lvbiBoYXMgYWxyZWFkeSBiZWVuIGdyYW50ZWQsIGJ1dCBpdCBkb2VzIG5vdCBoYXJtIGVpdGhlci5cclxuICAgKiAtIElmIHRoZSBwZXJtaXNzaW9uIGhhcyBiZWVuIGRlbmllZCBpbiB0aGUgT1MsIHRoZSB1c2VyIHdpbGwgc3RheSBzb2Z0IG9wdC1vdXQuXHJcbiAgICpcclxuICAgKiBCZWNhdXNlIGluIGlPUyB5b3Ugb25seSBoYXZlICpvbmUqIGNoYW5jZSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyLCB5b3Ugc2hvdWxkIGZpbmQgYSBnb29kIHRpbWluZyBmb3IgdGhhdC5cclxuICAgKiBGb3IgYSBzdGFydCwgeW91IGNhbiBzeXN0ZW1hdGljYWxseSBjYWxsIGl0IHdoZW4gdGhlIGFwcGxpY2F0aW9uIHN0YXJ0cywgc28gdGhhdCB0aGUgdXNlciB3aWxsIGJlIHByb21wdGVkIGRpcmVjdGx5IGF0IHRoZSBmaXJzdCBsYXVuY2guXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHVwb24gc3VjY2Vzc2Z1bCBzdWJzY3JpcHRpb25cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc3Vic2NyaWJlVG9Ob3RpZmljYXRpb25zKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIG5vdGlmaWNhdGlvbnMgYXJlIGVuYWJsZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaXNTdWJzY3JpYmVkVG9Ob3RpZmljYXRpb25zKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVW5zdWJzY3JpYmVzIGZyb20gcHVzaCBub3RpZmljYXRpb24uXHJcbiAgICogVGhpcyBtZXRob2QgbWFya3MgdGhlIHVzZXIgYXMgc29mdCBvcHQtb3V0LlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgdW5zdWJzY3JpYmVGcm9tTm90aWZpY2F0aW9ucygpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVhZHMgdXNlciBjb25zZW50IHN0YXRlLlxyXG4gICAqIFJldHVybnMgdW5kZWZpbmVkIGlmIG5vIGV4cGxpY2l0IGNvbnNlbnQgd2FzIHNldC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRVc2VyQ29uc2VudCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFByb3ZpZGVzIG9yIHdpdGhkcmF3cyB1c2VyIGNvbnNlbnQuXHJcbiAgICogSWYgdGhlIGByZXF1aXJlc1VzZXJDb25zZW50YCBpbml0aWFsaXphdGlvbiBvcHRpb24gaXMgdHJ1ZSxcclxuICAgKiB0aGUgd2hvbGUgU0RLIGlzIHBhdXNlZCBhbmQgbm8gZGF0YSBpcyBzZW50IHRvIFdvbmRlclB1c2gsIHVudGlsIGNvbnNlbnQgaXMgcHJvdmlkZWQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNvbnNlbnQgLVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldFVzZXJDb25zZW50KGNvbnNlbnQ6IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlIGFueSBsb2NhbCBzdG9yYWdlIGFuZCBhc2sgdGhlIFdvbmRlclB1c2ggc2VydmVycyB0byBkZWxldGUgYW55IGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSBhbGwgbG9jYWwgaW5zdGFsbGF0aW9ucyBhbmQgcmVsYXRlZCB1c2Vycy5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNsZWFyQWxsRGF0YSgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQXNrIHRoZSBXb25kZXJQdXNoIHNlcnZlcnMgdG8gZGVsZXRlIGFueSBldmVudCBhc3NvY2lhdGVkIHdpdGggdGhlIGFsbCBsb2NhbCBpbnN0YWxsYXRpb25zLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgY2xlYXJFdmVudHNIaXN0b3J5KCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBc2sgdGhlIFdvbmRlclB1c2ggc2VydmVycyB0byBkZWxldGUgYW55IGN1c3RvbSBkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGUgYWxsIGxvY2FsIGluc3RhbGxhdGlvbnMgYW5kIHJlbGF0ZWQgdXNlcnMuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjbGVhclByZWZlcmVuY2VzKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbml0aWF0ZXMgdGhlIGRvd25sb2FkIG9mIGFsbCB1c2VyIHJlbW90ZSBhbmQgbG9jYWwgZGF0YS5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGRvd25sb2FkQWxsRGF0YSgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgVXNlclByZWZlcmVuY2VzID0gbmV3IFVzZXJQcmVmZXJlbmNlc01ldGhvZHModGhpcyk7XHJcbn1cclxuIl19