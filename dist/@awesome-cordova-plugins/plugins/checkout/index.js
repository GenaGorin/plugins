var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var CheckoutOriginal = /** @class */ (function (_super) {
    __extends(CheckoutOriginal, _super);
    function CheckoutOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CheckoutOriginal.prototype.initSandboxClient = function (publicKey) { return cordova(this, "initSandboxClient", {}, arguments); };
    CheckoutOriginal.prototype.initLiveClient = function (publicKey) { return cordova(this, "initLiveClient", {}, arguments); };
    CheckoutOriginal.prototype.generateToken = function (ckoCardTokenRequest) { return cordova(this, "generateToken", {}, arguments); };
    CheckoutOriginal.pluginName = "Checkout";
    CheckoutOriginal.plugin = "@checkout.com/cordova-plugin-checkout";
    CheckoutOriginal.pluginRef = "cordova.plugins.Checkout";
    CheckoutOriginal.repo = "https://github.com/checkout/frames-cordova";
    CheckoutOriginal.install = "";
    CheckoutOriginal.installVariables = [];
    CheckoutOriginal.platforms = ["Android", "iOS"];
    return CheckoutOriginal;
}(AwesomeCordovaNativePlugin));
var Checkout = new CheckoutOriginal();
export { Checkout };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvY2hlY2tvdXQvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBNEw5RCw0QkFBMEI7Ozs7SUFRdEQsb0NBQWlCLGFBQUMsU0FBaUI7SUFXbkMsaUNBQWMsYUFBQyxTQUFpQjtJQVdoQyxnQ0FBYSxhQUFDLG1CQUF3Qzs7Ozs7Ozs7bUJBM054RDtFQTZMOEIsMEJBQTBCO1NBQTNDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENrb0NhcmRUb2tlblJlcXVlc3Qge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjYXJkIG51bWJlclxyXG4gICAqL1xyXG4gIG51bWJlcjogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBleHBpcnkgbW9udGggb2YgdGhlIGNhcmRcclxuICAgKi9cclxuICBleHBpcnlfbW9udGg6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgZXhwaXJ5IHllYXIgb2YgdGhlIGNhcmRcclxuICAgKi9cclxuICBleHBpcnlfeWVhcjogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjYXJkIHZlcmlmaWNhdGlvbiB2YWx1ZS9jb2RlLiAzIGRpZ2l0cywgZXhjZXB0IGZvciBBbWV4ICg0IGRpZ2l0cylcclxuICAgKi9cclxuICBjdnY/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNhcmRob2xkZXIncyBuYW1lXHJcbiAgICovXHJcbiAgbmFtZT86IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgY2FyZGhvbGRlcidzIGJpbGxpbmcgYWRkcmVzc1xyXG4gICAqL1xyXG4gIGJpbGxpbmdfYWRkcmVzcz86IEFkZHJlc3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNhcmRob2xkZXIncyBwaG9uZSBudW1iZXJcclxuICAgKi9cclxuICBwaG9uZT86IFBob25lO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENrb0NhcmRUb2tlblJlc3BvbnNlIHtcclxuICAvKipcclxuICAgKiBUaGUgdG9rZW4gdHlwZVxyXG4gICAqL1xyXG4gIHR5cGU6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgdG9rZW4gdmFsdWVcclxuICAgKi9cclxuICB0b2tlbjogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBleHBpcmF0aW9uIGRhdGV0aW1lIG9mIHRoZSB0b2tlblxyXG4gICAqL1xyXG4gIGV4cGlyZXNfb246IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgZXhwaXJ5IG1vbnRoIG9mIHRoZSBjYXJkXHJcbiAgICovXHJcbiAgZXhwaXJ5X21vbnRoOiBudW1iZXI7XHJcbiAgLyoqXHJcbiAgICogVGhlIGV4cGlyeSB5ZWFyIG9mIHRoZSBjYXJkXHJcbiAgICovXHJcbiAgZXhwaXJ5X3llYXI6IG51bWJlcjtcclxuICAvKipcclxuICAgKiBUaGUgY2FyZGhvbGRlcidzIG5hbWVcclxuICAgKi9cclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNhcmQgc2NoZW1lXHJcbiAgICovXHJcbiAgc2NoZW1lOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGxhc3QgNCBkaWdpdCBvZiB0aGUgY2FyZCBudW1iZXJcclxuICAgKi9cclxuICBsYXN0NDogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBiaW4gcmFuZ2Ugb2YgdGhlIGNhcmRcclxuICAgKi9cclxuICBiaW46IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgY2FyZCB0eXBlXHJcbiAgICovXHJcbiAgY2FyZF90eXBlOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNhcmQgY2F0ZWdvcnlcclxuICAgKi9cclxuICBjYXJkX2NhdGVnb3J5OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNhcmQgaXNzdWVyIG5hbWVcclxuICAgKi9cclxuICBpc3N1ZXI6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgY2FyZCBpc3N1ZXIgY291bnRyeSAodHdvLWxldHRlciBJU08pXHJcbiAgICovXHJcbiAgaXNzdWVyX2NvdW50cnk6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgY2FyZCBwcm9kdWN0IGlkXHJcbiAgICovXHJcbiAgcHJvZHVjdF9pZDogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjYXJkIHByb2R1Y3QgdHlwZVxyXG4gICAqL1xyXG4gIHByb2R1Y3RfdHlwZTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjYXJkaG9sZGVyJ3MgYmlsbGluZyBhZGRyZXNzXHJcbiAgICovXHJcbiAgYmlsbGluZ19hZGRyZXNzOiBBZGRyZXNzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjYXJkaG9sZGVyJ3MgcGhvbmUgbnVtYmVyXHJcbiAgICovXHJcbiAgcGhvbmU6IFBob25lO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFkZHJlc3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBmaXJzdCBsaW5lIG9mIHRoZSBhZGRyZXNzXHJcbiAgICovXHJcbiAgYWRkcmVzc19saW5lMT86IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgc2Vjb25kIGxpbmUgb2YgdGhlIGFkZHJlc3NcclxuICAgKi9cclxuICBhZGRyZXNzX2xpbmUyPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhZGRyZXNzIGNpdHlcclxuICAgKi9cclxuICBjaXR5Pzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhZGRyZXNzIHN0YXRlXHJcbiAgICovXHJcbiAgc3RhdGU/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGFkZHJlc3MgemlwL3Bvc3RhbCBjb2RlXHJcbiAgICovXHJcbiAgemlwPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0d28tbGV0dGVyIElTTyBjb3VudHJ5IGNvZGUgb2YgdGhlIGFkZHJlc3NcclxuICAgKi9cclxuICBjb3VudHJ5Pzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBob25lIHtcclxuICAvKipcclxuICAgKiBUaGUgaW50ZXJuYXRpb25hbCBjb3VudHJ5IGNhbGxpbmcgY29kZS4gUmVxdWlyZWQgZm9yIHNvbWUgcmlzayBjaGVja3NcclxuICAgKi9cclxuICBjb3VudHJ5X2NvZGU6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgcGhvbmUgbnVtYmVyXHJcbiAgICovXHJcbiAgbnVtYmVyOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBDaGVja291dFxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQ2hlY2tvdXQuY29tIGNvcmRvdmEgcGx1Z2luXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IENoZWNrb3V0IH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NoZWNrb3V0L25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgY2hlY2tvdXQ6IENoZWNrb3V0KSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqXHJcbiAqIHRoaXMuY2hlY2tvdXQuaW5pdFNhbmRib3hDbGllbnQoXCJwa190ZXN0XzdkMzk1ODcxLTBkNjYtNGI2Mi04NWI2LTg0MjRkZjc4YjEyNVwiKVxyXG4gKiAgICAgLnRoZW4oKCkgPT4gdGhpcy5sYWJlbCA9IFwiQ0tPIGluaXQgY29tcGxldGVkXCIpXHJcbiAqICAgICAuY2F0Y2goZXJyID0+IHRoaXMubGFiZWwgPSBlcnIpXHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiBsZXQgdG9rZW5SZXF1ZXN0OiBDa29DYXJkVG9rZW5SZXF1ZXN0ID0ge1xyXG4gKiAgICAgbnVtYmVyOiBcIjQ1NDM0NzQwMDIyNDk5OTZcIixcclxuICogICAgIGN2djogXCIwMTBcIixcclxuICogICAgIGV4cGlyeV9tb250aDogXCIwOFwiLFxyXG4gKiAgICAgZXhwaXJ5X3llYXI6IFwiMjAyNVwiLFxyXG4gKiAgICAgYmlsbGluZ19hZGRyZXNzOiB7XHJcbiAqICAgICAgIGNvdW50cnk6IFwiRlJcIlxyXG4gKiAgICAgfVxyXG4gKiAgIH1cclxuICpcclxuICpcclxuICogICB0aGlzLmNrby5nZW5lcmF0ZVRva2VuKHRva2VuUmVxdWVzdClcclxuICogICAudGhlbih0b2tlblJlc3BvbnNlID0+IHRoaXMubGFiZWwgPSBcIlRva2VuOiBcIiArIHRva2VuUmVzcG9uc2UudG9rZW4pXHJcbiAqICAgLmNhdGNoKGVyciA9PiB0aGlzLmxhYmVsID0gZXJyKVxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdDaGVja291dCcsXHJcbiAgcGx1Z2luOiAnQGNoZWNrb3V0LmNvbS9jb3Jkb3ZhLXBsdWdpbi1jaGVja291dCcsXHJcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLkNoZWNrb3V0JyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2NoZWNrb3V0L2ZyYW1lcy1jb3Jkb3ZhJyxcclxuICBpbnN0YWxsOiAnJyxcclxuICBpbnN0YWxsVmFyaWFibGVzOiBbXSxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQ2hlY2tvdXQgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSBGcmFtZXMgcGx1Z2luIGluIFNhbmRib3ggbW9kZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHB1YmxpY0tleSB7c3RyaW5nfSBNZXJjaGFudCdzIHNhbmRib3ggcHVibGljIGtleVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBGcmFtZXMgaW5pdGlhdGlvbiBpcyBjb21wbGV0ZWRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaW5pdFNhbmRib3hDbGllbnQocHVibGljS2V5OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSBGcmFtZXMgcGx1Z2luIGluIExpdmUgbW9kZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHB1YmxpY0tleSB7c3RyaW5nfSBNZXJjaGFudCdzIGxpdmUgcHVibGljIGtleVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBGcmFtZXMgaW5pdGlhdGlvbiBpcyBjb21wbGV0ZWRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaW5pdExpdmVDbGllbnQocHVibGljS2V5OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRXhjaGFuZ2UgY2FyZCBkZXRhaWxzIGZvciBhIHJlZmVyZW5jZSB0b2tlbiB0aGF0IGNhbiBiZSB1c2VkIGxhdGVyIHRvIHJlcXVlc3QgYSBjYXJkIHBheW1lbnQgZnJvbSB5b3VyIGJhY2tlbmQuIFRva2VucyBhcmUgc2luZ2xlIHVzZSBhbmQgZXhwaXJlIGFmdGVyIDE1IG1pbnV0ZXMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gY2tvQ2FyZFRva2VuUmVxdWVzdCB7Q2tvQ2FyZFRva2VuUmVxdWVzdH0gQ2FyZCB0b2tlbml6YXRpb24gcmVxdWVzdCBvYmplY3RcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxDa29DYXJkVG9rZW5SZXNwb25zZT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBUb2tlbiByZXNwb25zZSBvYmplY3RcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2VuZXJhdGVUb2tlbihja29DYXJkVG9rZW5SZXF1ZXN0OiBDa29DYXJkVG9rZW5SZXF1ZXN0KTogUHJvbWlzZTxDa29DYXJkVG9rZW5SZXNwb25zZT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=