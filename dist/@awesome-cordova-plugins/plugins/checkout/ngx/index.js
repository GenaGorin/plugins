import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var Checkout = /** @class */ (function (_super) {
    __extends(Checkout, _super);
    function Checkout() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Checkout.prototype.initSandboxClient = function (publicKey) { return cordova(this, "initSandboxClient", {}, arguments); };
    Checkout.prototype.initLiveClient = function (publicKey) { return cordova(this, "initLiveClient", {}, arguments); };
    Checkout.prototype.generateToken = function (ckoCardTokenRequest) { return cordova(this, "generateToken", {}, arguments); };
    Checkout.pluginName = "Checkout";
    Checkout.plugin = "@checkout.com/cordova-plugin-checkout";
    Checkout.pluginRef = "cordova.plugins.Checkout";
    Checkout.repo = "https://github.com/checkout/frames-cordova";
    Checkout.install = "";
    Checkout.installVariables = [];
    Checkout.platforms = ["Android", "iOS"];
    Checkout.decorators = [
        { type: Injectable }
    ];
    return Checkout;
}(AwesomeCordovaNativePlugin));
export { Checkout };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvY2hlY2tvdXQvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBNEw5RCw0QkFBMEI7Ozs7SUFRdEQsb0NBQWlCLGFBQUMsU0FBaUI7SUFXbkMsaUNBQWMsYUFBQyxTQUFpQjtJQVdoQyxnQ0FBYSxhQUFDLG1CQUF3Qzs7Ozs7Ozs7O2dCQS9CdkQsVUFBVTs7bUJBNUxYO0VBNkw4QiwwQkFBMEI7U0FBM0MsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2tvQ2FyZFRva2VuUmVxdWVzdCB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNhcmQgbnVtYmVyXHJcbiAgICovXHJcbiAgbnVtYmVyOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGV4cGlyeSBtb250aCBvZiB0aGUgY2FyZFxyXG4gICAqL1xyXG4gIGV4cGlyeV9tb250aDogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBleHBpcnkgeWVhciBvZiB0aGUgY2FyZFxyXG4gICAqL1xyXG4gIGV4cGlyeV95ZWFyOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNhcmQgdmVyaWZpY2F0aW9uIHZhbHVlL2NvZGUuIDMgZGlnaXRzLCBleGNlcHQgZm9yIEFtZXggKDQgZGlnaXRzKVxyXG4gICAqL1xyXG4gIGN2dj86IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgY2FyZGhvbGRlcidzIG5hbWVcclxuICAgKi9cclxuICBuYW1lPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjYXJkaG9sZGVyJ3MgYmlsbGluZyBhZGRyZXNzXHJcbiAgICovXHJcbiAgYmlsbGluZ19hZGRyZXNzPzogQWRkcmVzcztcclxuICAvKipcclxuICAgKiBUaGUgY2FyZGhvbGRlcidzIHBob25lIG51bWJlclxyXG4gICAqL1xyXG4gIHBob25lPzogUGhvbmU7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2tvQ2FyZFRva2VuUmVzcG9uc2Uge1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0b2tlbiB0eXBlXHJcbiAgICovXHJcbiAgdHlwZTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0b2tlbiB2YWx1ZVxyXG4gICAqL1xyXG4gIHRva2VuOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGV4cGlyYXRpb24gZGF0ZXRpbWUgb2YgdGhlIHRva2VuXHJcbiAgICovXHJcbiAgZXhwaXJlc19vbjogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBleHBpcnkgbW9udGggb2YgdGhlIGNhcmRcclxuICAgKi9cclxuICBleHBpcnlfbW9udGg6IG51bWJlcjtcclxuICAvKipcclxuICAgKiBUaGUgZXhwaXJ5IHllYXIgb2YgdGhlIGNhcmRcclxuICAgKi9cclxuICBleHBpcnlfeWVhcjogbnVtYmVyO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjYXJkaG9sZGVyJ3MgbmFtZVxyXG4gICAqL1xyXG4gIG5hbWU6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgY2FyZCBzY2hlbWVcclxuICAgKi9cclxuICBzY2hlbWU6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgbGFzdCA0IGRpZ2l0IG9mIHRoZSBjYXJkIG51bWJlclxyXG4gICAqL1xyXG4gIGxhc3Q0OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGJpbiByYW5nZSBvZiB0aGUgY2FyZFxyXG4gICAqL1xyXG4gIGJpbjogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjYXJkIHR5cGVcclxuICAgKi9cclxuICBjYXJkX3R5cGU6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgY2FyZCBjYXRlZ29yeVxyXG4gICAqL1xyXG4gIGNhcmRfY2F0ZWdvcnk6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgY2FyZCBpc3N1ZXIgbmFtZVxyXG4gICAqL1xyXG4gIGlzc3Vlcjogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjYXJkIGlzc3VlciBjb3VudHJ5ICh0d28tbGV0dGVyIElTTylcclxuICAgKi9cclxuICBpc3N1ZXJfY291bnRyeTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjYXJkIHByb2R1Y3QgaWRcclxuICAgKi9cclxuICBwcm9kdWN0X2lkOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNhcmQgcHJvZHVjdCB0eXBlXHJcbiAgICovXHJcbiAgcHJvZHVjdF90eXBlOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNhcmRob2xkZXIncyBiaWxsaW5nIGFkZHJlc3NcclxuICAgKi9cclxuICBiaWxsaW5nX2FkZHJlc3M6IEFkZHJlc3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNhcmRob2xkZXIncyBwaG9uZSBudW1iZXJcclxuICAgKi9cclxuICBwaG9uZTogUGhvbmU7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWRkcmVzcyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGZpcnN0IGxpbmUgb2YgdGhlIGFkZHJlc3NcclxuICAgKi9cclxuICBhZGRyZXNzX2xpbmUxPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzZWNvbmQgbGluZSBvZiB0aGUgYWRkcmVzc1xyXG4gICAqL1xyXG4gIGFkZHJlc3NfbGluZTI/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGFkZHJlc3MgY2l0eVxyXG4gICAqL1xyXG4gIGNpdHk/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGFkZHJlc3Mgc3RhdGVcclxuICAgKi9cclxuICBzdGF0ZT86IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgYWRkcmVzcyB6aXAvcG9zdGFsIGNvZGVcclxuICAgKi9cclxuICB6aXA/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIHR3by1sZXR0ZXIgSVNPIGNvdW50cnkgY29kZSBvZiB0aGUgYWRkcmVzc1xyXG4gICAqL1xyXG4gIGNvdW50cnk/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGhvbmUge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBpbnRlcm5hdGlvbmFsIGNvdW50cnkgY2FsbGluZyBjb2RlLiBSZXF1aXJlZCBmb3Igc29tZSByaXNrIGNoZWNrc1xyXG4gICAqL1xyXG4gIGNvdW50cnlfY29kZTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwaG9uZSBudW1iZXJcclxuICAgKi9cclxuICBudW1iZXI6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIENoZWNrb3V0XHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBDaGVja291dC5jb20gY29yZG92YSBwbHVnaW5cclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgQ2hlY2tvdXQgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY2hlY2tvdXQvbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBjaGVja291dDogQ2hlY2tvdXQpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICpcclxuICogdGhpcy5jaGVja291dC5pbml0U2FuZGJveENsaWVudChcInBrX3Rlc3RfN2QzOTU4NzEtMGQ2Ni00YjYyLTg1YjYtODQyNGRmNzhiMTI1XCIpXHJcbiAqICAgICAudGhlbigoKSA9PiB0aGlzLmxhYmVsID0gXCJDS08gaW5pdCBjb21wbGV0ZWRcIilcclxuICogICAgIC5jYXRjaChlcnIgPT4gdGhpcy5sYWJlbCA9IGVycilcclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIGxldCB0b2tlblJlcXVlc3Q6IENrb0NhcmRUb2tlblJlcXVlc3QgPSB7XHJcbiAqICAgICBudW1iZXI6IFwiNDU0MzQ3NDAwMjI0OTk5NlwiLFxyXG4gKiAgICAgY3Z2OiBcIjAxMFwiLFxyXG4gKiAgICAgZXhwaXJ5X21vbnRoOiBcIjA4XCIsXHJcbiAqICAgICBleHBpcnlfeWVhcjogXCIyMDI1XCIsXHJcbiAqICAgICBiaWxsaW5nX2FkZHJlc3M6IHtcclxuICogICAgICAgY291bnRyeTogXCJGUlwiXHJcbiAqICAgICB9XHJcbiAqICAgfVxyXG4gKlxyXG4gKlxyXG4gKiAgIHRoaXMuY2tvLmdlbmVyYXRlVG9rZW4odG9rZW5SZXF1ZXN0KVxyXG4gKiAgIC50aGVuKHRva2VuUmVzcG9uc2UgPT4gdGhpcy5sYWJlbCA9IFwiVG9rZW46IFwiICsgdG9rZW5SZXNwb25zZS50b2tlbilcclxuICogICAuY2F0Y2goZXJyID0+IHRoaXMubGFiZWwgPSBlcnIpXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0NoZWNrb3V0JyxcclxuICBwbHVnaW46ICdAY2hlY2tvdXQuY29tL2NvcmRvdmEtcGx1Z2luLWNoZWNrb3V0JyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuQ2hlY2tvdXQnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vY2hlY2tvdXQvZnJhbWVzLWNvcmRvdmEnLFxyXG4gIGluc3RhbGw6ICcnLFxyXG4gIGluc3RhbGxWYXJpYWJsZXM6IFtdLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBDaGVja291dCBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBJbml0aWFsaXplIEZyYW1lcyBwbHVnaW4gaW4gU2FuZGJveCBtb2RlXHJcbiAgICpcclxuICAgKiBAcGFyYW0gcHVibGljS2V5IHtzdHJpbmd9IE1lcmNoYW50J3Mgc2FuZGJveCBwdWJsaWMga2V5XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIEZyYW1lcyBpbml0aWF0aW9uIGlzIGNvbXBsZXRlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpbml0U2FuZGJveENsaWVudChwdWJsaWNLZXk6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbml0aWFsaXplIEZyYW1lcyBwbHVnaW4gaW4gTGl2ZSBtb2RlXHJcbiAgICpcclxuICAgKiBAcGFyYW0gcHVibGljS2V5IHtzdHJpbmd9IE1lcmNoYW50J3MgbGl2ZSBwdWJsaWMga2V5XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIEZyYW1lcyBpbml0aWF0aW9uIGlzIGNvbXBsZXRlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpbml0TGl2ZUNsaWVudChwdWJsaWNLZXk6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFeGNoYW5nZSBjYXJkIGRldGFpbHMgZm9yIGEgcmVmZXJlbmNlIHRva2VuIHRoYXQgY2FuIGJlIHVzZWQgbGF0ZXIgdG8gcmVxdWVzdCBhIGNhcmQgcGF5bWVudCBmcm9tIHlvdXIgYmFja2VuZC4gVG9rZW5zIGFyZSBzaW5nbGUgdXNlIGFuZCBleHBpcmUgYWZ0ZXIgMTUgbWludXRlcy5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBja29DYXJkVG9rZW5SZXF1ZXN0IHtDa29DYXJkVG9rZW5SZXF1ZXN0fSBDYXJkIHRva2VuaXphdGlvbiByZXF1ZXN0IG9iamVjdFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPENrb0NhcmRUb2tlblJlc3BvbnNlPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIFRva2VuIHJlc3BvbnNlIG9iamVjdFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZW5lcmF0ZVRva2VuKGNrb0NhcmRUb2tlblJlcXVlc3Q6IENrb0NhcmRUb2tlblJlcXVlc3QpOiBQcm9taXNlPENrb0NhcmRUb2tlblJlc3BvbnNlPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==