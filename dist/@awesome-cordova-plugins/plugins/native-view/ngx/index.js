import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var NativeView = /** @class */ (function (_super) {
    __extends(NativeView, _super);
    function NativeView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NativeView.prototype.show = function (packageOrClass, className, extraParams, success, error) { return cordova(this, "show", {}, arguments); };
    NativeView.prototype.checkIfAppInstalled = function (config, success, error) { return cordova(this, "checkIfAppInstalled", {}, arguments); };
    NativeView.prototype.showMarket = function (config, success, error) { return cordova(this, "showMarket", {}, arguments); };
    NativeView.prototype.getBuildVariant = function (config, success, error) { return cordova(this, "getBuildVariant", { "platforms": ["android"] }, arguments); };
    NativeView.pluginName = "NativeView";
    NativeView.plugin = "cordova-plugin-nativeview";
    NativeView.pluginRef = "cordova.plugins.NativeView";
    NativeView.repo = "https://github.com/mfdeveloper/cordova-plugin-nativeview";
    NativeView.platforms = ["Android", "iOS"];
    NativeView.decorators = [
        { type: Injectable }
    ];
    return NativeView;
}(AwesomeCordovaNativePlugin));
export { NativeView };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvbmF0aXZlLXZpZXcvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBeUQ1RCw4QkFBMEI7Ozs7SUFtQ3hELHlCQUFJLGFBQ0YsY0FBcUMsRUFDckMsU0FBa0IsRUFDbEIsV0FBaUIsRUFDakIsT0FBa0IsRUFDbEIsS0FBZ0I7SUFjbEIsd0NBQW1CLGFBQUMsTUFBb0IsRUFBRSxPQUFrQixFQUFFLEtBQWdCO0lBYTlFLCtCQUFVLGFBQUMsTUFBMEIsRUFBRSxPQUFrQixFQUFFLEtBQWdCO0lBbUIzRSxvQ0FBZSxhQUFDLE1BQWdDLEVBQUUsT0FBa0IsRUFBRSxLQUFnQjs7Ozs7OztnQkF2RnZGLFVBQVU7O3FCQXpEWDtFQTBEZ0MsMEJBQTBCO1NBQTdDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG4vKipcclxuICogQG5hbWUgTmF0aXZlVmlld1xyXG4gKiBAZGVzY3JpcHRpb24gU2hvd3MgdGhlIG5hdGl2ZSB2aWV3LlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBOYXRpdmVWaWV3IH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL25hdGl2ZS12aWV3L25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgbmF0aXZlVmlldzogTmF0aXZlVmlldykgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKlxyXG4gKiB0aGlzLm5hdGl2ZVZpZXcuZnVuY3Rpb25OYW1lKCdIZWxsbycsIDEyMylcclxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBSZXN1bHRWaWV3IHtcclxuICBzdWNjZXNzOiBib29sZWFuO1xyXG4gIG5hbWU/OiBzdHJpbmc7XHJcbiAgbWVzc2FnZT86IHN0cmluZztcclxuICB1cmk/OiBzdHJpbmc7XHJcbiAgW2tleTogc3RyaW5nXTogYW55O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlc3VsdEFwcEluc3RhbGxlZCBleHRlbmRzIFJlc3VsdFZpZXcge1xyXG4gIHBhY2thZ2VOYW1lPzogc3RyaW5nO1xyXG4gIGFwcGxpY2F0aW9uSW5mbz86IHN0cmluZztcclxuICBhY3Rpdml0eU5hbWU/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTmF0aXZlUGFyYW1zIHtcclxuICBwYWNrYWdlPzogc3RyaW5nO1xyXG4gIHBhY2thZ2VOYW1lPzogc3RyaW5nO1xyXG4gIHBhY2thZ2VBcHA/OiBzdHJpbmc7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xyXG4gIHVyaT86IHN0cmluZztcclxuICBzdG9yeWJvYXJkTmFtZT86IHN0cmluZztcclxuICB2aWV3Q29udHJvbGxlck5hbWU/OiBzdHJpbmc7XHJcbiAgcGFyYW1zPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE5hdGl2ZU1hcmtldFBhcmFtcyBleHRlbmRzIE5hdGl2ZVBhcmFtcyB7XHJcbiAgbWFya2V0SWQ/OiBzdHJpbmc7XHJcbn1cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ05hdGl2ZVZpZXcnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLW5hdGl2ZXZpZXcnLFxyXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5OYXRpdmVWaWV3JyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL21mZGV2ZWxvcGVyL2NvcmRvdmEtcGx1Z2luLW5hdGl2ZXZpZXcnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOYXRpdmVWaWV3IGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFNob3dzIHRoZSBuYXRpdmUgdmlldy5cclxuICAgKlxyXG4gICAqIERlZmluZSB0aGUgYHBhY2thZ2VPckNsYXNzYCBwYXJhbSB0byBhIHBhY2thZ2UgKEFuZHJvaWQpIG9yIGFcclxuICAgKiBzdG9yeWJvYXJkL2NsYXNzbmFtZSAoSU9TKVxyXG4gICAqXHJcbiAgICogYGBgdHNcclxuICAgKlxyXG4gICAqIC8vQW5kcm9pZFxyXG4gICAqIGNvcmRvdmEucGx1Z2lucy5OYXRpdmVWaWV3LnNob3coJ2NvbS5teWNvbXBhbnknLCAnTXlBY3Rpdml0eScpXHJcbiAgICogLnRoZW4oKCkgPT4ge1xyXG4gICAqICAgIC8vIERvIHNvbWV0aGluZ1xyXG4gICAqIH0pO1xyXG4gICAqXHJcbiAgICogLy9JT1NcclxuICAgKiBjb3Jkb3ZhLnBsdWdpbnMuTmF0aXZlVmlldy5zaG93KCdNeVN0b3J5Ym9hcmQnLCAnTXlVSVZpZXdDb250cm9sbGVyJylcclxuICAgKiAudGhlbigoKSA9PiB7XHJcbiAgICogICAgLy8gRG8gc29tZXRoaW5nXHJcbiAgICogfSk7XHJcbiAgICpcclxuICAgKiAvL09SIEJhY2sgdG8gcHJldmlvdXMgVmlldyAoSU9TIG9ubHkpXHJcbiAgICogY29yZG92YS5wbHVnaW5zLk5hdGl2ZVZpZXcuc2hvdygpLnRoZW4oKCkgPT4ge1xyXG4gICAqICAgIC8vIERvIHNvbWV0aGluZ1xyXG4gICAqIH0pO1xyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge05hdGl2ZVBhcmFtc3xzdHJpbmd9IHBhY2thZ2VPckNsYXNzIFBhY2thZ2Ugb3IgY2xhc3MgbmFtZSBvZiB2aWV3IHRvIG9wZW5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIENsYXNzIG5hbWUgb2YgdmlldyB0byBvcGVuXHJcbiAgICogQHBhcmFtIHthbnl9IFtleHRyYVBhcmFtc10gW09wdGlvbmFsXSBQYXJhbXMgdG8gc2VuZCB0byBhIE5hdGl2ZSB2aWV3IHRoYXQgd2lsbCBiZSBvcGVuZWRcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbc3VjY2Vzc10gW09wdGlvbmFsXSBDYWxsYmFjayB3aGVuIHN1Y2Nlc3MsIGlmIHlvdSBkb24ndCB3YW50IHVzZSBwcm9taXNlIFwidGhlbigpXCJcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZXJyb3JdIFtPcHRpb25hbF0gQ2FsbGJhY2sgd2hlbiBlcnJvciBoYXBwZW5zLCBpZiB5b3UgZG9uJ3Qgd2FudCB1c2UgcHJvbWlzZSBcImNhdGNoKClcIlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzaG93KFxyXG4gICAgcGFja2FnZU9yQ2xhc3M6IE5hdGl2ZVBhcmFtcyB8IHN0cmluZyxcclxuICAgIGNsYXNzTmFtZT86IHN0cmluZyxcclxuICAgIGV4dHJhUGFyYW1zPzogYW55LFxyXG4gICAgc3VjY2Vzcz86IEZ1bmN0aW9uLFxyXG4gICAgZXJyb3I/OiBGdW5jdGlvblxyXG4gICk6IFByb21pc2U8UmVzdWx0Vmlldz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgYSBzcGVjaWZpYyBhcHAgaXMgaW5zdGFsbGVkXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge05hdGl2ZVBhcmFtc30gY29uZmlnXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3N1Y2Nlc3NdIENhbGxiYWNrIHdoZW4gc3VjY2Vzcy4gVXNlIGAudGhlbigpYCBQcm9taXNlIG1ldGhvZCwgaW5zdGVhZFxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtlcnJvcl0gQ2FsbGJhY2sgY2FsbGJlZCB3aGVuIGFuIGVycm9yIGhhcHBlbnMuIFVzZSBgLmNhdGNoKClgIFByb21pc2UgbWV0aG9kLCBpbnN0ZWFkXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8UmVzdWx0QXBwSW5zdGFsbGVkPn0gUmV0dXJucyBkYXRhIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpbnN0YWxsZWQgYXBwXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNoZWNrSWZBcHBJbnN0YWxsZWQoY29uZmlnOiBOYXRpdmVQYXJhbXMsIHN1Y2Nlc3M/OiBGdW5jdGlvbiwgZXJyb3I/OiBGdW5jdGlvbik6IFByb21pc2U8UmVzdWx0QXBwSW5zdGFsbGVkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTaG93cyBhIHN0b3JlL21hcmtldCBmbyBpbnN0YWxsIGEgc3BlY2lmaWMgYXBwXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge05hdGl2ZU1hcmtldFBhcmFtc30gY29uZmlnIE5hdGl2ZSBwYWNrYWdlIGFuZC9vciBtYXJrZXRJZCB0byBzaG93IGluIEdvb2dsZSBQbGF5L0FwcGxlIFN0b3JlXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3N1Y2Nlc3NdIENhbGxiYWNrIHdoZW4gc3VjY2Vzcy4gVXNlIGAudGhlbigpYCBQcm9taXNlIG1ldGhvZCwgaW5zdGVhZFxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtlcnJvcl0gQ2FsbGJhY2sgY2FsbGJlZCB3aGVuIGFuIGVycm9yIGhhcHBlbnMuIFVzZSBgLmNhdGNoKClgIFByb21pc2UgbWV0aG9kLCBpbnN0ZWFkXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8UmVzdWx0Vmlldz59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNob3dNYXJrZXQoY29uZmlnOiBOYXRpdmVNYXJrZXRQYXJhbXMsIHN1Y2Nlc3M/OiBGdW5jdGlvbiwgZXJyb3I/OiBGdW5jdGlvbik6IFByb21pc2U8UmVzdWx0Vmlldz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogIyMjIEFORFJPSUQgT05MWVxyXG4gICAqXHJcbiAgICogR2V0IHRoZSAqKkFuZHJvaWQqKiBjdXJyZW50IGJ1aWxkIHZhcmlhbnQgRkxBVk9SXHJcbiAgICogVGhpcyBpcyBncmVhdCBpZiB5b3UgY2hhbmdlIHRoZSBGTEFWT1IgaW4gY29tcGlsZSB0aW1lXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjb25maWcuY2F0Y2hFcnJvcl0gYGNvbmZpZy5jYXRjaEVycm9yYCBUcnVlLCBpZiB5b3Ugd2lzaCBjYXRjaCBhIEpTT04gd2l0aCBlcnJvciBpbmZvcm1hdGlvblxyXG4gICAqIEBwYXJhbSBjb25maWdcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbc3VjY2Vzc10gQ2FsbGJhY2sgd2hlbiBzdWNjZXNzLiBVc2UgYC50aGVuKClgIFByb21pc2UgbWV0aG9kLCBpbnN0ZWFkXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2Vycm9yXSBDYWxsYmFjayBjYWxsYmVkIHdoZW4gYW4gZXJyb3IgaGFwcGVucy4gVXNlIGAuY2F0Y2goKWAgUHJvbWlzZSBtZXRob2QsIGluc3RlYWRcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgY3VycmVudCBGTEFWT1Igc3RyaW5nXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgcGxhdGZvcm1zOiBbJ2FuZHJvaWQnXSxcclxuICB9KVxyXG4gIGdldEJ1aWxkVmFyaWFudChjb25maWc6IHsgY2F0Y2hFcnJvcj86IGJvb2xlYW4gfSwgc3VjY2Vzcz86IEZ1bmN0aW9uLCBlcnJvcj86IEZ1bmN0aW9uKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19