var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var CalendarOriginal = /** @class */ (function (_super) {
    __extends(CalendarOriginal, _super);
    function CalendarOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CalendarOriginal.prototype.hasReadWritePermission = function () { return cordova(this, "hasReadWritePermission", {}, arguments); };
    CalendarOriginal.prototype.hasReadPermission = function () { return cordova(this, "hasReadPermission", {}, arguments); };
    CalendarOriginal.prototype.hasWritePermission = function () { return cordova(this, "hasWritePermission", {}, arguments); };
    CalendarOriginal.prototype.requestWritePermission = function () { return cordova(this, "requestWritePermission", {}, arguments); };
    CalendarOriginal.prototype.requestReadPermission = function () { return cordova(this, "requestReadPermission", {}, arguments); };
    CalendarOriginal.prototype.requestReadWritePermission = function () { return cordova(this, "requestReadWritePermission", {}, arguments); };
    CalendarOriginal.prototype.createCalendar = function (nameOrOptions) { return cordova(this, "createCalendar", {}, arguments); };
    CalendarOriginal.prototype.deleteCalendar = function (name) { return cordova(this, "deleteCalendar", {}, arguments); };
    CalendarOriginal.prototype.getCalendarOptions = function () { return cordova(this, "getCalendarOptions", { "sync": true }, arguments); };
    CalendarOriginal.prototype.getCreateCalendarOptions = function () { return cordova(this, "getCreateCalendarOptions", { "sync": true }, arguments); };
    CalendarOriginal.prototype.createEvent = function (title, location, notes, startDate, endDate) { return cordova(this, "createEvent", {}, arguments); };
    CalendarOriginal.prototype.createEventWithOptions = function (title, location, notes, startDate, endDate, options) { return cordova(this, "createEventWithOptions", {}, arguments); };
    CalendarOriginal.prototype.createEventInteractively = function (title, location, notes, startDate, endDate) { return cordova(this, "createEventInteractively", {}, arguments); };
    CalendarOriginal.prototype.createEventInteractivelyWithOptions = function (title, location, notes, startDate, endDate, options) { return cordova(this, "createEventInteractivelyWithOptions", {}, arguments); };
    CalendarOriginal.prototype.findEvent = function (title, location, notes, startDate, endDate) { return cordova(this, "findEvent", {}, arguments); };
    CalendarOriginal.prototype.findEventWithOptions = function (title, location, notes, startDate, endDate, options) { return cordova(this, "findEventWithOptions", {}, arguments); };
    CalendarOriginal.prototype.listEventsInRange = function (startDate, endDate) { return cordova(this, "listEventsInRange", { "platforms": ["Android"] }, arguments); };
    CalendarOriginal.prototype.listCalendars = function () { return cordova(this, "listCalendars", {}, arguments); };
    CalendarOriginal.prototype.findAllEventsInNamedCalendar = function (calendarName) { return cordova(this, "findAllEventsInNamedCalendar", { "platforms": ["iOS"] }, arguments); };
    CalendarOriginal.prototype.modifyEvent = function (title, location, notes, startDate, endDate, newTitle, newLocation, newNotes, newStartDate, newEndDate) { return cordova(this, "modifyEvent", { "platforms": ["iOS"] }, arguments); };
    CalendarOriginal.prototype.modifyEventWithOptions = function (title, location, notes, startDate, endDate, newTitle, newLocation, newNotes, newStartDate, newEndDate, filterOptions, newOptions) { return cordova(this, "modifyEventWithOptions", { "platforms": ["iOS"] }, arguments); };
    CalendarOriginal.prototype.deleteEvent = function (title, location, notes, startDate, endDate) { return cordova(this, "deleteEvent", {}, arguments); };
    CalendarOriginal.prototype.deleteEventFromNamedCalendar = function (title, location, notes, startDate, endDate, calendarName) { return cordova(this, "deleteEventFromNamedCalendar", { "platforms": ["iOS"] }, arguments); };
    CalendarOriginal.prototype.deleteEventById = function (id, fromDate) { return cordova(this, "deleteEventById", {}, arguments); };
    CalendarOriginal.prototype.openCalendar = function (date) { return cordova(this, "openCalendar", {}, arguments); };
    CalendarOriginal.pluginName = "Calendar";
    CalendarOriginal.plugin = "cordova-plugin-calendar";
    CalendarOriginal.pluginRef = "plugins.calendar";
    CalendarOriginal.repo = "https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin";
    CalendarOriginal.platforms = ["Android", "iOS"];
    return CalendarOriginal;
}(AwesomeCordovaNativePlugin));
var Calendar = new CalendarOriginal();
export { Calendar };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvY2FsZW5kYXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBd0Y5RCw0QkFBMEI7Ozs7SUFjdEQseUNBQXNCO0lBVXRCLG9DQUFpQjtJQVVqQixxQ0FBa0I7SUFVbEIseUNBQXNCO0lBVXRCLHdDQUFxQjtJQVVyQiw2Q0FBMEI7SUFXMUIsaUNBQWMsYUFBQyxhQUFxQztJQVdwRCxpQ0FBYyxhQUFDLElBQVk7SUFZM0IscUNBQWtCO0lBWWxCLDJDQUF3QjtJQWV4Qiw4QkFBVyxhQUFDLEtBQWMsRUFBRSxRQUFpQixFQUFFLEtBQWMsRUFBRSxTQUFnQixFQUFFLE9BQWM7SUFnQi9GLHlDQUFzQixhQUNwQixLQUFjLEVBQ2QsUUFBaUIsRUFDakIsS0FBYyxFQUNkLFNBQWdCLEVBQ2hCLE9BQWMsRUFDZCxPQUF5QjtJQWdCM0IsMkNBQXdCLGFBQ3RCLEtBQWMsRUFDZCxRQUFpQixFQUNqQixLQUFjLEVBQ2QsU0FBZ0IsRUFDaEIsT0FBYztJQWlCaEIsc0RBQW1DLGFBQ2pDLEtBQWMsRUFDZCxRQUFpQixFQUNqQixLQUFjLEVBQ2QsU0FBZ0IsRUFDaEIsT0FBYyxFQUNkLE9BQXlCO0lBZ0IzQiw0QkFBUyxhQUFDLEtBQWMsRUFBRSxRQUFpQixFQUFFLEtBQWMsRUFBRSxTQUFnQixFQUFFLE9BQWM7SUFnQjdGLHVDQUFvQixhQUNsQixLQUFjLEVBQ2QsUUFBaUIsRUFDakIsS0FBYyxFQUNkLFNBQWdCLEVBQ2hCLE9BQWMsRUFDZCxPQUF5QjtJQWUzQixvQ0FBaUIsYUFBQyxTQUFlLEVBQUUsT0FBYTtJQVVoRCxnQ0FBYTtJQWFiLCtDQUE0QixhQUFDLFlBQW9CO0lBc0JqRCw4QkFBVyxhQUNULEtBQWMsRUFDZCxRQUFpQixFQUNqQixLQUFjLEVBQ2QsU0FBZ0IsRUFDaEIsT0FBYyxFQUNkLFFBQWlCLEVBQ2pCLFdBQW9CLEVBQ3BCLFFBQWlCLEVBQ2pCLFlBQW1CLEVBQ25CLFVBQWlCO0lBeUJuQix5Q0FBc0IsYUFDcEIsS0FBYyxFQUNkLFFBQWlCLEVBQ2pCLEtBQWMsRUFDZCxTQUFnQixFQUNoQixPQUFjLEVBQ2QsUUFBaUIsRUFDakIsV0FBb0IsRUFDcEIsUUFBaUIsRUFDakIsWUFBbUIsRUFDbkIsVUFBaUIsRUFDakIsYUFBK0IsRUFDL0IsVUFBNEI7SUFnQjlCLDhCQUFXLGFBQUMsS0FBYyxFQUFFLFFBQWlCLEVBQUUsS0FBYyxFQUFFLFNBQWdCLEVBQUUsT0FBYztJQWtCL0YsK0NBQTRCLGFBQzFCLEtBQWMsRUFDZCxRQUFpQixFQUNqQixLQUFjLEVBQ2QsU0FBZ0IsRUFDaEIsT0FBYyxFQUNkLFlBQXFCO0lBYXZCLGtDQUFlLGFBQUMsRUFBVSxFQUFFLFFBQWU7SUFXM0MsK0JBQVksYUFBQyxJQUFVOzs7Ozs7bUJBemV6QjtFQXlGOEIsMEJBQTBCO1NBQTNDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENhbGVuZGFyT3B0aW9ucyB7XHJcbiAgLyoqXHJcbiAgICogSWRcclxuICAgKi9cclxuICBpZD86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKi9cclxuICBmaXJzdFJlbWluZGVyTWludXRlcz86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKi9cclxuICBzZWNvbmRSZW1pbmRlck1pbnV0ZXM/OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlY3VycmVuY2UuIENhbiBiZSBzZXQgdG8gYGRhaWx5YCwgYHdlZWtseWAsIGBtb250aGx5YCBvciBgeWVhcmx5YFxyXG4gICAqL1xyXG4gIHJlY3VycmVuY2U/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlY3VycmVuY2UgaW50ZXJ2YWwuIFZhbGlkIG9ubHkgd2hlbiBgcmVjdXJyZW5jZWAgb3B0aW9uIGlzIHNldC5cclxuICAgKi9cclxuICByZWN1cnJlbmNlSW50ZXJ2YWw/OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlY3VycmVuY2UgZW5kIGRhdGUuIFZhbGlkIG9ubHkgd2hlbiBgcmVjdXJyZW5jZWAgb3B0aW9uIGlzIHNldC5cclxuICAgKi9cclxuICByZWN1cnJlbmNlRW5kRGF0ZT86IERhdGU7XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGVuZGFyIG5hbWUuIFRocyBpcyBzdXBwb3J0ZWQgYnkgYGlPU2Agb25seS5cclxuICAgKi9cclxuICBjYWxlbmRhck5hbWU/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGVuZGFyIGlkXHJcbiAgICovXHJcbiAgY2FsZW5kYXJJZD86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogVVJMXHJcbiAgICovXHJcbiAgdXJsPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE5hbWVPck9wdGlvbnMge1xyXG4gIC8qKiBDYWxlbmRhciBuYW1lICovXHJcbiAgY2FsZW5kYXJOYW1lPzogc3RyaW5nO1xyXG5cclxuICAvKiogQ2FsZW5kYXIgY29sb3IgYXMgYSBIRVggc3RyaW5nICovXHJcbiAgY2FsZW5kYXJDb2xvcj86IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIENhbGVuZGFyXHJcbiAqIEBwcmVtaWVyIGNhbGVuZGFyXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGlzIHBsdWdpbiBhbGxvd3MgeW91IHRvIGFkZCBldmVudHMgdG8gdGhlIENhbGVuZGFyIG9mIHRoZSBtb2JpbGUgZGV2aWNlLlxyXG4gKlxyXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLWNhbGVuZGFyYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0NhbGVuZGFyIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vRWRkeVZlcmJydWdnZW4vQ2FsZW5kYXItUGhvbmVHYXAtUGx1Z2luKS5cclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgQ2FsZW5kYXIgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY2FsZW5kYXIvbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBjYWxlbmRhcjogQ2FsZW5kYXIpIHsgfVxyXG4gKlxyXG4gKlxyXG4gKiB0aGlzLmNhbGVuZGFyLmNyZWF0ZUNhbGVuZGFyKCdNeUNhbGVuZGFyJykudGhlbihcclxuICogICAobXNnKSA9PiB7IGNvbnNvbGUubG9nKG1zZyk7IH0sXHJcbiAqICAgKGVycikgPT4geyBjb25zb2xlLmxvZyhlcnIpOyB9XHJcbiAqICk7XHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBDYWxlbmRhck9wdGlvbnNcclxuICogTmFtZU9yT3B0aW9uc1xyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0NhbGVuZGFyJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1jYWxlbmRhcicsXHJcbiAgcGx1Z2luUmVmOiAncGx1Z2lucy5jYWxlbmRhcicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9DYWxlbmRhci1QaG9uZUdhcC1QbHVnaW4nLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBDYWxlbmRhciBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBUaGlzIGZ1bmN0aW9uIGNoZWNrcyBpZiB3ZSBoYXZlIHBlcm1pc3Npb24gdG8gcmVhZC93cml0ZSBmcm9tL3RvIHRoZSBjYWxlbmRhci5cclxuICAgKiBUaGUgcHJvbWlzZSB3aWxsIHJlc29sdmUgd2l0aCBgdHJ1ZWAgd2hlbjpcclxuICAgKiAtIFlvdSdyZSBydW5uaW5nIG9uIGlPUywgb3JcclxuICAgKiAtIFlvdSdyZSB0YXJnZXRpbmcgQVBJIGxldmVsIGxvd2VyIHRoYW4gMjMsIG9yXHJcbiAgICogLSBZb3UncmUgdXNpbmcgQW5kcm9pZCA8IDYsIG9yXHJcbiAgICogLSBZb3UndmUgYWxyZWFkeSBncmFudGVkIHBlcm1pc3Npb25cclxuICAgKlxyXG4gICAqIElmIHRoaXMgcmV0dXJucyBmYWxzZSwgeW91IHNob3VsZCBjYWxsIHRoZSBgcmVxdWVzdFJlYWRXcml0ZVBlcm1pc3Npb25gIGZ1bmN0aW9uXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaGFzUmVhZFdyaXRlUGVybWlzc2lvbigpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrIGlmIHdlIGhhdmUgcmVhZCBwZXJtaXNzaW9uXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaGFzUmVhZFBlcm1pc3Npb24oKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBpZiB3ZSBoYXZlIHdyaXRlIHBlcm1pc3Npb25cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBoYXNXcml0ZVBlcm1pc3Npb24oKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXF1ZXN0IHdyaXRlIHBlcm1pc3Npb25cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlcXVlc3RXcml0ZVBlcm1pc3Npb24oKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlcXVlc3QgcmVhZCBwZXJtaXNzaW9uXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZXF1ZXN0UmVhZFBlcm1pc3Npb24oKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlcXVlc3RzIHJlYWQvd3JpdGUgcGVybWlzc2lvbnNcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlcXVlc3RSZWFkV3JpdGVQZXJtaXNzaW9uKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgYSBjYWxlbmRhci4gKGlPUyBvbmx5KVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBOYW1lT3JPcHRpb25zfSBuYW1lT3JPcHRpb25zICBlaXRoZXIgYSBzdHJpbmcgbmFtZSBvciBhIG9wdGlvbnMgb2JqZWN0LiBJZiBzdHJpbmcsIHByb3ZpZGUgdGhlIGNhbGVuZGFyIG5hbWUuIElGIGFuIG9iamVjdCwgcHJvdmlkZSBhIGNhbGVuZGFyIG5hbWUgYXMgYSBzdHJpbmcgYW5kIGEgY2FsZW5kYXIgY29sb3IgaW4gaGV4IGZvcm1hdCBhcyBhIHN0cmluZ1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBQcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNyZWF0ZUNhbGVuZGFyKG5hbWVPck9wdGlvbnM6IHN0cmluZyB8IE5hbWVPck9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGVsZXRlIGEgY2FsZW5kYXIuIChpT1Mgb25seSlcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lICBOYW1lIG9mIHRoZSBjYWxlbmRhciB0byBkZWxldGUuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZGVsZXRlQ2FsZW5kYXIobmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIGRlZmF1bHQgY2FsZW5kYXIgb3B0aW9ucy5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtDYWxlbmRhck9wdGlvbnN9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIGRlZmF1bHQgY2FsZW5kYXIgb3B0aW9uc1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN5bmM6IHRydWUsXHJcbiAgfSlcclxuICBnZXRDYWxlbmRhck9wdGlvbnMoKTogQ2FsZW5kYXJPcHRpb25zIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgb3B0aW9ucyBmb3IgYSBjdXN0b20gY2FsZW5kZXIgd2l0aCBzcGVjaWZpYyBjb2xvclxyXG4gICAqXHJcbiAgICogQHJldHVybnMge05hbWVPck9wdGlvbnN9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIGRlZmF1bHQgb3B0aW9uc1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN5bmM6IHRydWUsXHJcbiAgfSlcclxuICBnZXRDcmVhdGVDYWxlbmRhck9wdGlvbnMoKTogTmFtZU9yT3B0aW9ucyB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTaWxlbnRseSBjcmVhdGUgYW4gZXZlbnQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3RpdGxlXSAgVGhlIGV2ZW50IHRpdGxlXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsb2NhdGlvbl0gIFRoZSBldmVudCBsb2NhdGlvblxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbm90ZXNdICBUaGUgZXZlbnQgbm90ZXNcclxuICAgKiBAcGFyYW0ge0RhdGV9IFtzdGFydERhdGVdICBUaGUgZXZlbnQgc3RhcnQgZGF0ZVxyXG4gICAqIEBwYXJhbSB7RGF0ZX0gW2VuZERhdGVdICBUaGUgZXZlbnQgZW5kIGRhdGVcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjcmVhdGVFdmVudCh0aXRsZT86IHN0cmluZywgbG9jYXRpb24/OiBzdHJpbmcsIG5vdGVzPzogc3RyaW5nLCBzdGFydERhdGU/OiBEYXRlLCBlbmREYXRlPzogRGF0ZSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTaWxlbnRseSBjcmVhdGUgYW4gZXZlbnQgd2l0aCBhZGRpdGlvbmFsIG9wdGlvbnMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3RpdGxlXSAgVGhlIGV2ZW50IHRpdGxlXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsb2NhdGlvbl0gIFRoZSBldmVudCBsb2NhdGlvblxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbm90ZXNdICBUaGUgZXZlbnQgbm90ZXNcclxuICAgKiBAcGFyYW0ge0RhdGV9IFtzdGFydERhdGVdICBUaGUgZXZlbnQgc3RhcnQgZGF0ZVxyXG4gICAqIEBwYXJhbSB7RGF0ZX0gW2VuZERhdGVdICBUaGUgZXZlbnQgZW5kIGRhdGVcclxuICAgKiBAcGFyYW0ge0NhbGVuZGFyT3B0aW9uc30gW29wdGlvbnNdICBBZGRpdGlvbmFsIG9wdGlvbnMsIHNlZSBgZ2V0Q2FsZW5kYXJPcHRpb25zYFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBQcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNyZWF0ZUV2ZW50V2l0aE9wdGlvbnMoXHJcbiAgICB0aXRsZT86IHN0cmluZyxcclxuICAgIGxvY2F0aW9uPzogc3RyaW5nLFxyXG4gICAgbm90ZXM/OiBzdHJpbmcsXHJcbiAgICBzdGFydERhdGU/OiBEYXRlLFxyXG4gICAgZW5kRGF0ZT86IERhdGUsXHJcbiAgICBvcHRpb25zPzogQ2FsZW5kYXJPcHRpb25zXHJcbiAgKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEludGVyYWN0aXZlbHkgY3JlYXRlIGFuIGV2ZW50LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0aXRsZV0gIFRoZSBldmVudCB0aXRsZVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbG9jYXRpb25dICBUaGUgZXZlbnQgbG9jYXRpb25cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW25vdGVzXSAgVGhlIGV2ZW50IG5vdGVzXHJcbiAgICogQHBhcmFtIHtEYXRlfSBbc3RhcnREYXRlXSAgVGhlIGV2ZW50IHN0YXJ0IGRhdGVcclxuICAgKiBAcGFyYW0ge0RhdGV9IFtlbmREYXRlXSAgVGhlIGV2ZW50IGVuZCBkYXRlXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgY3JlYXRlRXZlbnRJbnRlcmFjdGl2ZWx5KFxyXG4gICAgdGl0bGU/OiBzdHJpbmcsXHJcbiAgICBsb2NhdGlvbj86IHN0cmluZyxcclxuICAgIG5vdGVzPzogc3RyaW5nLFxyXG4gICAgc3RhcnREYXRlPzogRGF0ZSxcclxuICAgIGVuZERhdGU/OiBEYXRlXHJcbiAgKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEludGVyYWN0aXZlbHkgY3JlYXRlIGFuIGV2ZW50IHdpdGggYWRkaXRpb25hbCBvcHRpb25zLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0aXRsZV0gIFRoZSBldmVudCB0aXRsZVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbG9jYXRpb25dICBUaGUgZXZlbnQgbG9jYXRpb25cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW25vdGVzXSAgVGhlIGV2ZW50IG5vdGVzXHJcbiAgICogQHBhcmFtIHtEYXRlfSBbc3RhcnREYXRlXSAgVGhlIGV2ZW50IHN0YXJ0IGRhdGVcclxuICAgKiBAcGFyYW0ge0RhdGV9IFtlbmREYXRlXSAgVGhlIGV2ZW50IGVuZCBkYXRlXHJcbiAgICogQHBhcmFtIHtDYWxlbmRhck9wdGlvbnN9IFtvcHRpb25zXSAgQWRkaXRpb25hbCBvcHRpb25zLCBzZWUgYGdldENhbGVuZGFyT3B0aW9uc2BcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjcmVhdGVFdmVudEludGVyYWN0aXZlbHlXaXRoT3B0aW9ucyhcclxuICAgIHRpdGxlPzogc3RyaW5nLFxyXG4gICAgbG9jYXRpb24/OiBzdHJpbmcsXHJcbiAgICBub3Rlcz86IHN0cmluZyxcclxuICAgIHN0YXJ0RGF0ZT86IERhdGUsXHJcbiAgICBlbmREYXRlPzogRGF0ZSxcclxuICAgIG9wdGlvbnM/OiBDYWxlbmRhck9wdGlvbnNcclxuICApOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmluZCBhbiBldmVudC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdGl0bGVdICBUaGUgZXZlbnQgdGl0bGVcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2xvY2F0aW9uXSAgVGhlIGV2ZW50IGxvY2F0aW9uXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtub3Rlc10gIFRoZSBldmVudCBub3Rlc1xyXG4gICAqIEBwYXJhbSB7RGF0ZX0gW3N0YXJ0RGF0ZV0gIFRoZSBldmVudCBzdGFydCBkYXRlXHJcbiAgICogQHBhcmFtIHtEYXRlfSBbZW5kRGF0ZV0gIFRoZSBldmVudCBlbmQgZGF0ZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGZpbmRFdmVudCh0aXRsZT86IHN0cmluZywgbG9jYXRpb24/OiBzdHJpbmcsIG5vdGVzPzogc3RyaW5nLCBzdGFydERhdGU/OiBEYXRlLCBlbmREYXRlPzogRGF0ZSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGaW5kIGFuIGV2ZW50IHdpdGggYWRkaXRpb25hbCBvcHRpb25zLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0aXRsZV0gIFRoZSBldmVudCB0aXRsZVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbG9jYXRpb25dICBUaGUgZXZlbnQgbG9jYXRpb25cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW25vdGVzXSAgVGhlIGV2ZW50IG5vdGVzXHJcbiAgICogQHBhcmFtIHtEYXRlfSBbc3RhcnREYXRlXSAgVGhlIGV2ZW50IHN0YXJ0IGRhdGVcclxuICAgKiBAcGFyYW0ge0RhdGV9IFtlbmREYXRlXSAgVGhlIGV2ZW50IGVuZCBkYXRlXHJcbiAgICogQHBhcmFtIHtDYWxlbmRhck9wdGlvbnN9IFtvcHRpb25zXSAgQWRkaXRpb25hbCBvcHRpb25zLCBzZWUgYGdldENhbGVuZGFyT3B0aW9uc2BcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGV2ZW50LCBvciByZWplY3RzIHdpdGggYW4gZXJyb3IuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGZpbmRFdmVudFdpdGhPcHRpb25zKFxyXG4gICAgdGl0bGU/OiBzdHJpbmcsXHJcbiAgICBsb2NhdGlvbj86IHN0cmluZyxcclxuICAgIG5vdGVzPzogc3RyaW5nLFxyXG4gICAgc3RhcnREYXRlPzogRGF0ZSxcclxuICAgIGVuZERhdGU/OiBEYXRlLFxyXG4gICAgb3B0aW9ucz86IENhbGVuZGFyT3B0aW9uc1xyXG4gICk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGaW5kIGEgbGlzdCBvZiBldmVudHMgd2l0aGluIHRoZSBzcGVjaWZpZWQgZGF0ZSByYW5nZS4gKEFuZHJvaWQgb25seSlcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7RGF0ZX0gW3N0YXJ0RGF0ZV0gIFRoZSBzdGFydCBkYXRlXHJcbiAgICogQHBhcmFtIHtEYXRlfSBbZW5kRGF0ZV0gIFRoZSBlbmQgZGF0ZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgbGlzdCBvZiBldmVudHMsIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvci5cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddLFxyXG4gIH0pXHJcbiAgbGlzdEV2ZW50c0luUmFuZ2Uoc3RhcnREYXRlOiBEYXRlLCBlbmREYXRlOiBEYXRlKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBhIGxpc3Qgb2YgYWxsIGNhbGVuZGFycy5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGxpc3Qgb2YgY2FsZW5kYXJzLCBvciByZWplY3RzIHdpdGggYW4gZXJyb3IuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGxpc3RDYWxlbmRhcnMoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBhIGxpc3Qgb2YgYWxsIGZ1dHVyZSBldmVudHMgaW4gdGhlIHNwZWNpZmllZCBjYWxlbmRhci4gKGlPUyBvbmx5KVxyXG4gICAqXHJcbiAgICogQHBhcmFtIGNhbGVuZGFyTmFtZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgbGlzdCBvZiBldmVudHMsIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvci5cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBwbGF0Zm9ybXM6IFsnaU9TJ10sXHJcbiAgfSlcclxuICBmaW5kQWxsRXZlbnRzSW5OYW1lZENhbGVuZGFyKGNhbGVuZGFyTmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1vZGlmeSBhbiBldmVudC4gKGlPUyBvbmx5KVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0aXRsZV0gIFRoZSBldmVudCB0aXRsZVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbG9jYXRpb25dICBUaGUgZXZlbnQgbG9jYXRpb25cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW25vdGVzXSAgVGhlIGV2ZW50IG5vdGVzXHJcbiAgICogQHBhcmFtIHtEYXRlfSBbc3RhcnREYXRlXSAgVGhlIGV2ZW50IHN0YXJ0IGRhdGVcclxuICAgKiBAcGFyYW0ge0RhdGV9IFtlbmREYXRlXSAgVGhlIGV2ZW50IGVuZCBkYXRlXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtuZXdUaXRsZV0gIFRoZSBuZXcgZXZlbnQgdGl0bGVcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW25ld0xvY2F0aW9uXSAgVGhlIG5ldyBldmVudCBsb2NhdGlvblxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbmV3Tm90ZXNdICBUaGUgbmV3IGV2ZW50IG5vdGVzXHJcbiAgICogQHBhcmFtIHtEYXRlfSBbbmV3U3RhcnREYXRlXSAgVGhlIG5ldyBldmVudCBzdGFydCBkYXRlXHJcbiAgICogQHBhcmFtIHtEYXRlfSBbbmV3RW5kRGF0ZV0gIFRoZSBuZXcgZXZlbnQgZW5kIGRhdGVcclxuICAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHBsYXRmb3JtczogWydpT1MnXSxcclxuICB9KVxyXG4gIG1vZGlmeUV2ZW50KFxyXG4gICAgdGl0bGU/OiBzdHJpbmcsXHJcbiAgICBsb2NhdGlvbj86IHN0cmluZyxcclxuICAgIG5vdGVzPzogc3RyaW5nLFxyXG4gICAgc3RhcnREYXRlPzogRGF0ZSxcclxuICAgIGVuZERhdGU/OiBEYXRlLFxyXG4gICAgbmV3VGl0bGU/OiBzdHJpbmcsXHJcbiAgICBuZXdMb2NhdGlvbj86IHN0cmluZyxcclxuICAgIG5ld05vdGVzPzogc3RyaW5nLFxyXG4gICAgbmV3U3RhcnREYXRlPzogRGF0ZSxcclxuICAgIG5ld0VuZERhdGU/OiBEYXRlXHJcbiAgKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1vZGlmeSBhbiBldmVudCB3aXRoIGFkZGl0aW9uYWwgb3B0aW9ucy4gKGlPUyBvbmx5KVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0aXRsZV0gIFRoZSBldmVudCB0aXRsZVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbG9jYXRpb25dICBUaGUgZXZlbnQgbG9jYXRpb25cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW25vdGVzXSAgVGhlIGV2ZW50IG5vdGVzXHJcbiAgICogQHBhcmFtIHtEYXRlfSBbc3RhcnREYXRlXSAgVGhlIGV2ZW50IHN0YXJ0IGRhdGVcclxuICAgKiBAcGFyYW0ge0RhdGV9IFtlbmREYXRlXSAgVGhlIGV2ZW50IGVuZCBkYXRlXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtuZXdUaXRsZV0gIFRoZSBuZXcgZXZlbnQgdGl0bGVcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW25ld0xvY2F0aW9uXSAgVGhlIG5ldyBldmVudCBsb2NhdGlvblxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbmV3Tm90ZXNdICBUaGUgbmV3IGV2ZW50IG5vdGVzXHJcbiAgICogQHBhcmFtIHtEYXRlfSBbbmV3U3RhcnREYXRlXSAgVGhlIG5ldyBldmVudCBzdGFydCBkYXRlXHJcbiAgICogQHBhcmFtIHtEYXRlfSBbbmV3RW5kRGF0ZV0gIFRoZSBuZXcgZXZlbnQgZW5kIGRhdGVcclxuICAgKiBAcGFyYW0ge0NhbGVuZGFyT3B0aW9uc30gW2ZpbHRlck9wdGlvbnNdIEV2ZW50IE9wdGlvbnMsIHNlZSBgZ2V0Q2FsZW5kYXJPcHRpb25zYFxyXG4gICAqIEBwYXJhbSB7Q2FsZW5kYXJPcHRpb25zfSBbbmV3T3B0aW9uc10gIE5ldyBldmVudCBvcHRpb25zLCBzZWUgYGdldENhbGVuZGFyT3B0aW9uc2BcclxuICAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHBsYXRmb3JtczogWydpT1MnXSxcclxuICB9KVxyXG4gIG1vZGlmeUV2ZW50V2l0aE9wdGlvbnMoXHJcbiAgICB0aXRsZT86IHN0cmluZyxcclxuICAgIGxvY2F0aW9uPzogc3RyaW5nLFxyXG4gICAgbm90ZXM/OiBzdHJpbmcsXHJcbiAgICBzdGFydERhdGU/OiBEYXRlLFxyXG4gICAgZW5kRGF0ZT86IERhdGUsXHJcbiAgICBuZXdUaXRsZT86IHN0cmluZyxcclxuICAgIG5ld0xvY2F0aW9uPzogc3RyaW5nLFxyXG4gICAgbmV3Tm90ZXM/OiBzdHJpbmcsXHJcbiAgICBuZXdTdGFydERhdGU/OiBEYXRlLFxyXG4gICAgbmV3RW5kRGF0ZT86IERhdGUsXHJcbiAgICBmaWx0ZXJPcHRpb25zPzogQ2FsZW5kYXJPcHRpb25zLFxyXG4gICAgbmV3T3B0aW9ucz86IENhbGVuZGFyT3B0aW9uc1xyXG4gICk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZWxldGUgYW4gZXZlbnQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3RpdGxlXSAgVGhlIGV2ZW50IHRpdGxlXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsb2NhdGlvbl0gIFRoZSBldmVudCBsb2NhdGlvblxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbm90ZXNdICBUaGUgZXZlbnQgbm90ZXNcclxuICAgKiBAcGFyYW0ge0RhdGV9IFtzdGFydERhdGVdICBUaGUgZXZlbnQgc3RhcnQgZGF0ZVxyXG4gICAqIEBwYXJhbSB7RGF0ZX0gW2VuZERhdGVdICBUaGUgZXZlbnQgZW5kIGRhdGVcclxuICAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBkZWxldGVFdmVudCh0aXRsZT86IHN0cmluZywgbG9jYXRpb24/OiBzdHJpbmcsIG5vdGVzPzogc3RyaW5nLCBzdGFydERhdGU/OiBEYXRlLCBlbmREYXRlPzogRGF0ZSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZWxldGUgYW4gZXZlbnQgZnJvbSB0aGUgc3BlY2lmaWVkIENhbGVuZGFyLiAoaU9TIG9ubHkpXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3RpdGxlXSAgVGhlIGV2ZW50IHRpdGxlXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsb2NhdGlvbl0gIFRoZSBldmVudCBsb2NhdGlvblxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbm90ZXNdICBUaGUgZXZlbnQgbm90ZXNcclxuICAgKiBAcGFyYW0ge0RhdGV9IFtzdGFydERhdGVdICBUaGUgZXZlbnQgc3RhcnQgZGF0ZVxyXG4gICAqIEBwYXJhbSB7RGF0ZX0gW2VuZERhdGVdICBUaGUgZXZlbnQgZW5kIGRhdGVcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2FsZW5kYXJOYW1lXHJcbiAgICogQHJldHVybnMgUmV0dXJucyBhIFByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBwbGF0Zm9ybXM6IFsnaU9TJ10sXHJcbiAgfSlcclxuICBkZWxldGVFdmVudEZyb21OYW1lZENhbGVuZGFyKFxyXG4gICAgdGl0bGU/OiBzdHJpbmcsXHJcbiAgICBsb2NhdGlvbj86IHN0cmluZyxcclxuICAgIG5vdGVzPzogc3RyaW5nLFxyXG4gICAgc3RhcnREYXRlPzogRGF0ZSxcclxuICAgIGVuZERhdGU/OiBEYXRlLFxyXG4gICAgY2FsZW5kYXJOYW1lPzogc3RyaW5nXHJcbiAgKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlbGV0ZSBhbiBldmVudCBieSBpZC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbaWRdICBUaGUgZXZlbnQgaWRcclxuICAgKiBAcGFyYW0ge0RhdGV9IFtmcm9tRGF0ZV0gIFRoZSBkYXRlIHdoZXJlIGl0IHN0YXJ0IGRlbGV0aW5nIGZyb21cclxuICAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBkZWxldGVFdmVudEJ5SWQoaWQ6IHN0cmluZywgZnJvbURhdGU/OiBEYXRlKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE9wZW4gdGhlIGNhbGVuZGFyIGF0IHRoZSBzcGVjaWZpZWQgZGF0ZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7RGF0ZX0gZGF0ZSBUaGUgZGF0ZSB5b3Ugd2FudCB0byBvcGVuIHRoZSBjYWxlbmRhciBvblxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFByb21pc2UgcmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgb3BlbkNhbGVuZGFyKGRhdGU6IERhdGUpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=