import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var SpotifyAuth = /** @class */ (function (_super) {
    __extends(SpotifyAuth, _super);
    function SpotifyAuth() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SpotifyAuth.prototype.authorize = function (cfg) { return cordova(this, "authorize", { "sync": false }, arguments); };
    SpotifyAuth.prototype.forget = function () { return cordova(this, "forget", { "sync": true }, arguments); };
    SpotifyAuth.pluginName = "SpotifyAuth";
    SpotifyAuth.plugin = "cordova-spotify-oauth";
    SpotifyAuth.pluginRef = "cordova.plugins.spotifyAuth";
    SpotifyAuth.repo = "https://github.com/Festify/cordova-spotify-oauth";
    SpotifyAuth.install = "ionic cordova plugin add cordova-spotify-oauth --variable LOCAL_STORAGE_KEY=\"SpotifyOAuthData\"";
    SpotifyAuth.installVariables = ["LOCAL_STORAGE_KEY"];
    SpotifyAuth.platforms = ["Android", "iOS"];
    SpotifyAuth.decorators = [
        { type: Injectable }
    ];
    return SpotifyAuth;
}(AwesomeCordovaNativePlugin));
export { SpotifyAuth };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvc3BvdGlmeS1hdXRoL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQWlHM0QsK0JBQTBCOzs7O0lBdUJ6RCwrQkFBUyxhQUFDLEdBQVc7SUFlckIsNEJBQU07Ozs7Ozs7OztnQkF2Q1AsVUFBVTs7c0JBakdYO0VBa0dpQywwQkFBMEI7U0FBOUMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBPQXV0aCBjb25maWd1cmF0aW9uIGRhdGEuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZyB7XHJcbiAgLyoqIFRoZSBjbGllbnQgSUQgYXMgcGVyIHRoZSBTcG90aWZ5IGRldiBjb25zb2xlLiAqL1xyXG4gIGNsaWVudElkOiBzdHJpbmc7XHJcblxyXG4gIC8qKiBUaGUgcmVkaXJlY3QgVVJJIGFzIGVudGVyZWQgaW4gdGhlIFNwb3RpZnkgZGV2IGNvbnNvbGUuICovXHJcbiAgcmVkaXJlY3RVcmw6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogU2FmZXR5IG1hcmdpbiB0aW1lIChpbiBtaWxsaXNlY29uZHMpIGZvciB0aGUgdG9rZW4gcmVmcmVzaC5cclxuICAgKlxyXG4gICAqIFRoZSBwbHVnaW4gYXBwbGllcyBhIHNhZmV0eSBtYXJnaW4gdG8gdGhlIHRva2VuIGxpZmV0aW1lIGluIG9yZGVyXHJcbiAgICogdG8gZ2l2ZSB0aGUgdG9rZW4gdXNlciBlbm91Z2ggdGltZSB0byBwZXJmb3JtIGFsbCBvcGVyYXRpb25zIG5lZWRlZC5cclxuICAgKlxyXG4gICAqIE90aGVyd2lzZSB0aGUgcGx1Z2luIG1pZ2h0IGhhbmQgb3V0IGEgdG9rZW4gdGhhdCBpcyBhbHJlYWR5IGV4cGlyZWRcclxuICAgKiBiZWZvcmUgaXQgY291bGQgZXZlciBiZSB1c2VkLlxyXG4gICAqXHJcbiAgICogVGhlIHNhZmV0eSBtYXJnaW4gZGVmYXVsdHMgdG8gMzBzLlxyXG4gICAqL1xyXG4gIHJlZnJlc2hTYWZldHlNYXJnaW4/OiBudW1iZXI7XHJcblxyXG4gIC8qKiBSZXF1ZXN0ZWQgT0F1dGggc2NvcGVzLiAqL1xyXG4gIHNjb3Blczogc3RyaW5nW107XHJcblxyXG4gIC8qKiBUaGUgdG9rZW4gZXhjaGFuZ2UgVVJMLiAqL1xyXG4gIHRva2VuRXhjaGFuZ2VVcmw6IHN0cmluZztcclxuXHJcbiAgLyoqIFRoZSB0b2tlbiByZWZyZXNoIFVSTC4gKi9cclxuICB0b2tlblJlZnJlc2hVcmw6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBhdXRob3JpemF0aW9uIGRhdGEuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEF1dGhvcml6YXRpb25EYXRhIHtcclxuICAvKiogQSB2YWxpZCBhY2Nlc3MgdG9rZW4uICovXHJcbiAgYWNjZXNzVG9rZW46IHN0cmluZztcclxuXHJcbiAgLyoqIFRoZSBlbmNyeXB0ZWQgcmVmcmVzaCB0b2tlbi4gKi9cclxuICBlbmNyeXB0ZWRSZWZyZXNoVG9rZW46IHN0cmluZztcclxuXHJcbiAgLyoqIFRoZSBkYXRlIChmcm9tIFVUQywgaW4gbWlsbGlzZWNvbmRzKSB3aGVuIHRoZSBnaXZlbiBhY2Nlc3MgdG9rZW4gZXhwaXJlcy4gKi9cclxuICBleHBpcmVzQXQ6IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIFNwb3RpZnkgQXV0aFxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQ29yZG92YSBwbHVnaW4gZm9yIGF1dGhlbnRpY2F0aW5nIHdpdGggU3BvdGlmeVxyXG4gKiA+IGh0dHBzOi8vZ2l0aHViLmNvbS9GZXN0aWZ5L2NvcmRvdmEtc3BvdGlmeS1vYXV0aFxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBTcG90aWZ5QXV0aCB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9zcG90aWZ5LWF1dGgvbmd4JztcclxuICpcclxuICogLy8gWy4uLl1cclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBzcG90aWZ5QXV0aDogU3BvdGlmeUF1dGgpIHsgfVxyXG4gKlxyXG4gKiAvLyBbLi4uXVxyXG4gKlxyXG4gKiBjb25zdCBjb25maWcgPSB7XHJcbiAqICAgY2xpZW50SWQ6IFwiPFNQT1RJRlkgQ0xJRU5UIElEPlwiLFxyXG4gKiAgIHJlZGlyZWN0VXJsOiBcIjxSRURJUkVDVCBVUkwsIE1VU1QgTUFUQ0ggV0lUSCBBVVRIIEVORFBPSU5UIEFORCBTUE9USUZZIERFViBDT05TT0xFPlwiLFxyXG4gKiAgIHNjb3BlczogW1wic3RyZWFtaW5nXCJdLCAvLyBzZWUgU3BvdGlmeSBEZXYgY29uc29sZSBmb3IgYWxsIHNjb3Blc1xyXG4gKiAgIHRva2VuRXhjaGFuZ2VVcmw6IFwiPFVSTCBPRiBUT0tFTiBFWENIQU5HRSBIVFRQIEVORFBPSU5UPlwiLFxyXG4gKiAgIHRva2VuUmVmcmVzaFVybDogXCI8VVJMIE9GIFRPS0VOIFJFRlJFU0ggSFRUUCBFTkRQT0lOVD5cIixcclxuICogfTtcclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIHRoaXMuc3BvdGlmeUF1dGguYXV0aG9yaXplKGNvbmZpZylcclxuICogICAudGhlbigoeyBhY2Nlc3NUb2tlbiwgZXhwaXJlc0F0IH0pID0+IHtcclxuICogICAgIGNvbnNvbGUubG9nKGBHb3QgYW4gYWNjZXNzIHRva2VuLCBpdHMgJHthY2Nlc3NUb2tlbn0hYCk7XHJcbiAqICAgICBjb25zb2xlLmxvZyhgSXRzIGdvaW5nIHRvIGV4cGlyZSBpbiAke2V4cGlyZXNBdCAtIERhdGUubm93KCl9bXMuYCk7XHJcbiAqICAgfSk7XHJcbiAqXHJcbiAqIC8vIFsuLi5dXHJcbiAqXHJcbiAqIHRoaXMuc3BvdGlmeUF1dGguZm9yZ2V0KCk7XHJcbiAqXHJcbiAqIC8vIFsuLi5dXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ1Nwb3RpZnlBdXRoJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXNwb3RpZnktb2F1dGgnLFxyXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5zcG90aWZ5QXV0aCcsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9GZXN0aWZ5L2NvcmRvdmEtc3BvdGlmeS1vYXV0aCcsXHJcbiAgaW5zdGFsbDogJ2lvbmljIGNvcmRvdmEgcGx1Z2luIGFkZCBjb3Jkb3ZhLXNwb3RpZnktb2F1dGggLS12YXJpYWJsZSBMT0NBTF9TVE9SQUdFX0tFWT1cIlNwb3RpZnlPQXV0aERhdGFcIicsXHJcbiAgaW5zdGFsbFZhcmlhYmxlczogWydMT0NBTF9TVE9SQUdFX0tFWSddLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBTcG90aWZ5QXV0aCBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBPYnRhaW5zIHZhbGlkIGF1dGhvcml6YXRpb24gZGF0YS5cclxuICAgKlxyXG4gICAqIFRoaXMgbWV0aG9kIHBlcmZvcm1zIHRoZSBuZWNlc3Nhcnkgc3RlcHMgaW4gb3JkZXIgdG8gb2J0YWluIGEgdmFsaWRcclxuICAgKiBhY2Nlc3MgdG9rZW4uIEl0IHBlcmZvcm1zIHRoZSBPQXV0aCBkYW5jZSBwcm9tcHRpbmcgdGhlIHVzZXIgdG8gbG9nIGluLFxyXG4gICAqIGV4Y2hhbmdlcyB0aGUgb2J0YWluZWQgYXV0aG9yaXphdGlvbiBjb2RlIGZvciBhbiBhY2Nlc3MgYW5kIGEgcmVmcmVzaFxyXG4gICAqIHRva2VuLCBjYWNoZXMgdGhvc2UsIGFuZCByZXR1cm5zIGJvdGggdG8gdGhlIGRldmVsb3Blci5cclxuICAgKlxyXG4gICAqIFdoZW4gaXQgaXMgaW52b2tlZCBhZ2FpbiwgaXQgd2lsbCBmaXJzdCBjaGVjayB3aGV0aGVyIHRoZSBjYWNoZWQgYWNjZXNzXHJcbiAgICogdG9rZW4gaXMgc3RpbGwgdmFsaWQgKGluY2x1ZGluZyBhIGNvbmZpZ3VyYWJsZSBzYWZldHkgbWFyZ2luKSBhbmQgdGhlXHJcbiAgICogc2NvcGVzIGVxdWFsLCBhbmQgcmV0dXJuIHRoZSB0b2tlbiBkaXJlY3RseSBpZiB0aGF0IGlzIHRoZSBjYXNlLiBPdGhlcndpc2UsXHJcbiAgICogdGhlIG1ldGhvZCB3aWxsIHRyYW5zcGFyZW50bHkgcmVmcmVzaCB0aGUgdG9rZW4gKG9yIG9idGFpbiBhIG5ldyBvbmUgaWZcclxuICAgKiB0aGUgc2NvcGVzIGNoYW5nZWQpIGFuZCByZXR1cm4gdGhhdC5cclxuICAgKlxyXG4gICAqIEJvdHRvbSBsaW5lIC0gYWx3YXlzIGNhbGwgdGhpcyBpZiB5b3UgbmVlZCBhIHZhbGlkIGFjY2VzcyB0b2tlbiBpbiB5b3VyIGNvZGUuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gY2ZnIHtDb25maWd9IGNvbmZpZ3VyYXRpb25cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxBdXRob3JpemF0aW9uRGF0YT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3luYzogZmFsc2UsXHJcbiAgfSlcclxuICBhdXRob3JpemUoY2ZnOiBDb25maWcpOiBQcm9taXNlPEF1dGhvcml6YXRpb25EYXRhPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmVzIGFsbCBjYWNoZWQgZGF0YSBzbyB0aGF0IGBhdXRob3JpemVgIHBlcmZvcm1zIHRoZSBmdWxsXHJcbiAgICogb2F1dGggZGFuY2UgYWdhaW4uXHJcbiAgICpcclxuICAgKiBUaGlzIGlzIGFraW4gdG8gYSBcImxvZ291dFwiLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3luYzogdHJ1ZSxcclxuICB9KVxyXG4gIGZvcmdldCgpOiB2b2lkIHt9XHJcbn1cclxuIl19