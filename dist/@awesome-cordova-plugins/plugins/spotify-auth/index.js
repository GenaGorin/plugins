var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var SpotifyAuthOriginal = /** @class */ (function (_super) {
    __extends(SpotifyAuthOriginal, _super);
    function SpotifyAuthOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SpotifyAuthOriginal.prototype.authorize = function (cfg) { return cordova(this, "authorize", { "sync": false }, arguments); };
    SpotifyAuthOriginal.prototype.forget = function () { return cordova(this, "forget", { "sync": true }, arguments); };
    SpotifyAuthOriginal.pluginName = "SpotifyAuth";
    SpotifyAuthOriginal.plugin = "cordova-spotify-oauth";
    SpotifyAuthOriginal.pluginRef = "cordova.plugins.spotifyAuth";
    SpotifyAuthOriginal.repo = "https://github.com/Festify/cordova-spotify-oauth";
    SpotifyAuthOriginal.install = "ionic cordova plugin add cordova-spotify-oauth --variable LOCAL_STORAGE_KEY=\"SpotifyOAuthData\"";
    SpotifyAuthOriginal.installVariables = ["LOCAL_STORAGE_KEY"];
    SpotifyAuthOriginal.platforms = ["Android", "iOS"];
    return SpotifyAuthOriginal;
}(AwesomeCordovaNativePlugin));
var SpotifyAuth = new SpotifyAuthOriginal();
export { SpotifyAuth };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvc3BvdGlmeS1hdXRoL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQWlHM0QsK0JBQTBCOzs7O0lBdUJ6RCwrQkFBUyxhQUFDLEdBQVc7SUFlckIsNEJBQU07Ozs7Ozs7O3NCQXhJUjtFQWtHaUMsMEJBQTBCO1NBQTlDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG4vKipcclxuICogT0F1dGggY29uZmlndXJhdGlvbiBkYXRhLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDb25maWcge1xyXG4gIC8qKiBUaGUgY2xpZW50IElEIGFzIHBlciB0aGUgU3BvdGlmeSBkZXYgY29uc29sZS4gKi9cclxuICBjbGllbnRJZDogc3RyaW5nO1xyXG5cclxuICAvKiogVGhlIHJlZGlyZWN0IFVSSSBhcyBlbnRlcmVkIGluIHRoZSBTcG90aWZ5IGRldiBjb25zb2xlLiAqL1xyXG4gIHJlZGlyZWN0VXJsOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFNhZmV0eSBtYXJnaW4gdGltZSAoaW4gbWlsbGlzZWNvbmRzKSBmb3IgdGhlIHRva2VuIHJlZnJlc2guXHJcbiAgICpcclxuICAgKiBUaGUgcGx1Z2luIGFwcGxpZXMgYSBzYWZldHkgbWFyZ2luIHRvIHRoZSB0b2tlbiBsaWZldGltZSBpbiBvcmRlclxyXG4gICAqIHRvIGdpdmUgdGhlIHRva2VuIHVzZXIgZW5vdWdoIHRpbWUgdG8gcGVyZm9ybSBhbGwgb3BlcmF0aW9ucyBuZWVkZWQuXHJcbiAgICpcclxuICAgKiBPdGhlcndpc2UgdGhlIHBsdWdpbiBtaWdodCBoYW5kIG91dCBhIHRva2VuIHRoYXQgaXMgYWxyZWFkeSBleHBpcmVkXHJcbiAgICogYmVmb3JlIGl0IGNvdWxkIGV2ZXIgYmUgdXNlZC5cclxuICAgKlxyXG4gICAqIFRoZSBzYWZldHkgbWFyZ2luIGRlZmF1bHRzIHRvIDMwcy5cclxuICAgKi9cclxuICByZWZyZXNoU2FmZXR5TWFyZ2luPzogbnVtYmVyO1xyXG5cclxuICAvKiogUmVxdWVzdGVkIE9BdXRoIHNjb3Blcy4gKi9cclxuICBzY29wZXM6IHN0cmluZ1tdO1xyXG5cclxuICAvKiogVGhlIHRva2VuIGV4Y2hhbmdlIFVSTC4gKi9cclxuICB0b2tlbkV4Y2hhbmdlVXJsOiBzdHJpbmc7XHJcblxyXG4gIC8qKiBUaGUgdG9rZW4gcmVmcmVzaCBVUkwuICovXHJcbiAgdG9rZW5SZWZyZXNoVXJsOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgYXV0aG9yaXphdGlvbiBkYXRhLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBdXRob3JpemF0aW9uRGF0YSB7XHJcbiAgLyoqIEEgdmFsaWQgYWNjZXNzIHRva2VuLiAqL1xyXG4gIGFjY2Vzc1Rva2VuOiBzdHJpbmc7XHJcblxyXG4gIC8qKiBUaGUgZW5jcnlwdGVkIHJlZnJlc2ggdG9rZW4uICovXHJcbiAgZW5jcnlwdGVkUmVmcmVzaFRva2VuOiBzdHJpbmc7XHJcblxyXG4gIC8qKiBUaGUgZGF0ZSAoZnJvbSBVVEMsIGluIG1pbGxpc2Vjb25kcykgd2hlbiB0aGUgZ2l2ZW4gYWNjZXNzIHRva2VuIGV4cGlyZXMuICovXHJcbiAgZXhwaXJlc0F0OiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBTcG90aWZ5IEF1dGhcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIENvcmRvdmEgcGx1Z2luIGZvciBhdXRoZW50aWNhdGluZyB3aXRoIFNwb3RpZnlcclxuICogPiBodHRwczovL2dpdGh1Yi5jb20vRmVzdGlmeS9jb3Jkb3ZhLXNwb3RpZnktb2F1dGhcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgU3BvdGlmeUF1dGggfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvc3BvdGlmeS1hdXRoL25neCc7XHJcbiAqXHJcbiAqIC8vIFsuLi5dXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc3BvdGlmeUF1dGg6IFNwb3RpZnlBdXRoKSB7IH1cclxuICpcclxuICogLy8gWy4uLl1cclxuICpcclxuICogY29uc3QgY29uZmlnID0ge1xyXG4gKiAgIGNsaWVudElkOiBcIjxTUE9USUZZIENMSUVOVCBJRD5cIixcclxuICogICByZWRpcmVjdFVybDogXCI8UkVESVJFQ1QgVVJMLCBNVVNUIE1BVENIIFdJVEggQVVUSCBFTkRQT0lOVCBBTkQgU1BPVElGWSBERVYgQ09OU09MRT5cIixcclxuICogICBzY29wZXM6IFtcInN0cmVhbWluZ1wiXSwgLy8gc2VlIFNwb3RpZnkgRGV2IGNvbnNvbGUgZm9yIGFsbCBzY29wZXNcclxuICogICB0b2tlbkV4Y2hhbmdlVXJsOiBcIjxVUkwgT0YgVE9LRU4gRVhDSEFOR0UgSFRUUCBFTkRQT0lOVD5cIixcclxuICogICB0b2tlblJlZnJlc2hVcmw6IFwiPFVSTCBPRiBUT0tFTiBSRUZSRVNIIEhUVFAgRU5EUE9JTlQ+XCIsXHJcbiAqIH07XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiB0aGlzLnNwb3RpZnlBdXRoLmF1dGhvcml6ZShjb25maWcpXHJcbiAqICAgLnRoZW4oKHsgYWNjZXNzVG9rZW4sIGV4cGlyZXNBdCB9KSA9PiB7XHJcbiAqICAgICBjb25zb2xlLmxvZyhgR290IGFuIGFjY2VzcyB0b2tlbiwgaXRzICR7YWNjZXNzVG9rZW59IWApO1xyXG4gKiAgICAgY29uc29sZS5sb2coYEl0cyBnb2luZyB0byBleHBpcmUgaW4gJHtleHBpcmVzQXQgLSBEYXRlLm5vdygpfW1zLmApO1xyXG4gKiAgIH0pO1xyXG4gKlxyXG4gKiAvLyBbLi4uXVxyXG4gKlxyXG4gKiB0aGlzLnNwb3RpZnlBdXRoLmZvcmdldCgpO1xyXG4gKlxyXG4gKiAvLyBbLi4uXVxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdTcG90aWZ5QXV0aCcsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1zcG90aWZ5LW9hdXRoJyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuc3BvdGlmeUF1dGgnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vRmVzdGlmeS9jb3Jkb3ZhLXNwb3RpZnktb2F1dGgnLFxyXG4gIGluc3RhbGw6ICdpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1zcG90aWZ5LW9hdXRoIC0tdmFyaWFibGUgTE9DQUxfU1RPUkFHRV9LRVk9XCJTcG90aWZ5T0F1dGhEYXRhXCInLFxyXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnTE9DQUxfU1RPUkFHRV9LRVknXSxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU3BvdGlmeUF1dGggZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogT2J0YWlucyB2YWxpZCBhdXRob3JpemF0aW9uIGRhdGEuXHJcbiAgICpcclxuICAgKiBUaGlzIG1ldGhvZCBwZXJmb3JtcyB0aGUgbmVjZXNzYXJ5IHN0ZXBzIGluIG9yZGVyIHRvIG9idGFpbiBhIHZhbGlkXHJcbiAgICogYWNjZXNzIHRva2VuLiBJdCBwZXJmb3JtcyB0aGUgT0F1dGggZGFuY2UgcHJvbXB0aW5nIHRoZSB1c2VyIHRvIGxvZyBpbixcclxuICAgKiBleGNoYW5nZXMgdGhlIG9idGFpbmVkIGF1dGhvcml6YXRpb24gY29kZSBmb3IgYW4gYWNjZXNzIGFuZCBhIHJlZnJlc2hcclxuICAgKiB0b2tlbiwgY2FjaGVzIHRob3NlLCBhbmQgcmV0dXJucyBib3RoIHRvIHRoZSBkZXZlbG9wZXIuXHJcbiAgICpcclxuICAgKiBXaGVuIGl0IGlzIGludm9rZWQgYWdhaW4sIGl0IHdpbGwgZmlyc3QgY2hlY2sgd2hldGhlciB0aGUgY2FjaGVkIGFjY2Vzc1xyXG4gICAqIHRva2VuIGlzIHN0aWxsIHZhbGlkIChpbmNsdWRpbmcgYSBjb25maWd1cmFibGUgc2FmZXR5IG1hcmdpbikgYW5kIHRoZVxyXG4gICAqIHNjb3BlcyBlcXVhbCwgYW5kIHJldHVybiB0aGUgdG9rZW4gZGlyZWN0bHkgaWYgdGhhdCBpcyB0aGUgY2FzZS4gT3RoZXJ3aXNlLFxyXG4gICAqIHRoZSBtZXRob2Qgd2lsbCB0cmFuc3BhcmVudGx5IHJlZnJlc2ggdGhlIHRva2VuIChvciBvYnRhaW4gYSBuZXcgb25lIGlmXHJcbiAgICogdGhlIHNjb3BlcyBjaGFuZ2VkKSBhbmQgcmV0dXJuIHRoYXQuXHJcbiAgICpcclxuICAgKiBCb3R0b20gbGluZSAtIGFsd2F5cyBjYWxsIHRoaXMgaWYgeW91IG5lZWQgYSB2YWxpZCBhY2Nlc3MgdG9rZW4gaW4geW91ciBjb2RlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGNmZyB7Q29uZmlnfSBjb25maWd1cmF0aW9uXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8QXV0aG9yaXphdGlvbkRhdGE+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN5bmM6IGZhbHNlLFxyXG4gIH0pXHJcbiAgYXV0aG9yaXplKGNmZzogQ29uZmlnKTogUHJvbWlzZTxBdXRob3JpemF0aW9uRGF0YT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlcyBhbGwgY2FjaGVkIGRhdGEgc28gdGhhdCBgYXV0aG9yaXplYCBwZXJmb3JtcyB0aGUgZnVsbFxyXG4gICAqIG9hdXRoIGRhbmNlIGFnYWluLlxyXG4gICAqXHJcbiAgICogVGhpcyBpcyBha2luIHRvIGEgXCJsb2dvdXRcIi5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN5bmM6IHRydWUsXHJcbiAgfSlcclxuICBmb3JnZXQoKTogdm9pZCB7fVxyXG59XHJcbiJdfQ==