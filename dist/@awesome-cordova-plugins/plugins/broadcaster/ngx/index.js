import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var Broadcaster = /** @class */ (function (_super) {
    __extends(Broadcaster, _super);
    function Broadcaster() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Broadcaster.prototype.addEventListener = function (eventName, isGlobal) {
        if (isGlobal === void 0) { isGlobal = false; }
        return cordova(this, "addEventListener", { "observable": true, "clearFunction": "removeEventListener", "clearWithArgs": true }, arguments);
    };
    Broadcaster.prototype.fireNativeEvent = function (eventName, isGlobalOrEventData, data) { return cordova(this, "fireNativeEvent", {}, arguments); };
    Broadcaster.pluginName = "Broadcaster";
    Broadcaster.plugin = "cordova-plugin-broadcaster";
    Broadcaster.pluginRef = "broadcaster";
    Broadcaster.repo = "https://github.com/bsorrentino/cordova-broadcaster";
    Broadcaster.platforms = ["Android", "iOS", "Browser"];
    Broadcaster.decorators = [
        { type: Injectable }
    ];
    return Broadcaster;
}(AwesomeCordovaNativePlugin));
export { Broadcaster };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYnJvYWRjYXN0ZXIvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7QUFDNUYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUE0Q0QsK0JBQTBCOzs7O0lBYXpELHNDQUFnQixhQUFDLFNBQWlCLEVBQUUsUUFBZ0I7UUFBaEIseUJBQUEsRUFBQSxnQkFBZ0I7OztJQWdCcEQscUNBQWUsYUFBQyxTQUFpQixFQUFFLG1CQUF3QyxFQUFFLElBQWdCOzs7Ozs7O2dCQTlCOUYsVUFBVTs7c0JBN0NYO0VBOENpQywwQkFBMEI7U0FBOUMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuLyoqXHJcbiAqIFNwZWNpZmljIGRhdGEgZm9yIEFuZHJvaWQgaW1wbGVtZW50YXRpb25cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQW5kcm9pZERhdGEge1xyXG4gIGV4dHJhczogb2JqZWN0O1xyXG4gIGZsYWdzOiBudW1iZXI7XHJcbiAgY2F0ZWdvcnk6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIFBvc3NpYmx5IEV2ZW50IERhdGEgdHlwZXNcclxuICovXHJcbmV4cG9ydCB0eXBlIEV2ZW50RGF0YSA9IG9iamVjdCB8IEFuZHJvaWREYXRhIHwgbnVsbDtcclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBCcm9hZGNhc3RlclxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gYWRkcyBleGNoYW5naW5nIGV2ZW50cyBiZXR3ZWVuIG5hdGl2ZSBjb2RlIGFuZCB5b3VyIGFwcC5cclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgQnJvYWRjYXN0ZXIgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvYnJvYWRjYXN0ZXIvbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBicm9hZGNhc3RlcjogQnJvYWRjYXN0ZXIpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogLy8gTGlzdGVuIHRvIGV2ZW50cyBmcm9tIE5hdGl2ZVxyXG4gKiB0aGlzLmJyb2FkY2FzdGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2V2ZW50TmFtZScpLnN1YnNjcmliZSgoZXZlbnQpID0+IGNvbnNvbGUubG9nKGV2ZW50KSk7XHJcbiAqXHJcbiAqIC8vIFNlbmQgZXZlbnQgdG8gTmF0aXZlXHJcbiAqIHRoaXMuYnJvYWRjYXN0ZXIuZmlyZU5hdGl2ZUV2ZW50KCdldmVudE5hbWUnLCB7fSkudGhlbigoKSA9PiBjb25zb2xlLmxvZygnc3VjY2VzcycpKTtcclxuICpcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnQnJvYWRjYXN0ZXInLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWJyb2FkY2FzdGVyJyxcclxuICBwbHVnaW5SZWY6ICdicm9hZGNhc3RlcicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ic29ycmVudGluby9jb3Jkb3ZhLWJyb2FkY2FzdGVyJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnLCAnQnJvd3NlciddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBCcm9hZGNhc3RlciBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBUaGlzIGZ1bmN0aW9uIGxpc3RlbiB0byBhbiBldmVudCBzZW50IGZyb20gdGhlIG5hdGl2ZSBjb2RlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBpc0dsb2JhbCBWYWxpZCBvbmx5IGZvciBBbmRyb2lkLiBJdCBhbGxvd3MgdG8gbGlzdGVuIGZvciBnbG9iYWwgbWVzc2FnZXMoaS5lLiBpbnRlbnRzKVxyXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59IFJldHVybnMgYW4gb2JzZXJ2YWJsZSB0byB3YXRjaCB3aGVuIGFuIGV2ZW50IGlzIHJlY2VpdmVkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcclxuICAgIGNsZWFyRnVuY3Rpb246ICdyZW1vdmVFdmVudExpc3RlbmVyJyxcclxuICAgIGNsZWFyV2l0aEFyZ3M6IHRydWUsXHJcbiAgfSlcclxuICBhZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZTogc3RyaW5nLCBpc0dsb2JhbCA9IGZhbHNlKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgZnVuY3Rpb24gc2VuZHMgZGF0YSB0byB0aGUgbmF0aXZlIGNvZGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzR2xvYmFsT3JFdmVudERhdGEgbWVhbnMgdGhhdCBtZXNzYWdlIGlzIGdsb2JhbCAodmFsaWQgb25seSBvbiBBbmRyb2lkKVxyXG4gICAqIEBwYXJhbSB7QW5kcm9pZERhdGF9IGlzR2xvYmFsT3JFdmVudERhdGEgYWxsb3dzIHRvIHNwZWNpZnkgJ2ZsYWdzYCBhbmQgJ2NhdGVnb3J5JyAodmFsaWQgb25seSBvbiBBbmRyb2lkKVxyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpc0dsb2JhbE9yRXZlbnREYXRhIGFsbG93cyB0byBzcGVjaWZ5IGEgZ2VuZXJpYyBvYmplY3QgY29udGFpbmluZyBjdXN0b20gZXZlbnQgZGF0YSAoYWxsIHBsYXRmb3JtKVxyXG4gICAqIEBwYXJhbSB7QW5kcm9pZERhdGF9IFtkYXRhXSBpZiBpc0dsb2JhbCBpcyBzZXQsIGFsbG93cyB0byBzcGVjaWZ5ICdmbGFnc2AgYW5kICdjYXRlZ29yeScgaWYgaXNHbG9iYWwgaXMgc2V0ICh2YWxpZCBvbmx5IG9uIEFuZHJvaWQpXHJcbiAgICogQHBhcmFtIHtvYmplY3R9IFtkYXRhXSBpZiBpc0dsb2JhbCBpcyBzZXQsIGFsbG93cyB0byBzcGVjaWZ5IGEgZ2VuZXJpYyBvYmplY3QgY29udGFpbmluZyBjdXN0b20gZXZlbnQgZGF0YSAoYWxsIHBsYXRmb3JtKVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBhbiBldmVudCBpcyBzdWNjZXNzZnVsbHkgZmlyZWRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZmlyZU5hdGl2ZUV2ZW50KGV2ZW50TmFtZTogc3RyaW5nLCBpc0dsb2JhbE9yRXZlbnREYXRhOiBib29sZWFuIHwgRXZlbnREYXRhLCBkYXRhPzogRXZlbnREYXRhKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19