import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var Magnetometer = /** @class */ (function (_super) {
    __extends(Magnetometer, _super);
    function Magnetometer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Magnetometer.prototype.getReading = function () { return cordova(this, "getReading", {}, arguments); };
    Magnetometer.prototype.watchReadings = function () { return cordova(this, "watchReadings", { "callbackOrder": "reverse", "observable": true, "clearFunction": "stop" }, arguments); };
    Magnetometer.pluginName = "Magnetometer";
    Magnetometer.plugin = "cordova-plugin-magnetometer";
    Magnetometer.pluginRef = "cordova.plugins.magnetometer";
    Magnetometer.repo = "https://github.com/sdesalas/cordova-plugin-magnetometer";
    Magnetometer.platforms = ["Android", "iOS"];
    Magnetometer.decorators = [
        { type: Injectable }
    ];
    return Magnetometer;
}(AwesomeCordovaNativePlugin));
export { Magnetometer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvbWFnbmV0b21ldGVyL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDO0FBQzVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBNERBLGdDQUEwQjs7OztJQU0xRCxpQ0FBVTtJQWVWLG9DQUFhOzs7Ozs7O2dCQXRCZCxVQUFVOzt1QkE3RFg7RUE4RGtDLDBCQUEwQjtTQUEvQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE1hZ25ldG9tZXRlclJlYWRpbmcge1xyXG4gIC8qKlxyXG4gICAqIFggcmVhZGluZyBvZiBtYWduZXRvbWV0ZXIuIChOdW1iZXIpXHJcbiAgICovXHJcbiAgeDogbnVtYmVyO1xyXG4gIC8qKlxyXG4gICAqIFkgcmVhZGluZyBvZiBtYWduZXRvbWV0ZXIuIChOdW1iZXIpXHJcbiAgICovXHJcbiAgeTogbnVtYmVyO1xyXG4gIC8qKlxyXG4gICAqIFogcmVhZGluZyBvZiBtYWduZXRvbWV0ZXIuIChOdW1iZXIpXHJcbiAgICovXHJcbiAgejogbnVtYmVyO1xyXG4gIC8qKlxyXG4gICAqIENhbGN1bGF0ZWQgdG90YWwgLSBhbHdheXMgcG9zaXRpdmUgb2YgbWFnbmV0b21ldGVyLiAoTnVtYmVyKVxyXG4gICAqL1xyXG4gIG1hZ25pdHVkZTogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgRGV2aWNlIGVNYWduZXRvbWV0ZXJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4tbWFnbmV0b21ldGVyYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0RldmljZSBPcmllbnRhdGlvbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vc2Rlc2FsYXMvY29yZG92YS1wbHVnaW4tbWFnbmV0b21ldGVyKS5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogLy8gTWFnbmV0b21ldGVyUmVhZGluZyBpcyBhbiBpbnRlcmZhY2UgZm9yIGNvbXBhc3NcclxuICogaW1wb3J0IHsgTWFnbmV0b21ldGVyLCBNYWduZXRvbWV0ZXJSZWFkaW5nIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2RldmljZS1vcmllbnRhdGlvbi9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIG1hZ25ldG9tZXRlcjogTWFnbmV0b21ldGVyKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIC8vIEdldCB0aGUgZGV2aWNlIGN1cnJlbnQgY29tcGFzcyBoZWFkaW5nXHJcbiAqIHRoaXMubWFnbmV0b21ldGVyLmdldFJlYWRpbmcoKS50aGVuKFxyXG4gKiAgIChkYXRhOiBNYWduZXRvbWV0ZXJSZWFkaW5nKSA9PiBjb25zb2xlLmxvZyhkYXRhKSxcclxuICogICAoZXJyb3I6IGFueSkgPT4gY29uc29sZS5sb2coZXJyb3IpXHJcbiAqICk7XHJcbiAqXHJcbiAqIC8vIFdhdGNoIHRoZSBkZXZpY2UgY29tcGFzcyBoZWFkaW5nIGNoYW5nZVxyXG4gKiB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5tYWduZXRvbWV0ZXIud2F0Y2hSZWFkaW5ncygpLnN1YnNjcmliZShcclxuICogICAoZGF0YTogTWFnbmV0b21ldGVyUmVhZGluZykgPT4gY29uc29sZS5sb2coZGF0YSlcclxuICogKTtcclxuICpcclxuICogLy8gU3RvcCB3YXRjaGluZyBoZWFkaW5nIGNoYW5nZVxyXG4gKiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIE1hZ25ldG9tZXRlclJlYWRpbmdcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdNYWduZXRvbWV0ZXInLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLW1hZ25ldG9tZXRlcicsXHJcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLm1hZ25ldG9tZXRlcicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9zZGVzYWxhcy9jb3Jkb3ZhLXBsdWdpbi1tYWduZXRvbWV0ZXInLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBNYWduZXRvbWV0ZXIgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBjdXJyZW50IGNvbXBhc3MgcmVhZGluZy5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxNYWduZXRvbWV0ZXJSZWFkaW5nPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0UmVhZGluZygpOiBQcm9taXNlPE1hZ25ldG9tZXRlclJlYWRpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBkZXZpY2UgY3VycmVudCBoZWFkaW5nIGF0IGEgcmVndWxhciBpbnRlcnZhbFxyXG4gICAqXHJcbiAgICogU3RvcCB0aGUgd2F0Y2ggYnkgdW5zdWJzY3JpYmluZyBmcm9tIHRoZSBvYnNlcnZhYmxlXHJcbiAgICogQHBhcmFtIHtEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NPcHRpb25zfSBbb3B0aW9uc10gT3B0aW9ucyBmb3IgY29tcGFzcy4gRnJlcXVlbmN5IGFuZCBGaWx0ZXIuIE9wdGlvbmFsXHJcbiAgICogQHJldHVybnMge09ic2VydmFibGU8RGV2aWNlT3JpZW50YXRpb25Db21wYXNzSGVhZGluZz59IFJldHVybnMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNvbnRhaW5zIHRoZSBjb21wYXNzIGhlYWRpbmdcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxyXG4gICAgY2xlYXJGdW5jdGlvbjogJ3N0b3AnLFxyXG4gIH0pXHJcbiAgd2F0Y2hSZWFkaW5ncygpOiBPYnNlcnZhYmxlPE1hZ25ldG9tZXRlclJlYWRpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19