import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var AppCenterAnalytics = /** @class */ (function (_super) {
    __extends(AppCenterAnalytics, _super);
    function AppCenterAnalytics() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppCenterAnalytics.prototype.trackEvent = function (eventName, properties) { return cordova(this, "trackEvent", {}, arguments); };
    AppCenterAnalytics.prototype.isEnabled = function () { return cordova(this, "isEnabled", {}, arguments); };
    AppCenterAnalytics.prototype.setEnabled = function (shouldEnable) { return cordova(this, "setEnabled", {}, arguments); };
    AppCenterAnalytics.pluginName = "AppCenterAnalytics";
    AppCenterAnalytics.plugin = "cordova-plugin-appcenter-analytics";
    AppCenterAnalytics.pluginRef = "AppCenter.Analytics";
    AppCenterAnalytics.repo = "https://github.com/Microsoft/appcenter-sdk-cordova/tree/master/cordova-plugin-appcenter-analytics";
    AppCenterAnalytics.platforms = ["Android", "iOS"];
    AppCenterAnalytics.decorators = [
        { type: Injectable }
    ];
    return AppCenterAnalytics;
}(AwesomeCordovaNativePlugin));
export { AppCenterAnalytics };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYXBwLWNlbnRlci1hbmFseXRpY3Mvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBMENwRCxzQ0FBMEI7Ozs7SUFXaEUsdUNBQVUsYUFBQyxTQUFpQixFQUFFLFVBQXFCO0lBVW5ELHNDQUFTO0lBV1QsdUNBQVUsYUFBQyxZQUFxQjs7Ozs7OztnQkFqQ2pDLFVBQVU7OzZCQTFDWDtFQTJDd0MsMEJBQTBCO1NBQXJELGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RyaW5nTWFwIHtcclxuICBbczogc3RyaW5nXTogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgQXBwIENlbnRlciBBbmFseXRpY3NcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEFwcCBDZW50ZXIgQW5hbHl0aWNzIGhlbHBzIHlvdSB1bmRlcnN0YW5kIHVzZXIgYmVoYXZpb3IgYW5kIGN1c3RvbWVyIGVuZ2FnZW1lbnQgdG8gaW1wcm92ZSB5b3VyIGFwcC5cclxuICogVGhlIFNESyBhdXRvbWF0aWNhbGx5IGNhcHR1cmVzIHNlc3Npb24gY291bnQgYW5kIGRldmljZSBwcm9wZXJ0aWVzIGxpa2UgbW9kZWwsIE9TIHZlcnNpb24sIGV0Yy5cclxuICogWW91IGNhbiBkZWZpbmUgeW91ciBvd24gY3VzdG9tIGV2ZW50cyB0byBtZWFzdXJlIHRoaW5ncyB0aGF0IG1hdHRlciB0byB5b3UuXHJcbiAqIEFsbCB0aGUgaW5mb3JtYXRpb24gY2FwdHVyZWQgaXMgYXZhaWxhYmxlIGluIHRoZSBBcHAgQ2VudGVyIHBvcnRhbCBmb3IgeW91IHRvIGFuYWx5emUgdGhlIGRhdGEuXHJcbiAqXHJcbiAqIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvYXBwY2VudGVyL3Nkay9hbmFseXRpY3MvY29yZG92YVxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBBcHBDZW50ZXJBbmFseXRpY3MgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvYXBwLWNlbnRlci1hbmFseXRpY3Mvbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBhcHBDZW50ZXJBbmFseXRpY3M6IEFwcENlbnRlckFuYWx5dGljcykgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiB0aGlzLmFwcENlbnRlckFuYWx5dGljcy5zZXRFbmFibGVkKHRydWUpLnRoZW4oKCkgPT4ge1xyXG4gKiAgICB0aGlzLmFwcENlbnRlckFuYWx5dGljcy50cmFja0V2ZW50KCdNeSBFdmVudCcsIHsgVEVTVDogJ0hFTExPX1dPUkxEJyB9KS50aGVuKCgpID0+IHtcclxuICogICAgICAgIGNvbnNvbGUubG9nKCdDdXN0b20gZXZlbnQgdHJhY2tlZCcpO1xyXG4gKiAgICB9KTtcclxuICogfSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBTdHJpbmdNYXBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdBcHBDZW50ZXJBbmFseXRpY3MnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWFwcGNlbnRlci1hbmFseXRpY3MnLFxyXG4gIHBsdWdpblJlZjogJ0FwcENlbnRlci5BbmFseXRpY3MnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L2FwcGNlbnRlci1zZGstY29yZG92YS90cmVlL21hc3Rlci9jb3Jkb3ZhLXBsdWdpbi1hcHBjZW50ZXItYW5hbHl0aWNzJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQXBwQ2VudGVyQW5hbHl0aWNzIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFRyYWNrcyBhbiBjdXN0b20gZXZlbnQuXHJcbiAgICogWW91IGNhbiBzZW5kIHVwIHRvIDIwMCBkaXN0aW5jdCBldmVudCBuYW1lcy4gQWxzbywgdGhlcmUgaXMgYSBtYXhpbXVtIGxpbWl0IG9mIDI1NiBjaGFyYWN0ZXJzIHBlciBldmVudCBuYW1lXHJcbiAgICogYW5kIDY0IGNoYXJhY3RlcnMgcGVyIGV2ZW50IHByb3BlcnR5IG5hbWUgYW5kIGV2ZW50IHByb3BlcnR5IHZhbHVlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtICB7c3RyaW5nfSBldmVudE5hbWUgRXZlbnQgbmFtZVxyXG4gICAqIEBwYXJhbSAge1N0cmluZ01hcH0gcHJvcGVydGllcyBFdmVudCBwcm9wZXJ0aWVzXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHRyYWNrRXZlbnQoZXZlbnROYW1lOiBzdHJpbmcsIHByb3BlcnRpZXM6IFN0cmluZ01hcCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgQXBwIENlbnRlciBBbmFseXRpY3MgaXMgZW5hYmxlZFxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzRW5hYmxlZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIEFwcCBDZW50ZXIgQW5hbHl0aWNzIGF0IHJ1bnRpbWVcclxuICAgKlxyXG4gICAqIEBwYXJhbSAge2Jvb2xlYW59IHNob3VsZEVuYWJsZSBTZXQgdmFsdWVcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2V0RW5hYmxlZChzaG91bGRFbmFibGU6IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19