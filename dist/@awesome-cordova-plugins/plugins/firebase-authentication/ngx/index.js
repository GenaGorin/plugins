import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var FirebaseAuthentication = /** @class */ (function (_super) {
    __extends(FirebaseAuthentication, _super);
    function FirebaseAuthentication() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseAuthentication.prototype.getCurrentUser = function () { return cordova(this, "getCurrentUser", { "sync": true }, arguments); };
    FirebaseAuthentication.prototype.getIdToken = function (forceRefresh) { return cordova(this, "getIdToken", { "sync": true }, arguments); };
    FirebaseAuthentication.prototype.createUserWithEmailAndPassword = function (email, password) { return cordova(this, "createUserWithEmailAndPassword", { "sync": true }, arguments); };
    FirebaseAuthentication.prototype.sendEmailVerification = function () { return cordova(this, "sendEmailVerification", { "sync": true }, arguments); };
    FirebaseAuthentication.prototype.sendPasswordResetEmail = function (email) { return cordova(this, "sendPasswordResetEmail", { "sync": true }, arguments); };
    FirebaseAuthentication.prototype.signInWithEmailAndPassword = function (email, password) { return cordova(this, "signInWithEmailAndPassword", { "sync": true }, arguments); };
    FirebaseAuthentication.prototype.verifyPhoneNumber = function (phoneNumber, timeout) { return cordova(this, "verifyPhoneNumber", { "sync": true }, arguments); };
    FirebaseAuthentication.prototype.signInWithVerificationId = function (verificationId, smsCode) { return cordova(this, "signInWithVerificationId", { "sync": true }, arguments); };
    FirebaseAuthentication.prototype.signInAnonymously = function () { return cordova(this, "signInAnonymously", { "sync": true }, arguments); };
    FirebaseAuthentication.prototype.signInWithGoogle = function (idToken, accessToken) { return cordova(this, "signInWithGoogle", { "sync": true }, arguments); };
    FirebaseAuthentication.prototype.signInWithApple = function (identityToken, rawNonce) { return cordova(this, "signInWithApple", { "sync": true }, arguments); };
    FirebaseAuthentication.prototype.signInWithFacebook = function (accessToken) { return cordova(this, "signInWithFacebook", { "sync": true }, arguments); };
    FirebaseAuthentication.prototype.signInWithTwitter = function (token, secret) { return cordova(this, "signInWithTwitter", { "sync": true }, arguments); };
    FirebaseAuthentication.prototype.onAuthStateChanged = function () { return cordova(this, "onAuthStateChanged", { "observable": true, "callbackOrder": "reverse" }, arguments); };
    FirebaseAuthentication.prototype.setLanguageCode = function (languageCode) { return cordova(this, "setLanguageCode", { "sync": true }, arguments); };
    FirebaseAuthentication.prototype.useAppLanguage = function () { return cordova(this, "useAppLanguage", { "sync": true }, arguments); };
    FirebaseAuthentication.prototype.signOut = function () { return cordova(this, "signOut", { "sync": true }, arguments); };
    FirebaseAuthentication.pluginName = "FirebaseAuthentication";
    FirebaseAuthentication.plugin = "cordova-plugin-firebase-authentication";
    FirebaseAuthentication.pluginRef = "cordova.plugins.firebase.auth";
    FirebaseAuthentication.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-authentication";
    FirebaseAuthentication.install = "ionic cordova plugin add cordova-plugin-firebase-authentication --variable FIREBASE_AUTH_VERSION=version";
    FirebaseAuthentication.installVariables = ["FIREBASE_AUTH_VERSION"];
    FirebaseAuthentication.platforms = ["Android", "iOS"];
    FirebaseAuthentication.decorators = [
        { type: Injectable }
    ];
    return FirebaseAuthentication;
}(AwesomeCordovaNativePlugin));
export { FirebaseAuthentication };
//# sourceMappingURL=data:application/json;base64,