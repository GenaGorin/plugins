import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var StreamingMedia = /** @class */ (function (_super) {
    __extends(StreamingMedia, _super);
    function StreamingMedia() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StreamingMedia.prototype.playVideo = function (videoUrl, options) { return cordova(this, "playVideo", { "sync": true }, arguments); };
    StreamingMedia.prototype.playAudio = function (audioUrl, options) { return cordova(this, "playAudio", { "sync": true }, arguments); };
    StreamingMedia.prototype.stopAudio = function () { return cordova(this, "stopAudio", { "sync": true }, arguments); };
    StreamingMedia.prototype.pauseAudio = function () { return cordova(this, "pauseAudio", { "sync": true, "platforms": ["iOS"] }, arguments); };
    StreamingMedia.prototype.resumeAudio = function () { return cordova(this, "resumeAudio", { "sync": true, "platforms": ["iOS"] }, arguments); };
    StreamingMedia.pluginName = "StreamingMedia";
    StreamingMedia.plugin = "cordova-plugin-streaming-media";
    StreamingMedia.pluginRef = "plugins.streamingMedia";
    StreamingMedia.repo = "https://github.com/nchutchind/cordova-plugin-streaming-media";
    StreamingMedia.platforms = ["Amazon Fire OS", "Android", "iOS"];
    StreamingMedia.decorators = [
        { type: Injectable }
    ];
    return StreamingMedia;
}(AwesomeCordovaNativePlugin));
export { StreamingMedia };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvc3RyZWFtaW5nLW1lZGlhL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQWdGeEQsa0NBQTBCOzs7O0lBUTVELGtDQUFTLGFBQUMsUUFBZ0IsRUFBRSxPQUErQjtJQVMzRCxrQ0FBUyxhQUFDLFFBQWdCLEVBQUUsT0FBK0I7SUFNM0Qsa0NBQVM7SUFNVCxtQ0FBVTtJQU1WLG9DQUFXOzs7Ozs7O2dCQXBDWixVQUFVOzt5QkFoRlg7RUFpRm9DLDBCQUEwQjtTQUFqRCxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIE9iamVjdCBvZiBvcHRpb25zIHRvIHBhc3MgaW50byB0aGUgcGxheVZpZGVvIG1ldGhvZC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RyZWFtaW5nVmlkZW9PcHRpb25zIHtcclxuICAvKiogRXhlY3V0ZXMgYWZ0ZXIgc3VjY2VzcyBwbGF5aW5nIGF1ZGlvLiAqL1xyXG4gIHN1Y2Nlc3NDYWxsYmFjaz86IEZ1bmN0aW9uO1xyXG4gIC8qKiBFeGVjdXRlcyBhZnRlciBlcnJvciBwbGF5aW5nIHZpZGVvLiAqL1xyXG4gIGVycm9yQ2FsbGJhY2s/OiBGdW5jdGlvbjtcclxuICAvKiogRm9yY2Ugb25lIG9yaWVudGF0aW9uIGZvciBwbGF5aW5nIHZpZGVvLiAqL1xyXG4gIG9yaWVudGF0aW9uPzogc3RyaW5nO1xyXG4gIC8qKiBTaG91bGQgdGhlIHZpZGVvIGNsb3NlIGFmdGVyIGl0J3Mgb3Zlci4gRGVmYXVsdHMgdG8gdHJ1ZS4gKi9cclxuICBzaG91bGRBdXRvQ2xvc2U/OiBib29sZWFuO1xyXG4gIC8qKiBTaG91bGQgdGhlIHZpZGVvIGhhdmUgY29udHJvbHMuIERlZmF1bHRzIHRvIHRydWUuIEFuZHJvaWQgb25seS4gKi9cclxuICBjb250cm9scz86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBPYmplY3Qgb2Ygb3B0aW9ucyB0byBwYXNzIGludG8gdGhlIHBsYXlBdWRpbyBtZXRob2QuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFN0cmVhbWluZ0F1ZGlvT3B0aW9ucyB7XHJcbiAgLyoqIEJhY2tncm91bmQgY29sb3IgZm9yIGF1ZGlvIHBsYXllci4gKi9cclxuICBiZ0NvbG9yPzogc3RyaW5nO1xyXG4gIC8qKiBCYWNrZ3JvdW5kIGltYWdlIGZvciBhdWRpbyBwbGF5ZXIuICovXHJcbiAgYmdJbWFnZT86IHN0cmluZztcclxuICAvKipcclxuICAgKiBCYWNrZ3JvdW5kIGltYWdlIHNjYWxlIGZvciBhdWRpbyBwbGF5ZXIuXHJcbiAgICogVmFsaWQgdmFsdWVzIGFyZTpcclxuICAgKiBmaXRcclxuICAgKiBzdHJldGNoXHJcbiAgICogYXNwZWN0U3RyZXRjaC5cclxuICAgKi9cclxuICBiZ0ltYWdlU2NhbGU/OiBzdHJpbmc7XHJcbiAgLyoqIFN0YXJ0IGF1ZGlvIHBsYXllciBpbiBmdWxsIHNjcmVlbi4gaU9TIG9ubHkuICovXHJcbiAgaW5pdEZ1bGxzY3JlZW4/OiBib29sZWFuO1xyXG4gIC8qKlxyXG4gICAqIEtlZXBzIHRoZSBzY3JlZW4gbGl0IGFuZCBzdG9wcyBpdCBmcm9tIGxvY2tpbmdcclxuICAgKiB3aGlsZSBhdWRpbyBpcyBwbGF5aW5nLiBBbmRyb2lkIG9ubHkuXHJcbiAgICovXHJcbiAga2VlcEF3YWtlPzogYm9vbGVhbjtcclxuICAvKiogRXhlY3V0ZXMgYWZ0ZXIgc3VjY2VzcyBwbGF5aW5nIGF1ZGlvLiAqL1xyXG4gIHN1Y2Nlc3NDYWxsYmFjaz86IEZ1bmN0aW9uO1xyXG4gIC8qKiBFeGVjdXRlcyBhZnRlciBlcnJvciBwbGF5aW5nIGF1ZGlvLiAqL1xyXG4gIGVycm9yQ2FsbGJhY2s/OiBGdW5jdGlvbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIFN0cmVhbWluZyBNZWRpYVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gYWxsb3dzIHlvdSB0byBzdHJlYW0gYXVkaW8gYW5kIHZpZGVvIGluIGEgZnVsbHNjcmVlbiwgbmF0aXZlIHBsYXllciBvbiBpT1MgYW5kIEFuZHJvaWQuXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IFN0cmVhbWluZ01lZGlhLCBTdHJlYW1pbmdWaWRlb09wdGlvbnMgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvc3RyZWFtaW5nLW1lZGlhL25neCc7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RyZWFtaW5nTWVkaWE6IFN0cmVhbWluZ01lZGlhKSB7IH1cclxuICpcclxuICogbGV0IG9wdGlvbnM6IFN0cmVhbWluZ1ZpZGVvT3B0aW9ucyA9IHtcclxuICogICBzdWNjZXNzQ2FsbGJhY2s6ICgpID0+IHsgY29uc29sZS5sb2coJ1ZpZGVvIHBsYXllZCcpIH0sXHJcbiAqICAgZXJyb3JDYWxsYmFjazogKGUpID0+IHsgY29uc29sZS5sb2coJ0Vycm9yIHN0cmVhbWluZycpIH0sXHJcbiAqICAgb3JpZW50YXRpb246ICdsYW5kc2NhcGUnLFxyXG4gKiAgIHNob3VsZEF1dG9DbG9zZTogdHJ1ZSxcclxuICogICBjb250cm9sczogZmFsc2VcclxuICogfTtcclxuICpcclxuICogdGhpcy5zdHJlYW1pbmdNZWRpYS5wbGF5VmlkZW8oJ2h0dHBzOi8vcGF0aC90by92aWRlby9zdHJlYW0nLCBvcHRpb25zKTtcclxuICpcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIFN0cmVhbWluZ1ZpZGVvT3B0aW9uc1xyXG4gKiBTdHJlYW1pbmdBdWRpb09wdGlvbnNcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdTdHJlYW1pbmdNZWRpYScsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc3RyZWFtaW5nLW1lZGlhJyxcclxuICBwbHVnaW5SZWY6ICdwbHVnaW5zLnN0cmVhbWluZ01lZGlhJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL25jaHV0Y2hpbmQvY29yZG92YS1wbHVnaW4tc3RyZWFtaW5nLW1lZGlhJyxcclxuICBwbGF0Zm9ybXM6IFsnQW1hem9uIEZpcmUgT1MnLCAnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU3RyZWFtaW5nTWVkaWEgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogU3RyZWFtcyBhIHZpZGVvXHJcbiAgICpcclxuICAgKiBAcGFyYW0gdmlkZW9Vcmwge3N0cmluZ30gVGhlIFVSTCBvZiB0aGUgdmlkZW9cclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7U3RyZWFtaW5nVmlkZW9PcHRpb25zfSBPcHRpb25zXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgcGxheVZpZGVvKHZpZGVvVXJsOiBzdHJpbmcsIG9wdGlvbnM/OiBTdHJlYW1pbmdWaWRlb09wdGlvbnMpOiB2b2lkIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0cmVhbXMgYW4gYXVkaW9cclxuICAgKlxyXG4gICAqIEBwYXJhbSBhdWRpb1VybCB7c3RyaW5nfSBUaGUgVVJMIG9mIHRoZSBhdWRpbyBzdHJlYW1cclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7U3RyZWFtaW5nQXVkaW9PcHRpb25zfSBPcHRpb25zXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgcGxheUF1ZGlvKGF1ZGlvVXJsOiBzdHJpbmcsIG9wdGlvbnM/OiBTdHJlYW1pbmdBdWRpb09wdGlvbnMpOiB2b2lkIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0b3BzIHN0cmVhbWluZyBhdWRpb1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHN0b3BBdWRpbygpOiB2b2lkIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIFBhdXNlcyBzdHJlYW1pbmcgYXVkaW9cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUsIHBsYXRmb3JtczogWydpT1MnXSB9KVxyXG4gIHBhdXNlQXVkaW8oKTogdm9pZCB7fVxyXG5cclxuICAvKipcclxuICAgKiBSZXN1bWVzIHN0cmVhbWluZyBhdWRpb1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSwgcGxhdGZvcm1zOiBbJ2lPUyddIH0pXHJcbiAgcmVzdW1lQXVkaW8oKTogdm9pZCB7fVxyXG59XHJcbiJdfQ==