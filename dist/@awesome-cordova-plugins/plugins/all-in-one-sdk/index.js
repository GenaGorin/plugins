var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var AllInOneSDK = /** @class */ (function (_super) {
    __extends(AllInOneSDK, _super);
    function AllInOneSDK() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AllInOneSDK.prototype.startTransaction = function (options) { return cordova(this, "startTransaction", {}, arguments); };
    AllInOneSDK.pluginName = "AllInOneSDK";
    AllInOneSDK.plugin = "cordova-paytm-allinonesdk";
    AllInOneSDK.pluginRef = "AllInOneSDK";
    AllInOneSDK.repo = "https://github.com/paytm/paytm-allinonesdk-ionic-cordova.git";
    AllInOneSDK.platforms = ["Android", "iOS"];
    return AllInOneSDK;
}(AwesomeCordovaNativePlugin));
export { AllInOneSDK };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYWxsLWluLW9uZS1zZGsvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBT04sTUFBTSwrQkFBK0IsQ0FBQzs7SUF3Q04sK0JBQTBCOzs7O0lBVXpELHNDQUFnQixhQUFDLE9BQXNEOzs7Ozs7c0JBMUR6RTtFQWdEaUMsMEJBQTBCO1NBQTlDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgUGx1Z2luLFxyXG4gIENvcmRvdmEsXHJcbiAgQ29yZG92YVByb3BlcnR5LFxyXG4gIENvcmRvdmFJbnN0YW5jZSxcclxuICBJbnN0YW5jZVByb3BlcnR5LFxyXG4gIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLFxyXG59IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lIEFsbEluT25lU0RLXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBQYXl0bSBBbGwtaW4tT25lIFNESyBwbHVnaW4gZm9yIENvcmRvdmEvSW9uaWMgQXBwbGljYXRpb25zXHJcbiAqIFBheXRtIEFsbC1pbi1PbmUgU0RLIHByb3ZpZGVzIGEgc3dpZnQsIHNlY3VyZSBhbmQgc2VhbWxlc3MgcGF5bWVudCBleHBlcmllbmNlIHRvIHlvdXIgdXNlcnMgYnkgaW52b2tpbmcgdGhlIFBheXRtIGFwcCAoaWYgaW5zdGFsbGVkIG9uIHlvdXIgdXNlcuKAmXMgc21hcnRwaG9uZSkgdG8gY29tcGxldGUgcGF5bWVudCBmb3IgeW91ciBvcmRlci5cclxuICogUGF5dG0gQWxsLWluLU9uZSBTREsgZW5hYmxlcyBwYXltZW50IGFjY2VwdGFuY2UgdmlhIFBheXRtIHdhbGxldCwgUGF5dG0gUGF5bWVudHMgQmFuaywgc2F2ZWQgRGViaXQvQ3JlZGl0IGNhcmRzLCBOZXQgQmFua2luZywgQkhJTSBVUEkgYW5kIEVNSSBhcyBhdmFpbGFibGUgaW4geW91ciBjdXN0b21lcuKAmXMgUGF5dG0gYWNjb3VudC4gSWYgUGF5dG0gYXBwIGlzIG5vdCBpbnN0YWxsZWQgb24gYSBjdXN0b21lcidzIGRldmljZSwgdGhlIHRyYW5zYWN0aW9uIHdpbGwgYmUgcHJvY2Vzc2VkIHZpYSB3ZWIgdmlldyB3aXRoaW4gdGhlIEFsbC1pbi1PbmUgU0RLLlxyXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBQYXl0bSBBbGwtaW4tT25lIFNESywgcGxlYXNlIHZpc2l0IGh0dHBzOi8vZGV2ZWxvcGVyLnBheXRtLmNvbS9kb2NzL2FsbC1pbi1vbmUtc2RrL2h5YnJpZC1hcHBzL2NvcmRvdmEvXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IEFsbEluT25lU0RLIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2FsbC1pbi1vbmUtc2RrL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYWxsSW5PbmVTREs6IEFsbEluT25lU0RLKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIEZvciBiZWxvdyBwYXJhbWV0ZXJzIHNlZSBbZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIucGF5dG0uY29tL2RvY3MvYWxsLWluLW9uZS1zZGsvaHlicmlkLWFwcHMvY29yZG92YS8pXHJcbiAqIGxldCBwYXltZW50SW50ZW50ID0geyBtaWQgOiBtZXJjaGFudElELCBvcmRlcklkOiBvcmRlcklkLCB0eG5Ub2tlbjogdHJhbnNhY3Rpb25Ub2tlbiwgYW1vdW50OiBhbW91bnQsIGlzU3RhZ2luZzogaXNTdGFnaW5nLCBjYWxsYmFja1VybDpjYWxsQmFja1VSTCwgIHJlc3RyaWN0QXBwSW52b2tlOnJlc3RyaWN0QXBwSW52b2tlICB9XHJcbiAqXHJcbiAqIHRoaXMuYWxsSW5PbmVTREsuc3RhcnRUcmFuc2FjdGlvbihwYXltZW50SW50ZW50KVxyXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogYGBgXHJcbiAqXHJcbiAqIEZvciBpT1M6XHJcbiAqIEFmdGVyIGFkZGluZyB0aGUgcGx1Z2luLCBvcGVuIHRoZSBpT1MgcHJvamVjdCwgeW91IGNhbiBmaW5kIHRoZSBzYW1lIGF0IDxwcm9qZWN0TmFtZT4vcGxhdGZvcm1zL2lvcy5cclxuICogSW4gY2FzZSBtZXJjaGFudCBkb27igJl0IGhhdmUgY2FsbGJhY2sgVVJMLCBBZGQgYW4gZW50cnkgaW50byBJbmZvLnBsaXN0IExTQXBwbGljYXRpb25RdWVyaWVzU2NoZW1lcyhBcnJheSkgSXRlbSAwIChTdHJpbmcpLT4gcGF5dG1cclxuICogQWRkIGEgVVJMIFNjaGVtZSDigJxwYXl0beKAnSvigJ1NSUTigJ1cclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdBbGxJbk9uZVNESycsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wYXl0bS1hbGxpbm9uZXNkaycsXHJcbiAgcGx1Z2luUmVmOiAnQWxsSW5PbmVTREsnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vcGF5dG0vcGF5dG0tYWxsaW5vbmVzZGstaW9uaWMtY29yZG92YS5naXQnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQWxsSW5PbmVTREsgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBmdW5jdGlvbiBjaGVja3MgaWYgUGF5dG0gQXBwbGljYXRpb24gaXMgYXZhaWxhYmxlIG9uIHRoZSBkZXZpY2UuXHJcbiAgICogSWYgUGF5dG0gZXhpc3RzIHRoZW4gaXQgaW52b2tlcyBQYXl0bSBBcHBsaWNhdGlvbiB3aXRoIHRoZSBwYXJhbWV0ZXJzIHNlbnQgYW5kIGNyZWF0ZXMgYW4gb3JkZXIuXHJcbiAgICogSWYgdGhlIFBheXRtIEFwcGxpY2F0aW9uIGlzIG5vdCBhdmFpbGFibGUgdGhlIHRyYW5zYWN0aW9uIGlzIGNvbnRpbnVlZCBvbiBhIHdlYlZpZXcgd2l0aGluIEFsbC1pbi1PbmUgU0RLLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIG9wdGlvbnMge1BheW1lbnRJbnRlbnRNb2RlbH0gVGhlc2UgcGFyYW1ldGVycyBhcmUgcmVxdWlyZWQgYW5kIHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgYW4gb3JkZXIuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8UGF5dG1SZXNwb25zZT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBhIHRyYW5zYWN0aW9uIGNvbXBsZXRlcyhib3RoIGZhaWxlZCBhbmQgc3VjY2Vzc2Z1bCkuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHN0YXJ0VHJhbnNhY3Rpb24ob3B0aW9uczogUGF5bWVudEludGVudE1vZGVsIHwgUGF5bWVudEFzc2lzdEludGVudE1vZGVsKTogUHJvbWlzZTxQYXl0bVJlc3BvbnNlPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogVGhlIHJlc3BvbnNlIHRoYXQgd2lsbCBiZSByZWNpZXZlZCB3aGVuIGFueSB0cmFuc2FjdGlvbiBpcyBjb21wbGV0ZWRcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGF5dG1SZXNwb25zZSB7XHJcbiAgbWVzc2FnZTogc3RyaW5nO1xyXG4gIHJlc3BvbnNlOiBzdHJpbmc7IC8vIEEgc3RyaW5naWZpZWQgcmVzcG9uc2Ugb2YgYSBoYXNobWFwIHJldHVybmVkIGZyb20gQWxsLWluLU9uZSBTREtcclxufVxyXG5cclxuLyoqXHJcbiAqIEZvciBiZWxvdyBwYXJhbWV0ZXJzIHNlZSBbZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIucGF5dG0uY29tL2RvY3MvYWxsLWluLW9uZS1zZGsvaHlicmlkLWFwcHMvY29yZG92YS8pXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFBheW1lbnRJbnRlbnRNb2RlbCB7XHJcbiAgbWlkOiBzdHJpbmc7IC8vIE1lcmNoYW50IElEXHJcbiAgb3JkZXJJZDogc3RyaW5nOyAvLyBPcmRlciBJRFxyXG4gIHR4blRva2VuOiBzdHJpbmc7IC8vIFRyYW5zYWN0aW9uIFRva2VuXHJcbiAgYW1vdW50OiBzdHJpbmc7IC8vIEFtb3VudFxyXG4gIGlzU3RhZ2luZzogYm9vbGVhbjsgLy8gRW52aXJvbm1lbnRcclxuICBjYWxsYmFja1VybDogc3RyaW5nOyAvLyBDYWxsYmFjayBVUkxcclxuICByZXN0cmljdEFwcEludm9rZTogYm9vbGVhbjsgLy8gVG8gZW5hYmxlIG9yIGRpc2FibGUgdGhlIHBheXRtIGFwcCBpbnZvY2F0aW9uXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGF5bWVudEFzc2lzdEludGVudE1vZGVsIHtcclxuICBtaWQ6IHN0cmluZzsgLy8gTWVyY2hhbnQgSURcclxuICBvcmRlcklkOiBzdHJpbmc7IC8vIE9yZGVyIElEXHJcbiAgdHhuVG9rZW46IHN0cmluZzsgLy8gVHJhbnNhY3Rpb24gVG9rZW5cclxuICBhbW91bnQ6IHN0cmluZzsgLy8gQW1vdW50XHJcbiAgaXNTdGFnaW5nOiBib29sZWFuOyAvLyBFbnZpcm9ubWVudFxyXG4gIGNhbGxiYWNrVXJsOiBzdHJpbmc7IC8vIENhbGxiYWNrIFVSTFxyXG4gIHJlc3RyaWN0QXBwSW52b2tlOiBib29sZWFuOyAvLyBUbyBlbmFibGUgb3IgZGlzYWJsZSB0aGUgcGF5dG0gYXBwIGludm9jYXRpb25cclxuICBlbmFibGVBc3Npc3Q6IGJvb2xlYW47IC8vIFRvIGVuYWJsZSBvciBkaXNhYmxlIHRoZSBBc3Npc3QgKE90cCBhdXRvIHJlYWQpXHJcbn1cclxuIl19