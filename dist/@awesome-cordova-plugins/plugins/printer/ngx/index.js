import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova, checkAvailability, getPromise } from '@awesome-cordova-plugins/core';
var Printer = /** @class */ (function (_super) {
    __extends(Printer, _super);
    function Printer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Checks whether the device is capable of printing (uses `check()` internally)
     *
     * @returns {Promise<boolean>}
     */
    Printer.prototype.isAvailable = function () {
        return this.check().then(function (res) { return Promise.resolve(res.avail); });
    };
    Printer.prototype.check = function () {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return getPromise(function (resolve) {
                    Printer.getPlugin().canPrintItem(function (avail, count) {
                        resolve({ avail: avail, count: count });
                    });
                });
            }
        })();
    };
    Printer.prototype.pick = function () { return cordova(this, "pick", {}, arguments); };
    Printer.prototype.print = function (content, options) { return cordova(this, "print", { "successIndex": 2, "errorIndex": 4 }, arguments); };
    Printer.pluginName = "Printer";
    Printer.plugin = "cordova-plugin-printer";
    Printer.pluginRef = "cordova.plugins.printer";
    Printer.repo = "https://github.com/katzer/cordova-plugin-printer";
    Printer.platforms = ["Android", "iOS", "Windows"];
    Printer.decorators = [
        { type: Injectable }
    ];
    return Printer;
}(AwesomeCordovaNativePlugin));
export { Printer };
//# sourceMappingURL=data:application/json;base64,