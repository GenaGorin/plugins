import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var PreviewAnyFile = /** @class */ (function (_super) {
    __extends(PreviewAnyFile, _super);
    function PreviewAnyFile() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PreviewAnyFile.prototype.preview = function (url) { return cordova(this, "preview", {}, arguments); };
    PreviewAnyFile.prototype.previewPath = function (path, opt) {
        if (opt === void 0) { opt = {}; }
        return cordova(this, "previewPath", { "observable": true, "callbackOrder": "reverse" }, arguments);
    };
    PreviewAnyFile.prototype.previewBase64 = function (base64, opt) {
        if (opt === void 0) { opt = {}; }
        return cordova(this, "previewBase64", { "observable": true, "callbackOrder": "reverse" }, arguments);
    };
    PreviewAnyFile.prototype.previewAsset = function (path, opt) {
        if (opt === void 0) { opt = {}; }
        return cordova(this, "previewAsset", { "observable": true, "callbackOrder": "reverse" }, arguments);
    };
    PreviewAnyFile.pluginName = "Preview/Open Any File";
    PreviewAnyFile.plugin = "cordova-plugin-preview-any-file";
    PreviewAnyFile.pluginRef = "PreviewAnyFile";
    PreviewAnyFile.repo = "https://github.com/mostafa-mansour1/previewAnyFile";
    PreviewAnyFile.install = "";
    PreviewAnyFile.installVariables = [];
    PreviewAnyFile.platforms = ["Android", "iOS"];
    PreviewAnyFile.decorators = [
        { type: Injectable }
    ];
    return PreviewAnyFile;
}(AwesomeCordovaNativePlugin));
export { PreviewAnyFile };
//# sourceMappingURL=data:application/json;base64,