var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var PSPDFKitOriginal = /** @class */ (function (_super) {
    __extends(PSPDFKitOriginal, _super);
    function PSPDFKitOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PSPDFKitOriginal.prototype.setLicenseKey = function (licenseKey) { return cordova(this, "setLicenseKey", {}, arguments); };
    PSPDFKitOriginal.prototype.present = function (path, options) { return cordova(this, "present", {}, arguments); };
    PSPDFKitOriginal.prototype.presentFromAssets = function (assetFile, options) { return cordova(this, "presentFromAssets", {}, arguments); };
    PSPDFKitOriginal.prototype.presentWithXFDF = function (path, xfdfPath, options) { return cordova(this, "presentWithXFDF", {}, arguments); };
    PSPDFKitOriginal.prototype.dismiss = function () { return cordova(this, "dismiss", {}, arguments); };
    PSPDFKitOriginal.prototype.reload = function () { return cordova(this, "reload", {}, arguments); };
    PSPDFKitOriginal.prototype.saveDocument = function () { return cordova(this, "saveDocument", {}, arguments); };
    PSPDFKitOriginal.prototype.saveAnnotations = function () { return cordova(this, "saveAnnotations", {}, arguments); };
    PSPDFKitOriginal.prototype.getHasDirtyAnnotations = function () { return cordova(this, "getHasDirtyAnnotations", {}, arguments); };
    PSPDFKitOriginal.prototype.search = function (query, animated, headless) { return cordova(this, "search", {}, arguments); };
    PSPDFKitOriginal.prototype.setOptions = function (options, animated) { return cordova(this, "setOptions", {}, arguments); };
    PSPDFKitOriginal.prototype.getOptions = function (names) { return cordova(this, "getOptions", {}, arguments); };
    PSPDFKitOriginal.prototype.setOption = function (name, value, animated) { return cordova(this, "setOption", {}, arguments); };
    PSPDFKitOriginal.prototype.getOption = function (name) { return cordova(this, "getOption", {}, arguments); };
    PSPDFKitOriginal.prototype.setPage = function (page, animated) { return cordova(this, "setPage", {}, arguments); };
    PSPDFKitOriginal.prototype.getPage = function () { return cordova(this, "getPage", {}, arguments); };
    PSPDFKitOriginal.prototype.getPageCount = function () { return cordova(this, "getPageCount", {}, arguments); };
    PSPDFKitOriginal.prototype.scrollToNextPage = function (animated) { return cordova(this, "scrollToNextPage", {}, arguments); };
    PSPDFKitOriginal.prototype.scrollToPreviousPage = function (animated) { return cordova(this, "scrollToPreviousPage", {}, arguments); };
    PSPDFKitOriginal.prototype.setAppearanceMode = function (appearanceMode) { return cordova(this, "setAppearanceMode", {}, arguments); };
    PSPDFKitOriginal.prototype.clearCache = function (clearDiskCache) { return cordova(this, "clearCache", {}, arguments); };
    PSPDFKitOriginal.prototype.removeCacheForPresentedDocument = function () { return cordova(this, "removeCacheForPresentedDocument", {}, arguments); };
    PSPDFKitOriginal.prototype.clearCacheForPage = function (pageIndex) { return cordova(this, "clearCacheForPage", {}, arguments); };
    PSPDFKitOriginal.prototype.hideAnnotationToolbar = function () { return cordova(this, "hideAnnotationToolbar", {}, arguments); };
    PSPDFKitOriginal.prototype.showAnnotationToolbar = function () { return cordova(this, "showAnnotationToolbar", {}, arguments); };
    PSPDFKitOriginal.prototype.toggleAnnotationToolbar = function () { return cordova(this, "toggleAnnotationToolbar", {}, arguments); };
    PSPDFKitOriginal.prototype.applyInstantJSON = function (jsonValue) { return cordova(this, "applyInstantJSON", {}, arguments); };
    PSPDFKitOriginal.prototype.addAnnotation = function (jsonAnnotation) { return cordova(this, "addAnnotation", {}, arguments); };
    PSPDFKitOriginal.prototype.removeAnnotation = function (jsonAnnotation) { return cordova(this, "removeAnnotation", {}, arguments); };
    PSPDFKitOriginal.prototype.getAnnotations = function (pageIndex, type) { return cordova(this, "getAnnotations", {}, arguments); };
    PSPDFKitOriginal.prototype.getAllUnsavedAnnotations = function () { return cordova(this, "getAllUnsavedAnnotations", {}, arguments); };
    PSPDFKitOriginal.prototype.setFormFieldValue = function (value, fullyQualifiedName) { return cordova(this, "setFormFieldValue", {}, arguments); };
    PSPDFKitOriginal.prototype.getFormFieldValue = function (fullyQualifiedName) { return cordova(this, "getFormFieldValue", {}, arguments); };
    PSPDFKitOriginal.prototype.importXFDF = function (xfdfPath) { return cordova(this, "importXFDF", {}, arguments); };
    PSPDFKitOriginal.prototype.exportXFDF = function (xfdfPath) { return cordova(this, "exportXFDF", {}, arguments); };
    PSPDFKitOriginal.prototype.processAnnotations = function (annotationChange, processedDocumentPath, annotationType) { return cordova(this, "processAnnotations", {}, arguments); };
    PSPDFKitOriginal.prototype.convertPDFFromHTMLString = function (html, fileName, options) { return cordova(this, "convertPDFFromHTMLString", {}, arguments); };
    PSPDFKitOriginal.pluginName = "PSPDFKit";
    PSPDFKitOriginal.plugin = "pspdfkit-cordova";
    PSPDFKitOriginal.pluginRef = "PSPDFKit";
    PSPDFKitOriginal.repo = "https://github.com/PSPDFKit/PSPDFKit-Cordova";
    PSPDFKitOriginal.install = "ionic cordova plugin add pspdfkit-cordova";
    PSPDFKitOriginal.platforms = ["Android", "iOS"];
    return PSPDFKitOriginal;
}(AwesomeCordovaNativePlugin));
var PSPDFKit = new PSPDFKitOriginal();
export { PSPDFKit };
//# sourceMappingURL=data:application/json;base64,