var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var CallDirectoryOriginal = /** @class */ (function (_super) {
    __extends(CallDirectoryOriginal, _super);
    function CallDirectoryOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CallDirectoryOriginal.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    CallDirectoryOriginal.prototype.addIdentification = function (items) { return cordova(this, "addIdentification", {}, arguments); };
    CallDirectoryOriginal.prototype.removeIdentification = function (items) { return cordova(this, "removeIdentification", {}, arguments); };
    CallDirectoryOriginal.prototype.removeAllIdentification = function () { return cordova(this, "removeAllIdentification", {}, arguments); };
    CallDirectoryOriginal.prototype.getAllItems = function () { return cordova(this, "getAllItems", {}, arguments); };
    CallDirectoryOriginal.prototype.reloadExtension = function () { return cordova(this, "reloadExtension", {}, arguments); };
    CallDirectoryOriginal.prototype.getLog = function () { return cordova(this, "getLog", {}, arguments); };
    CallDirectoryOriginal.pluginName = "CallDirectory";
    CallDirectoryOriginal.plugin = "cordova-plugin-call-directory";
    CallDirectoryOriginal.pluginRef = "CallDirectory";
    CallDirectoryOriginal.repo = "https://github.com/GEDYSIntraWare/cordova-plugin-call-directory";
    CallDirectoryOriginal.install = "cordova plugin add cordova-plugin-call-directory --variable EXT_NAME=\"Cordova-Directory\" --variable ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES=\"NO\"";
    CallDirectoryOriginal.installVariables = ["EXT_NAME", "ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES"];
    CallDirectoryOriginal.platforms = ["iOS"];
    return CallDirectoryOriginal;
}(AwesomeCordovaNativePlugin));
var CallDirectory = new CallDirectoryOriginal();
export { CallDirectory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvY2FsbC1kaXJlY3RvcnkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBaUR6RCxpQ0FBMEI7Ozs7SUFPM0QsbUNBQVc7SUFXWCx5Q0FBaUIsYUFBQyxLQUEwQjtJQVc1Qyw0Q0FBb0IsYUFBQyxLQUEwQjtJQVUvQywrQ0FBdUI7SUFVdkIsbUNBQVc7SUFVWCx1Q0FBZTtJQVVmLDhCQUFNOzs7Ozs7Ozt3QkF2SFI7RUFrRG1DLDBCQUEwQjtTQUFoRCxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDYWxsRGlyZWN0b3J5SXRlbSB7XHJcbiAgbGFiZWw6IHN0cmluZztcclxuICBudW1iZXI6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDYWxsRGlyZWN0b3J5TG9nIHtcclxuICBwbHVnaW46IHN0cmluZ1tdO1xyXG4gIGV4dGVuc2lvbjogc3RyaW5nW107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBDYWxsIERpcmVjdG9yeVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gY2FuIGFkZCBwaG9uZSBudW1iZXJzIHRvIGFuIENhbGxraXQgY2FsbCBkaXJlY3RvcnkgZXh0ZW5zaW9uLiBDYWxsIGByZWxvYWRFeHRlbnNpb25gIGFmdGVyIHVzaW5nIGBhZGRJZGVudGlmaWNhdGlvbmAgYW5kIGByZW1vdmVJZGVudGlmaWNhdGlvbmBcclxuICogdG8gcHJvY2VzcyB0aGUgY2hhbmdlcyBpbiB0aGUgY2FsbCBkaXJlY3RvcnkgZXh0ZW5zaW9uLlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBDYWxsRGlyZWN0b3J5IH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NhbGwtZGlyZWN0b3J5L25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgY2FsbERpcmVjdG9yeTogQ2FsbERpcmVjdG9yeSkgeyB9XHJcbiAqXHJcbiAqXHJcbiAqIGxldCBpdGVtcyA9IFt7bGFiZWw6IFwiSGVsbG9cIiwgbnVtYmVyOiBcIjEyM1wifV07XHJcbiAqIHRoaXMuY2FsbERpcmVjdG9yeS5hZGRJZGVudGlmaWNhdGlvbihpdGVtcylcclxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIHRoaXMuY2FsbERpcmVjdG9yeS5yZWxvYWRFeHRlbnNpb24oKVxyXG4gKiAgIC50aGVuKHJlczogc3RyaW5nKSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKiBgYGBcclxuICogQEludGVyZmFjZXNcclxuICogQ2FsbERpcmVjdG9yeUl0ZW1cclxuICogQ2FsbERpcmVjdG9yeUxvZ1xyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0NhbGxEaXJlY3RvcnknLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWNhbGwtZGlyZWN0b3J5JyxcclxuICBwbHVnaW5SZWY6ICdDYWxsRGlyZWN0b3J5JyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0dFRFlTSW50cmFXYXJlL2NvcmRvdmEtcGx1Z2luLWNhbGwtZGlyZWN0b3J5JyxcclxuICBpbnN0YWxsOlxyXG4gICAgJ2NvcmRvdmEgcGx1Z2luIGFkZCBjb3Jkb3ZhLXBsdWdpbi1jYWxsLWRpcmVjdG9yeSAtLXZhcmlhYmxlIEVYVF9OQU1FPVwiQ29yZG92YS1EaXJlY3RvcnlcIiAtLXZhcmlhYmxlIEFMV0FZU19FTUJFRF9TV0lGVF9TVEFOREFSRF9MSUJSQVJJRVM9XCJOT1wiJyxcclxuICBpbnN0YWxsVmFyaWFibGVzOiBbJ0VYVF9OQU1FJywgJ0FMV0FZU19FTUJFRF9TV0lGVF9TVEFOREFSRF9MSUJSQVJJRVMnXSxcclxuICBwbGF0Zm9ybXM6IFsnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIENhbGxEaXJlY3RvcnkgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgdGhlIGNhbGwgZGlyZWN0b3J5IGV4dGVuc2lvbiBpcyBhdmFpbGFibGUgYW5kIGVuYWJsZWRcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHJlc3VsdFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpc0F2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZCBpZGVudGlmaWNhdGlvbiBudW1iZXJzXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0NhbGxEaXJlY3RvcnlJdGVtW119IGl0ZW1zIFNldCBvZiBudW1iZXJzIHdpdGggbGFiZWxzXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIG51bWJlcnMgYXJlIGFkZGVkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGFkZElkZW50aWZpY2F0aW9uKGl0ZW1zOiBDYWxsRGlyZWN0b3J5SXRlbVtdKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZSBpZGVudGlmaWNhdGlvbiBudW1iZXJzXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0NhbGxEaXJlY3RvcnlJdGVtW119IGl0ZW1zIFNldCBvZiBudW1iZXJzIHdpdGggYXJiaXRyYXJ5IGxhYmVsXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIG51bWJlcnMgYXJlIHJlbW92ZWRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVtb3ZlSWRlbnRpZmljYXRpb24oaXRlbXM6IENhbGxEaXJlY3RvcnlJdGVtW10pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlIGFsbCBpdGVtcyBmcm9tIGNhbGwgZGlyZWN0b3J5LiBSZWZyZXNoZXMgaW1tZWRpYXRlbHkuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSBhZnRlciByZWZyZXNoIHdpdGggbWVzc2FnZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZW1vdmVBbGxJZGVudGlmaWNhdGlvbigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGFsbCBudW1iZXJzIGFuZCBsYWJlbHMgaW4gY2FsbCBkaXJlY3RvcnlcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtDYWxsRGlyZWN0b3J5SXRlbVtdfSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYW4gYXJyYXkgb2YgYWxsIGl0ZW1zXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldEFsbEl0ZW1zKCk6IFByb21pc2U8Q2FsbERpcmVjdG9yeUl0ZW1bXT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVsb2FkIGV4dGVuc2lvbiB0byBwcm9jZXNzIHF1ZXVlZCBjaGFuZ2VzXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSBhZnRlciByZWZyZXNoIHdpdGggbWVzc2FnZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZWxvYWRFeHRlbnNpb24oKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBsb2cgZnJvbSBwbHVnaW4gYW5kIGNhbGwgZGlyZWN0b3J5IGV4dGVuc2lvblxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8Q2FsbERpcmVjdG9yeUxvZz59IFJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gb2JqZWN0IG9mIGxvZyBtZXNzYWdlc1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRMb2coKTogUHJvbWlzZTxDYWxsRGlyZWN0b3J5TG9nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==