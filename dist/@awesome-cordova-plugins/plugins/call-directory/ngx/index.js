import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var CallDirectory = /** @class */ (function (_super) {
    __extends(CallDirectory, _super);
    function CallDirectory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CallDirectory.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    CallDirectory.prototype.addIdentification = function (items) { return cordova(this, "addIdentification", {}, arguments); };
    CallDirectory.prototype.removeIdentification = function (items) { return cordova(this, "removeIdentification", {}, arguments); };
    CallDirectory.prototype.removeAllIdentification = function () { return cordova(this, "removeAllIdentification", {}, arguments); };
    CallDirectory.prototype.getAllItems = function () { return cordova(this, "getAllItems", {}, arguments); };
    CallDirectory.prototype.reloadExtension = function () { return cordova(this, "reloadExtension", {}, arguments); };
    CallDirectory.prototype.getLog = function () { return cordova(this, "getLog", {}, arguments); };
    CallDirectory.pluginName = "CallDirectory";
    CallDirectory.plugin = "cordova-plugin-call-directory";
    CallDirectory.pluginRef = "CallDirectory";
    CallDirectory.repo = "https://github.com/GEDYSIntraWare/cordova-plugin-call-directory";
    CallDirectory.install = "cordova plugin add cordova-plugin-call-directory --variable EXT_NAME=\"Cordova-Directory\" --variable ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES=\"NO\"";
    CallDirectory.installVariables = ["EXT_NAME", "ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES"];
    CallDirectory.platforms = ["iOS"];
    CallDirectory.decorators = [
        { type: Injectable }
    ];
    return CallDirectory;
}(AwesomeCordovaNativePlugin));
export { CallDirectory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvY2FsbC1kaXJlY3Rvcnkvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBaUR6RCxpQ0FBMEI7Ozs7SUFPM0QsbUNBQVc7SUFXWCx5Q0FBaUIsYUFBQyxLQUEwQjtJQVc1Qyw0Q0FBb0IsYUFBQyxLQUEwQjtJQVUvQywrQ0FBdUI7SUFVdkIsbUNBQVc7SUFVWCx1Q0FBZTtJQVVmLDhCQUFNOzs7Ozs7Ozs7Z0JBdEVQLFVBQVU7O3dCQWpEWDtFQWtEbUMsMEJBQTBCO1NBQWhELGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENhbGxEaXJlY3RvcnlJdGVtIHtcclxuICBsYWJlbDogc3RyaW5nO1xyXG4gIG51bWJlcjogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENhbGxEaXJlY3RvcnlMb2cge1xyXG4gIHBsdWdpbjogc3RyaW5nW107XHJcbiAgZXh0ZW5zaW9uOiBzdHJpbmdbXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIENhbGwgRGlyZWN0b3J5XHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGlzIHBsdWdpbiBjYW4gYWRkIHBob25lIG51bWJlcnMgdG8gYW4gQ2FsbGtpdCBjYWxsIGRpcmVjdG9yeSBleHRlbnNpb24uIENhbGwgYHJlbG9hZEV4dGVuc2lvbmAgYWZ0ZXIgdXNpbmcgYGFkZElkZW50aWZpY2F0aW9uYCBhbmQgYHJlbW92ZUlkZW50aWZpY2F0aW9uYFxyXG4gKiB0byBwcm9jZXNzIHRoZSBjaGFuZ2VzIGluIHRoZSBjYWxsIGRpcmVjdG9yeSBleHRlbnNpb24uXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IENhbGxEaXJlY3RvcnkgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY2FsbC1kaXJlY3Rvcnkvbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBjYWxsRGlyZWN0b3J5OiBDYWxsRGlyZWN0b3J5KSB7IH1cclxuICpcclxuICpcclxuICogbGV0IGl0ZW1zID0gW3tsYWJlbDogXCJIZWxsb1wiLCBudW1iZXI6IFwiMTIzXCJ9XTtcclxuICogdGhpcy5jYWxsRGlyZWN0b3J5LmFkZElkZW50aWZpY2F0aW9uKGl0ZW1zKVxyXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogdGhpcy5jYWxsRGlyZWN0b3J5LnJlbG9hZEV4dGVuc2lvbigpXHJcbiAqICAgLnRoZW4ocmVzOiBzdHJpbmcpID0+IGNvbnNvbGUubG9nKHJlcykpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqIGBgYFxyXG4gKiBASW50ZXJmYWNlc1xyXG4gKiBDYWxsRGlyZWN0b3J5SXRlbVxyXG4gKiBDYWxsRGlyZWN0b3J5TG9nXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnQ2FsbERpcmVjdG9yeScsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tY2FsbC1kaXJlY3RvcnknLFxyXG4gIHBsdWdpblJlZjogJ0NhbGxEaXJlY3RvcnknLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vR0VEWVNJbnRyYVdhcmUvY29yZG92YS1wbHVnaW4tY2FsbC1kaXJlY3RvcnknLFxyXG4gIGluc3RhbGw6XHJcbiAgICAnY29yZG92YSBwbHVnaW4gYWRkIGNvcmRvdmEtcGx1Z2luLWNhbGwtZGlyZWN0b3J5IC0tdmFyaWFibGUgRVhUX05BTUU9XCJDb3Jkb3ZhLURpcmVjdG9yeVwiIC0tdmFyaWFibGUgQUxXQVlTX0VNQkVEX1NXSUZUX1NUQU5EQVJEX0xJQlJBUklFUz1cIk5PXCInLFxyXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnRVhUX05BTUUnLCAnQUxXQVlTX0VNQkVEX1NXSUZUX1NUQU5EQVJEX0xJQlJBUklFUyddLFxyXG4gIHBsYXRmb3JtczogWydpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQ2FsbERpcmVjdG9yeSBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBDaGVjayBpZiB0aGUgY2FsbCBkaXJlY3RvcnkgZXh0ZW5zaW9uIGlzIGF2YWlsYWJsZSBhbmQgZW5hYmxlZFxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IFJldHVybnMgYSBwcm9taXNlIHdpdGggcmVzdWx0XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkIGlkZW50aWZpY2F0aW9uIG51bWJlcnNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Q2FsbERpcmVjdG9yeUl0ZW1bXX0gaXRlbXMgU2V0IG9mIG51bWJlcnMgd2l0aCBsYWJlbHNcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gbnVtYmVycyBhcmUgYWRkZWRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgYWRkSWRlbnRpZmljYXRpb24oaXRlbXM6IENhbGxEaXJlY3RvcnlJdGVtW10pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlIGlkZW50aWZpY2F0aW9uIG51bWJlcnNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Q2FsbERpcmVjdG9yeUl0ZW1bXX0gaXRlbXMgU2V0IG9mIG51bWJlcnMgd2l0aCBhcmJpdHJhcnkgbGFiZWxcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gbnVtYmVycyBhcmUgcmVtb3ZlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZW1vdmVJZGVudGlmaWNhdGlvbihpdGVtczogQ2FsbERpcmVjdG9yeUl0ZW1bXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmUgYWxsIGl0ZW1zIGZyb20gY2FsbCBkaXJlY3RvcnkuIFJlZnJlc2hlcyBpbW1lZGlhdGVseS5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIGFmdGVyIHJlZnJlc2ggd2l0aCBtZXNzYWdlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlbW92ZUFsbElkZW50aWZpY2F0aW9uKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgYWxsIG51bWJlcnMgYW5kIGxhYmVscyBpbiBjYWxsIGRpcmVjdG9yeVxyXG4gICAqXHJcbiAgICogQHJldHVybnMge0NhbGxEaXJlY3RvcnlJdGVtW119IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhbiBhcnJheSBvZiBhbGwgaXRlbXNcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0QWxsSXRlbXMoKTogUHJvbWlzZTxDYWxsRGlyZWN0b3J5SXRlbVtdPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWxvYWQgZXh0ZW5zaW9uIHRvIHByb2Nlc3MgcXVldWVkIGNoYW5nZXNcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIGFmdGVyIHJlZnJlc2ggd2l0aCBtZXNzYWdlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlbG9hZEV4dGVuc2lvbigpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGxvZyBmcm9tIHBsdWdpbiBhbmQgY2FsbCBkaXJlY3RvcnkgZXh0ZW5zaW9uXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxDYWxsRGlyZWN0b3J5TG9nPn0gUmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbiBvYmplY3Qgb2YgbG9nIG1lc3NhZ2VzXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldExvZygpOiBQcm9taXNlPENhbGxEaXJlY3RvcnlMb2c+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19