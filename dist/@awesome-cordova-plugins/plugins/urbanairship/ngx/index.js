import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
/**
 * Enum for notification types.
 *
 * @readonly
 * @enum {number}
 */
export var NotificationType;
(function (NotificationType) {
    NotificationType[NotificationType["none"] = 0] = "none";
    NotificationType[NotificationType["badge"] = 1] = "badge";
    NotificationType[NotificationType["sound"] = 2] = "sound";
    NotificationType[NotificationType["alert"] = 4] = "alert";
})(NotificationType || (NotificationType = {}));
/**
 * Enum for presentation options.
 *
 * @readonly
 * @enum {number}
 */
export var PresentationOptions;
(function (PresentationOptions) {
    PresentationOptions[PresentationOptions["none"] = 0] = "none";
    PresentationOptions[PresentationOptions["badge"] = 1] = "badge";
    PresentationOptions[PresentationOptions["sound"] = 2] = "sound";
    PresentationOptions[PresentationOptions["alert"] = 4] = "alert";
})(PresentationOptions || (PresentationOptions = {}));
var UrbanAirShip = /** @class */ (function (_super) {
    __extends(UrbanAirShip, _super);
    function UrbanAirShip() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UrbanAirShip.prototype.onDeepLink = function () { return cordova(this, "onDeepLink", { "eventObservable": true, "event": "urbanairship.deep_link", "element": "document" }, arguments); };
    UrbanAirShip.prototype.onRegistration = function () { return cordova(this, "onRegistration", { "eventObservable": true, "event": "urbanairship.registration", "element": "document" }, arguments); };
    UrbanAirShip.prototype.onInboxUpdated = function () { return cordova(this, "onInboxUpdated", { "eventObservable": true, "event": "urbanairship.inbox_updated", "element": "document" }, arguments); };
    UrbanAirShip.prototype.onShowInbox = function () { return cordova(this, "onShowInbox", { "eventObservable": true, "event": "urbanairship.show_inbox", "element": "document" }, arguments); };
    UrbanAirShip.prototype.onPushReceived = function () { return cordova(this, "onPushReceived", { "eventObservable": true, "event": "urbanairship.push", "element": "document" }, arguments); };
    UrbanAirShip.prototype.onNotificationOpened = function () { return cordova(this, "onNotificationOpened", { "eventObservable": true, "event": "urbanairship.notification_opened", "element": "document" }, arguments); };
    UrbanAirShip.prototype.onNotificationOptInStatus = function () { return cordova(this, "onNotificationOptInStatus", { "eventObservable": true, "event": "urbanairship.notification_opt_in_status", "element": "document" }, arguments); };
    UrbanAirShip.prototype.reattach = function () { return cordova(this, "reattach", { "sync": true }, arguments); };
    UrbanAirShip.prototype.takeOff = function (config) { return cordova(this, "takeOff", {}, arguments); };
    UrbanAirShip.prototype.setAndroidNotificationConfig = function (config) { return cordova(this, "setAndroidNotificationConfig", {}, arguments); };
    UrbanAirShip.prototype.setAutoLaunchDefaultMessageCenter = function (enabled) { return cordova(this, "setAutoLaunchDefaultMessageCenter", {}, arguments); };
    UrbanAirShip.prototype.setUserNotificationsEnabled = function (enabled) { return cordova(this, "setUserNotificationsEnabled", {}, arguments); };
    UrbanAirShip.prototype.isUserNotificationsEnabled = function () { return cordova(this, "isUserNotificationsEnabled", {}, arguments); };
    UrbanAirShip.prototype.isAppNotificationsEnabled = function () { return cordova(this, "isAppNotificationsEnabled", {}, arguments); };
    UrbanAirShip.prototype.getChannelID = function () { return cordova(this, "getChannelID", {}, arguments); };
    UrbanAirShip.prototype.getLaunchNotification = function (clear) { return cordova(this, "getLaunchNotification", {}, arguments); };
    UrbanAirShip.prototype.getDeepLink = function (clear) { return cordova(this, "getDeepLink", {}, arguments); };
    UrbanAirShip.prototype.getTags = function () { return cordova(this, "getTags", {}, arguments); };
    UrbanAirShip.prototype.setTags = function (tags) { return cordova(this, "setTags", {}, arguments); };
    UrbanAirShip.prototype.getAlias = function () { return cordova(this, "getAlias", {}, arguments); };
    UrbanAirShip.prototype.setAlias = function (alias) { return cordova(this, "setAlias", {}, arguments); };
    UrbanAirShip.prototype.isQuietTimeEnabled = function () { return cordova(this, "isQuietTimeEnabled", {}, arguments); };
    UrbanAirShip.prototype.setQuietTimeEnabled = function (enabled) { return cordova(this, "setQuietTimeEnabled", {}, arguments); };
    UrbanAirShip.prototype.isInQuietTime = function () { return cordova(this, "isInQuietTime", {}, arguments); };
    UrbanAirShip.prototype.getQuietTime = function () { return cordova(this, "getQuietTime", {}, arguments); };
    UrbanAirShip.prototype.setQuietTime = function (startHour, startMinute, endHour, endMinute) { return cordova(this, "setQuietTime", {}, arguments); };
    UrbanAirShip.prototype.setAnalyticsEnabled = function (enabled) { return cordova(this, "setAnalyticsEnabled", {}, arguments); };
    UrbanAirShip.prototype.isAnalyticsEnabled = function () { return cordova(this, "isAnalyticsEnabled", {}, arguments); };
    UrbanAirShip.prototype.getNamedUser = function () { return cordova(this, "getNamedUser", {}, arguments); };
    UrbanAirShip.prototype.setNamedUser = function (namedUser) { return cordova(this, "setNamedUser", {}, arguments); };
    UrbanAirShip.prototype.runAction = function (actionName, actionValue) { return cordova(this, "runAction", {}, arguments); };
    UrbanAirShip.prototype.editNamedUserTagGroups = function () { return cordova(this, "editNamedUserTagGroups", { "sync": true }, arguments); };
    UrbanAirShip.prototype.editChannelTagGroups = function () { return cordova(this, "editChannelTagGroups", { "sync": true }, arguments); };
    UrbanAirShip.prototype.editChannelAttributes = function () { return cordova(this, "editChannelAttributes", { "sync": true }, arguments); };
    UrbanAirShip.prototype.editNamedUserAttributes = function () { return cordova(this, "editNamedUserAttributes", { "sync": true }, arguments); };
    UrbanAirShip.prototype.editChannelSubscriptionLists = function () { return cordova(this, "editChannelSubscriptionLists", { "sync": true }, arguments); };
    UrbanAirShip.prototype.editContactSubscriptionLists = function () { return cordova(this, "editContactSubscriptionLists", { "sync": true }, arguments); };
    UrbanAirShip.prototype.getChannelSubscriptionLists = function () { return cordova(this, "getChannelSubscriptionLists", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UrbanAirShip.prototype.getContactSubscriptionLists = function () { return cordova(this, "getContactSubscriptionLists", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UrbanAirShip.prototype.setAssociatedIdentifier = function (key, identifier) { return cordova(this, "setAssociatedIdentifier", {}, arguments); };
    UrbanAirShip.prototype.setLocationEnabled = function (enabled) { return cordova(this, "setLocationEnabled", {}, arguments); };
    UrbanAirShip.prototype.isLocationEnabled = function () { return cordova(this, "isLocationEnabled", {}, arguments); };
    UrbanAirShip.prototype.setBackgroundLocationEnabled = function (enabled) { return cordova(this, "setBackgroundLocationEnabled", {}, arguments); };
    UrbanAirShip.prototype.isBackgroundLocationEnabled = function () { return cordova(this, "isBackgroundLocationEnabled", {}, arguments); };
    UrbanAirShip.prototype.displayMessageCenter = function () { return cordova(this, "displayMessageCenter", {}, arguments); };
    UrbanAirShip.prototype.dismissMessageCenter = function () { return cordova(this, "dismissMessageCenter", {}, arguments); };
    UrbanAirShip.prototype.dismissInboxMessage = function () { return cordova(this, "dismissInboxMessage", {}, arguments); };
    UrbanAirShip.prototype.dismissOverlayInboxMessage = function () { return cordova(this, "dismissOverlayInboxMessage", {}, arguments); };
    UrbanAirShip.prototype.getInboxMessages = function () { return cordova(this, "getInboxMessages", {}, arguments); };
    UrbanAirShip.prototype.markInboxMessageRead = function (messageId) { return cordova(this, "markInboxMessageRead", {}, arguments); };
    UrbanAirShip.prototype.deleteInboxMessage = function (messageId) { return cordova(this, "deleteInboxMessage", {}, arguments); };
    UrbanAirShip.prototype.displayInboxMessage = function (messageId) { return cordova(this, "displayInboxMessage", {}, arguments); };
    UrbanAirShip.prototype.refreshInbox = function () { return cordova(this, "refreshInbox", {}, arguments); };
    UrbanAirShip.prototype.overlayInboxMessage = function (messageId) { return cordova(this, "overlayInboxMessage", {}, arguments); };
    UrbanAirShip.prototype.clearNotification = function (identifier) { return cordova(this, "clearNotification", {}, arguments); };
    UrbanAirShip.prototype.clearNotifications = function () { return cordova(this, "clearNotifications", {}, arguments); };
    UrbanAirShip.prototype.getActiveNotifications = function () { return cordova(this, "getActiveNotifications", {}, arguments); };
    UrbanAirShip.prototype.setAutobadgeEnabled = function (enabled) { return cordova(this, "setAutobadgeEnabled", {}, arguments); };
    UrbanAirShip.prototype.setBadgeNumber = function (count) { return cordova(this, "setBadgeNumber", {}, arguments); };
    UrbanAirShip.prototype.getBadgeNumber = function () { return cordova(this, "getBadgeNumber", {}, arguments); };
    UrbanAirShip.prototype.resetBadge = function () { return cordova(this, "resetBadge", {}, arguments); };
    UrbanAirShip.prototype.setNotificationTypes = function (types) { return cordova(this, "setNotificationTypes", {}, arguments); };
    UrbanAirShip.prototype.setPresentationOptions = function (options) { return cordova(this, "setPresentationOptions", {}, arguments); };
    UrbanAirShip.prototype.isSoundEnabled = function () { return cordova(this, "isSoundEnabled", {}, arguments); };
    UrbanAirShip.prototype.setSoundEnabled = function (enabled) { return cordova(this, "setSoundEnabled", {}, arguments); };
    UrbanAirShip.prototype.isVibrateEnabled = function () { return cordova(this, "isVibrateEnabled", {}, arguments); };
    UrbanAirShip.prototype.setVibrateEnabled = function (enabled) { return cordova(this, "setVibrateEnabled", {}, arguments); };
    UrbanAirShip.prototype.addCustomEvent = function (event) { return cordova(this, "addCustomEvent", {}, arguments); };
    UrbanAirShip.prototype.trackScreen = function (screen) { return cordova(this, "trackScreen", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    UrbanAirShip.prototype.enableFeature = function (features) { return cordova(this, "enableFeature", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    UrbanAirShip.prototype.disableFeature = function (features) { return cordova(this, "disableFeature", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    /**
     * Sets the current enabled features, replacing any currently enabled features with the given set.
     *
     * @param {Array<string>} features The features to set as enabled.
     * @param {Function} [success] Success callback.
     * @param {function(message)} [failure] Failure callback.
     * @param {string} failure.message The error message.
     * @since 13.0.0
     */
    UrbanAirShip.prototype.setEnabledFeatures = function (features) {
        return;
    };
    UrbanAirShip.prototype.getEnabledFeatures = function () { return cordova(this, "getEnabledFeatures", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UrbanAirShip.prototype.isFeatureEnabled = function (features) { return cordova(this, "isFeatureEnabled", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    UrbanAirShip.prototype.getPreferenceCenterConfig = function (preferenceCenterId) { return cordova(this, "getPreferenceCenterConfig", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    UrbanAirShip.prototype.openPreferenceCenter = function (prenferenceCenterId) { return cordova(this, "openPreferenceCenter", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    UrbanAirShip.pluginName = "UrbanAirShip";
    UrbanAirShip.plugin = "urbanairship-cordova";
    UrbanAirShip.pluginRef = "window.UAirship";
    UrbanAirShip.repo = "https://www.npmjs.com/package/urbanairship-cordova";
    UrbanAirShip.install = "ionic cordova plugin add urbanairship-cordova";
    UrbanAirShip.platforms = ["Android", "iOS"];
    UrbanAirShip.decorators = [
        { type: Injectable }
    ];
    return UrbanAirShip;
}(AwesomeCordovaNativePlugin));
export { UrbanAirShip };
//# sourceMappingURL=data:application/json;base64,