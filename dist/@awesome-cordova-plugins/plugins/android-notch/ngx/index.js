import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var AndroidNotch = /** @class */ (function (_super) {
    __extends(AndroidNotch, _super);
    function AndroidNotch() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AndroidNotch.prototype.hasCutout = function () { return cordova(this, "hasCutout", {}, arguments); };
    AndroidNotch.prototype.getInsetTop = function () { return cordova(this, "getInsetTop", {}, arguments); };
    AndroidNotch.prototype.getInsetRight = function () { return cordova(this, "getInsetRight", {}, arguments); };
    AndroidNotch.prototype.getInsetBottom = function () { return cordova(this, "getInsetBottom", {}, arguments); };
    AndroidNotch.prototype.getInsetLeft = function () { return cordova(this, "getInsetLeft", {}, arguments); };
    AndroidNotch.pluginName = "AndroidNotch";
    AndroidNotch.plugin = "cordova-plugin-android-notch";
    AndroidNotch.pluginRef = "AndroidNotch";
    AndroidNotch.repo = "https://github.com/tobspr/cordova-plugin-android-notch.git";
    AndroidNotch.platforms = ["Android"];
    AndroidNotch.decorators = [
        { type: Injectable }
    ];
    return AndroidNotch;
}(AwesomeCordovaNativePlugin));
export { AndroidNotch };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYW5kcm9pZC1ub3RjaC9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQzs7SUFnRDFELGdDQUEwQjs7OztJQU8xRCxnQ0FBUztJQVVULGtDQUFXO0lBVVgsb0NBQWE7SUFVYixxQ0FBYztJQVVkLG1DQUFZOzs7Ozs7O2dCQWhEYixVQUFVOzt1QkFoRFg7RUFpRGtDLDBCQUEwQjtTQUEvQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lIEFuZHJvaWQgTm90Y2hcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgcGx1Z2luIGVuYWJsZXMgZGV2ZWxvcGVycyB0byBnZXQgdGhlIGN1dG91dCBhbmQgYW5kcm9pZCBkZXZpY2VzIGluc2V0IHNpemVzXHJcbiAqIEl0IGlzIGJhc2VkIG9uIHRoZSBjb3Jkb3ZhIHBsdWdpbiBkZXZlbG9wZWQgYnkgQHRvYnNwcjogaHR0cHM6Ly9naXRodWIuY29tL3RvYnNwci9jb3Jkb3ZhLXBsdWdpbi1hbmRyb2lkLW5vdGNoXHJcbiAqIFRoaXMgcGx1Z2luIHdvcmtzIG9uIGFsbCBhbmRyb2lkIHZlcnNpb25zLCBidXQgd2UgY2FuIG9ubHkgZGV0ZWN0IG5vdGNoZXMgc3RhcnRpbmcgZnJvbSBBbmRyb2lkIDkuXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IEFuZHJvaWROb3RjaCB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9hbmRyb2lkLW5vdGNoL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYW5kcm9pZE5vdGNoOiBBbmRyb2lkTm90Y2gpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICpcclxuICogdGhpcy5hbmRyb2lkTm90Y2guaGFzQ3V0b3V0KClcclxuICogICAgLnRoZW4oKHB4OiBudW1iZXIpID0+IGNvbnNvbGUubG9nKCdJbnNldCBzaXplOiAnKSwgcHgpXHJcbiAqICAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5sb2coJ0Vycm9yOiAnLCBlcnJvcikpXHJcbiAqXHJcbiAqIHRoaXMuYW5kcm9pZE5vdGNoLmdldEluc2V0VG9wKClcclxuICogICAgLnRoZW4oKHB4OiBudW1iZXIpID0+IGNvbnNvbGUubG9nKCdJbnNldCBzaXplOiAnKSwgcHgpXHJcbiAqICAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5sb2coJ0Vycm9yOiAnLCBlcnJvcikpXHJcbiAqXHJcbiAqIHRoaXMuYW5kcm9pZE5vdGNoLmdldEluc2V0UmlnaHQoKVxyXG4gKiAgICAudGhlbigocHg6IG51bWJlcikgPT4gY29uc29sZS5sb2coJ0luc2V0IHNpemU6ICcpLCBweClcclxuICogICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmxvZygnRXJyb3I6ICcsIGVycm9yKSlcclxuICpcclxuICogdGhpcy5hbmRyb2lkTm90Y2guZ2V0SW5zZXRCb3R0b20oKVxyXG4gKiAgICAudGhlbigocHg6IG51bWJlcikgPT4gY29uc29sZS5sb2coJ0luc2V0IHNpemU6ICcpLCBweClcclxuICogICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmxvZygnRXJyb3I6ICcsIGVycm9yKSlcclxuICpcclxuICogdGhpcy5hbmRyb2lkTm90Y2guZ2V0SW5zZXRMZWZ0KClcclxuICogICAgLnRoZW4oKHB4OiBudW1iZXIpID0+IGNvbnNvbGUubG9nKCdJbnNldCBzaXplOiAnKSwgcHgpXHJcbiAqICAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5sb2coJ0Vycm9yOiAnLCBlcnJvcikpXHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0FuZHJvaWROb3RjaCcsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYW5kcm9pZC1ub3RjaCcsXHJcbiAgcGx1Z2luUmVmOiAnQW5kcm9pZE5vdGNoJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3RvYnNwci9jb3Jkb3ZhLXBsdWdpbi1hbmRyb2lkLW5vdGNoLmdpdCcsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQW5kcm9pZE5vdGNoIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgYW5kcm9pZCBkZXZpY2UgaGFzIGN1dG91dFxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGhhc0N1dG91dCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIGhlaWd0aCBvZiB0aGUgdG9wIGluc2V0XHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxudW1iZXI+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRJbnNldFRvcCgpOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgaGVpZ3RoIG9mIHRoZSByaWdodCBpbnNldFxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8bnVtYmVyPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0SW5zZXRSaWdodCgpOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgaGVpZ3RoIG9mIHRoZSBib3R0b20gaW5zZXRcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG51bWJlcj59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldEluc2V0Qm90dG9tKCk6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBoZWlndGggb2YgdGhlIGxlZnQgaW5zZXRcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG51bWJlcj59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldEluc2V0TGVmdCgpOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=