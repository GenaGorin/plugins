var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var VibesOriginal = /** @class */ (function (_super) {
    __extends(VibesOriginal, _super);
    function VibesOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VibesOriginal.prototype.registerDevice = function () { return cordova(this, "registerDevice", {}, arguments); };
    VibesOriginal.prototype.unregisterDevice = function () { return cordova(this, "unregisterDevice", {}, arguments); };
    VibesOriginal.prototype.associatePerson = function (externalPersonId) { return cordova(this, "associatePerson", {}, arguments); };
    VibesOriginal.prototype.registerPush = function () { return cordova(this, "registerPush", {}, arguments); };
    VibesOriginal.prototype.unregisterPush = function () { return cordova(this, "unregisterPush", {}, arguments); };
    VibesOriginal.prototype.getVibesDeviceInfo = function () { return cordova(this, "getVibesDeviceInfo", {}, arguments); };
    VibesOriginal.prototype.getPerson = function () { return cordova(this, "getPerson", {}, arguments); };
    VibesOriginal.prototype.onNotificationOpened = function () { return cordova(this, "onNotificationOpened", { "observable": true }, arguments); };
    VibesOriginal.prototype.fetchInboxMessages = function () { return cordova(this, "fetchInboxMessages", {}, arguments); };
    VibesOriginal.prototype.fetchInboxMessage = function (message_uid) { return cordova(this, "fetchInboxMessage", {}, arguments); };
    VibesOriginal.prototype.expireInboxMessage = function (message_uid, date) { return cordova(this, "expireInboxMessage", {}, arguments); };
    VibesOriginal.prototype.markInboxMessageAsRead = function (message_uid) { return cordova(this, "markInboxMessageAsRead", {}, arguments); };
    VibesOriginal.prototype.onInboxMessageOpen = function (inbox_message_stringified) { return cordova(this, "onInboxMessageOpen", {}, arguments); };
    VibesOriginal.pluginName = "Vibes";
    VibesOriginal.plugin = "vibes-cordova";
    VibesOriginal.pluginRef = "Vibes";
    VibesOriginal.repo = "https://github.com/vibes/vibes-cordova.git";
    VibesOriginal.install = "ionic cordova plugin add vibes-cordova --variable VIBES_APP_ID=MY_APP_ID --variable VIBES_API_URL=MY_ENVIRONMENT_URL";
    VibesOriginal.installVariables = ["VIBES_APP_ID", "VIBES_API_URL"];
    VibesOriginal.platforms = ["Android", "iOS"];
    return VibesOriginal;
}(AwesomeCordovaNativePlugin));
var Vibes = new VibesOriginal();
export { Vibes };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvdmliZXMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7QUFDNUYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUF1RVAseUJBQTBCOzs7O0lBT25ELDhCQUFjO0lBVWQsZ0NBQWdCO0lBV2hCLCtCQUFlLGFBQUMsZ0JBQXdCO0lBVXhDLDRCQUFZO0lBVVosOEJBQWM7SUFTZCxrQ0FBa0I7SUFVbEIseUJBQVM7SUFZVCxvQ0FBb0I7SUFVcEIsa0NBQWtCO0lBV2xCLGlDQUFpQixhQUFDLFdBQW1CO0lBYXJDLGtDQUFrQixhQUFDLFdBQW1CLEVBQUUsSUFBWTtJQVdwRCxzQ0FBc0IsYUFBQyxXQUFtQjtJQVcxQyxrQ0FBa0IsYUFBQyx5QkFBaUM7Ozs7Ozs7O2dCQWhOdEQ7RUF5RTJCLDBCQUEwQjtTQUF4QyxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERldmljZVJlc3BvbnNlIHtcclxuICBkZXZpY2VfaWQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGV2aWNlSW5mb1Jlc3BvbnNlIGV4dGVuZHMgRGV2aWNlUmVzcG9uc2Uge1xyXG4gIHB1c2hfdG9rZW4/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGVyc29uUmVzcG9uc2Uge1xyXG4gIHBlcnNvbl9rZXk/OiBzdHJpbmc7XHJcbiAgbWRuPzogc3RyaW5nO1xyXG4gIGV4dGVybmFsX3BlcnNvbl9pZD86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJbmJveE1lc3NhZ2Uge1xyXG4gIGNvbnRlbnQ/OiBzdHJpbmc7XHJcbiAgY3JlYXRlZF9hdD86IHN0cmluZztcclxuICBleHBpcmVzX2F0Pzogc3RyaW5nO1xyXG4gIG1lc3NhZ2VfdWlkPzogc3RyaW5nO1xyXG4gIHJlYWQ/OiBib29sZWFuO1xyXG4gIHN1YmplY3Q/OiBzdHJpbmc7XHJcbiAgZGV0YWlsPzogc3RyaW5nO1xyXG4gIGNvbGxhcHNlX2tleT86IHN0cmluZztcclxuICBhcHByZWZkYXRhPzogYW55O1xyXG4gIGltYWdlcz86IGFueTtcclxuICBpbmJveF9jdXN0b21fZGF0YTogYW55O1xyXG59XHJcbi8qKlxyXG4gKiBAbmFtZSBWaWJlc1xyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gZW5hYmxlcyBpbnRlZ3JhdGlvbiB3aXRoIHRoZSBWaWJlcyBQdXNoIFNESyB0byB5b3VyIENvcmRvdmEgcHJvamVjdCB3aXRoIEFuZHJvaWQgYW5kIGlPUyBzdXBwb3J0ZWQuXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IFZpYmVzIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3ZpYmVzL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgdmliZXM6IFZpYmVzKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqXHJcbiAqIHRoaXMudmliZXMucmVnaXN0ZXJEZXZpY2UoKVxyXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2coYGRldmljZSByZWdpc3RyYXRpb24gc3VjY2VzczogJHtyZXN9YCkpIC8vIHJldHJpZXZlIGFuZCBzYXZlIHRoZSBkZXZpY2VfaWQgZnJvbSBgcmVzYCBKU09OIG9iamVjdFxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcignRXJyb3IgcmVnaXN0ZXJpbmcgZGV2aWNlJywgZXJyb3IpKTtcclxuICpcclxuICogdGhpcy52aWJlcy5yZWdpc3RlclB1c2goKVxyXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlZ2lzdGVyaW5nIHB1c2gnLCBlcnJvcikpO1xyXG4gKlxyXG4gKiB0aGlzLnZpYmVzLmdldFZpYmVzRGV2aWNlSW5mbygpXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKSAvLyByZXRyaWV2ZSB0aGUgYGRldmljZV9pZGAgYW5kIGBwdXNoX3Rva2VuYCBmcm9tIHRoZSBKU09OIG9iamVjdFxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcignRXJyb3IgcmV0cmlldmluZyBkZXZpY2VpbmZvJywgZXJyb3IpKTtcclxuICpcclxuICogdGhpcy52aWJlcy5mZXRjaEluYm94TWVzc2FnZXMoKVxyXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSkgLy8gZmV0Y2hlcyBpbmJveCBtZXNzYWdlcyBmb3IgdGhpcyBwZXJzb24uXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBpbmJveCBtZXNzYWdlcyBmb3IgdGhpcyBwZXJzb24nLCBlcnJvcikpO1xyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdWaWJlcycsXHJcbiAgcGx1Z2luOiAndmliZXMtY29yZG92YScsXHJcbiAgcGx1Z2luUmVmOiAnVmliZXMnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vdmliZXMvdmliZXMtY29yZG92YS5naXQnLFxyXG4gIGluc3RhbGw6XHJcbiAgICAnaW9uaWMgY29yZG92YSBwbHVnaW4gYWRkIHZpYmVzLWNvcmRvdmEgLS12YXJpYWJsZSBWSUJFU19BUFBfSUQ9TVlfQVBQX0lEIC0tdmFyaWFibGUgVklCRVNfQVBJX1VSTD1NWV9FTlZJUk9OTUVOVF9VUkwnLFxyXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnVklCRVNfQVBQX0lEJywgJ1ZJQkVTX0FQSV9VUkwnXSxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgVmliZXMgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogUmVnaXN0ZXIgdGhpcyBkZXZpY2Ugd2l0aCB0aGUgVmliZXMgcGxhdGZvcm1cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPERldmljZVJlc3BvbnNlPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVnaXN0ZXJEZXZpY2UoKTogUHJvbWlzZTxEZXZpY2VSZXNwb25zZT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVW5yZWdpc3RlciB0aGlzIGRldmljZSB3aXRoIHRoZSBWaWJlcyBwbGF0Zm9ybVxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHVucmVnaXN0ZXJEZXZpY2UoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBc3NvY2lhdGUgYW4gZXh0ZXJuYWwgSUQgd2l0aCB0aGUgY3VycmVudCBwZXJzb24uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXh0ZXJuYWxQZXJzb25JZFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBhc3NvY2lhdGVQZXJzb24oZXh0ZXJuYWxQZXJzb25JZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWdpc3RlciB0aGlzIGRldmljZSB0byByZWNlaXZlIHB1c2ggbm90aWZpY2F0aW9uc1xyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlZ2lzdGVyUHVzaCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVucmVnaXN0ZXIgdGhlIGRldmljZSBmcm9tIHJlY2VpdmluZyBwdXNoIG5vdGlmaWNhdGlvbnNcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB1bnJlZ2lzdGVyUHVzaCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogRmV0Y2hlcyBhIERldmljZUluZm9SZXNwb25zZSB3aXRoIGRldGFpbHMgYWJvdXQgdGhlIFZpYmVzIERldmljZSBJRCBhbmQgUHVzaCBUb2tlblxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8RGV2aWNlSW5mb1Jlc3BvbnNlPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0VmliZXNEZXZpY2VJbmZvKCk6IFByb21pc2U8RGV2aWNlSW5mb1Jlc3BvbnNlPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaGVzIHRoZSBQZXJzb25SZXNwb25zZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBkZXZpY2UgY3VycmVudGx5XHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxQZXJzb25SZXNwb25zZT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldFBlcnNvbigpOiBQcm9taXNlPFBlcnNvblJlc3BvbnNlPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgbm90aWZpZWQgd2hlbiB0aGUgdXNlciBvcGVucyBhIG5vdGlmaWNhdGlvblxyXG4gICAqXHJcbiAgICogQHJldHVybnMge09ic2VydmFibGU8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcclxuICB9KVxyXG4gIG9uTm90aWZpY2F0aW9uT3BlbmVkKCk6IE9ic2VydmFibGU8dm9pZD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2hlcyBhbiBhcnJheSBvZiBpbmJveCBtZXNzYWdlcyBmb3IgdGhlIHBlcnNvbiBhc3NvY2lhdGVkIHdpdGggdGhpcyBkZXZpY2UuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxJbmJveE1lc3NhZ2VbXT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGZldGNoSW5ib3hNZXNzYWdlcygpOiBQcm9taXNlPEluYm94TWVzc2FnZVtdPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaGVzIGEgc2luZ2xlIGluYm94IG1lc3NhZ2UgYnkgaXQncyBpZC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlX3VpZFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEluYm94TWVzc2FnZT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGZldGNoSW5ib3hNZXNzYWdlKG1lc3NhZ2VfdWlkOiBzdHJpbmcpOiBQcm9taXNlPEluYm94TWVzc2FnZT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWFya3MgYW4gaW5ib3ggbWVzc2FnZSBhcyBleHBpcmVkIHVzaW5nIG1lc3NhZ2VfdWlkIGFuZCB0aGUgZXhwaXJ5IGRhdGUgc3VwcGxpZWQuIFVzZXMgY3VycmVudCBkYXRlIGlmIG51bGwgb3IgaW52YWxpZCBkYXRlIGlzIHN1cHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VfdWlkXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IEFuIElTTy04NjAxIGZvcm1hdHRlZCBkYXRlIHN0cmluZy5cclxuICAgKiBAcGFyYW0gZGF0ZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEluYm94TWVzc2FnZT59IGFuIHVwZGF0ZWQgdmVyc2lvbiBvZiB0aGUgSW5ib3hNZXNzYWdlIHdpdGggZXhwaXJlc19hdCBkYXRlIHVwZGF0ZWRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZXhwaXJlSW5ib3hNZXNzYWdlKG1lc3NhZ2VfdWlkOiBzdHJpbmcsIGRhdGU6IHN0cmluZyk6IFByb21pc2U8SW5ib3hNZXNzYWdlPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNYXJrcyBhbiBpbmJveCBtZXNzYWdlIGFzIHJlYWQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZV91aWRcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxJbmJveE1lc3NhZ2U+fSBhbiB1cGRhdGVkIHZlcnNpb24gb2YgdGhlIEluYm94TWVzc2FnZSB3aXRoIHJlYWQgZmllbGQgdXBkYXRlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBtYXJrSW5ib3hNZXNzYWdlQXNSZWFkKG1lc3NhZ2VfdWlkOiBzdHJpbmcpOiBQcm9taXNlPEluYm94TWVzc2FnZT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVjb3JkcyBhbiBldmVudCBmb3Igd2hlbiB0aGUgdXNlciBvcGVucyBhbiBpbmJveCBtZXNzYWdlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGluYm94X21lc3NhZ2Vfc3RyaW5naWZpZWQgc3RyaW5naWZpZWQgdmVyc2lvbiBvZiB0aGUgSW5ib3hNZXNzYWdlXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIG9uSW5ib3hNZXNzYWdlT3BlbihpbmJveF9tZXNzYWdlX3N0cmluZ2lmaWVkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19