import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var FirebaseAnalytics = /** @class */ (function (_super) {
    __extends(FirebaseAnalytics, _super);
    function FirebaseAnalytics() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseAnalytics.prototype.logEvent = function (name, params) { return cordova(this, "logEvent", { "sync": true }, arguments); };
    FirebaseAnalytics.prototype.setUserId = function (id) { return cordova(this, "setUserId", { "sync": true }, arguments); };
    FirebaseAnalytics.prototype.setUserProperty = function (name, value) { return cordova(this, "setUserProperty", { "sync": true }, arguments); };
    FirebaseAnalytics.prototype.setEnabled = function (enabled) { return cordova(this, "setEnabled", { "sync": true }, arguments); };
    FirebaseAnalytics.prototype.setCurrentScreen = function (name) { return cordova(this, "setCurrentScreen", { "sync": true }, arguments); };
    FirebaseAnalytics.prototype.resetAnalyticsData = function () { return cordova(this, "resetAnalyticsData", { "sync": true }, arguments); };
    FirebaseAnalytics.pluginName = "FirebaseAnalytics";
    FirebaseAnalytics.plugin = "cordova-plugin-firebase-analytics";
    FirebaseAnalytics.pluginRef = "cordova.plugins.firebase.analytics";
    FirebaseAnalytics.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-analytics";
    FirebaseAnalytics.platforms = ["Android", "iOS"];
    FirebaseAnalytics.decorators = [
        { type: Injectable }
    ];
    return FirebaseAnalytics;
}(AwesomeCordovaNativePlugin));
export { FirebaseAnalytics };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZmlyZWJhc2UtYW5hbHl0aWNzL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQWtEckQscUNBQTBCOzs7O0lBVS9ELG9DQUFRLGFBQUMsSUFBWSxFQUFFLE1BQVc7SUFZbEMscUNBQVMsYUFBQyxFQUFVO0lBYXBCLDJDQUFlLGFBQUMsSUFBWSxFQUFFLEtBQWE7SUFXM0Msc0NBQVUsYUFBQyxPQUFnQjtJQVkzQiw0Q0FBZ0IsYUFBQyxJQUFZO0lBVTdCLDhDQUFrQjs7Ozs7OztnQkFyRW5CLFVBQVU7OzRCQWxEWDtFQW1EdUMsMEJBQTBCO1NBQXBELGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBAYmV0YVxyXG4gKiBAbmFtZSBGaXJlYmFzZSBBbmFseXRpY3NcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIENvcmRvdmEgcGx1Z2luIGZvciBGaXJlYmFzZSBBbmFseXRpY3NcclxuICpcclxuICogR28gdG8gZmlyZWJhc2UgY29uc29sZSBhbmQgZXhwb3J0IGdvb2dsZS1zZXJ2aWNlcy5qc29uIGFuZCBHb29nbGVTZXJ2aWNlLUluZm8ucGxpc3QuIFB1dCB0aG9zZSBmaWxlcyBpbnRvIHRoZSByb290IG9mIHlvdXIgY29yZG92YSBhcHAgZm9sZGVyLlxyXG4gKlxyXG4gKiBOT1RFOiBvbiBpT1MgaW4gb3JkZXIgdG8gY29sbGVjdCBkZW1vZ3JhcGhpYywgYWdlLCBnZW5kZXIgZGF0YSBldGMuIHlvdSBzaG91bGQgYWRkaXRpb25hbGx5IGluY2x1ZGUgQWRTdXBwb3J0LmZyYW1ld29yayBpbnRvIHlvdXIgcHJvamVjdC5cclxuICpcclxuICogIyMgVXNpbmcgY2FwYWNpdG9yP1xyXG4gKiBGb3IgQW5kcm9pZCB5b3UnbGwgaGF2ZSB0byBhZGQgaW4gX19hbmRyb2lkL2FwcC9zcmMvbWFpbi9BbmRyb2lkTWFuaWZlc3QueG1sX18gdW5kZXIgYDxhcHBsaWNhdGlvbj5gXHJcbiAqIGBgYFxyXG4gKiA8bWV0YS1kYXRhXHJcbiAqICAgICAgdG9vbHM6cmVwbGFjZT1cImFuZHJvaWQ6dmFsdWVcIlxyXG4gKiAgICAgIGFuZHJvaWQ6bmFtZT1cImZpcmViYXNlX2FuYWx5dGljc19jb2xsZWN0aW9uX2VuYWJsZWRcIlxyXG4gKiAgICAgIGFuZHJvaWQ6dmFsdWU9XCJ0cnVlXCIvPlxyXG4gKlxyXG4gKiA8bWV0YS1kYXRhXHJcbiAqICAgICAgdG9vbHM6cmVwbGFjZT1cImFuZHJvaWQ6dmFsdWVcIlxyXG4gKiAgICAgIGFuZHJvaWQ6bmFtZT1cImdvb2dsZV9hbmFseXRpY3NfYXV0b21hdGljX3NjcmVlbl9yZXBvcnRpbmdfZW5hYmxlZFwiXHJcbiAqICAgICAgYW5kcm9pZDp2YWx1ZT1cImZhbHNlXCIvPlxyXG4gKiBgYGBcclxuICpcclxuICogQW5kIGluIHRoZSBzYW1lIGZpbGUsIHlvdSdsbCBoYXZlIHRvIGFkZCBgeG1sbnM6dG9vbHM9XCJodHRwOi8vc2NoZW1hcy5hbmRyb2lkLmNvbS90b29sc1wiYCB0byB5b3VyIF9tYW5pZmVzdF8gdGFnLlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBGaXJlYmFzZUFuYWx5dGljcyB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9maXJlYmFzZS1hbmFseXRpY3Mvbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBmaXJlYmFzZUFuYWx5dGljczogRmlyZWJhc2VBbmFseXRpY3MpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy5maXJlYmFzZUFuYWx5dGljcy5sb2dFdmVudCgncGFnZV92aWV3Jywge3BhZ2U6IFwiZGFzaGJvYXJkXCJ9KVxyXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnRmlyZWJhc2VBbmFseXRpY3MnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWZpcmViYXNlLWFuYWx5dGljcycsXHJcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLmZpcmViYXNlLmFuYWx5dGljcycsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9jaGVtZXJpc3VrL2NvcmRvdmEtcGx1Z2luLWZpcmViYXNlLWFuYWx5dGljcycsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEZpcmViYXNlQW5hbHl0aWNzIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIExvZ3MgYW4gYXBwIGV2ZW50LlxyXG4gICAqIEJlIGF3YXJlIG9mIGF1dG9tYXRpY2FsbHkgY29sbGVjdGVkIGV2ZW50cy5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxyXG4gICAqIEBwYXJhbSB7YW55fSBwYXJhbXMgU29tZSBwYXJhbSB0byBjb25maWd1cmUgc29tZXRoaW5nXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBsb2dFdmVudChuYW1lOiBzdHJpbmcsIHBhcmFtczogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIHVzZXIgSUQgcHJvcGVydHkuXHJcbiAgICogVGhpcyBmZWF0dXJlIG11c3QgYmUgdXNlZCBpbiBhY2NvcmRhbmNlIHdpdGggR29vZ2xlJ3MgUHJpdmFjeSBQb2xpY3kuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIHVzZXIgSURcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHNldFVzZXJJZChpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgZmVhdHVyZSBtdXN0IGJlIHVzZWQgaW4gYWNjb3JkYW5jZSB3aXRoIEdvb2dsZSdzIFByaXZhY3kgUG9saWN5LlxyXG4gICAqIEJlIGF3YXJlIG9mIGF1dG9tYXRpY2FsbHkgY29sbGVjdGVkIHVzZXIgcHJvcGVydGllcy5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBwcm9wZXJ0eSBuYW1lXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFRoZSBwcm9wZXJ0eSB2YWx1ZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgc2V0VXNlclByb3BlcnR5KG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIHdoZXRoZXIgYW5hbHl0aWNzIGNvbGxlY3Rpb24gaXMgZW5hYmxlZCBmb3IgdGhpcyBhcHAgb24gdGhpcyBkZXZpY2UuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGVuYWJsZWRcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHNldEVuYWJsZWQoZW5hYmxlZDogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIHRoZSBjdXJyZW50IHNjcmVlbiBuYW1lLCB3aGljaCBzcGVjaWZpZXMgdGhlIGN1cnJlbnQgdmlzdWFsIGNvbnRleHQgaW4geW91ciBhcHAuXHJcbiAgICogVGhpcyBoZWxwcyBpZGVudGlmeSB0aGUgYXJlYXMgaW4geW91ciBhcHAgd2hlcmUgdXNlcnMgc3BlbmQgdGhlaXIgdGltZSBhbmQgaG93IHRoZXkgaW50ZXJhY3Qgd2l0aCB5b3VyIGFwcC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBzY3JlZW5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHNldEN1cnJlbnRTY3JlZW4obmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENsZWFycyBhbGwgYW5hbHl0aWNzIGRhdGEgZm9yIHRoaXMgaW5zdGFuY2UgZnJvbSB0aGUgZGV2aWNlIGFuZCByZXNldHMgdGhlIGFwcCBpbnN0YW5jZSBJRFxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgcmVzZXRBbmFseXRpY3NEYXRhKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=