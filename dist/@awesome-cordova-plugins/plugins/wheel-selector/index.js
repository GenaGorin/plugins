var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var WheelSelectorOriginal = /** @class */ (function (_super) {
    __extends(WheelSelectorOriginal, _super);
    function WheelSelectorOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WheelSelectorOriginal.prototype.show = function (options) { return cordova(this, "show", {}, arguments); };
    WheelSelectorOriginal.prototype.hideSelector = function () { return cordova(this, "hideSelector", { "platforms": ["iOS"] }, arguments); };
    WheelSelectorOriginal.pluginName = "WheelSelector";
    WheelSelectorOriginal.plugin = "cordova-wheel-selector-plugin";
    WheelSelectorOriginal.pluginRef = "SelectorCordovaPlugin";
    WheelSelectorOriginal.repo = "https://github.com/jasonmamy/cordova-wheel-selector-plugin";
    WheelSelectorOriginal.platforms = ["Android", "iOS"];
    return WheelSelectorOriginal;
}(AwesomeCordovaNativePlugin));
var WheelSelector = new WheelSelectorOriginal();
export { WheelSelector };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvd2hlZWwtc2VsZWN0b3IvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBbUx6RCxpQ0FBMEI7Ozs7SUFRM0QsNEJBQUksYUFBQyxPQUE2QjtJQVlsQyxvQ0FBWTs7Ozs7O3dCQXhNZDtFQW9MbUMsMEJBQTBCO1NBQWhELGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFdoZWVsU2VsZWN0b3JJdGVtIHtcclxuICBkZXNjcmlwdGlvbj86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEZWZhdWx0SXRlbSB7XHJcbiAgaW5kZXg6IG51bWJlcjtcclxuICB2YWx1ZTogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFdoZWVsU2VsZWN0b3JPcHRpb25zIHtcclxuICAvKipcclxuICAgKiBUaGUgdGl0bGUgb2YgdGhlIHNlbGVjdG9yJ3MgaW5wdXQgYm94XHJcbiAgICovXHJcbiAgdGl0bGU6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGl0ZW1zIHRvIGRpc3BsYXkgKGFycmF5IG9mIGl0ZW1zKS5cclxuICAgKi9cclxuICBpdGVtczogV2hlZWxTZWxlY3Rvckl0ZW1bXVtdO1xyXG5cclxuICAvKipcclxuICAgKiBXaGljaCBpdGVtcyB0byBkaXNwbGF5IGJ5IGRlZmF1bHQuXHJcbiAgICovXHJcbiAgZGVmYXVsdEl0ZW1zPzogRGVmYXVsdEl0ZW1bXTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlICdvaycgYnV0dG9uIHRleHRcclxuICAgKiBEZWZhdWx0OiBEb25lXHJcbiAgICovXHJcbiAgcG9zaXRpdmVCdXR0b25UZXh0Pzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgJ2NhbmNlbCcgYnV0dG9uIHRleHRcclxuICAgKiBEZWZhdWx0OiBDYW5jZWxcclxuICAgKi9cclxuICBuZWdhdGl2ZUJ1dHRvblRleHQ/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEFuZHJvaWQgb25seSAtIHRoZW1lIGNvbG9yLCAnbGlnaHQnIG9yICdkYXJrJy5cclxuICAgKiBEZWZhdWx0OiBsaWdodFxyXG4gICAqL1xyXG4gIHRoZW1lPzogJ2xpZ2h0JyB8ICdkYXJrJztcclxuXHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0byBoYXZlIHRoZSB3aGVlbHMgJ3dyYXAnIChBbmRyb2lkIG9ubHkpXHJcbiAgICogRGVmYXVsdDogZmFsc2VcclxuICAgKi9cclxuICB3cmFwV2hlZWxUZXh0PzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGpzb24ga2V5IHRvIGRpc3BsYXksIGJ5IGRlZmF1bHQgaXQgaXMgZGVzY3JpcHRpb24sIHRoaXMgYWxsb3dzIGZvciBzZXR0aW5nIGFueVxyXG4gICAqIGtleS92YWx1ZSB0byBiZSBkaXNwbGF5ZWRcclxuICAgKiBEZWZhdWx0OiBkZXNjcmlwdGlvblxyXG4gICAqL1xyXG4gIGRpc3BsYXlLZXk/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgV2hlZWxTZWxlY3RvckRhdGEge1xyXG4gIGRhdGE6IGFueTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBiZXRhXHJcbiAqIEBuYW1lIFdoZWVsU2VsZWN0b3IgUGx1Z2luXHJcbiAqIEBkZXNjcmlwdGlvbiBOYXRpdmUgd2hlZWwgc2VsZWN0b3IgZm9yIENvcmRvdmEgKEFuZHJvaWQvaU9TKS5cclxuICogQHVzYWdlXHJcbiAqIGBgYFxyXG4gKiBpbXBvcnQgeyBXaGVlbFNlbGVjdG9yIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3doZWVsLXNlbGVjdG9yL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc2VsZWN0b3I6IFdoZWVsU2VsZWN0b3IpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogY29uc3QganNvbkRhdGEgPSB7XHJcbiAqICAgbnVtYmVyczogW1xyXG4gKiAgICB7IGRlc2NyaXB0aW9uOiBcIjFcIiB9LFxyXG4gKiAgICAgeyBkZXNjcmlwdGlvbjogXCIyXCIgfSxcclxuICogICAgIHsgZGVzY3JpcHRpb246IFwiM1wiIH1cclxuICogICBdLFxyXG4gKiAgIGZydWl0czogW1xyXG4gKiAgICAgeyBkZXNjcmlwdGlvbjogXCJBcHBsZVwiIH0sXHJcbiAqICAgICB7IGRlc2NyaXB0aW9uOiBcIkJhbmFuYVwiIH0sXHJcbiAqICAgICB7IGRlc2NyaXB0aW9uOiBcIlRhbmdlcmluZVwiIH1cclxuICogICBdLFxyXG4gKiAgIGZpcnN0TmFtZXM6IFtcclxuICogICAgIHsgbmFtZTogXCJGcmVkXCIsIGlkOiAnMScgfSxcclxuICogICAgIHsgbmFtZTogXCJKYW5lXCIsIGlkOiAnMicgfSxcclxuICogICAgIHsgbmFtZTogXCJCb2JcIiwgaWQ6ICczJyB9LFxyXG4gKiAgICAgeyBuYW1lOiBcIkVhcmxcIiwgaWQ6ICc0JyB9LFxyXG4gKiAgICAgeyBuYW1lOiBcIkV1bmljZVwiLCBpZDogJzUnIH1cclxuICogICBdLFxyXG4gKiAgIGxhc3ROYW1lczogW1xyXG4gKiAgICAgeyBuYW1lOiBcIkpvaG5zb25cIiwgaWQ6ICcxMDAnIH0sXHJcbiAqICAgICB7IG5hbWU6IFwiRG9lXCIsIGlkOiAnMTAxJyB9LFxyXG4gKiAgICAgeyBuYW1lOiBcIktpbmlzaGl3YVwiLCBpZDogJzEwMicgfSxcclxuICogICAgIHsgbmFtZTogXCJHb3Jkb25cIiwgaWQ6ICcxMDMnIH0sXHJcbiAqICAgICB7IG5hbWU6IFwiU21pdGhcIiwgaWQ6ICcxMDQnIH1cclxuICogICBdXHJcbiAqIH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIC8vIGJhc2ljIG51bWJlciBzZWxlY3Rpb24sIGluZGV4IGlzIGFsd2F5cyByZXR1cm5lZCBpbiB0aGUgcmVzdWx0XHJcbiAqICBzZWxlY3RBTnVtYmVyKCkge1xyXG4gKiAgICB0aGlzLnNlbGVjdG9yLnNob3coe1xyXG4gKiAgICAgIHRpdGxlOiBcIkhvdyBNYW55P1wiLFxyXG4gKiAgICAgIGl0ZW1zOiBbXHJcbiAqICAgICAgICB0aGlzLmpzb25EYXRhLm51bWJlcnNcclxuICogICAgICBdLFxyXG4gKiAgICB9KS50aGVuKFxyXG4gKiAgICAgIHJlc3VsdCA9PiB7XHJcbiAqICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHRbMF0uZGVzY3JpcHRpb24gKyAnIGF0IGluZGV4OiAnICsgcmVzdWx0WzBdLmluZGV4KTtcclxuICogICAgICB9LFxyXG4gKiAgICAgIGVyciA9PiBjb25zb2xlLmxvZygnRXJyb3I6ICcsIGVycilcclxuICogICAgICApO1xyXG4gKiAgfVxyXG4gKlxyXG4gKiAgLi4uXHJcbiAqXHJcbiAqICAvLyBiYXNpYyBzZWxlY3Rpb24sIHNldHRpbmcgaW5pdGlhbCBkaXNwbGF5ZWQgZGVmYXVsdCB2YWx1ZXM6ICczJyAnQmFuYW5hJ1xyXG4gKiAgc2VsZWN0RnJ1aXQoKSB7XHJcbiAqICAgIHRoaXMuc2VsZWN0b3Iuc2hvdyh7XHJcbiAqICAgICAgdGl0bGU6IFwiSG93IE11Y2g/XCIsXHJcbiAqICAgICAgaXRlbXM6IFtcclxuICogICAgICAgIHRoaXMuanNvbkRhdGEubnVtYmVycywgdGhpcy5qc29uRGF0YS5mcnVpdHNcclxuICogICAgICBdLFxyXG4gKiAgICAgIHBvc2l0aXZlQnV0dG9uVGV4dDogXCJPa1wiLFxyXG4gKiAgICAgIG5lZ2F0aXZlQnV0dG9uVGV4dDogXCJOb3BlXCIsXHJcbiAqICAgICAgZGVmYXVsdEl0ZW1zOiBbXHJcbiAqICBcdCAge2luZGV4OjAsIHZhbHVlOiB0aGlzLmpzb25EYXRhLm51bWJlcnNbMl0uZGVzY3JpcHRpb259LFxyXG4gKiAgXHQgIHtpbmRleDogMSwgdmFsdWU6IHRoaXMuanNvbkRhdGEuZnJ1aXRzWzNdLmRlc2NyaXB0aW9ufVxyXG4gKiAgXHRdXHJcbiAqICAgIH0pLnRoZW4oXHJcbiAqICAgICAgcmVzdWx0ID0+IHtcclxuICogICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdFswXS5kZXNjcmlwdGlvbiArICcgJyArIHJlc3VsdFsxXS5kZXNjcmlwdGlvbik7XHJcbiAqICAgICAgfSxcclxuICogICAgICBlcnIgPT4gY29uc29sZS5sb2coJ0Vycm9yOiAnICsgSlNPTi5zdHJpbmdpZnkoZXJyKSlcclxuICogICAgICApO1xyXG4gKiAgfVxyXG4gKlxyXG4gKiAgLi4uXHJcbiAqXHJcbiAqICAvLyBtb3JlIGNvbXBsZXggYXMgb3ZlcnJpZGVzIHdoaWNoIGtleSB0byBkaXNwbGF5XHJcbiAqICAvLyB0aGVuIHJldHJpZXZlIHByb3BlcnRpZXMgZnJvbSBvcmlnaW5hbCBkYXRhXHJcbiAqICBzZWxlY3ROYW1lc1VzaW5nRGlzcGxheUtleSgpIHtcclxuICogICAgdGhpcy5zZWxlY3Rvci5zaG93KHtcclxuICogICAgICB0aXRsZTogXCJXaG8/XCIsXHJcbiAqICAgICAgaXRlbXM6IFtcclxuICogICAgICAgIHRoaXMuanNvbkRhdGEuZmlyc3ROYW1lcywgdGhpcy5qc29uRGF0YS5sYXN0TmFtZXNcclxuICogICAgICBdLFxyXG4gKiAgICAgIGRpc3BsYXlLZXk6ICduYW1lJyxcclxuICogICAgICBkZWZhdWx0SXRlbXM6IFtcclxuICogIFx0ICB7aW5kZXg6MCwgdmFsdWU6IHRoaXMuanNvbkRhdGEuZmlyc3ROYW1lc1syXS5uYW1lfSxcclxuICogICAgICAgIHtpbmRleDogMCwgdmFsdWU6IHRoaXMuanNvbkRhdGEubGFzdE5hbWVzWzNdLm5hbWV9XHJcbiAqICAgICAgXVxyXG4gKiAgICB9KS50aGVuKFxyXG4gKiAgICAgIHJlc3VsdCA9PiB7XHJcbiAqICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHRbMF0ubmFtZSArICcgKGlkPSAnICsgdGhpcy5qc29uRGF0YS5maXJzdE5hbWVzW3Jlc3VsdFswXS5pbmRleF0uaWQgKyAnKSwgJyArXHJcbiAqICAgICAgICAgIHJlc3VsdFsxXS5uYW1lICsgJyAoaWQ9JyArIHRoaXMuanNvbkRhdGEubGFzdE5hbWVzW3Jlc3VsdFsxXS5pbmRleF0uaWQgKyAnKScpO1xyXG4gKiAgICAgIH0sXHJcbiAqICAgICAgZXJyID0+IGNvbnNvbGUubG9nKCdFcnJvcjogJyArIEpTT04uc3RyaW5naWZ5KGVycikpXHJcbiAqICAgICAgKTtcclxuICogIH1cclxuICpcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIFdoZWVsU2VsZWN0b3JPcHRpb25zXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnV2hlZWxTZWxlY3RvcicsXHJcbiAgcGx1Z2luOiAnY29yZG92YS13aGVlbC1zZWxlY3Rvci1wbHVnaW4nLFxyXG4gIHBsdWdpblJlZjogJ1NlbGVjdG9yQ29yZG92YVBsdWdpbicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9qYXNvbm1hbXkvY29yZG92YS13aGVlbC1zZWxlY3Rvci1wbHVnaW4nLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBXaGVlbFNlbGVjdG9yIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFNob3dzIHRoZSB3aGVlbCBzZWxlY3RvclxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtXaGVlbFNlbGVjdG9yT3B0aW9uc30gb3B0aW9ucyBPcHRpb25zIGZvciB0aGUgd2hlZWwgc2VsZWN0b3JcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxXaGVlbFNlbGVjdG9yRGF0YT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgc2VsZWN0ZWQgaXRlbXMsIG9yIGFuIGVycm9yLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzaG93KG9wdGlvbnM6IFdoZWVsU2VsZWN0b3JPcHRpb25zKTogUHJvbWlzZTxXaGVlbFNlbGVjdG9yRGF0YT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGlkZSB0aGUgc2VsZWN0b3JcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHBsYXRmb3JtczogWydpT1MnXSxcclxuICB9KVxyXG4gIGhpZGVTZWxlY3RvcigpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19