import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var WheelSelector = /** @class */ (function (_super) {
    __extends(WheelSelector, _super);
    function WheelSelector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WheelSelector.prototype.show = function (options) { return cordova(this, "show", {}, arguments); };
    WheelSelector.prototype.hideSelector = function () { return cordova(this, "hideSelector", { "platforms": ["iOS"] }, arguments); };
    WheelSelector.pluginName = "WheelSelector";
    WheelSelector.plugin = "cordova-wheel-selector-plugin";
    WheelSelector.pluginRef = "SelectorCordovaPlugin";
    WheelSelector.repo = "https://github.com/jasonmamy/cordova-wheel-selector-plugin";
    WheelSelector.platforms = ["Android", "iOS"];
    WheelSelector.decorators = [
        { type: Injectable }
    ];
    return WheelSelector;
}(AwesomeCordovaNativePlugin));
export { WheelSelector };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvd2hlZWwtc2VsZWN0b3Ivbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBbUx6RCxpQ0FBMEI7Ozs7SUFRM0QsNEJBQUksYUFBQyxPQUE2QjtJQVlsQyxvQ0FBWTs7Ozs7OztnQkFyQmIsVUFBVTs7d0JBbkxYO0VBb0xtQywwQkFBMEI7U0FBaEQsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgV2hlZWxTZWxlY3Rvckl0ZW0ge1xyXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERlZmF1bHRJdGVtIHtcclxuICBpbmRleDogbnVtYmVyO1xyXG4gIHZhbHVlOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgV2hlZWxTZWxlY3Rvck9wdGlvbnMge1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0aXRsZSBvZiB0aGUgc2VsZWN0b3IncyBpbnB1dCBib3hcclxuICAgKi9cclxuICB0aXRsZTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgaXRlbXMgdG8gZGlzcGxheSAoYXJyYXkgb2YgaXRlbXMpLlxyXG4gICAqL1xyXG4gIGl0ZW1zOiBXaGVlbFNlbGVjdG9ySXRlbVtdW107XHJcblxyXG4gIC8qKlxyXG4gICAqIFdoaWNoIGl0ZW1zIHRvIGRpc3BsYXkgYnkgZGVmYXVsdC5cclxuICAgKi9cclxuICBkZWZhdWx0SXRlbXM/OiBEZWZhdWx0SXRlbVtdO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgJ29rJyBidXR0b24gdGV4dFxyXG4gICAqIERlZmF1bHQ6IERvbmVcclxuICAgKi9cclxuICBwb3NpdGl2ZUJ1dHRvblRleHQ/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSAnY2FuY2VsJyBidXR0b24gdGV4dFxyXG4gICAqIERlZmF1bHQ6IENhbmNlbFxyXG4gICAqL1xyXG4gIG5lZ2F0aXZlQnV0dG9uVGV4dD86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQW5kcm9pZCBvbmx5IC0gdGhlbWUgY29sb3IsICdsaWdodCcgb3IgJ2RhcmsnLlxyXG4gICAqIERlZmF1bHQ6IGxpZ2h0XHJcbiAgICovXHJcbiAgdGhlbWU/OiAnbGlnaHQnIHwgJ2RhcmsnO1xyXG5cclxuICAvKipcclxuICAgKiBXaGV0aGVyIHRvIGhhdmUgdGhlIHdoZWVscyAnd3JhcCcgKEFuZHJvaWQgb25seSlcclxuICAgKiBEZWZhdWx0OiBmYWxzZVxyXG4gICAqL1xyXG4gIHdyYXBXaGVlbFRleHQ/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUganNvbiBrZXkgdG8gZGlzcGxheSwgYnkgZGVmYXVsdCBpdCBpcyBkZXNjcmlwdGlvbiwgdGhpcyBhbGxvd3MgZm9yIHNldHRpbmcgYW55XHJcbiAgICoga2V5L3ZhbHVlIHRvIGJlIGRpc3BsYXllZFxyXG4gICAqIERlZmF1bHQ6IGRlc2NyaXB0aW9uXHJcbiAgICovXHJcbiAgZGlzcGxheUtleT86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBXaGVlbFNlbGVjdG9yRGF0YSB7XHJcbiAgZGF0YTogYW55O1xyXG59XHJcblxyXG4vKipcclxuICogQGJldGFcclxuICogQG5hbWUgV2hlZWxTZWxlY3RvciBQbHVnaW5cclxuICogQGRlc2NyaXB0aW9uIE5hdGl2ZSB3aGVlbCBzZWxlY3RvciBmb3IgQ29yZG92YSAoQW5kcm9pZC9pT1MpLlxyXG4gKiBAdXNhZ2VcclxuICogYGBgXHJcbiAqIGltcG9ydCB7IFdoZWVsU2VsZWN0b3IgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvd2hlZWwtc2VsZWN0b3Ivbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBzZWxlY3RvcjogV2hlZWxTZWxlY3RvcikgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiBjb25zdCBqc29uRGF0YSA9IHtcclxuICogICBudW1iZXJzOiBbXHJcbiAqICAgIHsgZGVzY3JpcHRpb246IFwiMVwiIH0sXHJcbiAqICAgICB7IGRlc2NyaXB0aW9uOiBcIjJcIiB9LFxyXG4gKiAgICAgeyBkZXNjcmlwdGlvbjogXCIzXCIgfVxyXG4gKiAgIF0sXHJcbiAqICAgZnJ1aXRzOiBbXHJcbiAqICAgICB7IGRlc2NyaXB0aW9uOiBcIkFwcGxlXCIgfSxcclxuICogICAgIHsgZGVzY3JpcHRpb246IFwiQmFuYW5hXCIgfSxcclxuICogICAgIHsgZGVzY3JpcHRpb246IFwiVGFuZ2VyaW5lXCIgfVxyXG4gKiAgIF0sXHJcbiAqICAgZmlyc3ROYW1lczogW1xyXG4gKiAgICAgeyBuYW1lOiBcIkZyZWRcIiwgaWQ6ICcxJyB9LFxyXG4gKiAgICAgeyBuYW1lOiBcIkphbmVcIiwgaWQ6ICcyJyB9LFxyXG4gKiAgICAgeyBuYW1lOiBcIkJvYlwiLCBpZDogJzMnIH0sXHJcbiAqICAgICB7IG5hbWU6IFwiRWFybFwiLCBpZDogJzQnIH0sXHJcbiAqICAgICB7IG5hbWU6IFwiRXVuaWNlXCIsIGlkOiAnNScgfVxyXG4gKiAgIF0sXHJcbiAqICAgbGFzdE5hbWVzOiBbXHJcbiAqICAgICB7IG5hbWU6IFwiSm9obnNvblwiLCBpZDogJzEwMCcgfSxcclxuICogICAgIHsgbmFtZTogXCJEb2VcIiwgaWQ6ICcxMDEnIH0sXHJcbiAqICAgICB7IG5hbWU6IFwiS2luaXNoaXdhXCIsIGlkOiAnMTAyJyB9LFxyXG4gKiAgICAgeyBuYW1lOiBcIkdvcmRvblwiLCBpZDogJzEwMycgfSxcclxuICogICAgIHsgbmFtZTogXCJTbWl0aFwiLCBpZDogJzEwNCcgfVxyXG4gKiAgIF1cclxuICogfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogLy8gYmFzaWMgbnVtYmVyIHNlbGVjdGlvbiwgaW5kZXggaXMgYWx3YXlzIHJldHVybmVkIGluIHRoZSByZXN1bHRcclxuICogIHNlbGVjdEFOdW1iZXIoKSB7XHJcbiAqICAgIHRoaXMuc2VsZWN0b3Iuc2hvdyh7XHJcbiAqICAgICAgdGl0bGU6IFwiSG93IE1hbnk/XCIsXHJcbiAqICAgICAgaXRlbXM6IFtcclxuICogICAgICAgIHRoaXMuanNvbkRhdGEubnVtYmVyc1xyXG4gKiAgICAgIF0sXHJcbiAqICAgIH0pLnRoZW4oXHJcbiAqICAgICAgcmVzdWx0ID0+IHtcclxuICogICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdFswXS5kZXNjcmlwdGlvbiArICcgYXQgaW5kZXg6ICcgKyByZXN1bHRbMF0uaW5kZXgpO1xyXG4gKiAgICAgIH0sXHJcbiAqICAgICAgZXJyID0+IGNvbnNvbGUubG9nKCdFcnJvcjogJywgZXJyKVxyXG4gKiAgICAgICk7XHJcbiAqICB9XHJcbiAqXHJcbiAqICAuLi5cclxuICpcclxuICogIC8vIGJhc2ljIHNlbGVjdGlvbiwgc2V0dGluZyBpbml0aWFsIGRpc3BsYXllZCBkZWZhdWx0IHZhbHVlczogJzMnICdCYW5hbmEnXHJcbiAqICBzZWxlY3RGcnVpdCgpIHtcclxuICogICAgdGhpcy5zZWxlY3Rvci5zaG93KHtcclxuICogICAgICB0aXRsZTogXCJIb3cgTXVjaD9cIixcclxuICogICAgICBpdGVtczogW1xyXG4gKiAgICAgICAgdGhpcy5qc29uRGF0YS5udW1iZXJzLCB0aGlzLmpzb25EYXRhLmZydWl0c1xyXG4gKiAgICAgIF0sXHJcbiAqICAgICAgcG9zaXRpdmVCdXR0b25UZXh0OiBcIk9rXCIsXHJcbiAqICAgICAgbmVnYXRpdmVCdXR0b25UZXh0OiBcIk5vcGVcIixcclxuICogICAgICBkZWZhdWx0SXRlbXM6IFtcclxuICogIFx0ICB7aW5kZXg6MCwgdmFsdWU6IHRoaXMuanNvbkRhdGEubnVtYmVyc1syXS5kZXNjcmlwdGlvbn0sXHJcbiAqICBcdCAge2luZGV4OiAxLCB2YWx1ZTogdGhpcy5qc29uRGF0YS5mcnVpdHNbM10uZGVzY3JpcHRpb259XHJcbiAqICBcdF1cclxuICogICAgfSkudGhlbihcclxuICogICAgICByZXN1bHQgPT4ge1xyXG4gKiAgICAgICAgY29uc29sZS5sb2cocmVzdWx0WzBdLmRlc2NyaXB0aW9uICsgJyAnICsgcmVzdWx0WzFdLmRlc2NyaXB0aW9uKTtcclxuICogICAgICB9LFxyXG4gKiAgICAgIGVyciA9PiBjb25zb2xlLmxvZygnRXJyb3I6ICcgKyBKU09OLnN0cmluZ2lmeShlcnIpKVxyXG4gKiAgICAgICk7XHJcbiAqICB9XHJcbiAqXHJcbiAqICAuLi5cclxuICpcclxuICogIC8vIG1vcmUgY29tcGxleCBhcyBvdmVycmlkZXMgd2hpY2gga2V5IHRvIGRpc3BsYXlcclxuICogIC8vIHRoZW4gcmV0cmlldmUgcHJvcGVydGllcyBmcm9tIG9yaWdpbmFsIGRhdGFcclxuICogIHNlbGVjdE5hbWVzVXNpbmdEaXNwbGF5S2V5KCkge1xyXG4gKiAgICB0aGlzLnNlbGVjdG9yLnNob3coe1xyXG4gKiAgICAgIHRpdGxlOiBcIldobz9cIixcclxuICogICAgICBpdGVtczogW1xyXG4gKiAgICAgICAgdGhpcy5qc29uRGF0YS5maXJzdE5hbWVzLCB0aGlzLmpzb25EYXRhLmxhc3ROYW1lc1xyXG4gKiAgICAgIF0sXHJcbiAqICAgICAgZGlzcGxheUtleTogJ25hbWUnLFxyXG4gKiAgICAgIGRlZmF1bHRJdGVtczogW1xyXG4gKiAgXHQgIHtpbmRleDowLCB2YWx1ZTogdGhpcy5qc29uRGF0YS5maXJzdE5hbWVzWzJdLm5hbWV9LFxyXG4gKiAgICAgICAge2luZGV4OiAwLCB2YWx1ZTogdGhpcy5qc29uRGF0YS5sYXN0TmFtZXNbM10ubmFtZX1cclxuICogICAgICBdXHJcbiAqICAgIH0pLnRoZW4oXHJcbiAqICAgICAgcmVzdWx0ID0+IHtcclxuICogICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdFswXS5uYW1lICsgJyAoaWQ9ICcgKyB0aGlzLmpzb25EYXRhLmZpcnN0TmFtZXNbcmVzdWx0WzBdLmluZGV4XS5pZCArICcpLCAnICtcclxuICogICAgICAgICAgcmVzdWx0WzFdLm5hbWUgKyAnIChpZD0nICsgdGhpcy5qc29uRGF0YS5sYXN0TmFtZXNbcmVzdWx0WzFdLmluZGV4XS5pZCArICcpJyk7XHJcbiAqICAgICAgfSxcclxuICogICAgICBlcnIgPT4gY29uc29sZS5sb2coJ0Vycm9yOiAnICsgSlNPTi5zdHJpbmdpZnkoZXJyKSlcclxuICogICAgICApO1xyXG4gKiAgfVxyXG4gKlxyXG4gKiBgYGBcclxuICogQGludGVyZmFjZXNcclxuICogV2hlZWxTZWxlY3Rvck9wdGlvbnNcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdXaGVlbFNlbGVjdG9yJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXdoZWVsLXNlbGVjdG9yLXBsdWdpbicsXHJcbiAgcGx1Z2luUmVmOiAnU2VsZWN0b3JDb3Jkb3ZhUGx1Z2luJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2phc29ubWFteS9jb3Jkb3ZhLXdoZWVsLXNlbGVjdG9yLXBsdWdpbicsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFdoZWVsU2VsZWN0b3IgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogU2hvd3MgdGhlIHdoZWVsIHNlbGVjdG9yXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1doZWVsU2VsZWN0b3JPcHRpb25zfSBvcHRpb25zIE9wdGlvbnMgZm9yIHRoZSB3aGVlbCBzZWxlY3RvclxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFdoZWVsU2VsZWN0b3JEYXRhPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBzZWxlY3RlZCBpdGVtcywgb3IgYW4gZXJyb3IuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNob3cob3B0aW9uczogV2hlZWxTZWxlY3Rvck9wdGlvbnMpOiBQcm9taXNlPFdoZWVsU2VsZWN0b3JEYXRhPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIaWRlIHRoZSBzZWxlY3RvclxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgcGxhdGZvcm1zOiBbJ2lPUyddLFxyXG4gIH0pXHJcbiAgaGlkZVNlbGVjdG9yKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=