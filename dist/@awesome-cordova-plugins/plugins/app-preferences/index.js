var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var AppPreferencesOriginal = /** @class */ (function (_super) {
    __extends(AppPreferencesOriginal, _super);
    function AppPreferencesOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppPreferencesOriginal.prototype.fetch = function (dict, key) { return cordova(this, "fetch", { "callbackOrder": "reverse" }, arguments); };
    AppPreferencesOriginal.prototype.store = function (dict, key, value) { return cordova(this, "store", { "callbackOrder": "reverse" }, arguments); };
    AppPreferencesOriginal.prototype.remove = function (dict, key) { return cordova(this, "remove", { "callbackOrder": "reverse" }, arguments); };
    AppPreferencesOriginal.prototype.clearAll = function () { return cordova(this, "clearAll", { "callbackOrder": "reverse" }, arguments); };
    AppPreferencesOriginal.prototype.show = function () { return cordova(this, "show", { "callbackOrder": "reverse" }, arguments); };
    AppPreferencesOriginal.prototype.watch = function (subscribe) { return cordova(this, "watch", { "observable": true }, arguments); };
    AppPreferencesOriginal.prototype.suite = function (suiteName) { return cordova(this, "suite", { "platforms": ["Android"], "sync": true }, arguments); };
    AppPreferencesOriginal.prototype.iosSuite = function (suiteName) { return cordova(this, "iosSuite", { "platforms": ["iOS"], "sync": true }, arguments); };
    AppPreferencesOriginal.prototype.cloudSync = function () { return cordova(this, "cloudSync", { "platforms": ["iOS", "Windows", "Windows Phone 8"] }, arguments); };
    AppPreferencesOriginal.prototype.defaults = function () { return cordova(this, "defaults", { "platforms": ["iOS", "Windows", "Windows Phone 8"] }, arguments); };
    AppPreferencesOriginal.pluginName = "AppPreferences";
    AppPreferencesOriginal.plugin = "cordova-plugin-app-preferences";
    AppPreferencesOriginal.pluginRef = "plugins.appPreferences";
    AppPreferencesOriginal.repo = "https://github.com/apla/me.apla.cordova.app-preferences";
    AppPreferencesOriginal.platforms = ["Android", "BlackBerry 10", "Browser", "iOS", "macOS", "Windows 8", "Windows Phone"];
    return AppPreferencesOriginal;
}(AwesomeCordovaNativePlugin));
var AppPreferences = new AppPreferencesOriginal();
export { AppPreferences };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYXBwLXByZWZlcmVuY2VzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDO0FBQzVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBMkJFLGtDQUEwQjs7OztJQVc1RCw4QkFBSyxhQUFDLElBQVksRUFBRSxHQUFZO0lBZWhDLDhCQUFLLGFBQUMsSUFBWSxFQUFFLEdBQVcsRUFBRSxLQUFXO0lBYzVDLCtCQUFNLGFBQUMsSUFBWSxFQUFFLEdBQVk7SUFZakMsaUNBQVE7SUFZUiw2QkFBSTtJQWFKLDhCQUFLLGFBQUMsU0FBa0I7SUFnQnhCLDhCQUFLLGFBQUMsU0FBaUI7SUFRdkIsaUNBQVEsYUFBQyxTQUFpQjtJQWExQixrQ0FBUztJQWFULGlDQUFROzs7Ozs7eUJBM0pWO0VBNEJvQywwQkFBMEI7U0FBakQsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lIEFwcCBQcmVmZXJlbmNlc1xyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gYWxsb3dzIHlvdSB0byByZWFkIGFuZCB3cml0ZSBhcHAgcHJlZmVyZW5jZXNcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgQXBwUHJlZmVyZW5jZXMgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvYXBwLXByZWZlcmVuY2VzL25neCc7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwUHJlZmVyZW5jZXM6IEFwcFByZWZlcmVuY2VzKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIHRoaXMuYXBwUHJlZmVyZW5jZXMuZmV0Y2goJ2tleScpLnRoZW4oKHJlcykgPT4geyBjb25zb2xlLmxvZyhyZXMpOyB9KTtcclxuICpcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnQXBwUHJlZmVyZW5jZXMnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWFwcC1wcmVmZXJlbmNlcycsXHJcbiAgcGx1Z2luUmVmOiAncGx1Z2lucy5hcHBQcmVmZXJlbmNlcycsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9hcGxhL21lLmFwbGEuY29yZG92YS5hcHAtcHJlZmVyZW5jZXMnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ0JsYWNrQmVycnkgMTAnLCAnQnJvd3NlcicsICdpT1MnLCAnbWFjT1MnLCAnV2luZG93cyA4JywgJ1dpbmRvd3MgUGhvbmUnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQXBwUHJlZmVyZW5jZXMgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogR2V0IGEgcHJlZmVyZW5jZSB2YWx1ZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRpY3QgRGljdGlvbmFyeSBmb3Iga2V5IChPUFRJT05BTClcclxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IEtleVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxyXG4gIH0pXHJcbiAgZmV0Y2goZGljdDogc3RyaW5nLCBrZXk/OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IGEgcHJlZmVyZW5jZSB2YWx1ZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRpY3QgRGljdGlvbmFyeSBmb3Iga2V5IChPUFRJT05BTClcclxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IEtleVxyXG4gICAqIEBwYXJhbSB7YW55fSB2YWx1ZSBWYWx1ZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxyXG4gIH0pXHJcbiAgc3RvcmUoZGljdDogc3RyaW5nLCBrZXk6IHN0cmluZywgdmFsdWU/OiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlIHZhbHVlIGZyb20gcHJlZmVyZW5jZXNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkaWN0IERpY3Rpb25hcnkgZm9yIGtleSAoT1BUSU9OQUwpXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBLZXlcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICB9KVxyXG4gIHJlbW92ZShkaWN0OiBzdHJpbmcsIGtleT86IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbGVhciBwcmVmZXJlbmNlc1xyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgfSlcclxuICBjbGVhckFsbCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2hvdyBuYXRpdmUgcHJlZmVyZW5jZXMgaW50ZXJmYWNlXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICB9KVxyXG4gIHNob3coKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNob3cgbmF0aXZlIHByZWZlcmVuY2VzIGludGVyZmFjZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdWJzY3JpYmUgdHJ1ZSB2YWx1ZSB0byBzdWJzY3JpYmUsIGZhbHNlIC0gdW5zdWJzY3JpYmVcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fSBSZXR1cm5zIGFuIG9ic2VydmFibGVcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxyXG4gIH0pXHJcbiAgd2F0Y2goc3Vic2NyaWJlOiBib29sZWFuKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybiBuYW1lZCBjb25maWd1cmF0aW9uIGNvbnRleHRcclxuICAgKiBJbiBpT1MgeW91J2xsIGdldCBhIHN1aXRlIGNvbmZpZ3VyYXRpb24sIG9uIEFuZHJvaWQg4oCUIG5hbWVkIGZpbGVcclxuICAgKiBTdXBwb3J0czogQW5kcm9pZCwgaU9TXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3VpdGVOYW1lIHN1aXRlIG5hbWVcclxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBDdXN0b20gb2JqZWN0LCBib3VuZCB0byB0aGF0IHN1aXRlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXSxcclxuICAgIHN5bmM6IHRydWUsXHJcbiAgfSlcclxuICBzdWl0ZShzdWl0ZU5hbWU6IHN0cmluZyk6IGFueSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBAQ29yZG92YSh7XHJcbiAgICBwbGF0Zm9ybXM6IFsnaU9TJ10sXHJcbiAgICBzeW5jOiB0cnVlLFxyXG4gIH0pXHJcbiAgaW9zU3VpdGUoc3VpdGVOYW1lOiBzdHJpbmcpOiBhbnkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJuIGNsb3VkIHN5bmNocm9uaXplZCBjb25maWd1cmF0aW9uIGNvbnRleHRcclxuICAgKiBDdXJyZW50bHkgc3VwcG9ydHMgV2luZG93cyBhbmQgaU9TL21hY09TXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBDdXN0b20gb2JqZWN0LCBib3VuZCB0byB0aGF0IHN1aXRlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgcGxhdGZvcm1zOiBbJ2lPUycsICdXaW5kb3dzJywgJ1dpbmRvd3MgUGhvbmUgOCddLFxyXG4gIH0pXHJcbiAgY2xvdWRTeW5jKCk6IE9iamVjdCB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm4gZGVmYXVsdCBjb25maWd1cmF0aW9uIGNvbnRleHRcclxuICAgKiBDdXJyZW50bHkgc3VwcG9ydHMgV2luZG93cyBhbmQgaU9TL21hY09TXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBDdXN0b20gT2JqZWN0LCBib3VuZCB0byB0aGF0IHN1aXRlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgcGxhdGZvcm1zOiBbJ2lPUycsICdXaW5kb3dzJywgJ1dpbmRvd3MgUGhvbmUgOCddLFxyXG4gIH0pXHJcbiAgZGVmYXVsdHMoKTogT2JqZWN0IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19