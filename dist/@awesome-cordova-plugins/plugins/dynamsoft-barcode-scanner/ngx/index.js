import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
export var EnumResolution;
(function (EnumResolution) {
    EnumResolution[EnumResolution["RESOLUTION_AUTO"] = 0] = "RESOLUTION_AUTO";
    EnumResolution[EnumResolution["RESOLUTION_480P"] = 1] = "RESOLUTION_480P";
    EnumResolution[EnumResolution["RESOLUTION_720P"] = 2] = "RESOLUTION_720P";
    EnumResolution[EnumResolution["RESOLUTION_1080P"] = 3] = "RESOLUTION_1080P";
    EnumResolution[EnumResolution["RESOLUTION_2K"] = 4] = "RESOLUTION_2K";
    EnumResolution[EnumResolution["RESOLUTION_4K"] = 5] = "RESOLUTION_4K";
})(EnumResolution || (EnumResolution = {}));
var BarcodeScanner = /** @class */ (function (_super) {
    __extends(BarcodeScanner, _super);
    function BarcodeScanner() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BarcodeScanner.prototype.init = function (license) { return cordova(this, "init", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.initRuntimeSettingsWithString = function (settings) { return cordova(this, "initRuntimeSettingsWithString", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.outputSettingsToString = function () { return cordova(this, "outputSettingsToString", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.destroy = function () { return cordova(this, "destroy", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.startScanning = function (options) { return cordova(this, "startScanning", { "successIndex": 1, "errorIndex": 2, "observable": true }, arguments); };
    BarcodeScanner.prototype.stopScanning = function () { return cordova(this, "stopScanning", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.resumeScanning = function () { return cordova(this, "resumeScanning", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.pauseScanning = function () { return cordova(this, "pauseScanning", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.getResolution = function () { return cordova(this, "getResolution", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.switchTorch = function (desiredStatus) { return cordova(this, "switchTorch", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.setZoom = function (factor) { return cordova(this, "setZoom", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.setFocus = function (point) { return cordova(this, "setFocus", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.pluginName = "dynamsoft-barcode-scanner";
    BarcodeScanner.plugin = "cordova-plugin-dynamsoft-barcode-reader";
    BarcodeScanner.pluginRef = "cordova.plugins.DBR";
    BarcodeScanner.repo = "https://github.com/xulihang/cordova-plugin-dynamsoft-barcode-reader";
    BarcodeScanner.install = "";
    BarcodeScanner.installVariables = [];
    BarcodeScanner.platforms = ["Android", "iOS"];
    BarcodeScanner.decorators = [
        { type: Injectable }
    ];
    return BarcodeScanner;
}(AwesomeCordovaNativePlugin));
export { BarcodeScanner };
//# sourceMappingURL=data:application/json;base64,