import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';
var AnalyticsFirebase = /** @class */ (function (_super) {
    __extends(AnalyticsFirebase, _super);
    function AnalyticsFirebase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnalyticsFirebase.prototype.logEvent = function (eventName, eventParams) { return cordova(this, "logEvent", {}, arguments); };
    AnalyticsFirebase.prototype.resetAnalyticsData = function () { return cordova(this, "resetAnalyticsData", {}, arguments); };
    AnalyticsFirebase.prototype.setAnalyticsCollectionEnabled = function (enabled) { return cordova(this, "setAnalyticsCollectionEnabled", {}, arguments); };
    AnalyticsFirebase.prototype.setCurrentScreen = function (screenName) { return cordova(this, "setCurrentScreen", {}, arguments); };
    AnalyticsFirebase.prototype.setMinimumSessionDuration = function (milliseconds) { return cordova(this, "setMinimumSessionDuration", {}, arguments); };
    AnalyticsFirebase.prototype.setSessionTimeoutDuration = function (milliseconds) { return cordova(this, "setSessionTimeoutDuration", {}, arguments); };
    AnalyticsFirebase.prototype.setUserId = function (userId) { return cordova(this, "setUserId", {}, arguments); };
    AnalyticsFirebase.prototype.setUserProperty = function (userPropertyName, userPropertyValue) { return cordova(this, "setUserProperty", {}, arguments); };
    Object.defineProperty(AnalyticsFirebase.prototype, "DEFAULT_EVENTS", {
        get: function () { return cordovaPropertyGet(this, "DEFAULT_EVENTS"); },
        set: function (value) { cordovaPropertySet(this, "DEFAULT_EVENTS", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnalyticsFirebase.prototype, "DEFAULT_PARAMS", {
        get: function () { return cordovaPropertyGet(this, "DEFAULT_PARAMS"); },
        set: function (value) { cordovaPropertySet(this, "DEFAULT_PARAMS", value); },
        enumerable: false,
        configurable: true
    });
    AnalyticsFirebase.pluginName = "AnalyticsFirebase";
    AnalyticsFirebase.plugin = "cordova-plugin-analytics";
    AnalyticsFirebase.pluginRef = "analytics";
    AnalyticsFirebase.repo = "https://github.com/appfeel/analytics-google";
    AnalyticsFirebase.platforms = ["Android", "iOS"];
    AnalyticsFirebase.decorators = [
        { type: Injectable }
    ];
    return AnalyticsFirebase;
}(AwesomeCordovaNativePlugin));
export { AnalyticsFirebase };
//# sourceMappingURL=data:application/json;base64,