import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var HealthKit = /** @class */ (function (_super) {
    __extends(HealthKit, _super);
    function HealthKit() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HealthKit.prototype.available = function () { return cordova(this, "available", {}, arguments); };
    HealthKit.prototype.checkAuthStatus = function (options) { return cordova(this, "checkAuthStatus", {}, arguments); };
    HealthKit.prototype.requestAuthorization = function (options) { return cordova(this, "requestAuthorization", {}, arguments); };
    HealthKit.prototype.readDateOfBirth = function () { return cordova(this, "readDateOfBirth", {}, arguments); };
    HealthKit.prototype.readGender = function () { return cordova(this, "readGender", {}, arguments); };
    HealthKit.prototype.readBloodType = function () { return cordova(this, "readBloodType", {}, arguments); };
    HealthKit.prototype.readFitzpatrickSkinType = function () { return cordova(this, "readFitzpatrickSkinType", {}, arguments); };
    HealthKit.prototype.saveWeight = function (options) { return cordova(this, "saveWeight", {}, arguments); };
    HealthKit.prototype.readWeight = function (options) { return cordova(this, "readWeight", {}, arguments); };
    HealthKit.prototype.saveHeight = function (options) { return cordova(this, "saveHeight", {}, arguments); };
    HealthKit.prototype.readHeight = function (options) { return cordova(this, "readHeight", {}, arguments); };
    HealthKit.prototype.findWorkouts = function () { return cordova(this, "findWorkouts", {}, arguments); };
    HealthKit.prototype.saveWorkout = function (options) { return cordova(this, "saveWorkout", {}, arguments); };
    HealthKit.prototype.querySampleType = function (options) { return cordova(this, "querySampleType", {}, arguments); };
    HealthKit.prototype.querySampleTypeAggregated = function (options) { return cordova(this, "querySampleTypeAggregated", {}, arguments); };
    HealthKit.prototype.deleteSamples = function (options) { return cordova(this, "deleteSamples", {}, arguments); };
    HealthKit.prototype.monitorSampleType = function (options) { return cordova(this, "monitorSampleType", {}, arguments); };
    HealthKit.prototype.sumQuantityType = function (options) { return cordova(this, "sumQuantityType", {}, arguments); };
    HealthKit.prototype.saveQuantitySample = function (options) { return cordova(this, "saveQuantitySample", {}, arguments); };
    HealthKit.prototype.saveCorrelation = function (options) { return cordova(this, "saveCorrelation", {}, arguments); };
    HealthKit.prototype.queryCorrelationType = function (options) { return cordova(this, "queryCorrelationType", {}, arguments); };
    HealthKit.pluginName = "HealthKit";
    HealthKit.plugin = "com.telerik.plugins.healthkit";
    HealthKit.pluginRef = "window.plugins.healthkit";
    HealthKit.repo = "https://github.com/Telerik-Verified-Plugins/HealthKit";
    HealthKit.platforms = ["iOS"];
    HealthKit.decorators = [
        { type: Injectable }
    ];
    return HealthKit;
}(AwesomeCordovaNativePlugin));
export { HealthKit };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvaGVhbHRoLWtpdC9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQzs7SUF5RzdELDZCQUEwQjs7OztJQU92RCw2QkFBUztJQVdULG1DQUFlLGFBQUMsT0FBeUI7SUFXekMsd0NBQW9CLGFBQUMsT0FBeUI7SUFVOUMsbUNBQWU7SUFVZiw4QkFBVTtJQVVWLGlDQUFhO0lBVWIsMkNBQXVCO0lBV3ZCLDhCQUFVLGFBQUMsT0FBeUI7SUFXcEMsOEJBQVUsYUFBQyxPQUF5QjtJQVdwQyw4QkFBVSxhQUFDLE9BQXlCO0lBV3BDLDhCQUFVLGFBQUMsT0FBeUI7SUFVcEMsZ0NBQVk7SUFVWiwrQkFBVyxhQUFDLE9BQXlCO0lBVXJDLG1DQUFlLGFBQUMsT0FBeUI7SUFVekMsNkNBQXlCLGFBQUMsT0FBeUI7SUFVbkQsaUNBQWEsYUFBQyxPQUF5QjtJQVV2QyxxQ0FBaUIsYUFBQyxPQUF5QjtJQVUzQyxtQ0FBZSxhQUFDLE9BQXlCO0lBVXpDLHNDQUFrQixhQUFDLE9BQXlCO0lBVTVDLG1DQUFlLGFBQUMsT0FBeUI7SUFVekMsd0NBQW9CLGFBQUMsT0FBeUI7Ozs7Ozs7Z0JBdE4vQyxVQUFVOztvQkF6R1g7RUEwRytCLDBCQUEwQjtTQUE1QyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBIZWFsdGhLaXRPcHRpb25zIHtcclxuICAvKipcclxuICAgKiBIS1dvcmtvdXRBY3Rpdml0eVR5cGUgY29uc3RhbnRcclxuICAgKiBSZWFkIG1vcmUgaGVyZTogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvaW9zL2RvY3VtZW50YXRpb24vSGVhbHRoS2l0L1JlZmVyZW5jZS9IS1dvcmtvdXRfQ2xhc3MvIy8vYXBwbGVfcmVmL2MvdGRlZi9IS1dvcmtvdXRBY3Rpdml0eVR5cGVcclxuICAgKi9cclxuICBhY3Rpdml0eVR5cGU/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqICdob3VyJywgJ3dlZWsnLCAneWVhcicgb3IgJ2RheScsIGRlZmF1bHQgJ2RheSdcclxuICAgKi9cclxuICBhZ2dyZWdhdGlvbj86IHN0cmluZztcclxuXHJcbiAgYW1vdW50PzogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBzcGVjaWZpZXMgaWYgdGhlIGRhdGEgcmV0dXJuZWQgYnkgcXVlcnlTYW1wbGVUeXBlKCkgc2hvdWxkIGJlIHNvcnRlZCBieVxyXG4gICAqIGVuZCBkYXRlIGluIGFzY2VuZGluZyBvcmRlciwgZGVmYXVsdCBpcyBmYWxzZVxyXG4gICAqL1xyXG4gIGFzY2VuZGluZz86IGJvb2xlYW47XHJcblxyXG4gIGNvcnJlbGF0aW9uVHlwZT86IHN0cmluZztcclxuXHJcbiAgZGF0ZT86IGFueTtcclxuXHJcbiAgZGlzdGFuY2U/OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIHByb2JhYmx5IHVzZWZ1bCB3aXRoIHRoZSBmb3JtZXIgcGFyYW1cclxuICAgKi9cclxuICBkaXN0YW5jZVVuaXQ/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIGluIHNlY29uZHMsIG9wdGlvbmFsLCB1c2UgZWl0aGVyIHRoaXMgb3IgZW5kRGF0ZVxyXG4gICAqL1xyXG4gIGR1cmF0aW9uPzogbnVtYmVyO1xyXG5cclxuICBlbmREYXRlPzogYW55O1xyXG5cclxuICBlbmVyZ3k/OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEp8Y2FsfGtjYWxcclxuICAgKi9cclxuICBlbmVyZ3lVbml0Pzogc3RyaW5nO1xyXG5cclxuICBleHRyYURhdGE/OiBhbnk7XHJcblxyXG4gIC8qKlxyXG4gICAqIGxpbWl0cyB0aGUgbWF4aW11bSBudW1iZXIgb2YgcmVjb3JkcyByZXR1cm5lZCBieSBxdWVyeVNhbXBsZVR5cGUoKVxyXG4gICAqL1xyXG4gIGxpbWl0PzogbnVtYmVyO1xyXG5cclxuICBtZXRhZGF0YT86IGFueTtcclxuXHJcbiAgcXVhbnRpdHlUeXBlPzogc3RyaW5nO1xyXG5cclxuICB0eXBlPzogc3RyaW5nO1xyXG5cclxuICByZWFkVHlwZXM/OiBhbnk7XHJcblxyXG4gIHJlcXVlc3RXcml0ZVBlcm1pc3Npb24/OiBib29sZWFuO1xyXG5cclxuICBzYW1wbGVzPzogYW55O1xyXG5cclxuICBzYW1wbGVUeXBlPzogc3RyaW5nO1xyXG5cclxuICBzdGFydERhdGU/OiBhbnk7XHJcblxyXG4gIC8qKlxyXG4gICAqIG18Y218bW18aW58ZnRcclxuICAgKi9cclxuICB1bml0Pzogc3RyaW5nO1xyXG5cclxuICByZXF1ZXN0UmVhZFBlcm1pc3Npb24/OiBib29sZWFuO1xyXG5cclxuICB3cml0ZVR5cGVzPzogYW55O1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgSGVhbHRoIEtpdFxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhlIEhlYWx0aEtpdCBwbHVnaW4gYWxsb3dzIHlvdSB0byByZWFkIGRhdGEgZnJvbSBhbmQgd3JpdGUgZGF0YSB0byB0aGUgaU9TIDgrIEhlYWx0aEtpdCBmcmFtZXdvcmsuXHJcbiAqIEFueSBkYXRhIHNhdmVkIHNob3dzIHVwIGluIHRoZSBpT1MgSGVhbHRoIGFwcCBhbmQgaXMgYXZhaWxhYmxlIGZvciBvdGhlciBpT1MgYXBwcy5cclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgSGVhbHRoS2l0IH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2hlYWx0aC1raXQvbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBoZWFsdGhLaXQ6IEhlYWx0aEtpdCkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKiBgYGBcclxuICogQGludGVyZmFjZXNcclxuICogSGVhbHRoS2l0T3B0aW9uc1xyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0hlYWx0aEtpdCcsXHJcbiAgcGx1Z2luOiAnY29tLnRlbGVyaWsucGx1Z2lucy5oZWFsdGhraXQnLFxyXG4gIHBsdWdpblJlZjogJ3dpbmRvdy5wbHVnaW5zLmhlYWx0aGtpdCcsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9UZWxlcmlrLVZlcmlmaWVkLVBsdWdpbnMvSGVhbHRoS2l0JyxcclxuICBwbGF0Zm9ybXM6IFsnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEhlYWx0aEtpdCBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBDaGVjayBpZiBIZWFsdGhLaXQgaXMgc3VwcG9ydGVkIChpT1M4Kywgbm90IG9uIGlQYWQpXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBhdmFpbGFibGUoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFBhc3MgaW4gYSB0eXBlIGFuZCBnZXQgYmFjayBvbiBvZiB1bmRldGVybWluZWQgfCBkZW5pZWQgfCBhdXRob3JpemVkXHJcbiAgICpcclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7SGVhbHRoS2l0T3B0aW9uc31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjaGVja0F1dGhTdGF0dXMob3B0aW9uczogSGVhbHRoS2l0T3B0aW9ucyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBc2sgc29tZSBvciBhbGwgcGVybWlzc2lvbnMgdXAgZnJvbnRcclxuICAgKlxyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtIZWFsdGhLaXRPcHRpb25zfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlcXVlc3RBdXRob3JpemF0aW9uKG9wdGlvbnM6IEhlYWx0aEtpdE9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRm9ybWF0dGVkIGFzIHl5eXktTU0tZGRcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlYWREYXRlT2ZCaXJ0aCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogT3V0cHV0ID0gbWFsZXxmZW1hbGV8b3RoZXJ8dW5rbm93blxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVhZEdlbmRlcigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogT3V0cHV0ID0gQSt8QS18Qit8Qi18QUIrfEFCLXxPK3xPLXx1bmtub3duXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZWFkQmxvb2RUeXBlKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPdXRwdXQgPSBJfElJfElJSXxJVnxWfFZJfHVua25vd25cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlYWRGaXR6cGF0cmlja1NraW5UeXBlKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQYXNzIGluIHVuaXQgKGc9Z3JhbSwga2c9a2lsb2dyYW0sIG96PW91bmNlLCBsYj1wb3VuZCwgc3Q9c3RvbmUpIGFuZCBhbW91bnRcclxuICAgKlxyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtIZWFsdGhLaXRPcHRpb25zfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNhdmVXZWlnaHQob3B0aW9uczogSGVhbHRoS2l0T3B0aW9ucyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQYXNzIGluIHVuaXQgKGc9Z3JhbSwga2c9a2lsb2dyYW0sIG96PW91bmNlLCBsYj1wb3VuZCwgc3Q9c3RvbmUpXHJcbiAgICpcclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7SGVhbHRoS2l0T3B0aW9uc31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZWFkV2VpZ2h0KG9wdGlvbnM6IEhlYWx0aEtpdE9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUGFzcyBpbiB1bml0IChtbT1taWxsaW1ldGVyLCBjbT1jZW50aW1ldGVyLCBtPW1ldGVyLCBpbj1pbmNoLCBmdD1mb290KSBhbmQgYW1vdW50XHJcbiAgICpcclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7SGVhbHRoS2l0T3B0aW9uc31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzYXZlSGVpZ2h0KG9wdGlvbnM6IEhlYWx0aEtpdE9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUGFzcyBpbiB1bml0IChtbT1taWxsaW1ldGVyLCBjbT1jZW50aW1ldGVyLCBtPW1ldGVyLCBpbj1pbmNoLCBmdD1mb290KVxyXG4gICAqXHJcbiAgICogQHBhcmFtIG9wdGlvbnMge0hlYWx0aEtpdE9wdGlvbnN9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVhZEhlaWdodChvcHRpb25zOiBIZWFsdGhLaXRPcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG5vIHBhcmFtcyB5ZXQsIHNvIHRoaXMgd2lsbCByZXR1cm4gYWxsIHdvcmtvdXRzIGV2ZXIgb2YgYW55IHR5cGVcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGZpbmRXb3Jrb3V0cygpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7SGVhbHRoS2l0T3B0aW9uc31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzYXZlV29ya291dChvcHRpb25zOiBIZWFsdGhLaXRPcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqXHJcbiAgICogQHBhcmFtIG9wdGlvbnMge0hlYWx0aEtpdE9wdGlvbnN9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcXVlcnlTYW1wbGVUeXBlKG9wdGlvbnM6IEhlYWx0aEtpdE9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7SGVhbHRoS2l0T3B0aW9uc31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBxdWVyeVNhbXBsZVR5cGVBZ2dyZWdhdGVkKG9wdGlvbnM6IEhlYWx0aEtpdE9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7SGVhbHRoS2l0T3B0aW9uc31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBkZWxldGVTYW1wbGVzKG9wdGlvbnM6IEhlYWx0aEtpdE9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7SGVhbHRoS2l0T3B0aW9uc31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBtb25pdG9yU2FtcGxlVHlwZShvcHRpb25zOiBIZWFsdGhLaXRPcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqXHJcbiAgICogQHBhcmFtIG9wdGlvbnMge0hlYWx0aEtpdE9wdGlvbnN9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc3VtUXVhbnRpdHlUeXBlKG9wdGlvbnM6IEhlYWx0aEtpdE9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7SGVhbHRoS2l0T3B0aW9uc31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzYXZlUXVhbnRpdHlTYW1wbGUob3B0aW9uczogSGVhbHRoS2l0T3B0aW9ucyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtIZWFsdGhLaXRPcHRpb25zfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNhdmVDb3JyZWxhdGlvbihvcHRpb25zOiBIZWFsdGhLaXRPcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqXHJcbiAgICogQHBhcmFtIG9wdGlvbnMge0hlYWx0aEtpdE9wdGlvbnN9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcXVlcnlDb3JyZWxhdGlvblR5cGUob3B0aW9uczogSGVhbHRoS2l0T3B0aW9ucyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==