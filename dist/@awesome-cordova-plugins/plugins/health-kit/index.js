var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var HealthKitOriginal = /** @class */ (function (_super) {
    __extends(HealthKitOriginal, _super);
    function HealthKitOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HealthKitOriginal.prototype.available = function () { return cordova(this, "available", {}, arguments); };
    HealthKitOriginal.prototype.checkAuthStatus = function (options) { return cordova(this, "checkAuthStatus", {}, arguments); };
    HealthKitOriginal.prototype.requestAuthorization = function (options) { return cordova(this, "requestAuthorization", {}, arguments); };
    HealthKitOriginal.prototype.readDateOfBirth = function () { return cordova(this, "readDateOfBirth", {}, arguments); };
    HealthKitOriginal.prototype.readGender = function () { return cordova(this, "readGender", {}, arguments); };
    HealthKitOriginal.prototype.readBloodType = function () { return cordova(this, "readBloodType", {}, arguments); };
    HealthKitOriginal.prototype.readFitzpatrickSkinType = function () { return cordova(this, "readFitzpatrickSkinType", {}, arguments); };
    HealthKitOriginal.prototype.saveWeight = function (options) { return cordova(this, "saveWeight", {}, arguments); };
    HealthKitOriginal.prototype.readWeight = function (options) { return cordova(this, "readWeight", {}, arguments); };
    HealthKitOriginal.prototype.saveHeight = function (options) { return cordova(this, "saveHeight", {}, arguments); };
    HealthKitOriginal.prototype.readHeight = function (options) { return cordova(this, "readHeight", {}, arguments); };
    HealthKitOriginal.prototype.findWorkouts = function () { return cordova(this, "findWorkouts", {}, arguments); };
    HealthKitOriginal.prototype.saveWorkout = function (options) { return cordova(this, "saveWorkout", {}, arguments); };
    HealthKitOriginal.prototype.querySampleType = function (options) { return cordova(this, "querySampleType", {}, arguments); };
    HealthKitOriginal.prototype.querySampleTypeAggregated = function (options) { return cordova(this, "querySampleTypeAggregated", {}, arguments); };
    HealthKitOriginal.prototype.deleteSamples = function (options) { return cordova(this, "deleteSamples", {}, arguments); };
    HealthKitOriginal.prototype.monitorSampleType = function (options) { return cordova(this, "monitorSampleType", {}, arguments); };
    HealthKitOriginal.prototype.sumQuantityType = function (options) { return cordova(this, "sumQuantityType", {}, arguments); };
    HealthKitOriginal.prototype.saveQuantitySample = function (options) { return cordova(this, "saveQuantitySample", {}, arguments); };
    HealthKitOriginal.prototype.saveCorrelation = function (options) { return cordova(this, "saveCorrelation", {}, arguments); };
    HealthKitOriginal.prototype.queryCorrelationType = function (options) { return cordova(this, "queryCorrelationType", {}, arguments); };
    HealthKitOriginal.pluginName = "HealthKit";
    HealthKitOriginal.plugin = "com.telerik.plugins.healthkit";
    HealthKitOriginal.pluginRef = "window.plugins.healthkit";
    HealthKitOriginal.repo = "https://github.com/Telerik-Verified-Plugins/HealthKit";
    HealthKitOriginal.platforms = ["iOS"];
    return HealthKitOriginal;
}(AwesomeCordovaNativePlugin));
var HealthKit = new HealthKitOriginal();
export { HealthKit };
//# sourceMappingURL=data:application/json;base64,