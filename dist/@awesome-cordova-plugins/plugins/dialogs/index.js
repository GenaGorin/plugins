var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var DialogsOriginal = /** @class */ (function (_super) {
    __extends(DialogsOriginal, _super);
    function DialogsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogsOriginal.prototype.alert = function (message, title, buttonName) { return cordova(this, "alert", { "successIndex": 1, "errorIndex": 4 }, arguments); };
    DialogsOriginal.prototype.confirm = function (message, title, buttonLabels) { return cordova(this, "confirm", { "successIndex": 1, "errorIndex": 4 }, arguments); };
    DialogsOriginal.prototype.prompt = function (message, title, buttonLabels, defaultText) { return cordova(this, "prompt", { "successIndex": 1, "errorIndex": 5 }, arguments); };
    DialogsOriginal.prototype.beep = function (times) { return cordova(this, "beep", { "sync": true }, arguments); };
    DialogsOriginal.pluginName = "Dialogs";
    DialogsOriginal.plugin = "cordova-plugin-dialogs";
    DialogsOriginal.pluginRef = "navigator.notification";
    DialogsOriginal.repo = "https://github.com/apache/cordova-plugin-dialogs";
    DialogsOriginal.platforms = ["Amazon Fire OS", "Android", "Browser", "iOS", "Windows"];
    return DialogsOriginal;
}(AwesomeCordovaNativePlugin));
var Dialogs = new DialogsOriginal();
export { Dialogs };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZGlhbG9ncy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQzs7SUE4Qy9ELDJCQUEwQjs7OztJQWFyRCx1QkFBSyxhQUFDLE9BQWUsRUFBRSxLQUFjLEVBQUUsVUFBbUI7SUFnQjFELHlCQUFPLGFBQUMsT0FBZSxFQUFFLEtBQWMsRUFBRSxZQUF1QjtJQWlCaEUsd0JBQU0sYUFDSixPQUFnQixFQUNoQixLQUFjLEVBQ2QsWUFBdUIsRUFDdkIsV0FBb0I7SUFhdEIsc0JBQUksYUFBQyxLQUFhOzs7Ozs7a0JBOUdwQjtFQStDNkIsMEJBQTBCO1NBQTFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERpYWxvZ3NQcm9tcHRDYWxsYmFjayB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGluZGV4IG9mIHRoZSBwcmVzc2VkIGJ1dHRvbi4gKE51bWJlcikgTm90ZSB0aGF0IHRoZSBpbmRleCB1c2VzIG9uZS1iYXNlZCBpbmRleGluZywgc28gdGhlIHZhbHVlIGlzIDEsIDIsIDMsIGV0Yy5cclxuICAgKi9cclxuICBidXR0b25JbmRleDogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgdGV4dCBlbnRlcmVkIGluIHRoZSBwcm9tcHQgZGlhbG9nIGJveC4gKFN0cmluZylcclxuICAgKi9cclxuICBpbnB1dDE6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIERpYWxvZ3NcclxuICogQHByZW1pZXIgZGlhbG9nc1xyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gZ2l2ZXMgeW91IGFiaWxpdHkgdG8gYWNjZXNzIGFuZCBjdXN0b21pemUgdGhlIGRldmljZSBuYXRpdmUgZGlhbG9ncy5cclxuICpcclxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBjb3Jkb3ZhLXBsdWdpbi1kaWFsb2dzYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0RpYWxvZ3MgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tZGlhbG9ncykuXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IERpYWxvZ3MgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvZGlhbG9ncy9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGRpYWxvZ3M6IERpYWxvZ3MpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy5kaWFsb2dzLmFsZXJ0KCdIZWxsbyB3b3JsZCcpXHJcbiAqICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0RpYWxvZyBkaXNtaXNzZWQnKSlcclxuICogICAuY2F0Y2goZSA9PiBjb25zb2xlLmxvZygnRXJyb3IgZGlzcGxheWluZyBkaWFsb2cnLCBlKSk7XHJcbiAqXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBEaWFsb2dzUHJvbXB0Q2FsbGJhY2tcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdEaWFsb2dzJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1kaWFsb2dzJyxcclxuICBwbHVnaW5SZWY6ICduYXZpZ2F0b3Iubm90aWZpY2F0aW9uJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1kaWFsb2dzJyxcclxuICBwbGF0Zm9ybXM6IFsnQW1hem9uIEZpcmUgT1MnLCAnQW5kcm9pZCcsICdCcm93c2VyJywgJ2lPUycsICdXaW5kb3dzJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIERpYWxvZ3MgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogU2hvd3MgYSBjdXN0b20gYWxlcnQgb3IgZGlhbG9nIGJveC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIERpYWxvZyBtZXNzYWdlLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdGl0bGVdIERpYWxvZyB0aXRsZS4gKE9wdGlvbmFsLCBkZWZhdWx0cyB0byBBbGVydClcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2J1dHRvbk5hbWVdIEJ1dHRvbiBuYW1lLiAoT3B0aW9uYWwsIGRlZmF1bHRzIHRvIE9LKVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBibGFuayBwcm9taXNlIG9uY2UgdGhlIHVzZXIgaGFzIGRpc21pc3NlZCB0aGUgYWxlcnQuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAxLFxyXG4gICAgZXJyb3JJbmRleDogNCxcclxuICB9KVxyXG4gIGFsZXJ0KG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcsIGJ1dHRvbk5hbWU/OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGlzcGxheXMgYSBjdXN0b21pemFibGUgY29uZmlybWF0aW9uIGRpYWxvZyBib3guXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBEaWFsb2cgbWVzc2FnZS5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3RpdGxlXSBEaWFsb2cgdGl0bGUuIChPcHRpb25hbCwgZGVmYXVsdHMgdG8gQ29uZmlybSlcclxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbYnV0dG9uTGFiZWxzXSBBcnJheSBvZiBzdHJpbmdzIHNwZWNpZnlpbmcgYnV0dG9uIGxhYmVscy4gKE9wdGlvbmFsLCBkZWZhdWx0cyB0byBbT0ssQ2FuY2VsXSlcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxudW1iZXI+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRoZSBidXR0b24gaW5kZXggdGhhdCB3YXMgY2xpY2tlZCwgb3IgMCBpZiB0aGUgdXNlciBoYXMgZGlzbWlzc2VkIHRoZSBkaWFsb2cgYnkgY2xpY2tpbmcgb3V0c2lkZSB0aGUgZGlhbG9nIGJveC4gTm90ZSB0aGF0IHRoZSBpbmRleCB1c2Ugb25lLWJhc2VkIGluZGV4aW5nLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN1Y2Nlc3NJbmRleDogMSxcclxuICAgIGVycm9ySW5kZXg6IDQsXHJcbiAgfSlcclxuICBjb25maXJtKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcsIGJ1dHRvbkxhYmVscz86IHN0cmluZ1tdKTogUHJvbWlzZTxudW1iZXI+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERpc3BsYXlzIGEgbmF0aXZlIGRpYWxvZyBib3ggdGhhdCBpcyBtb3JlIGN1c3RvbWl6YWJsZSB0aGFuIHRoZSBicm93c2VyJ3MgcHJvbXB0IGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFttZXNzYWdlXSBEaWFsb2cgbWVzc2FnZS5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3RpdGxlXSBEaWFsb2cgdGl0bGUuIChPcHRpb25hbCwgZGVmYXVsdHMgdG8gUHJvbXB0KVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IFtidXR0b25MYWJlbHNdICBBcnJheSBvZiBzdHJpbmdzIHNwZWNpZnlpbmcgYnV0dG9uIGxhYmVscy4gKE9wdGlvbmFsLCBkZWZhdWx0cyB0byBbXCJPS1wiLFwiQ2FuY2VsXCJdKVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZGVmYXVsdFRleHRdIERlZmF1bHQgdGV4dCBib3ggaW5wdXQgdmFsdWUuICAoT3B0aW9uYWwsIERlZmF1bHQ6IGVtcHR5IHN0cmluZylcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxEaWFsb2dzUHJvbXB0Q2FsbGJhY2s+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGFuIG9iamVjdCB3aXRoIHRoZSBidXR0b24gaW5kZXggY2xpY2tlZCBhbmQgdGhlIHRleHQgZW50ZXJlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN1Y2Nlc3NJbmRleDogMSxcclxuICAgIGVycm9ySW5kZXg6IDUsXHJcbiAgfSlcclxuICBwcm9tcHQoXHJcbiAgICBtZXNzYWdlPzogc3RyaW5nLFxyXG4gICAgdGl0bGU/OiBzdHJpbmcsXHJcbiAgICBidXR0b25MYWJlbHM/OiBzdHJpbmdbXSxcclxuICAgIGRlZmF1bHRUZXh0Pzogc3RyaW5nXHJcbiAgKTogUHJvbWlzZTxEaWFsb2dzUHJvbXB0Q2FsbGJhY2s+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBkZXZpY2UgcGxheXMgYSBiZWVwIHNvdW5kLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtudW1iZXJzfSB0aW1lcyBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgYmVlcC5cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzeW5jOiB0cnVlLFxyXG4gIH0pXHJcbiAgYmVlcCh0aW1lczogbnVtYmVyKTogdm9pZCB7fVxyXG59XHJcbiJdfQ==