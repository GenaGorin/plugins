var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
export var Collectors;
(function (Collectors) {
    Collectors["AppData"] = "AppData";
    Collectors["Connectivity"] = "Connectivity";
    Collectors["DeviceData"] = "DeviceData";
    Collectors["Lifecycle"] = "Lifecycle";
})(Collectors || (Collectors = {}));
export var Dispatchers;
(function (Dispatchers) {
    Dispatchers["Collect"] = "Collect";
    Dispatchers["TagManagement"] = "TagManagement";
    Dispatchers["RemoteCommands"] = "RemoteCommands";
})(Dispatchers || (Dispatchers = {}));
export var Expiry;
(function (Expiry) {
    Expiry["forever"] = "forever";
    Expiry["untilRestart"] = "untilRestart";
    Expiry["session"] = "session";
})(Expiry || (Expiry = {}));
export var ConsentPolicy;
(function (ConsentPolicy) {
    ConsentPolicy["ccpa"] = "ccpa";
    ConsentPolicy["gdpr"] = "gdpr";
})(ConsentPolicy || (ConsentPolicy = {}));
var TealiumView = /** @class */ (function () {
    function TealiumView(viewName, dataLayer) {
        this.viewName = viewName;
        this.dataLayer = dataLayer;
        this.type = 'view';
    }
    TealiumView.prototype.toJson = function () {
        var dictionary = {};
        dictionary['type'] = this.type;
        dictionary['dataLayer'] = {};
        this.dataLayer.forEach(function (k, v) {
            dictionary['dataLayer'][k] = v;
        });
        dictionary['type'] = this.type;
        dictionary['viewName'] = this.viewName;
        return JSON.stringify(dictionary);
    };
    return TealiumView;
}());
export { TealiumView };
var TealiumEvent = /** @class */ (function () {
    function TealiumEvent(eventName, dataLayer) {
        this.eventName = eventName;
        this.dataLayer = dataLayer;
        this.type = 'event';
    }
    TealiumEvent.prototype.toJson = function () {
        var dictionary = {};
        dictionary['type'] = this.type;
        dictionary['dataLayer'] = {};
        this.dataLayer.forEach(function (k, v) {
            dictionary['dataLayer'][k] = v;
        });
        dictionary['type'] = this.type;
        dictionary['eventName'] = this.eventName;
        return JSON.stringify(dictionary);
    };
    return TealiumEvent;
}());
export { TealiumEvent };
var ConsentExpiry = /** @class */ (function () {
    function ConsentExpiry(time, unit) {
        this.time = time;
        this.unit = unit;
    }
    return ConsentExpiry;
}());
export { ConsentExpiry };
export var TimeUnit;
(function (TimeUnit) {
    TimeUnit["minutes"] = "minutes";
    TimeUnit["hours"] = "hours";
    TimeUnit["days"] = "days";
    TimeUnit["months"] = "months";
})(TimeUnit || (TimeUnit = {}));
export var ConsentStatus;
(function (ConsentStatus) {
    ConsentStatus["consented"] = "consented";
    ConsentStatus["notConsented"] = "notConsented";
    ConsentStatus["unknown"] = "unknown";
})(ConsentStatus || (ConsentStatus = {}));
export var LogLevel;
(function (LogLevel) {
    LogLevel["dev"] = "dev";
    LogLevel["qa"] = "qa";
    LogLevel["prod"] = "prod";
    LogLevel["silent"] = "silent";
})(LogLevel || (LogLevel = {}));
export var TealiumEnvironment;
(function (TealiumEnvironment) {
    TealiumEnvironment["dev"] = "dev";
    TealiumEnvironment["qa"] = "qa";
    TealiumEnvironment["prod"] = "prod";
})(TealiumEnvironment || (TealiumEnvironment = {}));
export var ConsentCategories;
(function (ConsentCategories) {
    ConsentCategories["analytics"] = "analytics";
    ConsentCategories["affiliates"] = "affiliates";
    ConsentCategories["displayAds"] = "display_ads";
    ConsentCategories["email"] = "email";
    ConsentCategories["personalization"] = "personalization";
    ConsentCategories["search"] = "search";
    ConsentCategories["social"] = "social";
    ConsentCategories["bigData"] = "big_data";
    ConsentCategories["mobile"] = "mobile";
    ConsentCategories["engagement"] = "engagement";
    ConsentCategories["monitoring"] = "monitoring";
    ConsentCategories["crm"] = "crm";
    ConsentCategories["cdp"] = "cdp";
    ConsentCategories["cookieMatch"] = "cookiematch";
    ConsentCategories["misc"] = "misc";
})(ConsentCategories || (ConsentCategories = {}));
var TealiumOriginal = /** @class */ (function (_super) {
    __extends(TealiumOriginal, _super);
    function TealiumOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TealiumOriginal.prototype.initialize = function (config, callback) { return cordova(this, "initialize", {}, arguments); };
    TealiumOriginal.prototype.track = function (dispatch) { return cordova(this, "track", {}, arguments); };
    TealiumOriginal.prototype.terminateInstance = function () { return cordova(this, "terminateInstance", {}, arguments); };
    TealiumOriginal.prototype.addData = function (data, expiry) { return cordova(this, "addData", {}, arguments); };
    TealiumOriginal.prototype.getData = function (key, callback) { return cordova(this, "getData", {}, arguments); };
    TealiumOriginal.prototype.removeData = function (keys) { return cordova(this, "removeData", {}, arguments); };
    TealiumOriginal.prototype.getConsentStatus = function (callback) { return cordova(this, "getConsentStatus", {}, arguments); };
    TealiumOriginal.prototype.setConsentStatus = function (consentStatus) { return cordova(this, "setConsentStatus", {}, arguments); };
    TealiumOriginal.prototype.getConsentCategories = function (callback) { return cordova(this, "getConsentCategories", {}, arguments); };
    TealiumOriginal.prototype.setConsentCategories = function (categories) { return cordova(this, "setConsentCategories", {}, arguments); };
    TealiumOriginal.prototype.joinTrace = function (id) { return cordova(this, "joinTrace", {}, arguments); };
    TealiumOriginal.prototype.leaveTrace = function () { return cordova(this, "leaveTrace", {}, arguments); };
    TealiumOriginal.prototype.getVisitorId = function (callback) { return cordova(this, "getVisitorId", {}, arguments); };
    TealiumOriginal.prototype.setVisitorServiceListener = function (callback) { return cordova(this, "setVisitorServiceListener", {}, arguments); };
    TealiumOriginal.prototype.setConsentExpiryListener = function (callback) { return cordova(this, "setConsentExpiryListener", {}, arguments); };
    TealiumOriginal.prototype.addRemoteCommand = function (id, callback) { return cordova(this, "addRemoteCommand", {}, arguments); };
    TealiumOriginal.prototype.removeRemoteCommand = function (id) { return cordova(this, "removeRemoteCommand", {}, arguments); };
    TealiumOriginal.prototype.removeListeners = function () { return cordova(this, "removeListeners", {}, arguments); };
    TealiumOriginal.pluginName = "Tealium";
    TealiumOriginal.plugin = "tealium-cordova-plugin";
    TealiumOriginal.pluginRef = "tealium";
    TealiumOriginal.repo = "https://github.com/Tealium/cordova-plugin";
    TealiumOriginal.install = "";
    TealiumOriginal.installVariables = [];
    TealiumOriginal.platforms = ["Android", "iOS"];
    return TealiumOriginal;
}(AwesomeCordovaNativePlugin));
var Tealium = new TealiumOriginal();
export { Tealium };
//# sourceMappingURL=data:application/json;base64,