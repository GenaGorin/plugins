var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var CrashlyticsOriginal = /** @class */ (function (_super) {
    __extends(CrashlyticsOriginal, _super);
    function CrashlyticsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CrashlyticsOriginal.prototype.addLog = function (message) { return cordova(this, "addLog", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.sendCrash = function () { return cordova(this, "sendCrash", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.sendNonFatalCrash = function (message, stacktrace) { return cordova(this, "sendNonFatalCrash", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.recordError = function (message, code) { return cordova(this, "recordError", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.setUserIdentifier = function (userId) { return cordova(this, "setUserIdentifier", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.setUserName = function (userName) { return cordova(this, "setUserName", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.setUserEmail = function (email) { return cordova(this, "setUserEmail", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.setStringValueForKey = function (value, key) { return cordova(this, "setStringValueForKey", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.setIntValueForKey = function (value, key) { return cordova(this, "setIntValueForKey", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.setBoolValueForKey = function (value, key) { return cordova(this, "setBoolValueForKey", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.setFloatValueForKey = function (value, key) { return cordova(this, "setFloatValueForKey", { "sync": true }, arguments); };
    CrashlyticsOriginal.pluginName = "Crashlytics";
    CrashlyticsOriginal.plugin = "cordova-fabric-plugin";
    CrashlyticsOriginal.pluginRef = "window.fabric.Crashlytics";
    CrashlyticsOriginal.repo = "https://www.npmjs.com/package/cordova-fabric-plugin";
    CrashlyticsOriginal.install = "ionic cordova plugin add cordova-fabric-plugin --variable FABRIC_API_KEY=XXX --variable FABRIC_API_SECRET=xxx";
    CrashlyticsOriginal.installVariables = ["FABRIC_API_KEY", "FABRIC_API_SECRET"];
    CrashlyticsOriginal.platforms = ["Android", "iOS"];
    return CrashlyticsOriginal;
}(AwesomeCordovaNativePlugin));
var Crashlytics = new CrashlyticsOriginal();
export { Crashlytics };
var AnswersOriginal = /** @class */ (function (_super) {
    __extends(AnswersOriginal, _super);
    function AnswersOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnswersOriginal.prototype.sendPurchase = function (itemPrice, currency, success, itemName, itemType, itemId, attributes) { return cordova(this, "sendPurchase", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendAddToCart = function (itemPrice, currency, itemName, itemType, itemId, attributes) { return cordova(this, "sendAddToCart", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendStartCheckout = function (totalPrice, currency, itemCount, attributes) { return cordova(this, "sendStartCheckout", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendSearch = function (query, attributes) { return cordova(this, "sendSearch", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendShare = function (method, contentName, contentType, contentId, attributes) { return cordova(this, "sendShare", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendRatedContent = function (rating, contentName, contentType, contentId, attributes) { return cordova(this, "sendRatedContent", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendSignUp = function (method, success, attributes) { return cordova(this, "sendSignUp", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendLogIn = function (method, success, attributes) { return cordova(this, "sendLogIn", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendInvite = function (method, attributes) { return cordova(this, "sendInvite", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendLevelStart = function (levelName, attributes) { return cordova(this, "sendLevelStart", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendLevelEnd = function (levelName, score, success, attributes) { return cordova(this, "sendLevelEnd", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendContentView = function (name, type, id, attributes) { return cordova(this, "sendContentView", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendScreenView = function (name, id, attributes) { return cordova(this, "sendScreenView", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendCustomEvent = function (name, attributes) { return cordova(this, "sendCustomEvent", { "sync": true }, arguments); };
    AnswersOriginal.pluginName = "Answers";
    AnswersOriginal.plugin = "cordova-fabric-plugin";
    AnswersOriginal.pluginRef = "window.fabric.Answers";
    AnswersOriginal.repo = "https://www.npmjs.com/package/cordova-fabric-plugin";
    AnswersOriginal.install = "ionic cordova plugin add cordova-fabric-plugin --variable FABRIC_API_KEY=XXX --variable FABRIC_API_SECRET=xxx";
    AnswersOriginal.installVariables = ["FABRIC_API_KEY", "FABRIC_API_SECRET"];
    AnswersOriginal.platforms = ["Android", "iOS"];
    return AnswersOriginal;
}(AwesomeCordovaNativePlugin));
var Answers = new AnswersOriginal();
export { Answers };
//# sourceMappingURL=data:application/json;base64,