import { __extends } from "tslib";
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Injectable } from '@angular/core';
var SQLitePorter = /** @class */ (function (_super) {
    __extends(SQLitePorter, _super);
    function SQLitePorter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SQLitePorter.prototype.importSqlToDb = function (db, sql) { return cordova(this, "importSqlToDb", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorter.prototype.exportDbToSql = function (db) { return cordova(this, "exportDbToSql", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorter.prototype.importJsonToDb = function (db, json) { return cordova(this, "importJsonToDb", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorter.prototype.exportDbToJson = function (db) { return cordova(this, "exportDbToJson", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorter.prototype.wipeDb = function (db) { return cordova(this, "wipeDb", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorter.pluginName = "SQLitePorter";
    SQLitePorter.plugin = "uk.co.workingedge.cordova.plugin.sqliteporter";
    SQLitePorter.pluginRef = "cordova.plugins.sqlitePorter";
    SQLitePorter.repo = "https://github.com/dpa99c/cordova-sqlite-porter";
    SQLitePorter.platforms = ["Amazon Fire OS", "Android", "BlackBerry 10", "Browser", "iOS", "Tizen", "Windows", "Windows Phone"];
    SQLitePorter.decorators = [
        { type: Injectable }
    ];
    return SQLitePorter;
}(AwesomeCordovaNativePlugin));
export { SQLitePorter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvc3FsaXRlLXBvcnRlci9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7QUFDNUYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7SUE4Q1QsZ0NBQTBCOzs7O0lBYTFELG9DQUFhLGFBQUMsRUFBTyxFQUFFLEdBQVc7SUFlbEMsb0NBQWEsYUFBQyxFQUFPO0lBZ0JyQixxQ0FBYyxhQUFDLEVBQU8sRUFBRSxJQUFTO0lBZWpDLHFDQUFjLGFBQUMsRUFBTztJQWV0Qiw2QkFBTSxhQUFDLEVBQU87Ozs7Ozs7Z0JBM0VmLFVBQVU7O3VCQTlDWDtFQStDa0MsMEJBQTBCO1NBQS9DLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG4vKipcclxuICogQG5hbWUgU1FMaXRlIFBvcnRlclxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBDb3Jkb3ZhL1Bob25lZ2FwIHBsdWdpbiBjYW4gYmUgdXNlZCB0byBpbXBvcnQvZXhwb3J0IHRvL2Zyb20gYSBTUUxpdGUgZGF0YWJhc2UgdXNpbmcgZWl0aGVyIFNRTCBvciBKU09OLlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBTUUxpdGVQb3J0ZXIgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvc3FsaXRlLXBvcnRlci9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHNxbGl0ZVBvcnRlcjogU1FMaXRlUG9ydGVyKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIGxldCBkYiA9IHdpbmRvdy5vcGVuRGF0YWJhc2UoJ1Rlc3QnLCAnMS4wJywgJ1Rlc3REQicsIDEgKiAxMDI0KTtcclxuICogLy8gb3Igd2UgY2FuIHVzZSBTUUxpdGUgcGx1Z2luXHJcbiAqIC8vIHdlIHdpbGwgYXNzdW1lIHRoYXQgd2UgaW5qZWN0ZWQgU1FMaXRlIGludG8gdGhpcyBjb21wb25lbnQgYXMgc3FsaXRlXHJcbiAqIHRoaXMuc3FsaXRlLmNyZWF0ZSh7XHJcbiAqICAgbmFtZTogJ2RhdGEuZGInLFxyXG4gKiAgIGxvY2F0aW9uOiAnZGVmYXVsdCdcclxuICogfSlcclxuICogICAudGhlbigoZGI6IGFueSkgPT4ge1xyXG4gKiAgICAgbGV0IGRiSW5zdGFuY2UgPSBkYi5fb2JqZWN0SW5zdGFuY2U7XHJcbiAqICAgICAvLyB3ZSBjYW4gcGFzcyBkYi5fb2JqZWN0SW5zdGFuY2UgYXMgdGhlIGRhdGFiYXNlIG9wdGlvbiBpbiBhbGwgU1FMaXRlUG9ydGVyIG1ldGhvZHNcclxuICogICB9KTtcclxuICpcclxuICpcclxuICogbGV0IHNxbCA9ICdDUkVBVEUgVEFCTEUgQXJ0aXN0IChbSWRdIFBSSU1BUlkgS0VZLCBbVGl0bGVdKTsnICtcclxuICogICAgICAgICAgICAnSU5TRVJUIElOVE8gQXJ0aXN0KElkLFRpdGxlKSBWQUxVRVMgKFwiMVwiLFwiRnJlZFwiKTsnO1xyXG4gKlxyXG4gKiB0aGlzLnNxbGl0ZVBvcnRlci5pbXBvcnRTcWxUb0RiKGRiLCBzcWwpXHJcbiAqICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0ltcG9ydGVkJykpXHJcbiAqICAgLmNhdGNoKGUgPT4gY29uc29sZS5lcnJvcihlKSk7XHJcbiAqXHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ1NRTGl0ZVBvcnRlcicsXHJcbiAgcGx1Z2luOiAndWsuY28ud29ya2luZ2VkZ2UuY29yZG92YS5wbHVnaW4uc3FsaXRlcG9ydGVyJyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuc3FsaXRlUG9ydGVyJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2RwYTk5Yy9jb3Jkb3ZhLXNxbGl0ZS1wb3J0ZXInLFxyXG4gIHBsYXRmb3JtczogWydBbWF6b24gRmlyZSBPUycsICdBbmRyb2lkJywgJ0JsYWNrQmVycnkgMTAnLCAnQnJvd3NlcicsICdpT1MnLCAnVGl6ZW4nLCAnV2luZG93cycsICdXaW5kb3dzIFBob25lJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFNRTGl0ZVBvcnRlciBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBFeGVjdXRlcyBhIHNldCBvZiBTUUwgc3RhdGVtZW50cyBhZ2FpbnN0IHRoZSBkZWZpbmVkIGRhdGFiYXNlLiBDYW4gYmUgdXNlZCB0byBpbXBvcnQgZGF0YSBkZWZpbmVkIGluIHRoZSBTUUwgc3RhdGVtZW50cyBpbnRvIHRoZSBkYXRhYmFzZSwgYW5kIG1heSBhZGRpdGlvbmFsbHkgaW5jbHVkZSBjb21tYW5kcyB0byBjcmVhdGUgdGhlIHRhYmxlIHN0cnVjdHVyZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBkYiB7T2JqZWN0fSBEYXRhYmFzZSBvYmplY3RcclxuICAgKiBAcGFyYW0gc3FsIHtzdHJpbmd9IFNRTCBzdGF0ZW1lbnRzIHRvIGV4ZWN1dGUgYWdhaW5zdCB0aGUgZGF0YWJhc2VcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGNhbGxiYWNrU3R5bGU6ICdvYmplY3QnLFxyXG4gICAgc3VjY2Vzc05hbWU6ICdzdWNjZXNzRm4nLFxyXG4gICAgZXJyb3JOYW1lOiAnZXJyb3JGbicsXHJcbiAgfSlcclxuICBpbXBvcnRTcWxUb0RiKGRiOiBhbnksIHNxbDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4cG9ydHMgYSBTUUxpdGUgREIgYXMgYSBzZXQgb2YgU1FMIHN0YXRlbWVudHMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZGIge09iamVjdH0gRGF0YWJhc2Ugb2JqZWN0XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja1N0eWxlOiAnb2JqZWN0JyxcclxuICAgIHN1Y2Nlc3NOYW1lOiAnc3VjY2Vzc0ZuJyxcclxuICAgIGVycm9yTmFtZTogJ2Vycm9yRm4nLFxyXG4gIH0pXHJcbiAgZXhwb3J0RGJUb1NxbChkYjogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnZlcnRzIHRhYmxlIHN0cnVjdHVyZSBhbmQvb3Igcm93IGRhdGEgY29udGFpbmVkIHdpdGhpbiBhIEpTT04gc3RydWN0dXJlIGludG8gU1FMIHN0YXRlbWVudHMgdGhhdCBjYW4gYmUgZXhlY3V0ZWQgYWdhaW5zdCBhIFNRTGl0ZSBkYXRhYmFzZS4gQ2FuIGJlIHVzZWQgdG8gaW1wb3J0IGRhdGEgaW50byB0aGUgZGF0YWJhc2UgYW5kL29yIGNyZWF0ZSB0aGUgdGFibGUgc3RydWN0dXJlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGRiIHtPYmplY3R9IERhdGFiYXNlIG9iamVjdFxyXG4gICAqIEBwYXJhbSBqc29uIHtPYmplY3R8c3RyaW5nfSBKU09OIHN0cnVjdHVyZSBjb250YWluaW5nIHJvdyBkYXRhIGFuZC9vciB0YWJsZSBzdHJ1Y3R1cmUgYXMgZWl0aGVyIGEgSlNPTiBvYmplY3Qgb3Igc3RyaW5nXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja1N0eWxlOiAnb2JqZWN0JyxcclxuICAgIHN1Y2Nlc3NOYW1lOiAnc3VjY2Vzc0ZuJyxcclxuICAgIGVycm9yTmFtZTogJ2Vycm9yRm4nLFxyXG4gIH0pXHJcbiAgaW1wb3J0SnNvblRvRGIoZGI6IGFueSwganNvbjogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4cG9ydHMgYSBTUUxpdGUgREIgYXMgYSBKU09OIHN0cnVjdHVyZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIGRiIHtPYmplY3R9IERhdGFiYXNlIG9iamVjdFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgY2FsbGJhY2tTdHlsZTogJ29iamVjdCcsXHJcbiAgICBzdWNjZXNzTmFtZTogJ3N1Y2Nlc3NGbicsXHJcbiAgICBlcnJvck5hbWU6ICdlcnJvckZuJyxcclxuICB9KVxyXG4gIGV4cG9ydERiVG9Kc29uKGRiOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogV2lwZXMgYWxsIGRhdGEgZnJvbSBhIGRhdGFiYXNlIGJ5IGRyb3BwaW5nIGFsbCBleGlzdGluZyB0YWJsZXNcclxuICAgKlxyXG4gICAqIEBwYXJhbSBkYiB7T2JqZWN0fSBEYXRhYmFzZSBvYmplY3RcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGNhbGxiYWNrU3R5bGU6ICdvYmplY3QnLFxyXG4gICAgc3VjY2Vzc05hbWU6ICdzdWNjZXNzRm4nLFxyXG4gICAgZXJyb3JOYW1lOiAnZXJyb3JGbicsXHJcbiAgfSlcclxuICB3aXBlRGIoZGI6IGFueSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==