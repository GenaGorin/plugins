import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var BluetoothClassicSerialPort = /** @class */ (function (_super) {
    __extends(BluetoothClassicSerialPort, _super);
    function BluetoothClassicSerialPort() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BluetoothClassicSerialPort.prototype.connect = function (deviceId, interfaceId) { return cordova(this, "connect", { "platforms": ["Android", "iOS"], "observable": true }, arguments); };
    BluetoothClassicSerialPort.prototype.connectIos = function (deviceId, interfaceArray) { return cordova(this, "connect", { "platforms": ["iOS"], "methodName": "connect" }, arguments); };
    BluetoothClassicSerialPort.prototype.connectInsecure = function (deviceId, interfaceArray) { return cordova(this, "connectInsecure", { "platforms": ["Android"], "observable": true }, arguments); };
    BluetoothClassicSerialPort.prototype.disconnect = function (interfaceId) { return cordova(this, "disconnect", {}, arguments); };
    BluetoothClassicSerialPort.prototype.disconnectAll = function () { return cordova(this, "connect", { "methodName": "connect" }, arguments); };
    BluetoothClassicSerialPort.prototype.write = function (interfaceId, data) { return cordova(this, "write", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPort.prototype.available = function (interfaceId) { return cordova(this, "available", { "platforms": ["Android", "Browser"] }, arguments); };
    BluetoothClassicSerialPort.prototype.read = function (interfaceId) { return cordova(this, "read", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPort.prototype.readUntil = function (interfaceId, delimiter) { return cordova(this, "readUntil", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPort.prototype.subscribe = function (interfaceId, delimiter) { return cordova(this, "subscribe", { "platforms": ["Android", "iOS", "Browser"], "observable": true }, arguments); };
    BluetoothClassicSerialPort.prototype.unsubscribe = function (interfaceId) { return cordova(this, "unsubscribe", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPort.prototype.subscribeRawData = function (interfaceId) { return cordova(this, "subscribeRawData", { "platforms": ["Android", "iOS", "Browser"], "observable": true }, arguments); };
    BluetoothClassicSerialPort.prototype.unsubscribeRawData = function (interfaceId) { return cordova(this, "unsubscribeRawData", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPort.prototype.clear = function (interfaceId) { return cordova(this, "clear", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPort.prototype.list = function () { return cordova(this, "list", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPort.prototype.isConnected = function (interfaceId) { return cordova(this, "isConnected", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPort.prototype.isEnabled = function () { return cordova(this, "isEnabled", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPort.prototype.showBluetoothSettings = function () { return cordova(this, "showBluetoothSettings", { "platforms": ["Android"] }, arguments); };
    BluetoothClassicSerialPort.prototype.enable = function () { return cordova(this, "enable", { "platforms": ["Android", "Browser"] }, arguments); };
    BluetoothClassicSerialPort.prototype.discoverUnpaired = function () { return cordova(this, "discoverUnpaired", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPort.prototype.setDeviceDiscoveredListener = function () { return cordova(this, "setDeviceDiscoveredListener", { "platforms": ["Android", "iOS", "Browser"], "observable": true, "clearFunction": "clearDeviceDiscoveredListener" }, arguments); };
    BluetoothClassicSerialPort.prototype.clearDeviceDiscoveredListener = function () { return cordova(this, "clearDeviceDiscoveredListener", { "platforms": ["Android", "iOS", "Browser"], "sync": true }, arguments); };
    BluetoothClassicSerialPort.pluginName = "BluetoothClassicSerialPort";
    BluetoothClassicSerialPort.repo = "https://github.com/MaximBelov/cordova-plugin-bluetooth-classic-serial-port";
    BluetoothClassicSerialPort.plugin = "cordova-plugin-bluetooth-classic-serial-port";
    BluetoothClassicSerialPort.pluginRef = "bluetoothClassicSerial";
    BluetoothClassicSerialPort.platforms = ["Android", "iOS", "Browser"];
    BluetoothClassicSerialPort.decorators = [
        { type: Injectable }
    ];
    return BluetoothClassicSerialPort;
}(AwesomeCordovaNativePlugin));
export { BluetoothClassicSerialPort };
//# sourceMappingURL=data:application/json;base64,