var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var BluetoothClassicSerialPortOriginal = /** @class */ (function (_super) {
    __extends(BluetoothClassicSerialPortOriginal, _super);
    function BluetoothClassicSerialPortOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BluetoothClassicSerialPortOriginal.prototype.connect = function (deviceId, interfaceId) { return cordova(this, "connect", { "platforms": ["Android", "iOS"], "observable": true }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.connectIos = function (deviceId, interfaceArray) { return cordova(this, "connect", { "platforms": ["iOS"], "methodName": "connect" }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.connectInsecure = function (deviceId, interfaceArray) { return cordova(this, "connectInsecure", { "platforms": ["Android"], "observable": true }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.disconnect = function (interfaceId) { return cordova(this, "disconnect", {}, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.disconnectAll = function () { return cordova(this, "connect", { "methodName": "connect" }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.write = function (interfaceId, data) { return cordova(this, "write", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.available = function (interfaceId) { return cordova(this, "available", { "platforms": ["Android", "Browser"] }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.read = function (interfaceId) { return cordova(this, "read", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.readUntil = function (interfaceId, delimiter) { return cordova(this, "readUntil", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.subscribe = function (interfaceId, delimiter) { return cordova(this, "subscribe", { "platforms": ["Android", "iOS", "Browser"], "observable": true }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.unsubscribe = function (interfaceId) { return cordova(this, "unsubscribe", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.subscribeRawData = function (interfaceId) { return cordova(this, "subscribeRawData", { "platforms": ["Android", "iOS", "Browser"], "observable": true }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.unsubscribeRawData = function (interfaceId) { return cordova(this, "unsubscribeRawData", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.clear = function (interfaceId) { return cordova(this, "clear", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.list = function () { return cordova(this, "list", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.isConnected = function (interfaceId) { return cordova(this, "isConnected", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.isEnabled = function () { return cordova(this, "isEnabled", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.showBluetoothSettings = function () { return cordova(this, "showBluetoothSettings", { "platforms": ["Android"] }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.enable = function () { return cordova(this, "enable", { "platforms": ["Android", "Browser"] }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.discoverUnpaired = function () { return cordova(this, "discoverUnpaired", { "platforms": ["Android", "iOS", "Browser"] }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.setDeviceDiscoveredListener = function () { return cordova(this, "setDeviceDiscoveredListener", { "platforms": ["Android", "iOS", "Browser"], "observable": true, "clearFunction": "clearDeviceDiscoveredListener" }, arguments); };
    BluetoothClassicSerialPortOriginal.prototype.clearDeviceDiscoveredListener = function () { return cordova(this, "clearDeviceDiscoveredListener", { "platforms": ["Android", "iOS", "Browser"], "sync": true }, arguments); };
    BluetoothClassicSerialPortOriginal.pluginName = "BluetoothClassicSerialPort";
    BluetoothClassicSerialPortOriginal.repo = "https://github.com/MaximBelov/cordova-plugin-bluetooth-classic-serial-port";
    BluetoothClassicSerialPortOriginal.plugin = "cordova-plugin-bluetooth-classic-serial-port";
    BluetoothClassicSerialPortOriginal.pluginRef = "bluetoothClassicSerial";
    BluetoothClassicSerialPortOriginal.platforms = ["Android", "iOS", "Browser"];
    return BluetoothClassicSerialPortOriginal;
}(AwesomeCordovaNativePlugin));
var BluetoothClassicSerialPort = new BluetoothClassicSerialPortOriginal();
export { BluetoothClassicSerialPort };
//# sourceMappingURL=data:application/json;base64,