import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var ForegroundService = /** @class */ (function (_super) {
    __extends(ForegroundService, _super);
    function ForegroundService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ForegroundService.prototype.start = function (title, text, icon, importance, id) {
        if (importance === void 0) { importance = 1; }
        if (id === void 0) { id = 0; }
        return cordova(this, "start", { "sync": true }, arguments);
    };
    ForegroundService.prototype.stop = function () { return cordova(this, "stop", { "sync": true }, arguments); };
    ForegroundService.pluginName = "ForegroundService";
    ForegroundService.plugin = "cordova-plugin-foreground-service";
    ForegroundService.pluginRef = "cordova.plugins.foregroundService";
    ForegroundService.repo = "https://github.com/DavidBriglio/cordova-plugin-foreground-service";
    ForegroundService.platforms = ["Android"];
    ForegroundService.decorators = [
        { type: Injectable }
    ];
    return ForegroundService;
}(AwesomeCordovaNativePlugin));
export { ForegroundService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZm9yZWdyb3VuZC1zZXJ2aWNlL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQWdEckQscUNBQTBCOzs7O0lBNEIvRCxpQ0FBSyxhQUFDLEtBQWEsRUFBRSxJQUFZLEVBQUUsSUFBYSxFQUFFLFVBQXlCLEVBQUUsRUFBTTtRQUFqQywyQkFBQSxFQUFBLGNBQXlCO1FBQUUsbUJBQUEsRUFBQSxNQUFNOzs7SUFVbkYsZ0NBQUk7Ozs7Ozs7Z0JBdkNMLFVBQVU7OzRCQWhEWDtFQWlEdUMsMEJBQTBCO1NBQXBELGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBGb3JlZ3JvdW5kIFNlcnZpY2VcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgcGx1Z2luIGFsbG93cyBmb3IgYW5kcm9pZCBkZXZpY2VzIHRvIGNvbnRpbnVlIHJ1bm5pbmcgc2VydmljZXMgaW4gdGhlIGJhY2tncm91bmQsIHVzaW5nIGFcclxuICogZm9yZWdyb3VuZCBvbmdvaW5nIG5vdGlmaWNhdGlvbi4gVGhpcyBpcyB0YXJnZXRlZCB0b3dhcmRzIHVzZSB3aXRoIHBsdWdpbnMgc3VjaCBhc1xyXG4gKiAnY29yZG92YS1nZW9sb2NhdGlvbicgdGhhdCB3aWxsIG5vdCBydW4gd2hpbGUgdGhlIGFwcCBpcyBpbiB0aGUgYmFja2dyb3VuZCBvbiBhbmRyb2lkIEFQSSAyNisuXHJcbiAqXHJcbiAqIEZvciBhbmRyb2lkIEFQSSAyOCssIHRoZSBmb2xsb3dpbmcgeG1sIHNuaXBwZXQgc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGBgY29uZmlnLnhtbGBgYDpcclxuICpcclxuICogYGBgXHJcbiAqIC4uLlxyXG4gKiA8cGxhdGZvcm0gbmFtZT1cImFuZHJvaWRcIj5cclxuICogICA8Y29uZmlnLWZpbGUgcGFyZW50PVwiLypcIiB0YXJnZXQ9XCJBbmRyb2lkTWFuaWZlc3QueG1sXCI+XHJcbiAqICAgICA8dXNlcy1wZXJtaXNzaW9uIGFuZHJvaWQ6bmFtZT1cImFuZHJvaWQucGVybWlzc2lvbi5GT1JFR1JPVU5EX1NFUlZJQ0VcIiAvPlxyXG4gKiAgIDwvY29uZmlnLWZpbGU+XHJcbiAqICAgLi4uXHJcbiAqIGBgYFxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBGb3JlZ3JvdW5kU2VydmljZSB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9mb3JlZ3JvdW5kLXNlcnZpY2Uvbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHVibGljIGZvcmVncm91bmRTZXJ2aWNlOiBGb3JlZ3JvdW5kU2VydmljZSkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiBzdGFydFNlcnZpY2UoKSB7XHJcbiAqICAvLyBOb3RpZmljYXRpb24gaW1wb3J0YW5jZSBpcyBvcHRpb25hbCwgdGhlIGRlZmF1bHQgaXMgMSAtIExvdyAobm8gc291bmQgb3IgdmlicmF0aW9uKVxyXG4gKiAgdGhpcy5mb3JlZ3JvdW5kU2VydmljZS5zdGFydCgnR1BTIFJ1bm5pbmcnLCAnQmFja2dyb3VuZCBTZXJ2aWNlJywgJ2RyYXdhYmxlL2ZzaWNvbicpO1xyXG4gKiB9XHJcbiAqXHJcbiAqIHN0b3BTZXJ2aWNlKCkge1xyXG4gKiAgLy8gRGlzYWJsZSB0aGUgZm9yZWdyb3VuZCBzZXJ2aWNlXHJcbiAqICB0aGlzLmZvcmVncm91bmRTZXJ2aWNlLnN0b3AoKTtcclxuICogfVxyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdGb3JlZ3JvdW5kU2VydmljZScsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZm9yZWdyb3VuZC1zZXJ2aWNlJyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuZm9yZWdyb3VuZFNlcnZpY2UnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcmlnbGlvL2NvcmRvdmEtcGx1Z2luLWZvcmVncm91bmQtc2VydmljZScsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRm9yZWdyb3VuZFNlcnZpY2UgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogRW5hYmxlcyB0aGUgZm9yZWdyb3VuZCBzZXJ2aWNlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGUgKGNvbnRlbnQgdGl0bGUpIEEgYnJpZWYgaGVhZGxpbmUgZm9yIHRoZSBub3RpZmljYXRpb25cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAoY29udGVudCB0ZXh0KSBTdXBwb3J0aW5nIGluZm9ybWF0aW9uXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGljb24gVGhlIGRyYXdhYmxlIGljb24gY2FuIGJlIGFueSBkcmF3YWJsZSBpbWFnZSB0aGF0IGV4aXN0cyBpbiB0aGUgcmVzb3VyY2UgZm9sZGVyLiBUaGlzIG1lYW5zIHlvdSBtdXN0IGNvcHkgdGhlIGljb24geW91IHdhbnQgdG8gdXNlIGludG8gdGhlIHBsYXRmb3Jtcy9hbmRyb2lkL2FwcC9zcmMvbWFpbi9yZXMvZHJhd2FibGUgZm9sZGVyIHNldC4gSWYgbm8gaWNvbiBjYW4gYmUgZm91bmQgdXNpbmcgdGhlIGljb24gbmFtZSBwYXJhbWV0ZXIsIGEgZGVmYXVsdCBzdGFyIGljb24gd2lsbCBiZSB1c2VkLlxyXG4gICAqXHJcbiAgICogRm9yIGFuIGV4YW1wbGUsIGlmIHRoZSBgZnNpY29uLnBuZ2AgKHNlZSB4bWwgYmVsb3cpIHJlc2lkZXMgaGVyZTogYGBgc3JjL2Fzc2V0cy9pY29uL2ZzaWNvbi5wbmdgYGAuIFRoZW4gYGBgaWNvbmBgYCBwYXJhbWV0ZXIgdmFsdWUgd291bGQgYmUgYGBgJ2RyYXdhYmxlL2ZzaWNvbidgYGAuIEluIG9yZGVyIGZvciB0aGlzIGV4YW1wbGUgdG8gd29yaywgdGhlIGZvbGxvd2luZyB4bWwgc25pcHBldCBtdXN0IGJlIGluIGBgYGNvbmZpZy54bWxgYGAuXHJcbiAgICpcclxuICAgKiBgYGBcclxuICAgKiA8cGxhdGZvcm0gbmFtZT1cImFuZHJvaWRcIj5cclxuICAgKiAgIDxyZXNvdXJjZS1maWxlIHNyYz1cInd3dy9hc3NldHMvaWNvbi9mc2ljb24ucG5nXCIgdGFyZ2V0PVwiYXBwL3NyYy9tYWluL3Jlcy9kcmF3YWJsZS9mc2ljb24ucG5nXCIgLz5cclxuICAgKiAgIC4uLlxyXG4gICAqIGBgYFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbXBvcnRhbmNlIE5vdGlmaWNhdGlvbiBpbXBvcnRhbmNlIGRpY3RhdGVzIGhvdyB0aGUgbm90aWZpY2F0aW9uIGlzIGluaXRpYWxseSBwcmVzZW50ZWQ6XHJcbiAgICpcclxuICAgKiBWYWx1ZSB8IEltcG9ydGFuY2UgfCBEZXNjcmlwdGlvbiB8IEV4YW1wbGVzXHJcbiAgICogLS0tIHwgLS0tIHwgLS0tIHwgLS0tXHJcbiAgICogMXxJTVBPUlRBTkNFX0xPV3xEb2VzIG5vdCBtYWtlIGEgc291bmQgb3IgaGVhZHMtdXAgZGlzcGxheSAocGx1Z2luJ3MgZGVmYXVsdCl8TmV3IGNvbnRlbnQgdGhlIHVzZXIgaGFzIHN1YnNjcmliZWQgdG8sIHNvY2lhbCBuZXR3b3JrIGludml0YXRpb25zXHJcbiAgICogMnxJTVBPUlRBTkNFX0RFRkFVTFR8TWFrZXMgYSBzb3VuZCwgYnV0IG5vIGhlYWRzLXVwIGRpc3BsYXl8VHJhZmZpYyBhbGVydHMsIHRhc2sgcmVtaW5kZXJzXHJcbiAgICogM3xJTVBPUlRBTkNFX0hJR0h8TWFrZXMgYSBzb3VuZCBhbmQgaGVhZHMtdXAgZGlzcGxheXxUZXh0IG1lc3NhZ2VzLCBhbGFybXMsIHBob25lIGNhbGxzXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGlkIFRoZSBub3RpZmljYXRpb24gaWQgaXMgYSBjdXN0b21pemFibGUgaW50ZWdlciB0aGF0IGlzIHVzZWQgdG8gcmVmZXJlbmNlIHRoZSBub3RpZmljYXRpb24gdGhhdCB3aWxsIGJlIGxhdW5jaGVkLiBUaGlzIGlzIGN1c3RvbWl6YWJsZSB0byBhdm9pZCBjb25mbGljdGluZyB3aXRoIGFueSBvdGhlciBub3RpZmljYXRpb25zLiBJZiB0aGlzIGlzIG5vdCBpbmNsdWRlZCwgYSBbKnVuaXF1ZSpdIGRlZmF1bHQgaWQgd2lsbCBiZSB1c2VkLlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vcGxhdGZvcm0tZ3VpZGFuY2UvYW5kcm9pZC1ub3RpZmljYXRpb25zLmh0bWxcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzeW5jOiB0cnVlLFxyXG4gIH0pXHJcbiAgc3RhcnQodGl0bGU6IHN0cmluZywgdGV4dDogc3RyaW5nLCBpY29uPzogc3RyaW5nLCBpbXBvcnRhbmNlOiAxIHwgMiB8IDMgPSAxLCBpZCA9IDApOiB2b2lkIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERpc2FibGVzIHRoZSBmb3JlZ3JvdW5kIHNlcnZpY2VcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzeW5jOiB0cnVlLFxyXG4gIH0pXHJcbiAgc3RvcCgpOiB2b2lkIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19