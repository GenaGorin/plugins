var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var ForegroundServiceOriginal = /** @class */ (function (_super) {
    __extends(ForegroundServiceOriginal, _super);
    function ForegroundServiceOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ForegroundServiceOriginal.prototype.start = function (title, text, icon, importance, id) {
        if (importance === void 0) { importance = 1; }
        if (id === void 0) { id = 0; }
        return cordova(this, "start", { "sync": true }, arguments);
    };
    ForegroundServiceOriginal.prototype.stop = function () { return cordova(this, "stop", { "sync": true }, arguments); };
    ForegroundServiceOriginal.pluginName = "ForegroundService";
    ForegroundServiceOriginal.plugin = "cordova-plugin-foreground-service";
    ForegroundServiceOriginal.pluginRef = "cordova.plugins.foregroundService";
    ForegroundServiceOriginal.repo = "https://github.com/DavidBriglio/cordova-plugin-foreground-service";
    ForegroundServiceOriginal.platforms = ["Android"];
    return ForegroundServiceOriginal;
}(AwesomeCordovaNativePlugin));
var ForegroundService = new ForegroundServiceOriginal();
export { ForegroundService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZm9yZWdyb3VuZC1zZXJ2aWNlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQWdEckQscUNBQTBCOzs7O0lBNEIvRCxpQ0FBSyxhQUFDLEtBQWEsRUFBRSxJQUFZLEVBQUUsSUFBYSxFQUFFLFVBQXlCLEVBQUUsRUFBTTtRQUFqQywyQkFBQSxFQUFBLGNBQXlCO1FBQUUsbUJBQUEsRUFBQSxNQUFNOzs7SUFVbkYsZ0NBQUk7Ozs7Ozs0QkF2Rk47RUFpRHVDLDBCQUEwQjtTQUFwRCxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG4vKipcclxuICogQG5hbWUgRm9yZWdyb3VuZCBTZXJ2aWNlXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGlzIHBsdWdpbiBhbGxvd3MgZm9yIGFuZHJvaWQgZGV2aWNlcyB0byBjb250aW51ZSBydW5uaW5nIHNlcnZpY2VzIGluIHRoZSBiYWNrZ3JvdW5kLCB1c2luZyBhXHJcbiAqIGZvcmVncm91bmQgb25nb2luZyBub3RpZmljYXRpb24uIFRoaXMgaXMgdGFyZ2V0ZWQgdG93YXJkcyB1c2Ugd2l0aCBwbHVnaW5zIHN1Y2ggYXNcclxuICogJ2NvcmRvdmEtZ2VvbG9jYXRpb24nIHRoYXQgd2lsbCBub3QgcnVuIHdoaWxlIHRoZSBhcHAgaXMgaW4gdGhlIGJhY2tncm91bmQgb24gYW5kcm9pZCBBUEkgMjYrLlxyXG4gKlxyXG4gKiBGb3IgYW5kcm9pZCBBUEkgMjgrLCB0aGUgZm9sbG93aW5nIHhtbCBzbmlwcGV0IHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBgYGNvbmZpZy54bWxgYGA6XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiAuLi5cclxuICogPHBsYXRmb3JtIG5hbWU9XCJhbmRyb2lkXCI+XHJcbiAqICAgPGNvbmZpZy1maWxlIHBhcmVudD1cIi8qXCIgdGFyZ2V0PVwiQW5kcm9pZE1hbmlmZXN0LnhtbFwiPlxyXG4gKiAgICAgPHVzZXMtcGVybWlzc2lvbiBhbmRyb2lkOm5hbWU9XCJhbmRyb2lkLnBlcm1pc3Npb24uRk9SRUdST1VORF9TRVJWSUNFXCIgLz5cclxuICogICA8L2NvbmZpZy1maWxlPlxyXG4gKiAgIC4uLlxyXG4gKiBgYGBcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgRm9yZWdyb3VuZFNlcnZpY2UgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvZm9yZWdyb3VuZC1zZXJ2aWNlL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHB1YmxpYyBmb3JlZ3JvdW5kU2VydmljZTogRm9yZWdyb3VuZFNlcnZpY2UpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogc3RhcnRTZXJ2aWNlKCkge1xyXG4gKiAgLy8gTm90aWZpY2F0aW9uIGltcG9ydGFuY2UgaXMgb3B0aW9uYWwsIHRoZSBkZWZhdWx0IGlzIDEgLSBMb3cgKG5vIHNvdW5kIG9yIHZpYnJhdGlvbilcclxuICogIHRoaXMuZm9yZWdyb3VuZFNlcnZpY2Uuc3RhcnQoJ0dQUyBSdW5uaW5nJywgJ0JhY2tncm91bmQgU2VydmljZScsICdkcmF3YWJsZS9mc2ljb24nKTtcclxuICogfVxyXG4gKlxyXG4gKiBzdG9wU2VydmljZSgpIHtcclxuICogIC8vIERpc2FibGUgdGhlIGZvcmVncm91bmQgc2VydmljZVxyXG4gKiAgdGhpcy5mb3JlZ3JvdW5kU2VydmljZS5zdG9wKCk7XHJcbiAqIH1cclxuICpcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnRm9yZWdyb3VuZFNlcnZpY2UnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWZvcmVncm91bmQtc2VydmljZScsXHJcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLmZvcmVncm91bmRTZXJ2aWNlJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJpZ2xpby9jb3Jkb3ZhLXBsdWdpbi1mb3JlZ3JvdW5kLXNlcnZpY2UnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEZvcmVncm91bmRTZXJ2aWNlIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIEVuYWJsZXMgdGhlIGZvcmVncm91bmQgc2VydmljZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlIChjb250ZW50IHRpdGxlKSBBIGJyaWVmIGhlYWRsaW5lIGZvciB0aGUgbm90aWZpY2F0aW9uXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgKGNvbnRlbnQgdGV4dCkgU3VwcG9ydGluZyBpbmZvcm1hdGlvblxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpY29uIFRoZSBkcmF3YWJsZSBpY29uIGNhbiBiZSBhbnkgZHJhd2FibGUgaW1hZ2UgdGhhdCBleGlzdHMgaW4gdGhlIHJlc291cmNlIGZvbGRlci4gVGhpcyBtZWFucyB5b3UgbXVzdCBjb3B5IHRoZSBpY29uIHlvdSB3YW50IHRvIHVzZSBpbnRvIHRoZSBwbGF0Zm9ybXMvYW5kcm9pZC9hcHAvc3JjL21haW4vcmVzL2RyYXdhYmxlIGZvbGRlciBzZXQuIElmIG5vIGljb24gY2FuIGJlIGZvdW5kIHVzaW5nIHRoZSBpY29uIG5hbWUgcGFyYW1ldGVyLCBhIGRlZmF1bHQgc3RhciBpY29uIHdpbGwgYmUgdXNlZC5cclxuICAgKlxyXG4gICAqIEZvciBhbiBleGFtcGxlLCBpZiB0aGUgYGZzaWNvbi5wbmdgIChzZWUgeG1sIGJlbG93KSByZXNpZGVzIGhlcmU6IGBgYHNyYy9hc3NldHMvaWNvbi9mc2ljb24ucG5nYGBgLiBUaGVuIGBgYGljb25gYGAgcGFyYW1ldGVyIHZhbHVlIHdvdWxkIGJlIGBgYCdkcmF3YWJsZS9mc2ljb24nYGBgLiBJbiBvcmRlciBmb3IgdGhpcyBleGFtcGxlIHRvIHdvcmssIHRoZSBmb2xsb3dpbmcgeG1sIHNuaXBwZXQgbXVzdCBiZSBpbiBgYGBjb25maWcueG1sYGBgLlxyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICogPHBsYXRmb3JtIG5hbWU9XCJhbmRyb2lkXCI+XHJcbiAgICogICA8cmVzb3VyY2UtZmlsZSBzcmM9XCJ3d3cvYXNzZXRzL2ljb24vZnNpY29uLnBuZ1wiIHRhcmdldD1cImFwcC9zcmMvbWFpbi9yZXMvZHJhd2FibGUvZnNpY29uLnBuZ1wiIC8+XHJcbiAgICogICAuLi5cclxuICAgKiBgYGBcclxuICAgKiBAcGFyYW0ge251bWJlcn0gaW1wb3J0YW5jZSBOb3RpZmljYXRpb24gaW1wb3J0YW5jZSBkaWN0YXRlcyBob3cgdGhlIG5vdGlmaWNhdGlvbiBpcyBpbml0aWFsbHkgcHJlc2VudGVkOlxyXG4gICAqXHJcbiAgICogVmFsdWUgfCBJbXBvcnRhbmNlIHwgRGVzY3JpcHRpb24gfCBFeGFtcGxlc1xyXG4gICAqIC0tLSB8IC0tLSB8IC0tLSB8IC0tLVxyXG4gICAqIDF8SU1QT1JUQU5DRV9MT1d8RG9lcyBub3QgbWFrZSBhIHNvdW5kIG9yIGhlYWRzLXVwIGRpc3BsYXkgKHBsdWdpbidzIGRlZmF1bHQpfE5ldyBjb250ZW50IHRoZSB1c2VyIGhhcyBzdWJzY3JpYmVkIHRvLCBzb2NpYWwgbmV0d29yayBpbnZpdGF0aW9uc1xyXG4gICAqIDJ8SU1QT1JUQU5DRV9ERUZBVUxUfE1ha2VzIGEgc291bmQsIGJ1dCBubyBoZWFkcy11cCBkaXNwbGF5fFRyYWZmaWMgYWxlcnRzLCB0YXNrIHJlbWluZGVyc1xyXG4gICAqIDN8SU1QT1JUQU5DRV9ISUdIfE1ha2VzIGEgc291bmQgYW5kIGhlYWRzLXVwIGRpc3BsYXl8VGV4dCBtZXNzYWdlcywgYWxhcm1zLCBwaG9uZSBjYWxsc1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpZCBUaGUgbm90aWZpY2F0aW9uIGlkIGlzIGEgY3VzdG9taXphYmxlIGludGVnZXIgdGhhdCBpcyB1c2VkIHRvIHJlZmVyZW5jZSB0aGUgbm90aWZpY2F0aW9uIHRoYXQgd2lsbCBiZSBsYXVuY2hlZC4gVGhpcyBpcyBjdXN0b21pemFibGUgdG8gYXZvaWQgY29uZmxpY3Rpbmcgd2l0aCBhbnkgb3RoZXIgbm90aWZpY2F0aW9ucy4gSWYgdGhpcyBpcyBub3QgaW5jbHVkZWQsIGEgWyp1bmlxdWUqXSBkZWZhdWx0IGlkIHdpbGwgYmUgdXNlZC5cclxuICAgKiBAc2VlIGh0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL3BsYXRmb3JtLWd1aWRhbmNlL2FuZHJvaWQtbm90aWZpY2F0aW9ucy5odG1sXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3luYzogdHJ1ZSxcclxuICB9KVxyXG4gIHN0YXJ0KHRpdGxlOiBzdHJpbmcsIHRleHQ6IHN0cmluZywgaWNvbj86IHN0cmluZywgaW1wb3J0YW5jZTogMSB8IDIgfCAzID0gMSwgaWQgPSAwKTogdm9pZCB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEaXNhYmxlcyB0aGUgZm9yZWdyb3VuZCBzZXJ2aWNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3luYzogdHJ1ZSxcclxuICB9KVxyXG4gIHN0b3AoKTogdm9pZCB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==