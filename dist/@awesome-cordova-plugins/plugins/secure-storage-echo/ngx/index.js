import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, checkAvailability, cordovaInstance, getPromise } from '@awesome-cordova-plugins/core';
var SecureStorageEchoObject = /** @class */ (function () {
    function SecureStorageEchoObject(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    SecureStorageEchoObject.prototype.get = function (key) { return cordovaInstance(this, "get", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.set = function (key, value) { return cordovaInstance(this, "set", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.remove = function (key) { return cordovaInstance(this, "remove", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.keys = function () { return cordovaInstance(this, "keys", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.clear = function () { return cordovaInstance(this, "clear", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.secureDevice = function () { return cordovaInstance(this, "secureDevice", {}, arguments); };
    return SecureStorageEchoObject;
}());
export { SecureStorageEchoObject };
var SecureStorageEcho = /** @class */ (function (_super) {
    __extends(SecureStorageEcho, _super);
    function SecureStorageEcho() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SecureStorageEcho.prototype.create = function (store, options) {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return getPromise(function (res, rej) {
                    var instance = new (SecureStorageEcho.getPlugin())(function () { return res(new SecureStorageEchoObject(instance)); }, function () { return rej(new SecureStorageEchoObject(instance)); }, store, options);
                });
            }
        })();
    };
    SecureStorageEcho.pluginName = "SecureStorageEcho";
    SecureStorageEcho.plugin = "cordova-plugin-secure-storage-echo";
    SecureStorageEcho.pluginRef = "cordova.plugins.SecureStorage";
    SecureStorageEcho.repo = "https://github.com/mibrito707/cordova-plugin-secure-storage-echo";
    SecureStorageEcho.platforms = ["Android", "Browser", "iOS", "Windows"];
    SecureStorageEcho.decorators = [
        { type: Injectable }
    ];
    return SecureStorageEcho;
}(AwesomeCordovaNativePlugin));
export { SecureStorageEcho };
//# sourceMappingURL=data:application/json;base64,