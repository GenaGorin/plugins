import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var FirebaseDynamicLinks = /** @class */ (function (_super) {
    __extends(FirebaseDynamicLinks, _super);
    function FirebaseDynamicLinks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseDynamicLinks.prototype.getDynamicLink = function () { return cordova(this, "getDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinks.prototype.onDynamicLink = function () { return cordova(this, "onDynamicLink", { "callbackOrder": "reverse", "observable": true }, arguments); };
    FirebaseDynamicLinks.prototype.createDynamicLink = function (opts) { return cordova(this, "createDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinks.prototype.createShortDynamicLink = function (opts) { return cordova(this, "createShortDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinks.prototype.createUnguessableDynamicLink = function (opts) { return cordova(this, "createUnguessableDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinks.pluginName = "FirebaseDynamicLinks";
    FirebaseDynamicLinks.plugin = " cordova-plugin-firebase-dynamiclinks";
    FirebaseDynamicLinks.pluginRef = "cordova.plugins.firebase.dynamiclinks";
    FirebaseDynamicLinks.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-dynamiclinks";
    FirebaseDynamicLinks.install = "ionic cordova plugin add cordova-plugin-firebase-dynamiclinks --save --variable APP_DOMAIN=\"example.com\" --variable APP_PATH=\"/\"";
    FirebaseDynamicLinks.installVariables = ["APP_DOMAIN", "APP_PATH"];
    FirebaseDynamicLinks.platforms = ["Android", "iOS"];
    FirebaseDynamicLinks.decorators = [
        { type: Injectable }
    ];
    return FirebaseDynamicLinks;
}(AwesomeCordovaNativePlugin));
export { FirebaseDynamicLinks };
//# sourceMappingURL=data:application/json;base64,