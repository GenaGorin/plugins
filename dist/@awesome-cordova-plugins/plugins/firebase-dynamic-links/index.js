var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var FirebaseDynamicLinksOriginal = /** @class */ (function (_super) {
    __extends(FirebaseDynamicLinksOriginal, _super);
    function FirebaseDynamicLinksOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseDynamicLinksOriginal.prototype.getDynamicLink = function () { return cordova(this, "getDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinksOriginal.prototype.onDynamicLink = function () { return cordova(this, "onDynamicLink", { "callbackOrder": "reverse", "observable": true }, arguments); };
    FirebaseDynamicLinksOriginal.prototype.createDynamicLink = function (opts) { return cordova(this, "createDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinksOriginal.prototype.createShortDynamicLink = function (opts) { return cordova(this, "createShortDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinksOriginal.prototype.createUnguessableDynamicLink = function (opts) { return cordova(this, "createUnguessableDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinksOriginal.pluginName = "FirebaseDynamicLinks";
    FirebaseDynamicLinksOriginal.plugin = " cordova-plugin-firebase-dynamiclinks";
    FirebaseDynamicLinksOriginal.pluginRef = "cordova.plugins.firebase.dynamiclinks";
    FirebaseDynamicLinksOriginal.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-dynamiclinks";
    FirebaseDynamicLinksOriginal.install = "ionic cordova plugin add cordova-plugin-firebase-dynamiclinks --save --variable APP_DOMAIN=\"example.com\" --variable APP_PATH=\"/\"";
    FirebaseDynamicLinksOriginal.installVariables = ["APP_DOMAIN", "APP_PATH"];
    FirebaseDynamicLinksOriginal.platforms = ["Android", "iOS"];
    return FirebaseDynamicLinksOriginal;
}(AwesomeCordovaNativePlugin));
var FirebaseDynamicLinks = new FirebaseDynamicLinksOriginal();
export { FirebaseDynamicLinks };
//# sourceMappingURL=data:application/json;base64,