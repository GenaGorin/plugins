import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var Keychain = /** @class */ (function (_super) {
    __extends(Keychain, _super);
    function Keychain() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Keychain.prototype.get = function (key, touchIDMessage) { return cordova(this, "get", { "callbackOrder": "reverse" }, arguments); };
    Keychain.prototype.set = function (key, value, useTouchID) { return cordova(this, "set", { "callbackOrder": "reverse" }, arguments); };
    Keychain.prototype.getJson = function (key, touchIDMessage) { return cordova(this, "getJson", { "callbackOrder": "reverse" }, arguments); };
    Keychain.prototype.setJson = function (key, obj, useTouchId) { return cordova(this, "setJson", { "callbackOrder": "reverse" }, arguments); };
    Keychain.prototype.remove = function (key) { return cordova(this, "remove", { "callbackOrder": "reverse" }, arguments); };
    Keychain.pluginName = "Keychain";
    Keychain.plugin = "cordova-plugin-ios-keychain";
    Keychain.pluginRef = "window.Keychain";
    Keychain.repo = "https://github.com/ionic-team/cordova-plugin-ios-keychain";
    Keychain.platforms = ["iOS"];
    Keychain.decorators = [
        { type: Injectable }
    ];
    return Keychain;
}(AwesomeCordovaNativePlugin));
export { Keychain };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMva2V5Y2hhaW4vbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBa0M5RCw0QkFBMEI7Ozs7SUFVdEQsc0JBQUcsYUFBQyxHQUFXLEVBQUUsY0FBdUI7SUFjeEMsc0JBQUcsYUFBQyxHQUFXLEVBQUUsS0FBZ0MsRUFBRSxVQUFtQjtJQWF0RSwwQkFBTyxhQUFDLEdBQVcsRUFBRSxjQUF1QjtJQWM1QywwQkFBTyxhQUFDLEdBQVcsRUFBRSxHQUFRLEVBQUUsVUFBb0I7SUFZbkQseUJBQU0sYUFBQyxHQUFXOzs7Ozs7O2dCQWhFbkIsVUFBVTs7bUJBbENYO0VBbUM4QiwwQkFBMEI7U0FBM0MsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBLZXljaGFpblxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogR2V0IGFuZCBzZXQgZGF0YSBpbiB0aGUgaU9TIEtleWNoYWluXHJcbiAqXHJcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4taW9zLWtleWNoYWluYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0tleWNoYWluIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vaW9uaWMtdGVhbS9jb3Jkb3ZhLXBsdWdpbi1pb3Mta2V5Y2hhaW4pLlxyXG4gKlxyXG4gKiBTZWUgYWxzbyBbU2VjdXJlIFN0b3JhZ2VdKGh0dHBzOi8vaW9uaWMuaW8vZG9jcy9zZWN1cmUtc3RvcmFnZSkgZm9yIG1vcmUgc3VwcG9ydGVkIHBsYXRmb3Jtcy5cclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgS2V5Y2hhaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMva2V5Y2hhaW4vbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBrZXljaGFpbjogS2V5Y2hhaW4pIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy5rZXljaGFpbi5zZXQoa2V5LCB2YWx1ZSwgZmFsc2UpLnRoZW4oKCkgPT4ge1xyXG4gKiAgIHRoaXMua2V5Y2hhaW4uZ2V0KGtleSlcclxuICogICAgIC50aGVuKHZhbHVlID0+IGNvbnNvbGUubG9nKCdHb3QgdmFsdWUnLCB2YWx1ZSkpXHJcbiAqICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcnLCBlcnIpKTtcclxuICogfSlcclxuICogLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKCdFcnJvciBzZXR0aW5nJywgZXJyKSk7XHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0tleWNoYWluJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1pb3Mta2V5Y2hhaW4nLFxyXG4gIHBsdWdpblJlZjogJ3dpbmRvdy5LZXljaGFpbicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9pb25pYy10ZWFtL2NvcmRvdmEtcGx1Z2luLWlvcy1rZXljaGFpbicsXHJcbiAgcGxhdGZvcm1zOiBbJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBLZXljaGFpbiBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBSZXRyaWV2ZXMgYSB2YWx1ZSBmb3IgYSBrZXlcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdGhlIGtleSB0byByZXRyaWV2ZVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdG91Y2hJRE1lc3NhZ2VdIHRoZSBtZXNzYWdlIHRvIHNob3cgdW5kZXJuZWF0aCB0aGUgVG91Y2hJRCBwcm9tcHQgKGlmIGFueSlcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgfSlcclxuICBnZXQoa2V5OiBzdHJpbmcsIHRvdWNoSURNZXNzYWdlPzogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgYSB2YWx1ZSBmb3IgYSBrZXlcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdGhlIGtleSB0byBzZXRcclxuICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ8Ym9vbGVhbn0gdmFsdWUgdGhlIHZhbHVlIHRvIHNldFxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VzZVRvdWNoSURdIHdoZXRoZXIgdG8gc3RvcmUgdGhlIHZhbHVlIHdpdGggc2VjdXJpdHkgc3VjaCB0aGF0IFRvdWNoSUQgd2lsbCBiZSBuZWVkZWQgdG8gZ3JhYiBpdFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICB9KVxyXG4gIHNldChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4sIHVzZVRvdWNoSUQ6IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyBhIEpTT04gdmFsdWUgZm9yIGEga2V5XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBrZXkgdG8gcmV0cmlldmVcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG91Y2hJRE1lc3NhZ2UgdGhlIG1lc3NhZ2UgdG8gc2hvdyB1bmRlcm5lYXRoIHRoZSBUb3VjaElEIHByb21wdCAoaWYgYW55KVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICB9KVxyXG4gIGdldEpzb24oa2V5OiBzdHJpbmcsIHRvdWNoSURNZXNzYWdlPzogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgYSBKU09OIHZhbHVlIGZvciBhIGtleVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSB0aGUga2V5IHRvIHNldFxyXG4gICAqIEBwYXJhbSB7YW55fSBvYmogdmFsdWUgdGhlIHZhbHVlIHRvIHNldFxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VzZVRvdWNoSWRdIFdldGhlciB0byBzdG9yZSB0aGUgdmFsdWUgd2l0aCBzZWN1cml0eSBzdWNoIHRoYXQgVG91Y2hJRCB3aWxsIGJlIG5lZWRlZCB0byBncmFiIGl0XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxyXG4gIH0pXHJcbiAgc2V0SnNvbihrZXk6IHN0cmluZywgb2JqOiBhbnksIHVzZVRvdWNoSWQ/OiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZXMgYSB2YWx1ZSBmb3IgYSBrZXlcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdGhlIGtleSB0byByZW1vdmVcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgfSlcclxuICByZW1vdmUoa2V5OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=