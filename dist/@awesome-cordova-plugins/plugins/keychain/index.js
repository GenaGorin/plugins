var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var KeychainOriginal = /** @class */ (function (_super) {
    __extends(KeychainOriginal, _super);
    function KeychainOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    KeychainOriginal.prototype.get = function (key, touchIDMessage) { return cordova(this, "get", { "callbackOrder": "reverse" }, arguments); };
    KeychainOriginal.prototype.set = function (key, value, useTouchID) { return cordova(this, "set", { "callbackOrder": "reverse" }, arguments); };
    KeychainOriginal.prototype.getJson = function (key, touchIDMessage) { return cordova(this, "getJson", { "callbackOrder": "reverse" }, arguments); };
    KeychainOriginal.prototype.setJson = function (key, obj, useTouchId) { return cordova(this, "setJson", { "callbackOrder": "reverse" }, arguments); };
    KeychainOriginal.prototype.remove = function (key) { return cordova(this, "remove", { "callbackOrder": "reverse" }, arguments); };
    KeychainOriginal.pluginName = "Keychain";
    KeychainOriginal.plugin = "cordova-plugin-ios-keychain";
    KeychainOriginal.pluginRef = "window.Keychain";
    KeychainOriginal.repo = "https://github.com/ionic-team/cordova-plugin-ios-keychain";
    KeychainOriginal.platforms = ["iOS"];
    return KeychainOriginal;
}(AwesomeCordovaNativePlugin));
var Keychain = new KeychainOriginal();
export { Keychain };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMva2V5Y2hhaW4vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBa0M5RCw0QkFBMEI7Ozs7SUFVdEQsc0JBQUcsYUFBQyxHQUFXLEVBQUUsY0FBdUI7SUFjeEMsc0JBQUcsYUFBQyxHQUFXLEVBQUUsS0FBZ0MsRUFBRSxVQUFtQjtJQWF0RSwwQkFBTyxhQUFDLEdBQVcsRUFBRSxjQUF1QjtJQWM1QywwQkFBTyxhQUFDLEdBQVcsRUFBRSxHQUFRLEVBQUUsVUFBb0I7SUFZbkQseUJBQU0sYUFBQyxHQUFXOzs7Ozs7bUJBbEdwQjtFQW1DOEIsMEJBQTBCO1NBQTNDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG4vKipcclxuICogQG5hbWUgS2V5Y2hhaW5cclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEdldCBhbmQgc2V0IGRhdGEgaW4gdGhlIGlPUyBLZXljaGFpblxyXG4gKlxyXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLWlvcy1rZXljaGFpbmAuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtLZXljaGFpbiBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL2lvbmljLXRlYW0vY29yZG92YS1wbHVnaW4taW9zLWtleWNoYWluKS5cclxuICpcclxuICogU2VlIGFsc28gW1NlY3VyZSBTdG9yYWdlXShodHRwczovL2lvbmljLmlvL2RvY3Mvc2VjdXJlLXN0b3JhZ2UpIGZvciBtb3JlIHN1cHBvcnRlZCBwbGF0Zm9ybXMuXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IEtleWNoYWluIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2tleWNoYWluL25neCc7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUga2V5Y2hhaW46IEtleWNoYWluKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIHRoaXMua2V5Y2hhaW4uc2V0KGtleSwgdmFsdWUsIGZhbHNlKS50aGVuKCgpID0+IHtcclxuICogICB0aGlzLmtleWNoYWluLmdldChrZXkpXHJcbiAqICAgICAudGhlbih2YWx1ZSA9PiBjb25zb2xlLmxvZygnR290IHZhbHVlJywgdmFsdWUpKVxyXG4gKiAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nJywgZXJyKSk7XHJcbiAqIH0pXHJcbiAqIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcignRXJyb3Igc2V0dGluZycsIGVycikpO1xyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdLZXljaGFpbicsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4taW9zLWtleWNoYWluJyxcclxuICBwbHVnaW5SZWY6ICd3aW5kb3cuS2V5Y2hhaW4nLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vaW9uaWMtdGVhbS9jb3Jkb3ZhLXBsdWdpbi1pb3Mta2V5Y2hhaW4nLFxyXG4gIHBsYXRmb3JtczogWydpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgS2V5Y2hhaW4gZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogUmV0cmlldmVzIGEgdmFsdWUgZm9yIGEga2V5XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBrZXkgdG8gcmV0cmlldmVcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3RvdWNoSURNZXNzYWdlXSB0aGUgbWVzc2FnZSB0byBzaG93IHVuZGVybmVhdGggdGhlIFRvdWNoSUQgcHJvbXB0IChpZiBhbnkpXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxyXG4gIH0pXHJcbiAgZ2V0KGtleTogc3RyaW5nLCB0b3VjaElETWVzc2FnZT86IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIGEgdmFsdWUgZm9yIGEga2V5XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBrZXkgdG8gc2V0XHJcbiAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfGJvb2xlYW59IHZhbHVlIHRoZSB2YWx1ZSB0byBzZXRcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFt1c2VUb3VjaElEXSB3aGV0aGVyIHRvIHN0b3JlIHRoZSB2YWx1ZSB3aXRoIHNlY3VyaXR5IHN1Y2ggdGhhdCBUb3VjaElEIHdpbGwgYmUgbmVlZGVkIHRvIGdyYWIgaXRcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgfSlcclxuICBzZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuLCB1c2VUb3VjaElEOiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgYSBKU09OIHZhbHVlIGZvciBhIGtleVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSB0aGUga2V5IHRvIHJldHJpZXZlXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvdWNoSURNZXNzYWdlIHRoZSBtZXNzYWdlIHRvIHNob3cgdW5kZXJuZWF0aCB0aGUgVG91Y2hJRCBwcm9tcHQgKGlmIGFueSlcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgfSlcclxuICBnZXRKc29uKGtleTogc3RyaW5nLCB0b3VjaElETWVzc2FnZT86IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIGEgSlNPTiB2YWx1ZSBmb3IgYSBrZXlcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdGhlIGtleSB0byBzZXRcclxuICAgKiBAcGFyYW0ge2FueX0gb2JqIHZhbHVlIHRoZSB2YWx1ZSB0byBzZXRcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFt1c2VUb3VjaElkXSBXZXRoZXIgdG8gc3RvcmUgdGhlIHZhbHVlIHdpdGggc2VjdXJpdHkgc3VjaCB0aGF0IFRvdWNoSUQgd2lsbCBiZSBuZWVkZWQgdG8gZ3JhYiBpdFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICB9KVxyXG4gIHNldEpzb24oa2V5OiBzdHJpbmcsIG9iajogYW55LCB1c2VUb3VjaElkPzogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmVzIGEgdmFsdWUgZm9yIGEga2V5XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBrZXkgdG8gcmVtb3ZlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxyXG4gIH0pXHJcbiAgcmVtb3ZlKGtleTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19