import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var AppCenterCrashes = /** @class */ (function (_super) {
    __extends(AppCenterCrashes, _super);
    function AppCenterCrashes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppCenterCrashes.prototype.generateTestCrash = function () { return cordova(this, "generateTestCrash", {}, arguments); };
    AppCenterCrashes.prototype.hasCrashedInLastSession = function () { return cordova(this, "hasCrashedInLastSession", {}, arguments); };
    AppCenterCrashes.prototype.lastSessionCrashReport = function () { return cordova(this, "lastSessionCrashReport", {}, arguments); };
    AppCenterCrashes.prototype.isEnabled = function () { return cordova(this, "isEnabled", {}, arguments); };
    AppCenterCrashes.prototype.setEnabled = function (shouldEnable) { return cordova(this, "setEnabled", {}, arguments); };
    AppCenterCrashes.pluginName = "AppCenterCrashes";
    AppCenterCrashes.plugin = "cordova-plugin-appcenter-crashes";
    AppCenterCrashes.pluginRef = "AppCenter.Crashes";
    AppCenterCrashes.repo = "https://github.com/Microsoft/appcenter-sdk-cordova/tree/master/cordova-plugin-appcenter-crashes";
    AppCenterCrashes.platforms = ["Android", "iOS"];
    AppCenterCrashes.decorators = [
        { type: Injectable }
    ];
    return AppCenterCrashes;
}(AwesomeCordovaNativePlugin));
export { AppCenterCrashes };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYXBwLWNlbnRlci1jcmFzaGVzL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQWtFdEQsb0NBQTBCOzs7O0lBUTlELDRDQUFpQjtJQVFqQixrREFBdUI7SUFVdkIsaURBQXNCO0lBVXRCLG9DQUFTO0lBV1QscUNBQVUsYUFBQyxZQUFxQjs7Ozs7OztnQkFoRGpDLFVBQVU7OzJCQWxFWDtFQW1Fc0MsMEJBQTBCO1NBQW5ELGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXBwQ2VudGVyQ3Jhc2hSZXBvcnQge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgZGV2aWNlOiBBcHBDZW50ZXJDcmFzaFJlcG9ydERldmljZTtcclxuICBhcHBTdGFydFRpbWU6IG51bWJlcjtcclxuICBhcHBFcnJvclRpbWU6IG51bWJlcjtcclxuICBzaWduYWw6IHN0cmluZztcclxuICBhcHBQcm9jZXNzSWRlbnRpZmllcjogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFwcENlbnRlckNyYXNoUmVwb3J0RGV2aWNlIHtcclxuICBvZW1fbmFtZTogc3RyaW5nO1xyXG4gIG9zX25hbWU6IHN0cmluZztcclxuICBhcHBfdmVyc2lvbjogc3RyaW5nO1xyXG4gIHRpbWVfem9uZV9vZmZzZXQ6IG51bWJlcjtcclxuICBjYXJyaWVyX25hbWU6IHN0cmluZztcclxuICBzY3JlZW5fc2l6ZTogc3RyaW5nO1xyXG4gIGxvY2FsZTogc3RyaW5nO1xyXG4gIHNka192ZXJzaW9uOiBzdHJpbmc7XHJcbiAgY2Fycmllcl9jb3VudHJ5OiBzdHJpbmc7XHJcbiAgb3NfYnVpbGQ6IHN0cmluZztcclxuICBhcHBfbmFtZXNwYWNlOiBzdHJpbmc7XHJcbiAgb3NfdmVyc2lvbjogc3RyaW5nO1xyXG4gIHNka19uYW1lOiBzdHJpbmc7XHJcbiAgbW9kZWw6IHN0cmluZztcclxuICBhcHBfYnVpbGQ6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIEFwcCBDZW50ZXIgQ3Jhc2hlc1xyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQXBwIENlbnRlciBBbmFseXRpY3MgaGVscHMgeW91IHVuZGVyc3RhbmQgdXNlciBiZWhhdmlvciBhbmQgY3VzdG9tZXIgZW5nYWdlbWVudCB0byBpbXByb3ZlIHlvdXIgYXBwLlxyXG4gKiBUaGUgU0RLIGF1dG9tYXRpY2FsbHkgY2FwdHVyZXMgc2Vzc2lvbiBjb3VudCBhbmQgZGV2aWNlIHByb3BlcnRpZXMgbGlrZSBtb2RlbCwgT1MgdmVyc2lvbiwgZXRjLlxyXG4gKiBZb3UgY2FuIGRlZmluZSB5b3VyIG93biBjdXN0b20gZXZlbnRzIHRvIG1lYXN1cmUgdGhpbmdzIHRoYXQgbWF0dGVyIHRvIHlvdS5cclxuICogQWxsIHRoZSBpbmZvcm1hdGlvbiBjYXB0dXJlZCBpcyBhdmFpbGFibGUgaW4gdGhlIEFwcCBDZW50ZXIgcG9ydGFsIGZvciB5b3UgdG8gYW5hbHl6ZSB0aGUgZGF0YS5cclxuICpcclxuICogRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9hcHBjZW50ZXIvc2RrL2NyYXNoZXMvY29yZG92YVxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBBcHBDZW50ZXJDcmFzaGVzIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2FwcC1jZW50ZXItY3Jhc2hlcy9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIEFwcENlbnRlckNyYXNoZXM6IEFwcENlbnRlckNyYXNoZXMpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy5BcHBDZW50ZXJDcmFzaGVzLnNldEVuYWJsZWQodHJ1ZSkudGhlbigoKSA9PiB7XHJcbiAqICAgIHRoaXMuQXBwQ2VudGVyQ3Jhc2hlcy5sYXN0U2Vzc2lvbkNyYXNoUmVwb3J0KCkudGhlbihyZXBvcnQgPT4ge1xyXG4gKiAgICAgICAgY29uc29sZS5sb2coJ0NyYXNoIHJlcG9ydCcsIHJlcG9ydCk7XHJcbiAqICAgIH0pO1xyXG4gKiB9KTtcclxuICpcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIEFwcENlbnRlckNyYXNoUmVwb3J0XHJcbiAqIEFwcENlbnRlckNyYXNoUmVwb3J0RGV2aWNlXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnQXBwQ2VudGVyQ3Jhc2hlcycsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYXBwY2VudGVyLWNyYXNoZXMnLFxyXG4gIHBsdWdpblJlZjogJ0FwcENlbnRlci5DcmFzaGVzJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9hcHBjZW50ZXItc2RrLWNvcmRvdmEvdHJlZS9tYXN0ZXIvY29yZG92YS1wbHVnaW4tYXBwY2VudGVyLWNyYXNoZXMnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBBcHBDZW50ZXJDcmFzaGVzIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIEFwcCBDZW50ZXIgQ3Jhc2hlcyBwcm92aWRlcyB5b3Ugd2l0aCBhbiBBUEkgdG8gZ2VuZXJhdGUgYSB0ZXN0IGNyYXNoIGZvciBlYXN5IHRlc3Rpbmcgb2YgdGhlIFNESy5cclxuICAgKiBUaGlzIEFQSSBjYW4gb25seSBiZSB1c2VkIGluIHRlc3QvYmV0YSBhcHBzIGFuZCB3b24ndCBkbyBhbnl0aGluZyBpbiBwcm9kdWN0aW9uIGFwcHMuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB2b2lkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdlbmVyYXRlVGVzdENyYXNoKCk6IHZvaWQge31cclxuXHJcbiAgLyoqXHJcbiAgICogQXQgYW55IHRpbWUgYWZ0ZXIgc3RhcnRpbmcgdGhlIFNESywgeW91IGNhbiBjaGVjayBpZiB0aGUgYXBwIGNyYXNoZWQgaW4gdGhlIHByZXZpb3VzIGxhdW5jaFxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGhhc0NyYXNoZWRJbkxhc3RTZXNzaW9uKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGV0YWlscyBhYm91dCB0aGUgbGFzdCBjcmFzaFxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8QXBwQ2VudGVyQ3Jhc2hSZXBvcnQ+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBsYXN0U2Vzc2lvbkNyYXNoUmVwb3J0KCk6IFByb21pc2U8QXBwQ2VudGVyQ3Jhc2hSZXBvcnQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrIGlmIEFwcCBDZW50ZXIgQ3Jhc2hlcyBpcyBlbmFibGVkXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaXNFbmFibGVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgQXBwIENlbnRlciBDcmFzaGVzIGF0IHJ1bnRpbWVcclxuICAgKlxyXG4gICAqIEBwYXJhbSAge2Jvb2xlYW59IHNob3VsZEVuYWJsZSBTZXQgdmFsdWVcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2V0RW5hYmxlZChzaG91bGRFbmFibGU6IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19