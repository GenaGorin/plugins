var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var AppCenterCrashesOriginal = /** @class */ (function (_super) {
    __extends(AppCenterCrashesOriginal, _super);
    function AppCenterCrashesOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppCenterCrashesOriginal.prototype.generateTestCrash = function () { return cordova(this, "generateTestCrash", {}, arguments); };
    AppCenterCrashesOriginal.prototype.hasCrashedInLastSession = function () { return cordova(this, "hasCrashedInLastSession", {}, arguments); };
    AppCenterCrashesOriginal.prototype.lastSessionCrashReport = function () { return cordova(this, "lastSessionCrashReport", {}, arguments); };
    AppCenterCrashesOriginal.prototype.isEnabled = function () { return cordova(this, "isEnabled", {}, arguments); };
    AppCenterCrashesOriginal.prototype.setEnabled = function (shouldEnable) { return cordova(this, "setEnabled", {}, arguments); };
    AppCenterCrashesOriginal.pluginName = "AppCenterCrashes";
    AppCenterCrashesOriginal.plugin = "cordova-plugin-appcenter-crashes";
    AppCenterCrashesOriginal.pluginRef = "AppCenter.Crashes";
    AppCenterCrashesOriginal.repo = "https://github.com/Microsoft/appcenter-sdk-cordova/tree/master/cordova-plugin-appcenter-crashes";
    AppCenterCrashesOriginal.platforms = ["Android", "iOS"];
    return AppCenterCrashesOriginal;
}(AwesomeCordovaNativePlugin));
var AppCenterCrashes = new AppCenterCrashesOriginal();
export { AppCenterCrashes };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYXBwLWNlbnRlci1jcmFzaGVzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQWtFdEQsb0NBQTBCOzs7O0lBUTlELDRDQUFpQjtJQVFqQixrREFBdUI7SUFVdkIsaURBQXNCO0lBVXRCLG9DQUFTO0lBV1QscUNBQVUsYUFBQyxZQUFxQjs7Ozs7OzJCQWxIbEM7RUFtRXNDLDBCQUEwQjtTQUFuRCxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFwcENlbnRlckNyYXNoUmVwb3J0IHtcclxuICBpZDogc3RyaW5nO1xyXG4gIGRldmljZTogQXBwQ2VudGVyQ3Jhc2hSZXBvcnREZXZpY2U7XHJcbiAgYXBwU3RhcnRUaW1lOiBudW1iZXI7XHJcbiAgYXBwRXJyb3JUaW1lOiBudW1iZXI7XHJcbiAgc2lnbmFsOiBzdHJpbmc7XHJcbiAgYXBwUHJvY2Vzc0lkZW50aWZpZXI6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBcHBDZW50ZXJDcmFzaFJlcG9ydERldmljZSB7XHJcbiAgb2VtX25hbWU6IHN0cmluZztcclxuICBvc19uYW1lOiBzdHJpbmc7XHJcbiAgYXBwX3ZlcnNpb246IHN0cmluZztcclxuICB0aW1lX3pvbmVfb2Zmc2V0OiBudW1iZXI7XHJcbiAgY2Fycmllcl9uYW1lOiBzdHJpbmc7XHJcbiAgc2NyZWVuX3NpemU6IHN0cmluZztcclxuICBsb2NhbGU6IHN0cmluZztcclxuICBzZGtfdmVyc2lvbjogc3RyaW5nO1xyXG4gIGNhcnJpZXJfY291bnRyeTogc3RyaW5nO1xyXG4gIG9zX2J1aWxkOiBzdHJpbmc7XHJcbiAgYXBwX25hbWVzcGFjZTogc3RyaW5nO1xyXG4gIG9zX3ZlcnNpb246IHN0cmluZztcclxuICBzZGtfbmFtZTogc3RyaW5nO1xyXG4gIG1vZGVsOiBzdHJpbmc7XHJcbiAgYXBwX2J1aWxkOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBBcHAgQ2VudGVyIENyYXNoZXNcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEFwcCBDZW50ZXIgQW5hbHl0aWNzIGhlbHBzIHlvdSB1bmRlcnN0YW5kIHVzZXIgYmVoYXZpb3IgYW5kIGN1c3RvbWVyIGVuZ2FnZW1lbnQgdG8gaW1wcm92ZSB5b3VyIGFwcC5cclxuICogVGhlIFNESyBhdXRvbWF0aWNhbGx5IGNhcHR1cmVzIHNlc3Npb24gY291bnQgYW5kIGRldmljZSBwcm9wZXJ0aWVzIGxpa2UgbW9kZWwsIE9TIHZlcnNpb24sIGV0Yy5cclxuICogWW91IGNhbiBkZWZpbmUgeW91ciBvd24gY3VzdG9tIGV2ZW50cyB0byBtZWFzdXJlIHRoaW5ncyB0aGF0IG1hdHRlciB0byB5b3UuXHJcbiAqIEFsbCB0aGUgaW5mb3JtYXRpb24gY2FwdHVyZWQgaXMgYXZhaWxhYmxlIGluIHRoZSBBcHAgQ2VudGVyIHBvcnRhbCBmb3IgeW91IHRvIGFuYWx5emUgdGhlIGRhdGEuXHJcbiAqXHJcbiAqIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvYXBwY2VudGVyL3Nkay9jcmFzaGVzL2NvcmRvdmFcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgQXBwQ2VudGVyQ3Jhc2hlcyB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9hcHAtY2VudGVyLWNyYXNoZXMvbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBBcHBDZW50ZXJDcmFzaGVzOiBBcHBDZW50ZXJDcmFzaGVzKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIHRoaXMuQXBwQ2VudGVyQ3Jhc2hlcy5zZXRFbmFibGVkKHRydWUpLnRoZW4oKCkgPT4ge1xyXG4gKiAgICB0aGlzLkFwcENlbnRlckNyYXNoZXMubGFzdFNlc3Npb25DcmFzaFJlcG9ydCgpLnRoZW4ocmVwb3J0ID0+IHtcclxuICogICAgICAgIGNvbnNvbGUubG9nKCdDcmFzaCByZXBvcnQnLCByZXBvcnQpO1xyXG4gKiAgICB9KTtcclxuICogfSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBBcHBDZW50ZXJDcmFzaFJlcG9ydFxyXG4gKiBBcHBDZW50ZXJDcmFzaFJlcG9ydERldmljZVxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0FwcENlbnRlckNyYXNoZXMnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWFwcGNlbnRlci1jcmFzaGVzJyxcclxuICBwbHVnaW5SZWY6ICdBcHBDZW50ZXIuQ3Jhc2hlcycsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvYXBwY2VudGVyLXNkay1jb3Jkb3ZhL3RyZWUvbWFzdGVyL2NvcmRvdmEtcGx1Z2luLWFwcGNlbnRlci1jcmFzaGVzJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQXBwQ2VudGVyQ3Jhc2hlcyBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBBcHAgQ2VudGVyIENyYXNoZXMgcHJvdmlkZXMgeW91IHdpdGggYW4gQVBJIHRvIGdlbmVyYXRlIGEgdGVzdCBjcmFzaCBmb3IgZWFzeSB0ZXN0aW5nIG9mIHRoZSBTREsuXHJcbiAgICogVGhpcyBBUEkgY2FuIG9ubHkgYmUgdXNlZCBpbiB0ZXN0L2JldGEgYXBwcyBhbmQgd29uJ3QgZG8gYW55dGhpbmcgaW4gcHJvZHVjdGlvbiBhcHBzLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMgdm9pZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZW5lcmF0ZVRlc3RDcmFzaCgpOiB2b2lkIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIEF0IGFueSB0aW1lIGFmdGVyIHN0YXJ0aW5nIHRoZSBTREssIHlvdSBjYW4gY2hlY2sgaWYgdGhlIGFwcCBjcmFzaGVkIGluIHRoZSBwcmV2aW91cyBsYXVuY2hcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBoYXNDcmFzaGVkSW5MYXN0U2Vzc2lvbigpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERldGFpbHMgYWJvdXQgdGhlIGxhc3QgY3Jhc2hcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFwcENlbnRlckNyYXNoUmVwb3J0Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgbGFzdFNlc3Npb25DcmFzaFJlcG9ydCgpOiBQcm9taXNlPEFwcENlbnRlckNyYXNoUmVwb3J0PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBpZiBBcHAgQ2VudGVyIENyYXNoZXMgaXMgZW5hYmxlZFxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzRW5hYmxlZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIEFwcCBDZW50ZXIgQ3Jhc2hlcyBhdCBydW50aW1lXHJcbiAgICpcclxuICAgKiBAcGFyYW0gIHtib29sZWFufSBzaG91bGRFbmFibGUgU2V0IHZhbHVlXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldEVuYWJsZWQoc2hvdWxkRW5hYmxlOiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==