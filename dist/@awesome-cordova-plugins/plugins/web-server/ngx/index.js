import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var WebServer = /** @class */ (function (_super) {
    __extends(WebServer, _super);
    function WebServer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebServer.prototype.start = function (port) { return cordova(this, "start", { "callbackOrder": "reverse" }, arguments); };
    WebServer.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    WebServer.prototype.onRequest = function () { return cordova(this, "onRequest", { "callbackOrder": "reverse", "observable": true, "clearFunction": "stop" }, arguments); };
    WebServer.prototype.sendResponse = function (requestId, responseObject) { return cordova(this, "sendResponse", {}, arguments); };
    WebServer.pluginName = "WebServer";
    WebServer.plugin = "cordova-plugin-webserver2";
    WebServer.pluginRef = "window.webserver";
    WebServer.repo = "https://github.com/nguyenthanh1995/cordova-plugin-webserver2.git";
    WebServer.platforms = ["Android", "iOS"];
    WebServer.decorators = [
        { type: Injectable }
    ];
    return WebServer;
}(AwesomeCordovaNativePlugin));
export { WebServer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvd2ViLXNlcnZlci9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQztBQUM1RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQTZESCw2QkFBMEI7Ozs7SUFTdkQseUJBQUssYUFBQyxJQUFhO0lBUW5CLHdCQUFJO0lBY0osNkJBQVM7SUFZVCxnQ0FBWSxhQUFDLFNBQWlCLEVBQUUsY0FBd0I7Ozs7Ozs7Z0JBNUN6RCxVQUFVOztvQkE5RFg7RUErRCtCLDBCQUEwQjtTQUE1QyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlIHtcclxuICBzdGF0dXM6IG51bWJlcjtcclxuICBib2R5Pzogc3RyaW5nO1xyXG4gIHBhdGg/OiBzdHJpbmc7XHJcbiAgaGVhZGVyczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSZXF1ZXN0IHtcclxuICByZXF1ZXN0SWQ6IHN0cmluZztcclxuICBib2R5OiBzdHJpbmc7XHJcbiAgaGVhZGVyczogc3RyaW5nO1xyXG4gIG1ldGhvZDogJ1BPU1QnIHwgJ0dFVCcgfCAnUFVUJyB8ICdQQVRDSCcgfCAnREVMRVRFJztcclxuICBwYXRoOiBzdHJpbmc7XHJcbiAgcXVlcnk6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIFdlYiBTZXJ2ZXJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgcGx1Z2luIGFsbG93cyB5b3UgdG8gc3RhcnQgYSBsb2NhbCBkeW5hbWljIGNvbnRlbnQgd2ViIHNlcnZlciBmb3IgYW5kcm9pZCBhbmQgaU9TIGRldmljZXMuXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IFdlYlNlcnZlciB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy93ZWItc2VydmVyL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgd2ViU2VydmVyOiBXZWJTZXJ2ZXIpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy53ZWJTZXJ2ZXIub25SZXF1ZXN0KCkuc3Vic2NyaWJlKGRhdGEgPT4ge1xyXG4gKiAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gKiAgIGNvbnN0IHJlczogUmVzcG9uc2UgPSB7XHJcbiAqICAgICBzdGF0dXM6IDIwMCxcclxuICogICAgIGJvZHk6ICcnLFxyXG4gKiAgICAgaGVhZGVyczoge1xyXG4gKiAgICAgICAnQ29udGVudC1UeXBlJzogJ3RleHQvaHRtbCdcclxuICogICAgIH1cclxuICogICB9O1xyXG4gKlxyXG4gKiAgIHRoaXMud2ViU2VydmVyLnNlbmRSZXNwb25zZShkYXRhLnJlcXVlc3RJZCwgcmVzKVxyXG4gKiAgICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqIH0pO1xyXG4gKlxyXG4gKiB0aGlzLndlYlNlcnZlci5zdGFydCg4MClcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIFJlc3BvbnNlXHJcbiAqIFJlcXVlc3RcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdXZWJTZXJ2ZXInLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXdlYnNlcnZlcjInLFxyXG4gIHBsdWdpblJlZjogJ3dpbmRvdy53ZWJzZXJ2ZXInLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vbmd1eWVudGhhbmgxOTk1L2NvcmRvdmEtcGx1Z2luLXdlYnNlcnZlcjIuZ2l0JyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgV2ViU2VydmVyIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgc3RhcnQgeW91ciB3ZWJzZXJ2ZXIuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gcG9ydCB7bnVtYmVyfSBQb3J0IG51bWJlciAoZGVmYXVsdCB0byA4MDgwKVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICB9KVxyXG4gIHN0YXJ0KHBvcnQ/OiBudW1iZXIpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBtZXRob2Qgd2lsbCBzdG9wIHlvdXIgd2Vic2VydmVyLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzdG9wKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCBzdHJlYW1zIEhUVFAgcmVxdWVzdHMgdG8gYW4gb2JzZXJ2ZXIuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxSZXF1ZXN0Pn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlIHRvIHJlc29sdmUgYXMgYSBSZXF1ZXN0IG9iamVjdFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICAgIG9ic2VydmFibGU6IHRydWUsXHJcbiAgICBjbGVhckZ1bmN0aW9uOiAnc3RvcCcsXHJcbiAgfSlcclxuICBvblJlcXVlc3QoKTogT2JzZXJ2YWJsZTxSZXF1ZXN0PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIG1ldGhvZCBzZW5kcyBhIHJlc3BvbnNlIHRvIGEgcmVxdWVzdC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSByZXF1ZXN0SWQge3N0cmluZ30gUmVxdWVzdCBJRCB0byByZXNwb25kIHRvXHJcbiAgICogQHBhcmFtIHJlc3BvbnNlT2JqZWN0IHtSZXNwb25zZX0gUmVzcG9uc2Ugb2JqZWN0XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHNvbWV0aGluZyBoYXBwZW5zXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNlbmRSZXNwb25zZShyZXF1ZXN0SWQ6IHN0cmluZywgcmVzcG9uc2VPYmplY3Q6IFJlc3BvbnNlKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19