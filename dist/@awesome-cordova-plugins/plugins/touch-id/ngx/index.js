import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var TouchID = /** @class */ (function (_super) {
    __extends(TouchID, _super);
    function TouchID() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TouchID.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    TouchID.prototype.verifyFingerprint = function (message) { return cordova(this, "verifyFingerprint", {}, arguments); };
    TouchID.prototype.verifyFingerprintWithCustomPasswordFallback = function (message) { return cordova(this, "verifyFingerprintWithCustomPasswordFallback", {}, arguments); };
    TouchID.prototype.verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel = function (message, enterPasswordLabel) { return cordova(this, "verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel", {}, arguments); };
    TouchID.prototype.didFingerprintDatabaseChange = function () { return cordova(this, "didFingerprintDatabaseChange", {}, arguments); };
    TouchID.pluginName = "TouchID";
    TouchID.plugin = "cordova-plugin-touch-id";
    TouchID.pluginRef = "plugins.touchid";
    TouchID.repo = "https://github.com/EddyVerbruggen/cordova-plugin-touch-id";
    TouchID.platforms = ["iOS"];
    TouchID.decorators = [
        { type: Injectable }
    ];
    return TouchID;
}(AwesomeCordovaNativePlugin));
export { TouchID };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvdG91Y2gtaWQvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBa0QvRCwyQkFBMEI7Ozs7SUFPckQsNkJBQVc7SUFXWCxtQ0FBaUIsYUFBQyxPQUFlO0lBV2pDLDZEQUEyQyxhQUFDLE9BQWU7SUFZM0Qsa0ZBQWdFLGFBQzlELE9BQWUsRUFDZixrQkFBMEI7SUFXNUIsOENBQTRCOzs7Ozs7O2dCQXZEN0IsVUFBVTs7a0JBbERYO0VBbUQ2QiwwQkFBMEI7U0FBMUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBUb3VjaCBJRFxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogU2NhbiB0aGUgZmluZ2VycHJpbnQgb2YgYSB1c2VyIHdpdGggdGhlIFRvdWNoSUQgc2Vuc29yLlxyXG4gKlxyXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLXRvdWNoLWlkYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW1RvdWNoSUQgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9jb3Jkb3ZhLXBsdWdpbi10b3VjaC1pZCkuXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IFRvdWNoSUQgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvdG91Y2gtaWQvbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSB0b3VjaElkOiBUb3VjaElEKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIHRoaXMudG91Y2hJZC5pc0F2YWlsYWJsZSgpXHJcbiAqICAgLnRoZW4oXHJcbiAqICAgICByZXMgPT4gY29uc29sZS5sb2coJ1RvdWNoSUQgaXMgYXZhaWxhYmxlIScpLFxyXG4gKiAgICAgZXJyID0+IGNvbnNvbGUuZXJyb3IoJ1RvdWNoSUQgaXMgbm90IGF2YWlsYWJsZScsIGVycilcclxuICogICApO1xyXG4gKlxyXG4gKiB0aGlzLnRvdWNoSWQudmVyaWZ5RmluZ2VycHJpbnQoJ1NjYW4geW91ciBmaW5nZXJwcmludCBwbGVhc2UnKVxyXG4gKiAgIC50aGVuKFxyXG4gKiAgICAgcmVzID0+IGNvbnNvbGUubG9nKCdPaycsIHJlcyksXHJcbiAqICAgICBlcnIgPT4gY29uc29sZS5lcnJvcignRXJyb3InLCBlcnIpXHJcbiAqICAgKTtcclxuICogYGBgXHJcbiAqXHJcbiAqICMjIyBFcnJvciBDb2Rlc1xyXG4gKlxyXG4gKiBUaGUgcGx1Z2luIHdpbGwgcmVqZWN0IGZvciB2YXJpb3VzIHJlYXNvbnMuIFlvdXIgYXBwIHdpbGwgbW9zdCBsaWtlbHkgbmVlZCB0byByZXNwb25kIHRvIHRoZSBjYXNlcyBkaWZmZXJlbnRseS5cclxuICpcclxuICogSGVyZSBpcyBhIGxpc3Qgb2Ygc29tZSBvZiB0aGUgZXJyb3IgY29kZXM6XHJcbiAqXHJcbiAqICAtICBgLTFgIC0gRmluZ2VycHJpbnQgc2NhbiBmYWlsZWQgbW9yZSB0aGFuIDMgdGltZXNcclxuICogIC0gIGAtMmAgb3IgYC0xMjhgIC0gVXNlciB0YXBwZWQgdGhlICdDYW5jZWwnIGJ1dHRvblxyXG4gKiAgLSAgYC0zYCAtIFVzZXIgdGFwcGVkIHRoZSAnRW50ZXIgUGFzc2NvZGUnIG9yICdFbnRlciBQYXNzd29yZCcgYnV0dG9uXHJcbiAqICAtICBgLTRgIC0gVGhlIHNjYW4gd2FzIGNhbmNlbGxlZCBieSB0aGUgc3lzdGVtIChIb21lIGJ1dHRvbiBmb3IgZXhhbXBsZSlcclxuICogIC0gIGAtNmAgLSBUb3VjaElEIGlzIG5vdCBBdmFpbGFibGVcclxuICogIC0gIGAtOGAgLSBUb3VjaElEIGlzIGxvY2tlZCBvdXQgZnJvbSB0b28gbWFueSB0cmllc1xyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ1RvdWNoSUQnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXRvdWNoLWlkJyxcclxuICBwbHVnaW5SZWY6ICdwbHVnaW5zLnRvdWNoaWQnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vRWRkeVZlcmJydWdnZW4vY29yZG92YS1wbHVnaW4tdG91Y2gtaWQnLFxyXG4gIHBsYXRmb3JtczogWydpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgVG91Y2hJRCBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBDaGVja3MgV2hldGhlciBUb3VjaElEIGlzIGF2YWlsYWJsZSBvciBub3QuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIHllcywgcmVqZWN0cyBpZiBuby5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaXNBdmFpbGFibGUoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNob3cgVG91Y2hJRCBkaWFsb2cgYW5kIHdhaXQgZm9yIGEgZmluZ2VycHJpbnQgc2Nhbi4gSWYgdXNlciB0YXBzICdFbnRlciBQYXNzd29yZCcgYnV0dG9uLCBicmluZ3MgdXAgc3RhbmRhcmQgc3lzdGVtIHBhc3Njb2RlIHNjcmVlbi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlICBUaGUgbWVzc2FnZSB0byBkaXNwbGF5XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2UgdGhlIHJlc29sdmVzIGlmIHRoZSBmaW5nZXJwcmludCBzY2FuIHdhcyBzdWNjZXNzZnVsLCByZWplY3RzIHdpdGggYW4gZXJyb3IgY29kZSAoc2VlIGFib3ZlKS5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgdmVyaWZ5RmluZ2VycHJpbnQobWVzc2FnZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNob3cgVG91Y2hJRCBkaWFsb2cgYW5kIHdhaXQgZm9yIGEgZmluZ2VycHJpbnQgc2Nhbi4gSWYgdXNlciB0YXBzICdFbnRlciBQYXNzd29yZCcgYnV0dG9uLCByZWplY3RzIHdpdGggY29kZSAnLTMnIChzZWUgYWJvdmUpLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgIFRoZSBtZXNzYWdlIHRvIGRpc3BsYXlcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGUgcmVzb2x2ZXMgaWYgdGhlIGZpbmdlcnByaW50IHNjYW4gd2FzIHN1Y2Nlc3NmdWwsIHJlamVjdHMgd2l0aCBhbiBlcnJvciBjb2RlIChzZWUgYWJvdmUpLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB2ZXJpZnlGaW5nZXJwcmludFdpdGhDdXN0b21QYXNzd29yZEZhbGxiYWNrKG1lc3NhZ2U6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTaG93IFRvdWNoSUQgZGlhbG9nIHdpdGggY3VzdG9tICdFbnRlciBQYXNzd29yZCcgbWVzc2FnZSBhbmQgd2FpdCBmb3IgYSBmaW5nZXJwcmludCBzY2FuLiBJZiB1c2VyIHRhcHMgJ0VudGVyIFBhc3N3b3JkJyBidXR0b24sIHJlamVjdHMgd2l0aCBjb2RlICctMycgKHNlZSBhYm92ZSkuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAgVGhlIG1lc3NhZ2UgdG8gZGlzcGxheVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbnRlclBhc3N3b3JkTGFiZWwgIEN1c3RvbSB0ZXh0IGZvciB0aGUgJ0VudGVyIFBhc3N3b3JkJyBidXR0b25cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGUgcmVzb2x2ZXMgaWYgdGhlIGZpbmdlcnByaW50IHNjYW4gd2FzIHN1Y2Nlc3NmdWwsIHJlamVjdHMgd2l0aCBhbiBlcnJvciBjb2RlIChzZWUgYWJvdmUpLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB2ZXJpZnlGaW5nZXJwcmludFdpdGhDdXN0b21QYXNzd29yZEZhbGxiYWNrQW5kRW50ZXJQYXNzd29yZExhYmVsKFxyXG4gICAgbWVzc2FnZTogc3RyaW5nLFxyXG4gICAgZW50ZXJQYXNzd29yZExhYmVsOiBzdHJpbmdcclxuICApOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2tzIGlmIHRoZSBmaW5nZXJwcmludCBkYXRhYmFzZSBjaGFuZ2VkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyBpZiB5ZXMsIHJlamVjdHMgaWYgbm8uXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGRpZEZpbmdlcnByaW50RGF0YWJhc2VDaGFuZ2UoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19