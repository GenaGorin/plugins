import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var CloudSettings = /** @class */ (function (_super) {
    __extends(CloudSettings, _super);
    function CloudSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CloudSettings.prototype.exists = function () { return cordova(this, "exists", {}, arguments); };
    CloudSettings.prototype.save = function (settings, overwrite) { return cordova(this, "save", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    CloudSettings.prototype.load = function () { return cordova(this, "load", {}, arguments); };
    CloudSettings.prototype.onRestore = function (handler) { return cordova(this, "onRestore", { "sync": true }, arguments); };
    CloudSettings.prototype.enableDebug = function () { return cordova(this, "enableDebug", {}, arguments); };
    CloudSettings.pluginName = "CloudSettings";
    CloudSettings.plugin = "cordova-plugin-cloud-settings";
    CloudSettings.pluginRef = "cordova.plugin.cloudsettings";
    CloudSettings.repo = "https://github.com/dpa99c/cordova-plugin-cloud-settings";
    CloudSettings.install = "ionic cordova plugin add cordova-plugin-cloud-settings --variable ANDROID_BACKUP_SERVICE_KEY=myapikey";
    CloudSettings.installVariables = ["ANDROID_BACKUP_SERVICE_KEY"];
    CloudSettings.platforms = ["Android", "iOS"];
    CloudSettings.decorators = [
        { type: Injectable }
    ];
    return CloudSettings;
}(AwesomeCordovaNativePlugin));
export { CloudSettings };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvY2xvdWQtc2V0dGluZ3Mvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBc0N6RCxpQ0FBMEI7Ozs7SUFPM0QsOEJBQU07SUFnQk4sNEJBQUksYUFBQyxRQUFhLEVBQUUsU0FBbUI7SUFVdkMsNEJBQUk7SUFVSixpQ0FBUyxhQUFDLE9BQWlCO0lBUTNCLG1DQUFXOzs7Ozs7Ozs7Z0JBcERaLFVBQVU7O3dCQXRDWDtFQXVDbUMsMEJBQTBCO1NBQWhELGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG4vKipcclxuICogQG5hbWUgQ2xvdWQgU2V0dGluZ3NcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFN0b3JlcyBhcHAgc2V0dGluZ3MgaW4gY2xvdWQgc3RvcmFnZSBzbyBpZiB0aGUgdXNlciByZS1pbnN0YWxscyB0aGUgYXBwIG9yIGluc3RhbGxzIGl0IG9uIGEgZGlmZmVyZW50IGRldmljZSwgdGhlIHNldHRpbmdzIHdpbGwgYmUgcmVzdG9yZWQgYW5kIGF2YWlsYWJsZSBpbiB0aGUgbmV3IGluc3RhbGxhdGlvbi5cclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgQ2xvdWRTZXR0aW5ncyB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jbG91ZC1zZXR0aW5ncy9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGNsb3VkU2V0dGluZ3M6IENsb3VkU2V0dGluZ3MpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy5jbG91ZFNldHRpbmdzLmV4aXN0cygpXHJcbiAqICAgLnRoZW4oKGV4aXN0czogYm9vbGVhbikgPT4gY29uc29sZS5sb2coXCJTYXZlZCBzZXR0aW5ncyBleGlzdDogXCIgKyBleGlzdHMpIClcclxuICpcclxuICogdGhpcy5jbG91ZFNldHRpbmdzLmxvYWQoKVxyXG4gKiAgIC50aGVuKChzZXR0aW5nczogYW55KSA9PiB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3MpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIHRoaXMuY2xvdWRTZXR0aW5ncy5zYXZlKHRoaXMuc2V0dGluZ3MpXHJcbiAqICAgLnRoZW4oKHNhdmVkU2V0dGluZ3M6IGFueSkgPT4gY29uc29sZS5sb2coXCJTYXZlZCBzZXR0aW5nczogXCIgKyBKU09OLnN0cmluZ2lmeShzYXZlZFNldHRpbmdzKSkpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0Nsb3VkU2V0dGluZ3MnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWNsb3VkLXNldHRpbmdzJyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbi5jbG91ZHNldHRpbmdzJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2RwYTk5Yy9jb3Jkb3ZhLXBsdWdpbi1jbG91ZC1zZXR0aW5ncycsXHJcbiAgaW5zdGFsbDogJ2lvbmljIGNvcmRvdmEgcGx1Z2luIGFkZCBjb3Jkb3ZhLXBsdWdpbi1jbG91ZC1zZXR0aW5ncyAtLXZhcmlhYmxlIEFORFJPSURfQkFDS1VQX1NFUlZJQ0VfS0VZPW15YXBpa2V5JyxcclxuICBpbnN0YWxsVmFyaWFibGVzOiBbJ0FORFJPSURfQkFDS1VQX1NFUlZJQ0VfS0VZJ10sXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIENsb3VkU2V0dGluZ3MgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIGlmIGFueSBzdG9yZWQgY2xvdWQgc2V0dGluZ3MgY3VycmVudGx5IGV4aXN0IGZvciB0aGUgY3VycmVudCB1c2VyLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IFdpbGwgYmUgcGFzc2VkIGEgYm9vbGVhbiBmbGFnIHdoaWNoIGluZGljYXRlcyB3aGV0aGVyIGFuIHN0b3JlIHNldHRpbmdzIGV4aXN0IGZvciB0aGUgdXNlci5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZXhpc3RzKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2F2ZXMgdGhlIHNldHRpbmdzIHRvIGNsb3VkIGJhY2t1cC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyAtIGEgSlNPTiBzdHJ1Y3R1cmUgcmVwcmVzZW50aW5nIHRoZSB1c2VyIHNldHRpbmdzIHRvIHNhdmUgdG8gY2xvdWQgYmFja3VwLlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW292ZXJ3cml0ZV0gLSAob3B0aW9uYWwpIGlmIHRydWUsIGV4aXN0aW5nIHNldHRpbmdzIHdpbGwgYmUgcmVwbGFjZWQgcmF0aGVyIHRoYW4gdXBkYXRlZC4gRGVmYXVsdHMgdG8gZmFsc2UuXHJcbiAgICogSWYgZmFsc2UsIGV4aXN0aW5nIHNldHRpbmdzIHdpbGwgYmUgbWVyZ2VkIHdpdGggdGhlIG5ldyBzZXR0aW5ncyBwYXNzZWQgdG8gdGhpcyBmdW5jdGlvbi5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBXaWxsIGJlIHBhc3NlZCBhIHNpbmdsZSBvYmplY3QgYXJndW1lbnQgd2hpY2ggY29udGFpbnMgdGhlIHNhdmVkIHNldHRpbmdzIGFzIGEgSlNPTiBvYmplY3QuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAxLFxyXG4gICAgZXJyb3JJbmRleDogMixcclxuICB9KVxyXG4gIHNhdmUoc2V0dGluZ3M6IGFueSwgb3ZlcndyaXRlPzogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMb2FkcyB0aGUgY3VycmVudCBzZXR0aW5ncy5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFdpbGwgYmUgcGFzc2VkIGEgc2luZ2xlIG9iamVjdCBhcmd1bWVudCB3aGljaCBjb250YWlucyB0aGUgc2F2ZWQgc2V0dGluZ3MgYXMgYSBKU09OIG9iamVjdC5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgbG9hZCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVnaXN0ZXJzIGEgZnVuY3Rpb24gd2hpY2ggd2lsbCBiZSBjYWxsZWQgaWYvd2hlbiBzZXR0aW5ncyBvbiB0aGUgZGV2aWNlIGhhdmUgYmVlbiB1cGRhdGVkIGZyb20gdGhlIGNsb3VkLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciAtIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIGRldmljZSBzZXR0aW5ncyBoYXZlIGJlZW4gdXBkYXRlZCBmcm9tIHRoZSBjbG91ZC5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBvblJlc3RvcmUoaGFuZGxlcjogRnVuY3Rpb24pOiB2b2lkIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIE91dHB1dHMgdmVyYm9zZSBsb2cgbWVzc2FnZXMgZnJvbSB0aGUgbmF0aXZlIHBsdWdpbiBjb21wb25lbnRzIHRvIHRoZSBKUyBjb25zb2xlLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGVuYWJsZURlYnVnKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=