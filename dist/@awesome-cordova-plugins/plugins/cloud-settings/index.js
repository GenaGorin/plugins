var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var CloudSettingsOriginal = /** @class */ (function (_super) {
    __extends(CloudSettingsOriginal, _super);
    function CloudSettingsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CloudSettingsOriginal.prototype.exists = function () { return cordova(this, "exists", {}, arguments); };
    CloudSettingsOriginal.prototype.save = function (settings, overwrite) { return cordova(this, "save", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    CloudSettingsOriginal.prototype.load = function () { return cordova(this, "load", {}, arguments); };
    CloudSettingsOriginal.prototype.onRestore = function (handler) { return cordova(this, "onRestore", { "sync": true }, arguments); };
    CloudSettingsOriginal.prototype.enableDebug = function () { return cordova(this, "enableDebug", {}, arguments); };
    CloudSettingsOriginal.pluginName = "CloudSettings";
    CloudSettingsOriginal.plugin = "cordova-plugin-cloud-settings";
    CloudSettingsOriginal.pluginRef = "cordova.plugin.cloudsettings";
    CloudSettingsOriginal.repo = "https://github.com/dpa99c/cordova-plugin-cloud-settings";
    CloudSettingsOriginal.install = "ionic cordova plugin add cordova-plugin-cloud-settings --variable ANDROID_BACKUP_SERVICE_KEY=myapikey";
    CloudSettingsOriginal.installVariables = ["ANDROID_BACKUP_SERVICE_KEY"];
    CloudSettingsOriginal.platforms = ["Android", "iOS"];
    return CloudSettingsOriginal;
}(AwesomeCordovaNativePlugin));
var CloudSettings = new CloudSettingsOriginal();
export { CloudSettings };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvY2xvdWQtc2V0dGluZ3MvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBc0N6RCxpQ0FBMEI7Ozs7SUFPM0QsOEJBQU07SUFnQk4sNEJBQUksYUFBQyxRQUFhLEVBQUUsU0FBbUI7SUFVdkMsNEJBQUk7SUFVSixpQ0FBUyxhQUFDLE9BQWlCO0lBUTNCLG1DQUFXOzs7Ozs7Ozt3QkExRmI7RUF1Q21DLDBCQUEwQjtTQUFoRCxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lIENsb3VkIFNldHRpbmdzXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBTdG9yZXMgYXBwIHNldHRpbmdzIGluIGNsb3VkIHN0b3JhZ2Ugc28gaWYgdGhlIHVzZXIgcmUtaW5zdGFsbHMgdGhlIGFwcCBvciBpbnN0YWxscyBpdCBvbiBhIGRpZmZlcmVudCBkZXZpY2UsIHRoZSBzZXR0aW5ncyB3aWxsIGJlIHJlc3RvcmVkIGFuZCBhdmFpbGFibGUgaW4gdGhlIG5ldyBpbnN0YWxsYXRpb24uXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IENsb3VkU2V0dGluZ3MgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY2xvdWQtc2V0dGluZ3Mvbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBjbG91ZFNldHRpbmdzOiBDbG91ZFNldHRpbmdzKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIHRoaXMuY2xvdWRTZXR0aW5ncy5leGlzdHMoKVxyXG4gKiAgIC50aGVuKChleGlzdHM6IGJvb2xlYW4pID0+IGNvbnNvbGUubG9nKFwiU2F2ZWQgc2V0dGluZ3MgZXhpc3Q6IFwiICsgZXhpc3RzKSApXHJcbiAqXHJcbiAqIHRoaXMuY2xvdWRTZXR0aW5ncy5sb2FkKClcclxuICogICAudGhlbigoc2V0dGluZ3M6IGFueSkgPT4gdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiB0aGlzLmNsb3VkU2V0dGluZ3Muc2F2ZSh0aGlzLnNldHRpbmdzKVxyXG4gKiAgIC50aGVuKChzYXZlZFNldHRpbmdzOiBhbnkpID0+IGNvbnNvbGUubG9nKFwiU2F2ZWQgc2V0dGluZ3M6IFwiICsgSlNPTi5zdHJpbmdpZnkoc2F2ZWRTZXR0aW5ncykpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdDbG91ZFNldHRpbmdzJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1jbG91ZC1zZXR0aW5ncycsXHJcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW4uY2xvdWRzZXR0aW5ncycsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9kcGE5OWMvY29yZG92YS1wbHVnaW4tY2xvdWQtc2V0dGluZ3MnLFxyXG4gIGluc3RhbGw6ICdpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1wbHVnaW4tY2xvdWQtc2V0dGluZ3MgLS12YXJpYWJsZSBBTkRST0lEX0JBQ0tVUF9TRVJWSUNFX0tFWT1teWFwaWtleScsXHJcbiAgaW5zdGFsbFZhcmlhYmxlczogWydBTkRST0lEX0JBQ0tVUF9TRVJWSUNFX0tFWSddLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBDbG91ZFNldHRpbmdzIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyBpZiBhbnkgc3RvcmVkIGNsb3VkIHNldHRpbmdzIGN1cnJlbnRseSBleGlzdCBmb3IgdGhlIGN1cnJlbnQgdXNlci5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSBXaWxsIGJlIHBhc3NlZCBhIGJvb2xlYW4gZmxhZyB3aGljaCBpbmRpY2F0ZXMgd2hldGhlciBhbiBzdG9yZSBzZXR0aW5ncyBleGlzdCBmb3IgdGhlIHVzZXIuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGV4aXN0cygpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNhdmVzIHRoZSBzZXR0aW5ncyB0byBjbG91ZCBiYWNrdXAuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgLSBhIEpTT04gc3RydWN0dXJlIHJlcHJlc2VudGluZyB0aGUgdXNlciBzZXR0aW5ncyB0byBzYXZlIHRvIGNsb3VkIGJhY2t1cC5cclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvdmVyd3JpdGVdIC0gKG9wdGlvbmFsKSBpZiB0cnVlLCBleGlzdGluZyBzZXR0aW5ncyB3aWxsIGJlIHJlcGxhY2VkIHJhdGhlciB0aGFuIHVwZGF0ZWQuIERlZmF1bHRzIHRvIGZhbHNlLlxyXG4gICAqIElmIGZhbHNlLCBleGlzdGluZyBzZXR0aW5ncyB3aWxsIGJlIG1lcmdlZCB3aXRoIHRoZSBuZXcgc2V0dGluZ3MgcGFzc2VkIHRvIHRoaXMgZnVuY3Rpb24uXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gV2lsbCBiZSBwYXNzZWQgYSBzaW5nbGUgb2JqZWN0IGFyZ3VtZW50IHdoaWNoIGNvbnRhaW5zIHRoZSBzYXZlZCBzZXR0aW5ncyBhcyBhIEpTT04gb2JqZWN0LlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN1Y2Nlc3NJbmRleDogMSxcclxuICAgIGVycm9ySW5kZXg6IDIsXHJcbiAgfSlcclxuICBzYXZlKHNldHRpbmdzOiBhbnksIG92ZXJ3cml0ZT86IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTG9hZHMgdGhlIGN1cnJlbnQgc2V0dGluZ3MuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBXaWxsIGJlIHBhc3NlZCBhIHNpbmdsZSBvYmplY3QgYXJndW1lbnQgd2hpY2ggY29udGFpbnMgdGhlIHNhdmVkIHNldHRpbmdzIGFzIGEgSlNPTiBvYmplY3QuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGxvYWQoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlZ2lzdGVycyBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYmUgY2FsbGVkIGlmL3doZW4gc2V0dGluZ3Mgb24gdGhlIGRldmljZSBoYXZlIGJlZW4gdXBkYXRlZCBmcm9tIHRoZSBjbG91ZC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgLSBjYWxsYmFjayBmdW5jdGlvbiB0byBpbnZva2Ugd2hlbiBkZXZpY2Ugc2V0dGluZ3MgaGF2ZSBiZWVuIHVwZGF0ZWQgZnJvbSB0aGUgY2xvdWQuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgb25SZXN0b3JlKGhhbmRsZXI6IEZ1bmN0aW9uKTogdm9pZCB7fVxyXG5cclxuICAvKipcclxuICAgKiBPdXRwdXRzIHZlcmJvc2UgbG9nIG1lc3NhZ2VzIGZyb20gdGhlIG5hdGl2ZSBwbHVnaW4gY29tcG9uZW50cyB0byB0aGUgSlMgY29uc29sZS5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBlbmFibGVEZWJ1ZygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19