import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var FirebaseConfig = /** @class */ (function (_super) {
    __extends(FirebaseConfig, _super);
    function FirebaseConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseConfig.prototype.fetch = function (expirationDuration) { return cordova(this, "fetch", { "sync": true }, arguments); };
    FirebaseConfig.prototype.activate = function () { return cordova(this, "activate", { "sync": true }, arguments); };
    FirebaseConfig.prototype.fetchAndActivate = function () { return cordova(this, "fetchAndActivate", { "sync": true }, arguments); };
    FirebaseConfig.prototype.getBoolean = function (key) { return cordova(this, "getBoolean", { "sync": true }, arguments); };
    FirebaseConfig.prototype.getString = function (key) { return cordova(this, "getString", { "sync": true }, arguments); };
    FirebaseConfig.prototype.getNumber = function (key) { return cordova(this, "getNumber", { "sync": true }, arguments); };
    FirebaseConfig.prototype.getBytes = function (key) { return cordova(this, "getBytes", { "sync": true }, arguments); };
    FirebaseConfig.pluginName = "FirebaseConfig";
    FirebaseConfig.plugin = "cordova-plugin-firebase-config";
    FirebaseConfig.pluginRef = "cordova.plugins.firebase.config";
    FirebaseConfig.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-config";
    FirebaseConfig.platforms = ["Android", "iOS"];
    FirebaseConfig.decorators = [
        { type: Injectable }
    ];
    return FirebaseConfig;
}(AwesomeCordovaNativePlugin));
export { FirebaseConfig };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZmlyZWJhc2UtY29uZmlnL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQStCeEQsa0NBQTBCOzs7O0lBUTVELDhCQUFLLGFBQUMsa0JBQTJCO0lBVWpDLGlDQUFRO0lBVVIseUNBQWdCO0lBV2hCLG1DQUFVLGFBQUMsR0FBVztJQVd0QixrQ0FBUyxhQUFDLEdBQVc7SUFXckIsa0NBQVMsYUFBQyxHQUFXO0lBV3JCLGlDQUFRLGFBQUMsR0FBVzs7Ozs7OztnQkF6RXJCLFVBQVU7O3lCQS9CWDtFQWdDb0MsMEJBQTBCO1NBQWpELGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG4vKipcclxuICogQGJldGFcclxuICogQG5hbWUgRmlyZWJhc2UgQ29uZmlnXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBDb3Jkb3ZhIHBsdWdpbiBmb3IgRmlyZWJhc2UgQ29uZmlnXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IEZpcmViYXNlQ29uZmlnIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2ZpcmViYXNlLWNvbmZpZy9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGZpcmViYXNlQ29uZmlnOiBGaXJlYmFzZUNvbmZpZykgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKlxyXG4gKiB0aGlzLmZpcmViYXNlQ29uZmlnLmdldEJvb2xlYW4oJ215X2tleScpXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdGaXJlYmFzZUNvbmZpZycsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZmlyZWJhc2UtY29uZmlnJyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuZmlyZWJhc2UuY29uZmlnJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2NoZW1lcmlzdWsvY29yZG92YS1wbHVnaW4tZmlyZWJhc2UtY29uZmlnJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRmlyZWJhc2VDb25maWcgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogU3RhcnRzIGZldGNoaW5nIGNvbmZpZ3MsIGFkaGVyaW5nIHRvIHRoZSBzcGVjaWZpZWQgbWluaW11bSBmZXRjaCBpbnRlcnZhbC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBleHBpcmF0aW9uRHVyYXRpb25cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxudWxsPn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBmZXRjaChleHBpcmF0aW9uRHVyYXRpb24/OiBudW1iZXIpOiBQcm9taXNlPG51bGw+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFzeW5jaHJvbm91c2x5IGFjdGl2YXRlcyB0aGUgbW9zdCByZWNlbnRseSBmZXRjaGVkIGNvbmZpZ3MsIHNvIHRoYXQgdGhlIGZldGNoZWQga2V5IHZhbHVlIHBhaXJzIHRha2UgZWZmZWN0LlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8bnVsbD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgYWN0aXZhdGUoKTogUHJvbWlzZTxudWxsPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBc3luY2hyb25vdXNseSBmZXRjaGVzIGFuZCB0aGVuIGFjdGl2YXRlcyB0aGUgZmV0Y2hlZCBjb25maWdzLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8bnVsbD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgZmV0Y2hBbmRBY3RpdmF0ZSgpOiBQcm9taXNlPG51bGw+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoZXMgYSBib29sZWFuIGNvbmZpZ3VyYXRpb24gdmFsdWUgZnJvbSBSZW1vdGVDb25maWdcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBnZXRCb29sZWFuKGtleTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaGVzIGEgc3RyaW5nIGNvbmZpZ3VyYXRpb24gdmFsdWUgZnJvbSBSZW1vdGVDb25maWdcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBnZXRTdHJpbmcoa2V5OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2hlcyBhIG51bWVyaWMgY29uZmlndXJhdGlvbiB2YWx1ZSBmcm9tIFJlbW90ZUNvbmZpZ1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIGdldE51bWJlcihrZXk6IHN0cmluZyk6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaGVzIGFuIGFycmF5IG9mIGJ5dGVzIGNvbmZpZ3VyYXRpb24gdmFsdWUgZnJvbSBSZW1vdGVDb25maWdcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBnZXRCeXRlcyhrZXk6IHN0cmluZyk6IFByb21pc2U8YW55W10+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19