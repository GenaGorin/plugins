import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var SumUpKeys = /** @class */ (function () {
    function SumUpKeys() {
        this.accessToken = '';
        this.affiliateKey = '';
    }
    return SumUpKeys;
}());
export { SumUpKeys };
var SumUp = /** @class */ (function (_super) {
    __extends(SumUp, _super);
    function SumUp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SumUp.prototype.login = function (sumUpKeys) { return cordova(this, "login", {}, arguments); };
    SumUp.prototype.auth = function (accessToken) { return cordova(this, "auth", {}, arguments); };
    SumUp.prototype.getSettings = function () { return cordova(this, "getSettings", {}, arguments); };
    SumUp.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    SumUp.prototype.isLoggedIn = function () { return cordova(this, "isLoggedIn", {}, arguments); };
    SumUp.prototype.prepare = function () { return cordova(this, "prepare", {}, arguments); };
    SumUp.prototype.closeConnection = function () { return cordova(this, "closeConnection", {}, arguments); };
    SumUp.prototype.setup = function () { return cordova(this, "setup", {}, arguments); };
    SumUp.prototype.test = function () { return cordova(this, "test", {}, arguments); };
    SumUp.prototype.pay = function (amount, title, currencyCode) { return cordova(this, "pay", {}, arguments); };
    SumUp.pluginName = "SumUp";
    SumUp.plugin = "cordova-sumup-plugin";
    SumUp.pluginRef = "window.SumUp";
    SumUp.repo = "https://github.com/mariusbackes/cordova-plugin-sumup";
    SumUp.install = "cordova plugin add cordova-sumup-plugin --variable SUMUP_API_KEY=INSERT_YOUR_KEY";
    SumUp.installVariables = ["SUMUP_API_KEY"];
    SumUp.platforms = ["Android", "iOS"];
    SumUp.decorators = [
        { type: Injectable }
    ];
    return SumUp;
}(AwesomeCordovaNativePlugin));
export { SumUp };
//# sourceMappingURL=data:application/json;base64,