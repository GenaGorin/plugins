var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var DocumentViewerOriginal = /** @class */ (function (_super) {
    __extends(DocumentViewerOriginal, _super);
    function DocumentViewerOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DocumentViewerOriginal.prototype.getSupportInfo = function () { return cordova(this, "getSupportInfo", {}, arguments); };
    DocumentViewerOriginal.prototype.canViewDocument = function (url, contentType, options, onPossible, onMissingApp, onImpossible, onError) { return cordova(this, "canViewDocument", { "sync": true }, arguments); };
    DocumentViewerOriginal.prototype.viewDocument = function (url, contentType, options, onShow, onClose, onMissingApp, onError) { return cordova(this, "viewDocument", { "sync": true }, arguments); };
    DocumentViewerOriginal.pluginName = "Document Viewer";
    DocumentViewerOriginal.plugin = "cordova-plugin-document-viewer";
    DocumentViewerOriginal.pluginRef = "SitewaertsDocumentViewer";
    DocumentViewerOriginal.repo = "https://github.com/sitewaerts/cordova-plugin-document-viewer";
    DocumentViewerOriginal.platforms = ["Android", "iOS", "Windows"];
    return DocumentViewerOriginal;
}(AwesomeCordovaNativePlugin));
var DocumentViewer = new DocumentViewerOriginal();
export { DocumentViewer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZG9jdW1lbnQtdmlld2VyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQTZEeEQsa0NBQTBCOzs7O0lBTzVELHVDQUFjO0lBZ0JkLHdDQUFlLGFBQ2IsR0FBVyxFQUNYLFdBQW1CLEVBQ25CLE9BQThCLEVBQzlCLFVBQXFCLEVBQ3JCLFlBQXVCLEVBQ3ZCLFlBQXVCLEVBQ3ZCLE9BQWtCO0lBZXBCLHFDQUFZLGFBQ1YsR0FBVyxFQUNYLFdBQW1CLEVBQ25CLE9BQThCLEVBQzlCLE1BQWlCLEVBQ2pCLE9BQWtCLEVBQ2xCLFlBQXVCLEVBQ3ZCLE9BQWtCOzs7Ozs7eUJBakh0QjtFQTZEb0MsMEJBQTBCO1NBQWpELGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERvY3VtZW50Vmlld2VyT3B0aW9ucyB7XHJcbiAgdGl0bGU/OiBzdHJpbmc7XHJcbiAgZG9jdW1lbnRWaWV3Pzoge1xyXG4gICAgY2xvc2VMYWJlbDogc3RyaW5nO1xyXG4gIH07XHJcbiAgbmF2aWdhdGlvblZpZXc/OiB7XHJcbiAgICBjbG9zZUxhYmVsOiBzdHJpbmc7XHJcbiAgfTtcclxuICBlbWFpbD86IHtcclxuICAgIGVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgfTtcclxuICBwcmludD86IHtcclxuICAgIGVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgfTtcclxuICBvcGVuV2l0aD86IHtcclxuICAgIGVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgfTtcclxuICBib29rbWFya3M/OiB7XHJcbiAgICBlbmFibGVkOiBib29sZWFuO1xyXG4gIH07XHJcbiAgc2VhcmNoPzoge1xyXG4gICAgZW5hYmxlZDogYm9vbGVhbjtcclxuICB9O1xyXG4gIGF1dG9DbG9zZT86IHtcclxuICAgIG9uUGF1c2U6IGJvb2xlYW47XHJcbiAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIERvY3VtZW50IFZpZXdlclxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gb2ZmZXJzIGEgc2xpbSBBUEkgdG8gdmlldyBQREYgZmlsZXMgd2hpY2ggYXJlIGVpdGhlciBzdG9yZWQgaW4gdGhlIGFwcHMgYXNzZXRzIGZvbGRlciAoL3d3dy8qKSBvciBpbiBhbnkgb3RoZXIgZmlsZSBzeXN0ZW0gZGlyZWN0b3J5IGF2YWlsYWJsZSB2aWEgdGhlIGNvcmRvdmEgZmlsZSBwbHVnaW4uXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IERvY3VtZW50Vmlld2VyIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2RvY3VtZW50LXZpZXdlci9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGRvY3VtZW50OiBEb2N1bWVudFZpZXdlcikgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKiBjb25zdCBvcHRpb25zOiBEb2N1bWVudFZpZXdlck9wdGlvbnMgPSB7XHJcbiAqICAgdGl0bGU6ICdNeSBQREYnXHJcbiAqIH1cclxuICpcclxuICogdGhpcy5kb2N1bWVudC52aWV3RG9jdW1lbnQoJ2Fzc2V0cy9teUZpbGUucGRmJywgJ2FwcGxpY2F0aW9uL3BkZicsIG9wdGlvbnMpXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBEb2N1bWVudFZpZXdlck9wdGlvbnNcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdEb2N1bWVudCBWaWV3ZXInLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWRvY3VtZW50LXZpZXdlcicsXHJcbiAgcGx1Z2luUmVmOiAnU2l0ZXdhZXJ0c0RvY3VtZW50Vmlld2VyJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3NpdGV3YWVydHMvY29yZG92YS1wbHVnaW4tZG9jdW1lbnQtdmlld2VyJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnLCAnV2luZG93cyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBEb2N1bWVudFZpZXdlciBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBEaXNwbGF5cyB0aGUgZW1haWwgY29tcG9zZXIgcHJlLWZpbGxlZCB3aXRoIGRhdGEuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXNvbHZlcyBwcm9taXNlIHdoZW4gdGhlIEVtYWlsQ29tcG9zZXIgaGFzIGJlZW4gb3BlbmVkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldFN1cHBvcnRJbmZvKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBpZiB0aGUgZG9jdW1lbnQgY2FuIGJlIHNob3duXHJcbiAgICpcclxuICAgKiBAcGFyYW0gdXJsIHtzdHJpbmd9IFVybCB0byB0aGUgZmlsZVxyXG4gICAqIEBwYXJhbSBjb250ZW50VHlwZSB7c3RyaW5nfSBDb250ZW50IHR5cGUgb2YgdGhlIGZpbGVcclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7RG9jdW1lbnRWaWV3ZXJPcHRpb25zfSBvcHRpb25zXHJcbiAgICogQHBhcmFtIFtvblBvc3NpYmxlXSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIFtvbk1pc3NpbmdBcHBdIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gW29uSW1wb3NzaWJsZV0ge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSBbb25FcnJvcl0ge0Z1bmN0aW9ufVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIGNhblZpZXdEb2N1bWVudChcclxuICAgIHVybDogc3RyaW5nLFxyXG4gICAgY29udGVudFR5cGU6IHN0cmluZyxcclxuICAgIG9wdGlvbnM6IERvY3VtZW50Vmlld2VyT3B0aW9ucyxcclxuICAgIG9uUG9zc2libGU/OiBGdW5jdGlvbixcclxuICAgIG9uTWlzc2luZ0FwcD86IEZ1bmN0aW9uLFxyXG4gICAgb25JbXBvc3NpYmxlPzogRnVuY3Rpb24sXHJcbiAgICBvbkVycm9yPzogRnVuY3Rpb25cclxuICApOiB2b2lkIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIE9wZW5zIHRoZSBmaWxlXHJcbiAgICpcclxuICAgKiBAcGFyYW0gdXJsIHtzdHJpbmd9IFVybCB0byB0aGUgZmlsZVxyXG4gICAqIEBwYXJhbSBjb250ZW50VHlwZSB7c3RyaW5nfSBDb250ZW50IHR5cGUgb2YgdGhlIGZpbGVcclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7RG9jdW1lbnRWaWV3ZXJPcHRpb25zfSBvcHRpb25zXHJcbiAgICogQHBhcmFtIFtvblNob3ddIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gW29uQ2xvc2VdIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gW29uTWlzc2luZ0FwcF0ge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSBbb25FcnJvcl0ge0Z1bmN0aW9ufVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHZpZXdEb2N1bWVudChcclxuICAgIHVybDogc3RyaW5nLFxyXG4gICAgY29udGVudFR5cGU6IHN0cmluZyxcclxuICAgIG9wdGlvbnM6IERvY3VtZW50Vmlld2VyT3B0aW9ucyxcclxuICAgIG9uU2hvdz86IEZ1bmN0aW9uLFxyXG4gICAgb25DbG9zZT86IEZ1bmN0aW9uLFxyXG4gICAgb25NaXNzaW5nQXBwPzogRnVuY3Rpb24sXHJcbiAgICBvbkVycm9yPzogRnVuY3Rpb25cclxuICApOiB2b2lkIHt9XHJcbn1cclxuIl19