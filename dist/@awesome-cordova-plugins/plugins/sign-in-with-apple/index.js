var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var ASAuthorizationAppleIDRequest = /** @class */ (function () {
    function ASAuthorizationAppleIDRequest() {
    }
    ASAuthorizationAppleIDRequest.ASAuthorizationScopeFullName = 0;
    ASAuthorizationAppleIDRequest.ASAuthorizationScopeEmail = 1;
    return ASAuthorizationAppleIDRequest;
}());
export { ASAuthorizationAppleIDRequest };
var SignInWithAppleOriginal = /** @class */ (function (_super) {
    __extends(SignInWithAppleOriginal, _super);
    function SignInWithAppleOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SignInWithAppleOriginal.prototype.signin = function (options) {
        if (options === void 0) { options = {}; }
        return cordova(this, "signin", {}, arguments);
    };
    SignInWithAppleOriginal.pluginName = "Sign in with Apple";
    SignInWithAppleOriginal.plugin = "cordova-plugin-sign-in-with-apple";
    SignInWithAppleOriginal.pluginRef = "cordova.plugins.SignInWithApple";
    SignInWithAppleOriginal.repo = "https://github.com/twogate/cordova-plugin-sign-in-with-apple";
    SignInWithAppleOriginal.platforms = ["iOS"];
    return SignInWithAppleOriginal;
}(AwesomeCordovaNativePlugin));
var SignInWithApple = new SignInWithAppleOriginal();
export { SignInWithApple };
//# sourceMappingURL=data:application/json;base64,