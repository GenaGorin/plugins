var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var KommunicateOriginal = /** @class */ (function (_super) {
    __extends(KommunicateOriginal, _super);
    function KommunicateOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    KommunicateOriginal.prototype.login = function (kmUser) { return cordova(this, "login", {}, arguments); };
    KommunicateOriginal.prototype.registerPushNotification = function () { return cordova(this, "registerPushNotification", {}, arguments); };
    KommunicateOriginal.prototype.isLoggedIn = function () { return cordova(this, "isLoggedIn", {}, arguments); };
    KommunicateOriginal.prototype.updatePushNotificationToken = function (token) { return cordova(this, "updatePushNotificationToken", {}, arguments); };
    KommunicateOriginal.prototype.launchConversation = function () { return cordova(this, "launchConversation", {}, arguments); };
    KommunicateOriginal.prototype.launchParticularConversation = function (conversationObject) { return cordova(this, "launchParticularConversation", {}, arguments); };
    KommunicateOriginal.prototype.startNewConversation = function (conversationParams) { return cordova(this, "startNewConversation", {}, arguments); };
    KommunicateOriginal.prototype.processPushNotification = function (data) { return cordova(this, "processPushNotification", { "sync": true }, arguments); };
    KommunicateOriginal.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    KommunicateOriginal.prototype.startSingleChat = function (data) { return cordova(this, "startSingleChat", {}, arguments); };
    KommunicateOriginal.prototype.conversationBuilder = function (converationObject) { return cordova(this, "conversationBuilder", {}, arguments); };
    KommunicateOriginal.pluginName = "Kommunicate";
    KommunicateOriginal.plugin = "kommunicate-cordova-plugin";
    KommunicateOriginal.pluginRef = "kommunicate";
    KommunicateOriginal.repo = "https://github.com/Kommunicate-io/Kommunicate-Cordova-Ionic-PhoneGap-Chat-Plugin";
    KommunicateOriginal.platforms = ["Android", "Browser", "iOS"];
    return KommunicateOriginal;
}(AwesomeCordovaNativePlugin));
var Kommunicate = new KommunicateOriginal();
export { Kommunicate };
//# sourceMappingURL=data:application/json;base64,