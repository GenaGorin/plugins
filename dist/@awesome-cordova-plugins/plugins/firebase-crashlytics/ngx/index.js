import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var FirebaseCrashlytics = /** @class */ (function (_super) {
    __extends(FirebaseCrashlytics, _super);
    function FirebaseCrashlytics() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseCrashlytics.prototype.initialise = function () { return cordova(this, "initialise", { "sync": true }, arguments); };
    FirebaseCrashlytics.prototype.crash = function () { return cordova(this, "crash", { "sync": true }, arguments); };
    FirebaseCrashlytics.prototype.logPriority = function (priority, tag, message) { return cordova(this, "logPriority", { "sync": true }, arguments); };
    FirebaseCrashlytics.prototype.log = function (message) { return cordova(this, "log", { "sync": true }, arguments); };
    FirebaseCrashlytics.prototype.logException = function (message) { return cordova(this, "logException", { "sync": true }, arguments); };
    FirebaseCrashlytics.prototype.setString = function (key, value) { return cordova(this, "setString", { "sync": true }, arguments); };
    FirebaseCrashlytics.prototype.setBool = function (key, value) { return cordova(this, "setBool", { "sync": true }, arguments); };
    FirebaseCrashlytics.prototype.setDouble = function (key, value) { return cordova(this, "setDouble", { "sync": true }, arguments); };
    FirebaseCrashlytics.prototype.setFloat = function (key, value) { return cordova(this, "setFloat", { "sync": true }, arguments); };
    FirebaseCrashlytics.prototype.setInt = function (key, value) { return cordova(this, "setInt", { "sync": true }, arguments); };
    FirebaseCrashlytics.prototype.setUserIdentifier = function (identifier) { return cordova(this, "setUserIdentifier", { "sync": true }, arguments); };
    FirebaseCrashlytics.pluginName = "FirebaseCrashlytics";
    FirebaseCrashlytics.plugin = "cordova-plugin-firebase-crashlytics";
    FirebaseCrashlytics.pluginRef = "FirebaseCrashlytics";
    FirebaseCrashlytics.repo = "https://github.com/ReallySmallSoftware/cordova-plugin-firebase-crashlytics";
    FirebaseCrashlytics.install = "ionic cordova plugin add cordova-plugin-firebase-crashlytics --variable ANDROID_FIREBASE_CORE_VERSION=16.0.0";
    FirebaseCrashlytics.installVariables = ["ANDROID_FIREBASE_CORE_VERSION"];
    FirebaseCrashlytics.platforms = ["Android", "iOS"];
    FirebaseCrashlytics.decorators = [
        { type: Injectable }
    ];
    return FirebaseCrashlytics;
}(AwesomeCordovaNativePlugin));
export { FirebaseCrashlytics };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZmlyZWJhc2UtY3Jhc2hseXRpY3Mvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBZ0NuRCx1Q0FBMEI7Ozs7SUFTakUsd0NBQVU7SUFZVixtQ0FBSztJQWVMLHlDQUFXLGFBQUMsUUFBZ0IsRUFBRSxHQUFXLEVBQUUsT0FBZTtJQWExRCxpQ0FBRyxhQUFDLE9BQWU7SUFhbkIsMENBQVksYUFBQyxPQUFlO0lBYzVCLHVDQUFTLGFBQUMsR0FBVyxFQUFFLEtBQWE7SUFjcEMscUNBQU8sYUFBQyxHQUFXLEVBQUUsS0FBYztJQWNuQyx1Q0FBUyxhQUFDLEdBQVcsRUFBRSxLQUFhO0lBY3BDLHNDQUFRLGFBQUMsR0FBVyxFQUFFLEtBQWE7SUFjbkMsb0NBQU0sYUFBQyxHQUFXLEVBQUUsS0FBYTtJQWFqQywrQ0FBaUIsYUFBQyxVQUFrQjs7Ozs7Ozs7O2dCQWxKckMsVUFBVTs7OEJBaENYO0VBaUN5QywwQkFBMEI7U0FBdEQsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lIEZpcmViYXNlIENyYXNobHl0aWNzXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBIEdvb2dsZSBGaXJlYmFzZSBDcmFzaGx5dGljcyBwbHVnaW4gdG8gZW5hYmxlIGNhcHR1cmUgb2YgY3Jhc2ggcmVwb3J0cy5cclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgRmlyZWJhc2VDcmFzaGx5dGljcyB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9maXJlYmFzZS1jcmFzaGx5dGljcy9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGZpcmViYXNlQ3Jhc2hseXRpY3M6IEZpcmViYXNlQ3Jhc2hseXRpY3MpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICpcclxuICogY29uc3QgY3Jhc2hseXRpY3MgPSB0aGlzLmZpcmViYXNlQ3Jhc2hseXRpY3MuaW5pdGlhbGlzZSgpO1xyXG4gKiBjcmFzaGx5dGljcy5sb2dFeGNlcHRpb24oJ215IGNhdWdodCBleGNlcHRpb24nKTtcclxuICpcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnRmlyZWJhc2VDcmFzaGx5dGljcycsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZmlyZWJhc2UtY3Jhc2hseXRpY3MnLFxyXG4gIHBsdWdpblJlZjogJ0ZpcmViYXNlQ3Jhc2hseXRpY3MnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vUmVhbGx5U21hbGxTb2Z0d2FyZS9jb3Jkb3ZhLXBsdWdpbi1maXJlYmFzZS1jcmFzaGx5dGljcycsXHJcbiAgaW5zdGFsbDpcclxuICAgICdpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1wbHVnaW4tZmlyZWJhc2UtY3Jhc2hseXRpY3MgLS12YXJpYWJsZSBBTkRST0lEX0ZJUkVCQVNFX0NPUkVfVkVSU0lPTj0xNi4wLjAnLFxyXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnQU5EUk9JRF9GSVJFQkFTRV9DT1JFX1ZFUlNJT04nXSxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRmlyZWJhc2VDcmFzaGx5dGljcyBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBTaW1wbHkgYWRkIHRoZSBwbHVnaW4gdG8gZ2V0IHRoZSBkZWZhdWx0IENyYXNobHl0aWNzIGZ1bmN0aW9uYWxpdHkuIE5vdGUgdGhhdCBjcmFzaGVzIGFuZCBsb2dnZWQgZXhjZXB0aW9ucyB3aWxsIG9ubHkgYmUgcmVwb3J0ZWQgd2hlbiB0aGUgYXBwbGljYXRpb24gcmVzdGFydHMuIEluIG9yZGVyIHRvIGxvZyBjYXVnaHQgZXhjZXB0aW9ucyB0aGUgZm9sbG93aW5nIGNhbiBiZSB1c2VkOlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3luYzogdHJ1ZSxcclxuICB9KVxyXG4gIGluaXRpYWxpc2UoKTogYW55IHtcclxuICAgIHJldHVybjsgLy8gV2UgYWRkIHJldHVybjsgaGVyZSB0byBhdm9pZCBhbnkgSURFIC8gQ29tcGlsZXIgZXJyb3JzXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZW5lcmF0ZSBhIGZvcmNlZCBjcmFzaC4gVmlzaWJsZSBpbiBjb25zb2xlIGFmdGVyIHJlc3RhcnQgb2YgYXBwbGljYXRpb24uXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzeW5jOiB0cnVlLFxyXG4gIH0pXHJcbiAgY3Jhc2goKTogdm9pZCB7XHJcbiAgICByZXR1cm47IC8vIFdlIGFkZCByZXR1cm47IGhlcmUgdG8gYXZvaWQgYW55IElERSAvIENvbXBpbGVyIGVycm9yc1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTG9nIGEgcHJpb3JpdHkgbWVzc2FnZS4gV2lsbCBvbmx5IGJlIGxvZ2dlZCBpbiB0aGUgZXZlbnQgb2YgYSBjcmFzaC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwcmlvcml0eVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YWdcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxyXG4gICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN5bmM6IHRydWUsXHJcbiAgfSlcclxuICBsb2dQcmlvcml0eShwcmlvcml0eTogbnVtYmVyLCB0YWc6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMb2cgYSBtZXNzYWdlLiBXaWxsIG9ubHkgYmUgbG9nZ2VkIGluIHRoZSBldmVudCBvZiBhIGNyYXNoLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcclxuICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzeW5jOiB0cnVlLFxyXG4gIH0pXHJcbiAgbG9nKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTG9nIHdoZW4gYSBoYW5kbGVkIGV4Y2VwdGlvbiBoYXMgaGFwcGVuZWQuIFZpc2libGUgaW4gY29uc29sZSBhZnRlciByZXN0YXJ0IG9mIGFwcGxpY2F0aW9uLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcclxuICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzeW5jOiB0cnVlLFxyXG4gIH0pXHJcbiAgbG9nRXhjZXB0aW9uKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IGV4dHJhIGtleS92YWx1ZSBzdHJpbmcgdmFsdWUuIFdpbGwgb25seSBiZSBsb2dnZWQgaW4gdGhlIGV2ZW50IG9mIGEgY3Jhc2guXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXHJcbiAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3luYzogdHJ1ZSxcclxuICB9KVxyXG4gIHNldFN0cmluZyhrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IGV4dHJhIGtleS92YWx1ZSBib29sIHZhbHVlLiBXaWxsIG9ubHkgYmUgbG9nZ2VkIGluIHRoZSBldmVudCBvZiBhIGNyYXNoLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcclxuICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzeW5jOiB0cnVlLFxyXG4gIH0pXHJcbiAgc2V0Qm9vbChrZXk6IHN0cmluZywgdmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCBleHRyYSBrZXkvdmFsdWUgZG91YmxlIHZhbHVlLiBXaWxsIG9ubHkgYmUgbG9nZ2VkIGluIHRoZSBldmVudCBvZiBhIGNyYXNoLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxyXG4gICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN5bmM6IHRydWUsXHJcbiAgfSlcclxuICBzZXREb3VibGUoa2V5OiBzdHJpbmcsIHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCBleHRyYSBrZXkvdmFsdWUgZmxvYXQgdmFsdWUuIFdpbGwgb25seSBiZSBsb2dnZWQgaW4gdGhlIGV2ZW50IG9mIGEgY3Jhc2guXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXHJcbiAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3luYzogdHJ1ZSxcclxuICB9KVxyXG4gIHNldEZsb2F0KGtleTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgZXh0cmEga2V5L3ZhbHVlIGludGVnZXIgdmFsdWUuIFdpbGwgb25seSBiZSBsb2dnZWQgaW4gdGhlIGV2ZW50IG9mIGEgY3Jhc2guXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXHJcbiAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3luYzogdHJ1ZSxcclxuICB9KVxyXG4gIHNldEludChrZXk6IHN0cmluZywgdmFsdWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHRoZSBpZGVudGlmaWVyIGZvciB0aGUgdXNlci4gVGFrZSBjYXJlIHdoZW4gdXNpbmcgdGhpcyBtZXRob2QgYW5kIGVuc3VyZSB5b3UgcHJpdmFjeSBwb2xpY3kgaXMgdXBkYXRlZCBhY2NvcmRpbmdseS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZGVudGlmaWVyXHJcbiAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3luYzogdHJ1ZSxcclxuICB9KVxyXG4gIHNldFVzZXJJZGVudGlmaWVyKGlkZW50aWZpZXI6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=