import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var PDFGenerator = /** @class */ (function (_super) {
    __extends(PDFGenerator, _super);
    function PDFGenerator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PDFGenerator.prototype.fromURL = function (url, options) { return cordova(this, "fromURL", { "otherPromise": true }, arguments); };
    PDFGenerator.prototype.fromData = function (data, options) { return cordova(this, "fromData", { "otherPromise": true }, arguments); };
    PDFGenerator.pluginName = "PDFGenerator";
    PDFGenerator.plugin = "cordova-pdf-generator";
    PDFGenerator.pluginRef = "cordova.plugins.pdf";
    PDFGenerator.repo = "https://github.com/cesarvr/pdf-generator";
    PDFGenerator.platforms = ["Android", "iOS"];
    PDFGenerator.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    return PDFGenerator;
}(AwesomeCordovaNativePlugin));
export { PDFGenerator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvcGRmLWdlbmVyYXRvci9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQzs7SUE4RDFELGdDQUEwQjs7OztJQVMxRCw4QkFBTyxhQUFDLEdBQVcsRUFBRSxPQUE2QjtJQVlsRCwrQkFBUSxhQUFDLElBQVksRUFBRSxPQUE2Qjs7Ozs7OztnQkF4QnJELFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7O3VCQTlERDtFQStEa0MsMEJBQTBCO1NBQS9DLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBERkdlbmVyYXRvck9wdGlvbnMge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkb2N1bWVudCBzaXplLCBlLmcuLCBBMiwgQTMsIG9yIEE0LlxyXG4gICAqIE9ubHkgc3VwcG9ydGVkIG9uIGlPUy5cclxuICAgKiBUaGUgZGVmYXVsdCBpcyAnQTQnLlxyXG4gICAqL1xyXG4gIGRvY3VtZW50U2l6ZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogT3B0aW9uIHRvIGNoYW5nZSB0byBsYW5kc2NhcGUgb3JpZW50YXRpb24uXHJcbiAgICogRGVmYXVsdCBpcyAncG9ydHJhaXQnLlxyXG4gICAqL1xyXG4gIGxhbmRzY2FwZT86ICdsYW5kc2NhcGUnIHwgJ3BvcnRyYWl0JztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgdG8gYmUgcmV0dXJuZWQsIGVpdGhlciAnc2hhcmUnIG9yICdiYXNlNjQnLlxyXG4gICAqIElmICdzaGFyZSBpcyBjaG9zZW4sIHRoZSBQREYgaXMgc2hhcmVkIHdpdGggdGhlIHN5c3RlbSBjYXBhYmlsaXRpZXMuXHJcbiAgICogRGVmYXVsdCBpcyAnYmFzZTY0J1xyXG4gICAqL1xyXG4gIHR5cGU/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBkZXNpcmVkIGZpbGVuYW1lIHRoZSByZXN1bHRpbmcgUERGIHNob3VsZCBoYXZlLlxyXG4gICAqIERlZmF1bHQgaXMgJ2RlZmF1bHQucGRmJ1xyXG4gICAqL1xyXG4gIGZpbGVOYW1lPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBPcHRpb24gdG8gc2V0IHRoZSBiYXNlIFVSTCBmb3IgcGF0aGluZy5cclxuICAgKiBEZWZhdWx0IGlzICdudWxsJy5cclxuICAgKi9cclxuICBiYXNlVXJsPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgUERGR2VuZXJhdG9yXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBTaW1wbGUgcGx1Z2luIHRvIGdlbmVyYXRlIChvZmZsaW5lKSBwZGYuIFRoZSBwbHVnaW4gdHJhbnNmb3JtcyBIVE1MIHRvIFBERiBhbmQgYWxzbyBwcm92aWRlIHRoZSBtZWNoYW5pc20gdG8gc2hhcmUgdGhlIHBkZiB0byBvdGhlciBhcHBzIGxpa2UgTWFpbCwgZXRjLlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBQREZHZW5lcmF0b3IgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvcGRmLWdlbmVyYXRvcic7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgcGRmR2VuZXJhdG9yOiBQREZHZW5lcmF0b3IpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy5wZGZHZW5lcmF0b3IuZnJvbVVSTCh1cmwsIG9wdGlvbnMpLnRoZW4oYmFzZTY0U3RyaW5nID0+IGNvbnNvbGUubG9nKGJhc2U2NFN0cmluZykpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdQREZHZW5lcmF0b3InLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGRmLWdlbmVyYXRvcicsXHJcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLnBkZicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9jZXNhcnZyL3BkZi1nZW5lcmF0b3InLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUERGR2VuZXJhdG9yIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYSBQREYgdXNpbmcgYSBVUkwsIGl0IGRvd25sb2FkIHRoZSBkb2N1bWVudCBpbnRvIGFuIGluIG1lbW9yeSBXZWJraXQgb2JqZWN0LCBhbmQgcmVuZGVycyBpdCBpbnRvIGEgUERGLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHVybCB7c3RyaW5nfSBVUkwgdG8gY3JlYXRlIGEgUERGIGZyb21cclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7UERGR2VuZXJhdG9yT3B0aW9uc30gb3B0aW9ucyBmb3IgUERGIGdlbmVyYXRpb25cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXHJcbiAgZnJvbVVSTCh1cmw6IHN0cmluZywgb3B0aW9ucz86IFBERkdlbmVyYXRvck9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIFBERiB1c2luZyBzdHJpbmcgd2l0aCB0aGUgSFRNTCByZXByZXNlbnRhdGlvbiwgaXQgZG93bmxvYWQgdGhlIGRvY3VtZW50IGludG8gYW4gaW4gbWVtb3J5IFdlYmtpdCBvYmplY3QsIGFuZCByZW5kZXJzIGl0IGludG8gYSBQREYuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZGF0YSB7c3RyaW5nfSBIVE1MIHN0cmluZyByZXByZXNlbnRhdGlvbiB0byBjcmVhdGUgYSBQREYgZnJvbVxyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtQREZHZW5lcmF0b3JPcHRpb25zfSBvcHRpb25zIGZvciBQREYgZ2VuZXJhdGlvblxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcclxuICBmcm9tRGF0YShkYXRhOiBzdHJpbmcsIG9wdGlvbnM/OiBQREZHZW5lcmF0b3JPcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19