var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';
var ApproovHttpOriginal = /** @class */ (function (_super) {
    __extends(ApproovHttpOriginal, _super);
    function ApproovHttpOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ApproovHttpOriginal.prototype.getBasicAuthHeader = function (username, password) { return cordova(this, "getBasicAuthHeader", { "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.useBasicAuth = function (username, password) { return cordova(this, "useBasicAuth", { "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.getHeaders = function (host) { return cordova(this, "getHeaders", { "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.setHeader = function (host, header, value) { return cordova(this, "setHeader", { "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.getDataSerializer = function () { return cordova(this, "getDataSerializer", { "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.setDataSerializer = function (serializer) { return cordova(this, "setDataSerializer", { "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.setCookie = function (url, cookie) { return cordova(this, "setCookie", { "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.clearCookies = function () { return cordova(this, "clearCookies", { "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.removeCookies = function (url, cb) { return cordova(this, "removeCookies", { "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.getCookieString = function (url) { return cordova(this, "getCookieString", { "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.getRequestTimeout = function () { return cordova(this, "getRequestTimeout", { "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.setRequestTimeout = function (timeout) { return cordova(this, "setRequestTimeout", { "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.getFollowRedirect = function () { return cordova(this, "getFollowRedirect", { "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.setFollowRedirect = function (follow) { return cordova(this, "setFollowRedirect", { "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.setServerTrustMode = function (mode) { return cordova(this, "setServerTrustMode", {}, arguments); };
    ApproovHttpOriginal.prototype.post = function (url, body, headers) { return cordova(this, "post", {}, arguments); };
    ApproovHttpOriginal.prototype.postSync = function (url, body, headers, success, failure) { return cordova(this, "post", { "methodName": "post", "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.get = function (url, parameters, headers) { return cordova(this, "get", {}, arguments); };
    ApproovHttpOriginal.prototype.getSync = function (url, parameters, headers, success, failure) { return cordova(this, "get", { "methodName": "get", "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.put = function (url, body, headers) { return cordova(this, "put", {}, arguments); };
    ApproovHttpOriginal.prototype.putSync = function (url, body, headers, success, failure) { return cordova(this, "put", { "methodName": "put", "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.patch = function (url, body, headers) { return cordova(this, "patch", {}, arguments); };
    ApproovHttpOriginal.prototype.patchSync = function (url, body, headers, success, failure) { return cordova(this, "patch", { "methodName": "patch", "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.delete = function (url, parameters, headers) { return cordova(this, "delete", {}, arguments); };
    ApproovHttpOriginal.prototype.deleteSync = function (url, parameters, headers, success, failure) { return cordova(this, "delete", { "methodName": "delete", "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.head = function (url, parameters, headers) { return cordova(this, "head", {}, arguments); };
    ApproovHttpOriginal.prototype.headSync = function (url, parameters, headers, success, failure) { return cordova(this, "head", { "methodName": "head", "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.options = function (url, parameters, headers) { return cordova(this, "options", {}, arguments); };
    ApproovHttpOriginal.prototype.optionsSync = function (url, parameters, headers, success, failure) { return cordova(this, "options", { "methodName": "options", "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.uploadFile = function (url, body, headers, filePath, name) { return cordova(this, "uploadFile", {}, arguments); };
    ApproovHttpOriginal.prototype.uploadFileSync = function (url, body, headers, filePath, name, success, failure) { return cordova(this, "uploadFile", { "methodName": "uploadFile", "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.downloadFile = function (url, body, headers, filePath) { return cordova(this, "downloadFile", {}, arguments); };
    ApproovHttpOriginal.prototype.downloadFileSync = function (url, body, headers, filePath, success, failure) { return cordova(this, "downloadFile", { "methodName": "downloadFile", "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.sendRequest = function (url, options) { return cordova(this, "sendRequest", {}, arguments); };
    ApproovHttpOriginal.prototype.sendRequestSync = function (url, options, success, failure) { return cordova(this, "sendRequest", { "methodName": "sendRequest", "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.abort = function (requestId) { return cordova(this, "abort", {}, arguments); };
    ApproovHttpOriginal.prototype.initializeApproov = function () { return cordova(this, "initializeApproov", { "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.approovSetDataHashInToken = function (dataHash) { return cordova(this, "approovSetDataHashInToken", { "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.approovSetBindingHeader = function (header) { return cordova(this, "approovSetBindingHeader", { "sync": true }, arguments); };
    ApproovHttpOriginal.prototype.getApproovLoggableToken = function (host) { return cordova(this, "getApproovLoggableToken", {}, arguments); };
    Object.defineProperty(ApproovHttpOriginal.prototype, "ErrorCode", {
        get: function () { return cordovaPropertyGet(this, "ErrorCode"); },
        set: function (value) { cordovaPropertySet(this, "ErrorCode", value); },
        enumerable: false,
        configurable: true
    });
    ApproovHttpOriginal.pluginName = "ApproovHttp";
    ApproovHttpOriginal.plugin = "cordova-approov-advanced-http";
    ApproovHttpOriginal.pluginRef = "cordova.plugin.ApproovHttp";
    ApproovHttpOriginal.repo = "https://github.com/approov/quickstart-ionic-advancedhttp";
    ApproovHttpOriginal.platforms = ["Android", "iOS"];
    return ApproovHttpOriginal;
}(AwesomeCordovaNativePlugin));
var ApproovHttp = new ApproovHttpOriginal();
export { ApproovHttp };
//# sourceMappingURL=data:application/json;base64,