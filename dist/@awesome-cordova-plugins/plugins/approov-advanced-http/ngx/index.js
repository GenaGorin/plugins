import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';
var ApproovHttp = /** @class */ (function (_super) {
    __extends(ApproovHttp, _super);
    function ApproovHttp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ApproovHttp.prototype.getBasicAuthHeader = function (username, password) { return cordova(this, "getBasicAuthHeader", { "sync": true }, arguments); };
    ApproovHttp.prototype.useBasicAuth = function (username, password) { return cordova(this, "useBasicAuth", { "sync": true }, arguments); };
    ApproovHttp.prototype.getHeaders = function (host) { return cordova(this, "getHeaders", { "sync": true }, arguments); };
    ApproovHttp.prototype.setHeader = function (host, header, value) { return cordova(this, "setHeader", { "sync": true }, arguments); };
    ApproovHttp.prototype.getDataSerializer = function () { return cordova(this, "getDataSerializer", { "sync": true }, arguments); };
    ApproovHttp.prototype.setDataSerializer = function (serializer) { return cordova(this, "setDataSerializer", { "sync": true }, arguments); };
    ApproovHttp.prototype.setCookie = function (url, cookie) { return cordova(this, "setCookie", { "sync": true }, arguments); };
    ApproovHttp.prototype.clearCookies = function () { return cordova(this, "clearCookies", { "sync": true }, arguments); };
    ApproovHttp.prototype.removeCookies = function (url, cb) { return cordova(this, "removeCookies", { "sync": true }, arguments); };
    ApproovHttp.prototype.getCookieString = function (url) { return cordova(this, "getCookieString", { "sync": true }, arguments); };
    ApproovHttp.prototype.getRequestTimeout = function () { return cordova(this, "getRequestTimeout", { "sync": true }, arguments); };
    ApproovHttp.prototype.setRequestTimeout = function (timeout) { return cordova(this, "setRequestTimeout", { "sync": true }, arguments); };
    ApproovHttp.prototype.getFollowRedirect = function () { return cordova(this, "getFollowRedirect", { "sync": true }, arguments); };
    ApproovHttp.prototype.setFollowRedirect = function (follow) { return cordova(this, "setFollowRedirect", { "sync": true }, arguments); };
    ApproovHttp.prototype.setServerTrustMode = function (mode) { return cordova(this, "setServerTrustMode", {}, arguments); };
    ApproovHttp.prototype.post = function (url, body, headers) { return cordova(this, "post", {}, arguments); };
    ApproovHttp.prototype.postSync = function (url, body, headers, success, failure) { return cordova(this, "post", { "methodName": "post", "sync": true }, arguments); };
    ApproovHttp.prototype.get = function (url, parameters, headers) { return cordova(this, "get", {}, arguments); };
    ApproovHttp.prototype.getSync = function (url, parameters, headers, success, failure) { return cordova(this, "get", { "methodName": "get", "sync": true }, arguments); };
    ApproovHttp.prototype.put = function (url, body, headers) { return cordova(this, "put", {}, arguments); };
    ApproovHttp.prototype.putSync = function (url, body, headers, success, failure) { return cordova(this, "put", { "methodName": "put", "sync": true }, arguments); };
    ApproovHttp.prototype.patch = function (url, body, headers) { return cordova(this, "patch", {}, arguments); };
    ApproovHttp.prototype.patchSync = function (url, body, headers, success, failure) { return cordova(this, "patch", { "methodName": "patch", "sync": true }, arguments); };
    ApproovHttp.prototype.delete = function (url, parameters, headers) { return cordova(this, "delete", {}, arguments); };
    ApproovHttp.prototype.deleteSync = function (url, parameters, headers, success, failure) { return cordova(this, "delete", { "methodName": "delete", "sync": true }, arguments); };
    ApproovHttp.prototype.head = function (url, parameters, headers) { return cordova(this, "head", {}, arguments); };
    ApproovHttp.prototype.headSync = function (url, parameters, headers, success, failure) { return cordova(this, "head", { "methodName": "head", "sync": true }, arguments); };
    ApproovHttp.prototype.options = function (url, parameters, headers) { return cordova(this, "options", {}, arguments); };
    ApproovHttp.prototype.optionsSync = function (url, parameters, headers, success, failure) { return cordova(this, "options", { "methodName": "options", "sync": true }, arguments); };
    ApproovHttp.prototype.uploadFile = function (url, body, headers, filePath, name) { return cordova(this, "uploadFile", {}, arguments); };
    ApproovHttp.prototype.uploadFileSync = function (url, body, headers, filePath, name, success, failure) { return cordova(this, "uploadFile", { "methodName": "uploadFile", "sync": true }, arguments); };
    ApproovHttp.prototype.downloadFile = function (url, body, headers, filePath) { return cordova(this, "downloadFile", {}, arguments); };
    ApproovHttp.prototype.downloadFileSync = function (url, body, headers, filePath, success, failure) { return cordova(this, "downloadFile", { "methodName": "downloadFile", "sync": true }, arguments); };
    ApproovHttp.prototype.sendRequest = function (url, options) { return cordova(this, "sendRequest", {}, arguments); };
    ApproovHttp.prototype.sendRequestSync = function (url, options, success, failure) { return cordova(this, "sendRequest", { "methodName": "sendRequest", "sync": true }, arguments); };
    ApproovHttp.prototype.abort = function (requestId) { return cordova(this, "abort", {}, arguments); };
    ApproovHttp.prototype.initializeApproov = function () { return cordova(this, "initializeApproov", { "sync": true }, arguments); };
    ApproovHttp.prototype.approovSetDataHashInToken = function (dataHash) { return cordova(this, "approovSetDataHashInToken", { "sync": true }, arguments); };
    ApproovHttp.prototype.approovSetBindingHeader = function (header) { return cordova(this, "approovSetBindingHeader", { "sync": true }, arguments); };
    ApproovHttp.prototype.getApproovLoggableToken = function (host) { return cordova(this, "getApproovLoggableToken", {}, arguments); };
    Object.defineProperty(ApproovHttp.prototype, "ErrorCode", {
        get: function () { return cordovaPropertyGet(this, "ErrorCode"); },
        set: function (value) { cordovaPropertySet(this, "ErrorCode", value); },
        enumerable: false,
        configurable: true
    });
    ApproovHttp.pluginName = "ApproovHttp";
    ApproovHttp.plugin = "cordova-approov-advanced-http";
    ApproovHttp.pluginRef = "cordova.plugin.ApproovHttp";
    ApproovHttp.repo = "https://github.com/approov/quickstart-ionic-advancedhttp";
    ApproovHttp.platforms = ["Android", "iOS"];
    ApproovHttp.decorators = [
        { type: Injectable }
    ];
    return ApproovHttp;
}(AwesomeCordovaNativePlugin));
export { ApproovHttp };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYXBwcm9vdi1hZHZhbmNlZC1odHRwL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLCtFQUFnRSxNQUFNLCtCQUErQixDQUFDOztJQXlLNUUsK0JBQTBCOzs7O0lBMEJ6RCx3Q0FBa0IsYUFBQyxRQUFnQixFQUFFLFFBQWdCO0lBV3JELGtDQUFZLGFBQUMsUUFBZ0IsRUFBRSxRQUFnQjtJQVMvQyxnQ0FBVSxhQUFDLElBQVk7SUFZdkIsK0JBQVMsYUFBQyxJQUFZLEVBQUUsTUFBYyxFQUFFLEtBQWE7SUFRckQsdUNBQWlCO0lBV2pCLHVDQUFpQixhQUFDLFVBQWdFO0lBU2xGLCtCQUFTLGFBQUMsR0FBVyxFQUFFLE1BQWM7SUFNckMsa0NBQVk7SUFTWixtQ0FBYSxhQUFDLEdBQVcsRUFBRSxFQUFjO0lBUXpDLHFDQUFlLGFBQUMsR0FBVztJQVUzQix1Q0FBaUI7SUFVakIsdUNBQWlCLGFBQUMsT0FBZTtJQVFqQyx1Q0FBaUI7SUFVakIsdUNBQWlCLGFBQUMsTUFBZTtJQWFqQyx3Q0FBa0IsYUFBQyxJQUFpRDtJQWFwRSwwQkFBSSxhQUFDLEdBQVcsRUFBRSxJQUFTLEVBQUUsT0FBWTtJQWtCekMsOEJBQVEsYUFDTixHQUFXLEVBQ1gsSUFBUyxFQUNULE9BQVksRUFDWixPQUF1QyxFQUN2QyxPQUE2QjtJQWMvQix5QkFBRyxhQUFDLEdBQVcsRUFBRSxVQUFlLEVBQUUsT0FBWTtJQWtCOUMsNkJBQU8sYUFDTCxHQUFXLEVBQ1gsVUFBZSxFQUNmLE9BQVksRUFDWixPQUF1QyxFQUN2QyxPQUE2QjtJQWMvQix5QkFBRyxhQUFDLEdBQVcsRUFBRSxJQUFTLEVBQUUsT0FBWTtJQWtCeEMsNkJBQU8sYUFDTCxHQUFXLEVBQ1gsSUFBUyxFQUNULE9BQVksRUFDWixPQUF1QyxFQUN2QyxPQUE2QjtJQWMvQiwyQkFBSyxhQUFDLEdBQVcsRUFBRSxJQUFTLEVBQUUsT0FBWTtJQWtCMUMsK0JBQVMsYUFDUCxHQUFXLEVBQ1gsSUFBUyxFQUNULE9BQVksRUFDWixPQUF1QyxFQUN2QyxPQUE2QjtJQWMvQiw0QkFBTSxhQUFDLEdBQVcsRUFBRSxVQUFlLEVBQUUsT0FBWTtJQWtCakQsZ0NBQVUsYUFDUixHQUFXLEVBQ1gsVUFBZSxFQUNmLE9BQVksRUFDWixPQUF1QyxFQUN2QyxPQUE2QjtJQWMvQiwwQkFBSSxhQUFDLEdBQVcsRUFBRSxVQUFlLEVBQUUsT0FBWTtJQWtCL0MsOEJBQVEsYUFDTixHQUFXLEVBQ1gsVUFBZSxFQUNmLE9BQVksRUFDWixPQUF1QyxFQUN2QyxPQUE2QjtJQWMvQiw2QkFBTyxhQUFDLEdBQVcsRUFBRSxVQUFlLEVBQUUsT0FBWTtJQWtCbEQsaUNBQVcsYUFDVCxHQUFXLEVBQ1gsVUFBZSxFQUNmLE9BQVksRUFDWixPQUF1QyxFQUN2QyxPQUE2QjtJQWUvQixnQ0FBVSxhQUFDLEdBQVcsRUFBRSxJQUFTLEVBQUUsT0FBWSxFQUFFLFFBQTJCLEVBQUUsSUFBdUI7SUFtQnJHLG9DQUFjLGFBQ1osR0FBVyxFQUNYLElBQVMsRUFDVCxPQUFZLEVBQ1osUUFBMkIsRUFDM0IsSUFBdUIsRUFDdkIsT0FBOEIsRUFDOUIsT0FBNkI7SUFjL0Isa0NBQVksYUFBQyxHQUFXLEVBQUUsSUFBUyxFQUFFLE9BQVksRUFBRSxRQUFnQjtJQWtCbkUsc0NBQWdCLGFBQ2QsR0FBVyxFQUNYLElBQVMsRUFDVCxPQUFZLEVBQ1osUUFBZ0IsRUFDaEIsT0FBOEIsRUFDOUIsT0FBNkI7SUFxQi9CLGlDQUFXLGFBQ1QsR0FBVyxFQUNYLE9BVUM7SUEwQkgscUNBQWUsYUFDYixHQUFXLEVBQ1gsT0FVQyxFQUNELE9BQXVDLEVBQ3ZDLE9BQTZCO0lBUy9CLDJCQUFLLGFBQUMsU0FBaUI7SUFLdkIsdUNBQWlCO0lBS2pCLCtDQUF5QixhQUFDLFFBQWdCO0lBSzFDLDZDQUF1QixhQUFDLE1BQWM7SUFLdEMsNkNBQXVCLGFBQUMsSUFBWTswQkFobEIzQixrQ0FBUzs7Ozs7Ozs7Ozs7O2dCQVJuQixVQUFVOztzQkF6S1g7RUEwS2lDLDBCQUEwQjtTQUE5QyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBDb3Jkb3ZhUHJvcGVydHksIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEhUVFBSZXNwb25zZSB7XHJcbiAgLyoqXHJcbiAgICogVGhlIEhUVFAgc3RhdHVzIG51bWJlciBvZiB0aGUgcmVzcG9uc2Ugb3IgYSBuZWdhdGl2ZSBpbnRlcm5hbCBlcnJvciBjb2RlLlxyXG4gICAqL1xyXG4gIHN0YXR1czogbnVtYmVyO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBoZWFkZXJzIG9mIHRoZSByZXNwb25zZS5cclxuICAgKi9cclxuICBoZWFkZXJzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xyXG4gIC8qKlxyXG4gICAqIFRoZSBVUkwgb2YgdGhlIHJlc3BvbnNlLiBUaGlzIHByb3BlcnR5IHdpbGwgYmUgdGhlIGZpbmFsIFVSTCBvYnRhaW5lZCBhZnRlciBhbnkgcmVkaXJlY3RzLlxyXG4gICAqL1xyXG4gIHVybDogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkYXRhIHRoYXQgaXMgaW4gdGhlIHJlc3BvbnNlLiBUaGlzIHByb3BlcnR5IHVzdWFsbHkgZXhpc3RzIHdoZW4gYSBwcm9taXNlIHJldHVybmVkIGJ5IGEgcmVxdWVzdCBtZXRob2QgcmVzb2x2ZXMuXHJcbiAgICovXHJcbiAgZGF0YT86IGFueTtcclxuICAvKipcclxuICAgKiBFcnJvciByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIuIFRoaXMgcHJvcGVydHkgdXN1YWxseSBleGlzdHMgd2hlbiBhIHByb21pc2UgcmV0dXJuZWQgYnkgYSByZXF1ZXN0IG1ldGhvZCByZWplY3RzLlxyXG4gICAqL1xyXG4gIGVycm9yPzogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQWJvcnRlZFJlc3BvbnNlIHtcclxuICBhYm9ydGVkOiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFwcHJvb3ZMb2dnYWJsZVRva2VuIHtcclxuICAvKipcclxuICAgKiBFeHBpcnlcclxuICAgKiBUaGUgb25seSBtYW5kYXRvcnkgY2xhaW0gZm9yIEFwcHJvb3YgdG9rZW5zLiBJdCBzcGVjaWZpZXMgdGhlIGV4cGlyeSB0aW1lIGZvciB0aGUgdG9rZW4gYXMgYSBVbml4IHRpbWVzdGFtcC5cclxuICAgKi9cclxuICBleHA6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogRGV2aWNlIElEXHJcbiAgICogVGhpcyBjbGFpbSBpZGVudGlmaWVzIHRoZSBkZXZpY2UgZm9yIHdoaWNoIHRoZSB0b2tlbiB3YXMgaXNzdWVkLiBUaGlzIGlzIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nIHJlcHJlc2VudGluZyBhIDEyOC1iaXQgZGV2aWNlIGlkZW50aWZpZXIuXHJcbiAgICogTm90ZSB0aGF0IHRoaXMgaXMgbm90LCBzdHJpY3RseSBzcGVha2luZywgYSBkZXZpY2UgaWRlbnRpZmllciBhcyBpdCBpcyBhbHNvIGluZmx1ZW5jZWQgYnkgdGhlIGFwcCBpZGVudGlmaWVyXHJcbiAgICogYW5kIG1heSBjaGFuZ2UgaWYgdGhlIHNhbWUgYXBwIGlzIHVuaW5zdGFsbGVkIGFuZCB0aGVuIHJlaW5zdGFsbGVkIG9uIHRoZSBzYW1lIGRldmljZS5cclxuICAgKi9cclxuICBkaWQ/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEF0dGVzdGF0aW9uIFJlc3BvbnNlIENvZGVcclxuICAgKiBUaGlzIGlzIGFuIG9wdGlvbmFsIGNsYWltIHRoYXQgZW5jb2RlcyBpbmZvcm1hdGlvbiBhYm91dCBhIHN1YnNldCBvZiB0aGUgZGV2aWNlIHByb3BlcnR5IGZsYWdzIGFuZCBhbHNvIHdoZXRoZXIgdGhlIGF0dGVzdGF0aW9uIHdhcyBhIHBhc3Mgb3IgZmFpbC5cclxuICAgKiBUaGUgY2xhaW0gaXMgZW5jb2RlZCBpbiBiYXNlMzIgYW5kIGlzIHR5cGljYWxseSAxMCBjaGFyYWN0ZXJzIGxvbmcgKGFsdGhvdWdoIGl0IG1heSBiZSBsb25nZXIgaW4gc29tZSBjaXJjdW1zdGFuY2VzKS5cclxuICAgKiBUaGlzIGNsYWltIGlzIG5vdCBpbmNsdWRlZCBieSB0b2tlbnMgZnJvbSB0aGUgZmFpbG92ZXIuXHJcbiAgICovXHJcbiAgYXJjPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBJUCBBZGRyZXNzXHJcbiAgICogVGhpcyBob2xkcyB0aGUgSVAgYWRkcmVzcyBvZiB0aGUgZGV2aWNlIGFzIHNlZW4gYnkgdGhlIEFwcHJvb3YgY2xvdWQgc2VydmljZS4gSXQgaXMgcHJvdmlkZWQgaW4gYSBodW1hbiByZWFkYWJsZSBJUCBhZGRyZXNzIGZvcm1hdCAoaW4gZWl0aGVyIElQdjQgb3IgSVB2NiBmb3JtYXQpLlxyXG4gICAqIEluIHByYWN0aWNlIHRoaXMgdmFsdWUgY2FuIG9mdGVuIGNoYW5nZSBiZXR3ZWVuIHRoZSB0aW1lIGEgdG9rZW4gaXMgaXNzdWVkIGFuZCB0aGUgdGltZSBpdCBpcyBzZW50IHRvIHlvdXIgYmFja2VuZCwgc28geW91IHNob3VsZCBuZXZlciBibG9jayBpZiBpdCBkaWZmZXJzLCBidXQgeW91IG1heSBpbmNsdWRlIGl0IGFzIGEgc2lnbmFsIHRoYXQgdG9rZW5zIGhhdmUgc29tZWhvdyBiZWVuIHN0b2xlbiBhbmQgYXJlIGJlaW5nIHJlcGxheWVkLlxyXG4gICAqIFRoaXMgY2xhaW0gaXMgbm90IGluY2x1ZGVkIGJ5IHRva2VucyBmcm9tIHRoZSBmYWlsb3ZlciBvciBpZiB0aGUgSVAgVHJhY2tpbmcgUG9saWN5IGZvciB0aGUgYWNjb3VudCBoYXMgYmVlbiBzZXQgdG8gbm9uZS5cclxuICAgKi9cclxuICBpcD86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogSXNzdWVyXHJcbiAgICogQW4gb3B0aW9uYWwgY2xhaW0gdGhhdCBpcyBhZGRlZCBpZiB0aGUgaXNzdWVyIGluY2x1c2lvbiBvcHRpb24gaXMgZW5hYmxlZC4gVGhpcyBwcm92aWRlcyB0aGUgQXBwcm9vdiBhY2NvdW50IElEIHRoYXQgd2FzIHVzZWQgdG8gaXNzdWUgdGhlIHRva2VuIChzdWZmaXhlZCB3aXRoIGFwcHJvb3YuaW8pLlxyXG4gICAqIEl0IGNhbiBiZSB1c2VkIGFzIGFuIGFkZGl0aW9uYWwgbGF5ZXIgb2YgYmFja2VuZCB2ZXJpZmljYXRpb24gaWYgc2lnbmluZyBrZXlzIGFyZSBzaGFyZWQgYmV0d2VlbiBtdWx0aXBsZSBhY2NvdW50cy5cclxuICAgKiBJdCBpbmRpY2F0ZXMgdGhhdCB0b2tlbnMgd2VyZSBpc3N1ZWQgZnJvbSB0aGUgZXhwZWN0ZWQgQXBwcm9vdiBhY2NvdW50LiBUaGlzIGNsYWltIG1heSBhbHNvIGJlIHNldCB0byBhbiBleHBsaWNpdCB2YWx1ZSBmb3IgbG9uZyBsaXZlZCBBcHByb292IHRva2Vucy5cclxuICAgKiBUaGlzIGZsZXhpYmlsaXR5IGlzIGRlc2lnbmVkIGZvciB1c2Ugd2l0aCBzZXJ2ZXItdG8tc2VydmVyIGNvbW11bmljYXRpb24gKHdoaWNoIG1heSBvbmx5IGJlIHNpZ25lZCB3aXRoIHRoZSBhY2NvdW50IHNwZWNpZmljIHNlY3JldCBrZXlzKS5cclxuICAgKi9cclxuICBpc3M/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEFubm90YXRpb25cclxuICAgKiBUaGlzIGlzIGFuIGVtYmVkZGVkIEpTT04gYXJyYXkgb2Ygc3RyaW5ncyBzaG93aW5nIHRoZSBsaXN0IG9mIGZsYWdzIHRoYXQgYXJlIHNldCBhbmQgYXJlIGluIHRoZSBhbm5vdGF0aW9uIHNldCBmb3IgdGhlIHNlY3VyaXR5IHBvbGljeSB0aGF0IGlzIHNlbGVjdGVkLlxyXG4gICAqIFRoaXMgYWxsb3dzIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gdG8gYmUgY29sbGVjdGVkIGFib3V0IHRoZSBzdGF0ZSBvZiBhIHBhcnRpY3VsYXIgZGV2aWNlIHdpdGhvdXQgbmVjZXNzYXJpbHkgY2F1c2luZyBhbiBhdHRlc3RhdGlvbiBmYWlsdXJlLlxyXG4gICAqIE5vdGUgdGhhdCBpZiB0aGVyZSBhcmUgbm8gcG9zc2libGUgYW5ub3RhdGlvbnMgdGhlbiB0aGlzIGNsYWltIGlzIG5vdCBwcmVzZW50IGF0IGFsbC4gVGhpcyBjbGFpbSBpcyBub3QgaW5jbHVkZWQgYnkgdG9rZW5zIGZyb20gdGhlIGZhaWxvdmVyLlxyXG4gICAqL1xyXG4gIGFubm8/OiBzdHJpbmdbXTtcclxuXHJcbiAgLyoqXHJcbiAgICogUGF5bG9hZCBIYXNoXHJcbiAgICogQW4gb3B0aW9uYWwgY2xhaW0gdGhhdCBpcyBhZGRlZCBpZiB0aGUgcHJvdGVjdGVkIGFwcCBwYXNzZXMgYSB0b2tlbiBiaW5kaW5nIGFyZ3VtZW50IHRvIHRoZSBzZXREYXRhSGFzaEluVG9rZW4gbWV0aG9kLlxyXG4gICAqIFRoZSBjbGFpbSB2YWx1ZSBpcyBzZXQgdG8gdGhlIGJhc2U2NCBlbmNvZGVkIFNIQTI1NiBoYXNoIG9mIHRoZSBwcm92aWRlZCBwYXlsb2FkIHN0cmluZy5cclxuICAgKiBUaGlzIGlzIHR5cGljYWxseSB1c2VkIHRvIGJpbmQgYW4gQXBwcm9vdiB0b2tlbiB0byBzb21lIG90aGVyIGRhdGEgdXNlZCBieSB5b3VyIGFwcCB0byBlbmhhbmNlIHNlY3VyaXR5IChsaWtlIGEgdXNlciBhdXRoIHRva2VuKS5cclxuICAgKi9cclxuICBwYXk/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEF1ZGllbmNlXHJcbiAgICogQW4gb3B0aW9uYWwgY2xhaW0gdGhhdCBpcyBhZGRlZCBpZiB0aGUgYXVkaWVuY2UgaW5jbHVzaW9uIG9wdGlvbiBpcyBlbmFibGVkLiBUaGlzIHByb3ZpZGVzIHRoZSBkb21haW4gZm9yIHdoaWNoIHRoZSB0b2tlbiB3YXMgaXNzdWVkLlxyXG4gICAqIEl0IGNhbiBiZSB1c2VkIGFzIGFuIGFkZGl0aW9uYWwgbGF5ZXIgb2YgYmFja2VuZCB2ZXJpZmljYXRpb24gdG8gZW5zdXJlIHRoYXQgdG9rZW5zIGludGVuZGVkIGZvciBvbmUgZG9tYWluIGNhbm5vdCBiZSB1c2VkIG9uIHRvIGFjY2VzcyBhIGRpZmZlcmVudCBvbmUuXHJcbiAgICovXHJcbiAgYXVkPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBNZXNzYWdlIFNpZ2luZyBLZXkgSURcclxuICAgKiBUaGlzIGlzIGFuIG9wdGlvbmFsIGNsYWltIHRoYXQgZW5jb2RlcyB0aGUgSUQgb2YgYSBrZXkgYmVpbmcgdXNlZCBmb3IgTWVzc2FnZSBTaWduaW5nLlxyXG4gICAqIFRoaXMgaXMgb25seSBwcmVzZW50IGluIEFwcHJvb3YgdG9rZW5zIGZvciB3aGljaCBtZXNzYWdlIHNpZ25pbmcgaXMgYWN0aXZlLiBUaGlzIGNsYWltIGlzIG5vdCBpbmNsdWRlZCBieSB0b2tlbnMgZnJvbSB0aGUgZmFpbG92ZXIuXHJcbiAgICovXHJcbiAgbXNraWQ/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIE1lYXN1cmVtZW50IFByb29mIEtleVxyXG4gICAqIEFuIG9wdGlvbmFsIGNsYWltIHRvIHByb3ZpZGUgdGhlIG1lYXN1cmVtZW50IHByb29mIGtleSBpZiBhIG1lYXN1cmVtZW50IGhhcyBiZWVuIHJlcXVlc3RlZCBieSB0aGUgU0RLIG9uIHRoZSBkb21haW4gZm9yIHdoaWNoIHRoZSB0b2tlbiBpcyBpc3N1ZWQuXHJcbiAgICogVGhpcyBpcyBhIGJhc2U2NCBlbmNvZGVkIDEyOC1iaXQgcHJvb2Yga2V5IHZhbHVlLiBOb3RlIHRoYXQgaWYgbWVhc3VyZW1lbnQgaXMgYmVpbmcgdXNlZCwgdGhlbiBKV0UgdG9rZW5zIHdpbGwgYmUgdXNlZCB0byBrZWVwIHRoaXMgY2xhaW0gc2VjcmV0LlxyXG4gICAqL1xyXG4gIG1waz86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogSW50ZWdyaXR5IE1lYXN1cmVtZW50IEhhc2hcclxuICAgKiBBbiBvcHRpb25hbCBjbGFpbSB0byBwcm92aWRlIHRoZSBpbnRlZ3JpdHkgbWVhc3VyZW1lbnQgaGFzaCBpZiBhIG1lYXN1cmVtZW50IGhhcyBiZWVuIHJlcXVlc3RlZCBieSB0aGUgU0RLIG9uIHRoZSBkb21haW4gZm9yIHdoaWNoIHRoZSB0b2tlbiBpcyBpc3N1ZWQuXHJcbiAgICogVGhpcyBpcyBhIGJhc2U2NCBlbmNvZGVkIDI1Ni1iaXQgU0hBMjU2IG1lYXN1cmVtZW50IHZhbHVlLiBOb3RlIHRoYXQgaWYgbWVhc3VyZW1lbnQgaXMgYmVpbmcgdXNlZCwgdGhlbiBKV0UgdG9rZW5zIHdpbGwgYmUgdXNlZCB0byBrZWVwIHRoaXMgY2xhaW0gc2VjcmV0LlxyXG4gICAqL1xyXG4gIGltaD86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogRGV2aWNlIE1lYXN1cmVtZW50IEhhc2hcclxuICAgKiBBbiBvcHRpb25hbCBjbGFpbSB0byBwcm92aWRlIHRoZSBkZXZpY2UgbWVhc3VyZW1lbnQgaGFzaCBpZiBhIG1lYXN1cmVtZW50IGhhcyBiZWVuIHJlcXVlc3RlZCBieSB0aGUgU0RLIG9uIHRoZSBkb21haW4gZm9yIHdoaWNoIHRoZSB0b2tlbiBpcyBpc3N1ZWQuXHJcbiAgICogVGhpcyBpcyBhIGJhc2U2NCBlbmNvZGVkIDI1Ni1iaXQgU0hBMjU2IG1lYXN1cmVtZW50IHZhbHVlLiBOb3RlIHRoYXQgaWYgbWVhc3VyZW1lbnQgaXMgYmVpbmcgdXNlZCwgdGhlbiBKV0UgdG9rZW5zIHdpbGwgYmUgdXNlZCB0byBrZWVwIHRoaXMgY2xhaW0gc2VjcmV0XHJcbiAgICovXHJcbiAgZG1oPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgSFRUUFxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQ29yZG92YSAvIFBob25lZ2FwIHBsdWdpbiBmb3IgY29tbXVuaWNhdGluZyB3aXRoIEhUVFAgc2VydmVycy4gU3VwcG9ydHMgaU9TIGFuZCBBbmRyb2lkLlxyXG4gKlxyXG4gKiBBZHZhbnRhZ2VzIG92ZXIgSmF2YXNjcmlwdCByZXF1ZXN0czpcclxuICogLSBTU0wgLyBUTFMgUGlubmluZ1xyXG4gKiAtIENPUlMgcmVzdHJpY3Rpb25zIGRvIG5vdCBhcHBseVxyXG4gKiAtIEhhbmRsaW5nIG9mIEhUVFAgY29kZSA0MDEgLSByZWFkIG1vcmUgYXQgW0lzc3VlIENCLTI0MTVdKGh0dHBzOi8vaXNzdWVzLmFwYWNoZS5vcmcvamlyYS9icm93c2UvQ0ItMjQxNSlcclxuICpcclxuICogTm90ZTogVGhpcyBwbHVnaW4gZXh0ZW5kcyB0aGUgcHJlLWV4aXN0aW5nIFtjb3Jkb3ZhLWFkdmFuY2VkLWh0dHAtcGx1Z2luXShodHRwczovL2dpdGh1Yi5jb20vc2lsa2ltZW4vY29yZG92YS1wbHVnaW4tYWR2YW5jZWQtaHR0cCksXHJcbiAqIHdlIGhhdmUgb25seSBhZGRlZCBhcHByb292IGZ1bmN0aW9uYWxpdHkgb24gdG9wIG9mIGl0LiBBbGwgY3JlZGl0IGdvZXMgdG8gdGhlIGFjdHVhbCBwbHVnaW4gZGV2ZWxvcGVyLlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBBcHByb292SHR0cCB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9odHRwL25neCc7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogQXBwcm9vdkh0dHApIHt9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiB0aGlzLmh0dHAuZ2V0KCdodHRwOi8vaW9uaWMuaW8nLCB7fSwge30pXHJcbiAqICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAqXHJcbiAqICAgICBjb25zb2xlLmxvZyhkYXRhLnN0YXR1cyk7XHJcbiAqICAgICBjb25zb2xlLmxvZyhkYXRhLmRhdGEpOyAvLyBkYXRhIHJlY2VpdmVkIGJ5IHNlcnZlclxyXG4gKiAgICAgY29uc29sZS5sb2coZGF0YS5oZWFkZXJzKTtcclxuICpcclxuICogICB9KVxyXG4gKiAgIC5jYXRjaChlcnJvciA9PiB7XHJcbiAqXHJcbiAqICAgICBjb25zb2xlLmxvZyhlcnJvci5zdGF0dXMpO1xyXG4gKiAgICAgY29uc29sZS5sb2coZXJyb3IuZXJyb3IpOyAvLyBlcnJvciBtZXNzYWdlIGFzIHN0cmluZ1xyXG4gKiAgICAgY29uc29sZS5sb2coZXJyb3IuaGVhZGVycyk7XHJcbiAqXHJcbiAqICAgfSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBIVFRQUmVzcG9uc2VcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdBcHByb292SHR0cCcsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1hcHByb292LWFkdmFuY2VkLWh0dHAnLFxyXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2luLkFwcHJvb3ZIdHRwJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FwcHJvb3YvcXVpY2tzdGFydC1pb25pYy1hZHZhbmNlZGh0dHAnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBBcHByb292SHR0cCBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBUaGlzIGVudW0gcmVwcmVzZW50cyB0aGUgaW50ZXJuYWwgZXJyb3IgY29kZXMgd2hpY2ggY2FuIGJlIHJldHVybmVkIGluIGEgSFRUUFJlc3BvbnNlIG9iamVjdC5cclxuICAgKlxyXG4gICAqIEByZWFkb25seVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhUHJvcGVydHkoKVxyXG4gIHJlYWRvbmx5IEVycm9yQ29kZToge1xyXG4gICAgR0VORVJJQzogbnVtYmVyO1xyXG4gICAgU1NMX0VYQ0VQVElPTjogbnVtYmVyO1xyXG4gICAgU0VSVkVSX05PVF9GT1VORDogbnVtYmVyO1xyXG4gICAgVElNRU9VVDogbnVtYmVyO1xyXG4gICAgVU5TVVBQT1JURURfVVJMOiBudW1iZXI7XHJcbiAgICBOT1RfQ09OTkVDVEVEOiBudW1iZXI7XHJcbiAgICBQT1NUX1BST0NFU1NJTkdfRkFJTEVEOiBudW1iZXI7XHJcbiAgICBBQk9SVEVEOiBudW1iZXI7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyByZXR1cm5zIGFuIG9iamVjdCByZXByZXNlbnRpbmcgYSBiYXNpYyBIVFRQIEF1dGhvcml6YXRpb24gaGVhZGVyIG9mIHRoZSBmb3JtLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHVzZXJuYW1lIHtzdHJpbmd9IFVzZXJuYW1lXHJcbiAgICogQHBhcmFtIHBhc3N3b3JkIHtzdHJpbmd9IFBhc3N3b3JkXHJcbiAgICogQHJldHVybnMge09iamVjdH0gYW4gb2JqZWN0IHJlcHJlc2VudGluZyBhIGJhc2ljIEhUVFAgQXV0aG9yaXphdGlvbiBoZWFkZXIgb2YgdGhlIGZvcm0geydBdXRob3JpemF0aW9uJzogJ0Jhc2ljIGJhc2U2NEVuY29kZWRVc2VybmFtZUFuZFBhc3N3b3JkJ31cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBnZXRCYXNpY0F1dGhIZWFkZXIodXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyk6IHsgQXV0aG9yaXphdGlvbjogc3RyaW5nIH0ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBzZXRzIHVwIGFsbCBmdXR1cmUgcmVxdWVzdHMgdG8gdXNlIEJhc2ljIEhUVFAgYXV0aGVudGljYXRpb24gd2l0aCB0aGUgZ2l2ZW4gdXNlcm5hbWUgYW5kIHBhc3N3b3JkLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHVzZXJuYW1lIHtzdHJpbmd9IFVzZXJuYW1lXHJcbiAgICogQHBhcmFtIHBhc3N3b3JkIHtzdHJpbmd9IFBhc3N3b3JkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgdXNlQmFzaWNBdXRoKHVzZXJuYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpOiB2b2lkIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBhbGwgaGVhZGVycyBkZWZpbmVkIGZvciBhIGdpdmVuIGhvc3RuYW1lLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGhvc3Qge3N0cmluZ30gVGhlIGhvc3RuYW1lXHJcbiAgICogQHJldHVybnMge3N0cmluZ30gcmV0dXJuIGFsbCBoZWFkZXJzIGRlZmluZWQgZm9yIHRoZSBob3N0bmFtZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIGdldEhlYWRlcnMoaG9zdDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCBhIGhlYWRlciBmb3IgYWxsIGZ1dHVyZSByZXF1ZXN0cy4gVGFrZXMgYSBob3N0bmFtZSwgYSBoZWFkZXIgYW5kIGEgdmFsdWUuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gaG9zdCB7c3RyaW5nfSBUaGUgaG9zdG5hbWUgdG8gYmUgdXNlZCBmb3Igc2NvcGluZyB0aGlzIGhlYWRlclxyXG4gICAqIEBwYXJhbSBoZWFkZXIge3N0cmluZ30gVGhlIG5hbWUgb2YgdGhlIGhlYWRlclxyXG4gICAqIEBwYXJhbSB2YWx1ZSB7c3RyaW5nfSBUaGUgdmFsdWUgb2YgdGhlIGhlYWRlclxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHNldEhlYWRlcihob3N0OiBzdHJpbmcsIGhlYWRlcjogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7fVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgdGhlIG5hbWUgb2YgdGhlIGRhdGEgc2VyaWFsaXplciB3aGljaCB3aWxsIGJlIHVzZWQgZm9yIGFsbCBmdXR1cmUgUE9TVCBhbmQgUFVUIHJlcXVlc3RzLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3N0cmluZ30gcmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgY29uZmlndXJlZCBkYXRhIHNlcmlhbGl6ZXJcclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBnZXREYXRhU2VyaWFsaXplcigpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHRoZSBkYXRhIHNlcmlhbGl6ZXIgd2hpY2ggd2lsbCBiZSB1c2VkIGZvciBhbGwgZnV0dXJlIFBPU1QsIFBVVCBhbmQgUEFUQ0ggcmVxdWVzdHMuIFRha2VzIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgbmFtZSBvZiB0aGUgc2VyaWFsaXplci5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBzZXJpYWxpemVyIHtzdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSBzZXJpYWxpemVyLlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3NpbGtpbWVuL2NvcmRvdmEtcGx1Z2luLWFkdmFuY2VkLWh0dHAjc2V0ZGF0YXNlcmlhbGl6ZXJcclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzZXREYXRhU2VyaWFsaXplcihzZXJpYWxpemVyOiAndXJsZW5jb2RlZCcgfCAnanNvbicgfCAndXRmOCcgfCAnbXVsdGlwYXJ0JyB8ICdyYXcnKTogdm9pZCB7fVxyXG5cclxuICAvKipcclxuICAgKiBBZGQgYSBjdXN0b20gY29va2llLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHVybCB7c3RyaW5nfSBTY29wZSBvZiB0aGUgY29va2llXHJcbiAgICogQHBhcmFtIGNvb2tpZSB7c3RyaW5nfSBSRkMgY29tcGxpYW50IGNvb2tpZSBzdHJpbmdcclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzZXRDb29raWUodXJsOiBzdHJpbmcsIGNvb2tpZTogc3RyaW5nKTogdm9pZCB7fVxyXG5cclxuICAvKipcclxuICAgKiBDbGVhciBhbGwgY29va2llcy5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBjbGVhckNvb2tpZXMoKTogdm9pZCB7fVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmUgY29va2llcyBmb3IgZ2l2ZW4gVVJMLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHVybCB7c3RyaW5nfVxyXG4gICAqIEBwYXJhbSBjYlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHJlbW92ZUNvb2tpZXModXJsOiBzdHJpbmcsIGNiOiAoKSA9PiB2b2lkKTogdm9pZCB7fVxyXG5cclxuICAvKipcclxuICAgKiBSZXNvbHZlIGNvb2tpZSBzdHJpbmcgZm9yIGdpdmVuIFVSTC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB1cmwge3N0cmluZ31cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBnZXRDb29raWVTdHJpbmcodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGdsb2JhbCByZXF1ZXN0IHRpbWVvdXQgdmFsdWUgaW4gc2Vjb25kcy5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IHJldHVybnMgdGhlIGdsb2JhbCByZXF1ZXN0IHRpbWVvdXQgdmFsdWVcclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBnZXRSZXF1ZXN0VGltZW91dCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IGdsb2JhbCByZXF1ZXN0IHRpbWVvdXQgdmFsdWUgaW4gc2Vjb25kcy5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB0aW1lb3V0IHtudW1iZXJ9IFRoZSB0aW1lb3V0IGluIHNlY29uZHMuIERlZmF1bHQgNjBcclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzZXRSZXF1ZXN0VGltZW91dCh0aW1lb3V0OiBudW1iZXIpOiB2b2lkIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc29sdmUgaWYgaXQgc2hvdWxkIGZvbGxvdyByZWRpcmVjdHMgYXV0b21hdGljYWxseS5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm5zIHRydWUgaWYgaXQgaXMgY29uZmlndXJlZCB0byBmb2xsb3cgcmVkaXJlY3RzIGF1dG9tYXRpY2FsbHlcclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBnZXRGb2xsb3dSZWRpcmVjdCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbmZpZ3VyZSBpZiBpdCBzaG91bGQgZm9sbG93IHJlZGlyZWN0cyBhdXRvbWF0aWNhbGx5LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGZvbGxvdyB7Ym9vbGVhbn0gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgZm9sbG93aW5nIHJlZGlyZWN0cyBhdXRvbWF0aWNhbGx5XHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgc2V0Rm9sbG93UmVkaXJlY3QoZm9sbG93OiBib29sZWFuKTogdm9pZCB7fVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgc2VydmVyIHRydXN0IG1vZGUsIGJlaW5nIG9uZSBvZiB0aGUgZm9sbG93aW5nIHZhbHVlczpcclxuICAgKiBkZWZhdWx0OiBkZWZhdWx0IFNTTCB0cnVzdHNoaXAgYW5kIGhvc3RuYW1lIHZlcmlmaWNhdGlvbiBoYW5kbGluZyB1c2luZyBzeXN0ZW0ncyBDQSBjZXJ0cztcclxuICAgKiBsZWdhY3k6IHVzZSBsZWdhY3kgZGVmYXVsdCBiZWhhdmlvciAoPCAyLjAuMyksIGV4Y2x1ZGluZyB1c2VyIGluc3RhbGxlZCBDQSBjZXJ0cyAob25seSBmb3IgQW5kcm9pZCk7XHJcbiAgICogbm9jaGVjazogZGlzYWJsZSBTU0wgY2VydGlmaWNhdGUgY2hlY2tpbmcgYW5kIGhvc3RuYW1lIHZlcmlmaWNhdGlvbiwgdHJ1c3RpbmcgYWxsIGNlcnRzIChtZWFudCB0byBiZSB1c2VkIG9ubHkgZm9yIHRlc3RpbmcgcHVycG9zZXMpO1xyXG4gICAqIHBpbm5lZDogdHJ1c3Qgb25seSBwcm92aWRlZCBjZXJ0aWZpY2F0ZXM7XHJcbiAgICpcclxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zaWxraW1lbi9jb3Jkb3ZhLXBsdWdpbi1hZHZhbmNlZC1odHRwI3NldHNlcnZlcnRydXN0bW9kZVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlIHNlcnZlciB0cnVzdCBtb2RlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldFNlcnZlclRydXN0TW9kZShtb2RlOiAnZGVmYXVsdCcgfCAnbGVnYWN5JyB8ICdub2NoZWNrJyB8ICdwaW5uZWQnKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNYWtlIGEgUE9TVCByZXF1ZXN0XHJcbiAgICpcclxuICAgKiBAcGFyYW0gdXJsIHtzdHJpbmd9IFRoZSB1cmwgdG8gc2VuZCB0aGUgcmVxdWVzdCB0b1xyXG4gICAqIEBwYXJhbSBib2R5IHtPYmplY3R9IFRoZSBib2R5IG9mIHRoZSByZXF1ZXN0XHJcbiAgICogQHBhcmFtIGhlYWRlcnMge09iamVjdH0gVGhlIGhlYWRlcnMgdG8gc2V0IGZvciB0aGlzIHJlcXVlc3RcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxIVFRQUmVzcG9uc2U+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSBvbiBzdWNjZXNzLCBhbmQgcmVqZWN0IG9uIGZhaWx1cmVcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcG9zdCh1cmw6IHN0cmluZywgYm9keTogYW55LCBoZWFkZXJzOiBhbnkpOiBQcm9taXNlPEhUVFBSZXNwb25zZT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWFrZSBhIHN5bmMgUE9TVCByZXF1ZXN0XHJcbiAgICpcclxuICAgKiBAcGFyYW0gdXJsIHtzdHJpbmd9IFRoZSB1cmwgdG8gc2VuZCB0aGUgcmVxdWVzdCB0b1xyXG4gICAqIEBwYXJhbSBib2R5IHtPYmplY3R9IFRoZSBib2R5IG9mIHRoZSByZXF1ZXN0XHJcbiAgICogQHBhcmFtIGhlYWRlcnMge09iamVjdH0gVGhlIGhlYWRlcnMgdG8gc2V0IGZvciB0aGlzIHJlcXVlc3RcclxuICAgKiBAcGFyYW0gc3VjY2VzcyB7ZnVuY3Rpb259IEEgY2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBzdWNjZWVkXHJcbiAgICogQHBhcmFtIGZhaWx1cmUge2Z1bmN0aW9ufSBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3QgZmFpbGVkXHJcbiAgICogQHJldHVybnMge3N0cmluZ30gcmV0dXJucyBhIHN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIHJlcXVlc3RJZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIG1ldGhvZE5hbWU6ICdwb3N0JyxcclxuICAgIHN5bmM6IHRydWUsXHJcbiAgfSlcclxuICBwb3N0U3luYyhcclxuICAgIHVybDogc3RyaW5nLFxyXG4gICAgYm9keTogYW55LFxyXG4gICAgaGVhZGVyczogYW55LFxyXG4gICAgc3VjY2VzczogKHJlc3VsdDogSFRUUFJlc3BvbnNlKSA9PiB2b2lkLFxyXG4gICAgZmFpbHVyZTogKGVycm9yOiBhbnkpID0+IHZvaWRcclxuICApOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWFrZSBhIEdFVCByZXF1ZXN0XHJcbiAgICpcclxuICAgKiBAcGFyYW0gdXJsIHtzdHJpbmd9IFRoZSB1cmwgdG8gc2VuZCB0aGUgcmVxdWVzdCB0b1xyXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIHtPYmplY3R9IFBhcmFtZXRlcnMgdG8gc2VuZCB3aXRoIHRoZSByZXF1ZXN0XHJcbiAgICogQHBhcmFtIGhlYWRlcnMge09iamVjdH0gVGhlIGhlYWRlcnMgdG8gc2V0IGZvciB0aGlzIHJlcXVlc3RcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxIVFRQUmVzcG9uc2U+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSBvbiBzdWNjZXNzLCBhbmQgcmVqZWN0IG9uIGZhaWx1cmVcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0KHVybDogc3RyaW5nLCBwYXJhbWV0ZXJzOiBhbnksIGhlYWRlcnM6IGFueSk6IFByb21pc2U8SFRUUFJlc3BvbnNlPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNYWtlIGEgc3luYyBHRVQgcmVxdWVzdFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHVybCB7c3RyaW5nfSBUaGUgdXJsIHRvIHNlbmQgdGhlIHJlcXVlc3QgdG9cclxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyB7T2JqZWN0fSBQYXJhbWV0ZXJzIHRvIHNlbmQgd2l0aCB0aGUgcmVxdWVzdFxyXG4gICAqIEBwYXJhbSBoZWFkZXJzIHtPYmplY3R9IFRoZSBoZWFkZXJzIHRvIHNldCBmb3IgdGhpcyByZXF1ZXN0XHJcbiAgICogQHBhcmFtIHN1Y2Nlc3Mge2Z1bmN0aW9ufSBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3Qgc3VjY2VlZFxyXG4gICAqIEBwYXJhbSBmYWlsdXJlIHtmdW5jdGlvbn0gQSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSByZXF1ZXN0IGZhaWxlZFxyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHJldHVybnMgYSBzdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZSByZXF1ZXN0SWRcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBtZXRob2ROYW1lOiAnZ2V0JyxcclxuICAgIHN5bmM6IHRydWUsXHJcbiAgfSlcclxuICBnZXRTeW5jKFxyXG4gICAgdXJsOiBzdHJpbmcsXHJcbiAgICBwYXJhbWV0ZXJzOiBhbnksXHJcbiAgICBoZWFkZXJzOiBhbnksXHJcbiAgICBzdWNjZXNzOiAocmVzdWx0OiBIVFRQUmVzcG9uc2UpID0+IHZvaWQsXHJcbiAgICBmYWlsdXJlOiAoZXJyb3I6IGFueSkgPT4gdm9pZFxyXG4gICk6IHN0cmluZyB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNYWtlIGEgUFVUIHJlcXVlc3RcclxuICAgKlxyXG4gICAqIEBwYXJhbSB1cmwge3N0cmluZ30gVGhlIHVybCB0byBzZW5kIHRoZSByZXF1ZXN0IHRvXHJcbiAgICogQHBhcmFtIGJvZHkge09iamVjdH0gVGhlIGJvZHkgb2YgdGhlIHJlcXVlc3RcclxuICAgKiBAcGFyYW0gaGVhZGVycyB7T2JqZWN0fSBUaGUgaGVhZGVycyB0byBzZXQgZm9yIHRoaXMgcmVxdWVzdFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEhUVFBSZXNwb25zZT59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIG9uIHN1Y2Nlc3MsIGFuZCByZWplY3Qgb24gZmFpbHVyZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBwdXQodXJsOiBzdHJpbmcsIGJvZHk6IGFueSwgaGVhZGVyczogYW55KTogUHJvbWlzZTxIVFRQUmVzcG9uc2U+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1ha2UgYSBzeW5jIFBVVCByZXF1ZXN0XHJcbiAgICpcclxuICAgKiBAcGFyYW0gdXJsIHtzdHJpbmd9IFRoZSB1cmwgdG8gc2VuZCB0aGUgcmVxdWVzdCB0b1xyXG4gICAqIEBwYXJhbSBib2R5IHtPYmplY3R9IFRoZSBib2R5IG9mIHRoZSByZXF1ZXN0XHJcbiAgICogQHBhcmFtIGhlYWRlcnMge09iamVjdH0gVGhlIGhlYWRlcnMgdG8gc2V0IGZvciB0aGlzIHJlcXVlc3RcclxuICAgKiBAcGFyYW0gc3VjY2VzcyB7ZnVuY3Rpb259IEEgY2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBzdWNjZWVkXHJcbiAgICogQHBhcmFtIGZhaWx1cmUge2Z1bmN0aW9ufSBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3QgZmFpbGVkXHJcbiAgICogQHJldHVybnMge3N0cmluZ30gcmV0dXJucyBhIHN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIHJlcXVlc3RJZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIG1ldGhvZE5hbWU6ICdwdXQnLFxyXG4gICAgc3luYzogdHJ1ZSxcclxuICB9KVxyXG4gIHB1dFN5bmMoXHJcbiAgICB1cmw6IHN0cmluZyxcclxuICAgIGJvZHk6IGFueSxcclxuICAgIGhlYWRlcnM6IGFueSxcclxuICAgIHN1Y2Nlc3M6IChyZXN1bHQ6IEhUVFBSZXNwb25zZSkgPT4gdm9pZCxcclxuICAgIGZhaWx1cmU6IChlcnJvcjogYW55KSA9PiB2b2lkXHJcbiAgKTogc3RyaW5nIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1ha2UgYSBQQVRDSCByZXF1ZXN0XHJcbiAgICpcclxuICAgKiBAcGFyYW0gdXJsIHtzdHJpbmd9IFRoZSB1cmwgdG8gc2VuZCB0aGUgcmVxdWVzdCB0b1xyXG4gICAqIEBwYXJhbSBib2R5IHtPYmplY3R9IFRoZSBib2R5IG9mIHRoZSByZXF1ZXN0XHJcbiAgICogQHBhcmFtIGhlYWRlcnMge09iamVjdH0gVGhlIGhlYWRlcnMgdG8gc2V0IGZvciB0aGlzIHJlcXVlc3RcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxIVFRQUmVzcG9uc2U+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSBvbiBzdWNjZXNzLCBhbmQgcmVqZWN0IG9uIGZhaWx1cmVcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcGF0Y2godXJsOiBzdHJpbmcsIGJvZHk6IGFueSwgaGVhZGVyczogYW55KTogUHJvbWlzZTxIVFRQUmVzcG9uc2U+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1ha2UgYSBzeW5jIFBBVENIIHJlcXVlc3RcclxuICAgKlxyXG4gICAqIEBwYXJhbSB1cmwge3N0cmluZ30gVGhlIHVybCB0byBzZW5kIHRoZSByZXF1ZXN0IHRvXHJcbiAgICogQHBhcmFtIGJvZHkge09iamVjdH0gVGhlIGJvZHkgb2YgdGhlIHJlcXVlc3RcclxuICAgKiBAcGFyYW0gaGVhZGVycyB7T2JqZWN0fSBUaGUgaGVhZGVycyB0byBzZXQgZm9yIHRoaXMgcmVxdWVzdFxyXG4gICAqIEBwYXJhbSBzdWNjZXNzIHtmdW5jdGlvbn0gQSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSByZXF1ZXN0IHN1Y2NlZWRcclxuICAgKiBAcGFyYW0gZmFpbHVyZSB7ZnVuY3Rpb259IEEgY2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBmYWlsZWRcclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSByZXR1cm5zIGEgc3RyaW5nIHRoYXQgcmVwcmVzZW50cyB0aGUgcmVxdWVzdElkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgbWV0aG9kTmFtZTogJ3BhdGNoJyxcclxuICAgIHN5bmM6IHRydWUsXHJcbiAgfSlcclxuICBwYXRjaFN5bmMoXHJcbiAgICB1cmw6IHN0cmluZyxcclxuICAgIGJvZHk6IGFueSxcclxuICAgIGhlYWRlcnM6IGFueSxcclxuICAgIHN1Y2Nlc3M6IChyZXN1bHQ6IEhUVFBSZXNwb25zZSkgPT4gdm9pZCxcclxuICAgIGZhaWx1cmU6IChlcnJvcjogYW55KSA9PiB2b2lkXHJcbiAgKTogc3RyaW5nIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1ha2UgYSBERUxFVEUgcmVxdWVzdFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHVybCB7c3RyaW5nfSBUaGUgdXJsIHRvIHNlbmQgdGhlIHJlcXVlc3QgdG9cclxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyB7T2JqZWN0fSBQYXJhbWV0ZXJzIHRvIHNlbmQgd2l0aCB0aGUgcmVxdWVzdFxyXG4gICAqIEBwYXJhbSBoZWFkZXJzIHtPYmplY3R9IFRoZSBoZWFkZXJzIHRvIHNldCBmb3IgdGhpcyByZXF1ZXN0XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8SFRUUFJlc3BvbnNlPn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgb24gc3VjY2VzcywgYW5kIHJlamVjdCBvbiBmYWlsdXJlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGRlbGV0ZSh1cmw6IHN0cmluZywgcGFyYW1ldGVyczogYW55LCBoZWFkZXJzOiBhbnkpOiBQcm9taXNlPEhUVFBSZXNwb25zZT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWFrZSBhIHN5bmMgREVMRVRFIHJlcXVlc3RcclxuICAgKlxyXG4gICAqIEBwYXJhbSB1cmwge3N0cmluZ30gVGhlIHVybCB0byBzZW5kIHRoZSByZXF1ZXN0IHRvXHJcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMge09iamVjdH0gUGFyYW1ldGVycyB0byBzZW5kIHdpdGggdGhlIHJlcXVlc3RcclxuICAgKiBAcGFyYW0gaGVhZGVycyB7T2JqZWN0fSBUaGUgaGVhZGVycyB0byBzZXQgZm9yIHRoaXMgcmVxdWVzdFxyXG4gICAqIEBwYXJhbSBzdWNjZXNzIHtmdW5jdGlvbn0gQSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSByZXF1ZXN0IHN1Y2NlZWRcclxuICAgKiBAcGFyYW0gZmFpbHVyZSB7ZnVuY3Rpb259IEEgY2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBmYWlsZWRcclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSByZXR1cm5zIGEgc3RyaW5nIHRoYXQgcmVwcmVzZW50cyB0aGUgcmVxdWVzdElkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgbWV0aG9kTmFtZTogJ2RlbGV0ZScsXHJcbiAgICBzeW5jOiB0cnVlLFxyXG4gIH0pXHJcbiAgZGVsZXRlU3luYyhcclxuICAgIHVybDogc3RyaW5nLFxyXG4gICAgcGFyYW1ldGVyczogYW55LFxyXG4gICAgaGVhZGVyczogYW55LFxyXG4gICAgc3VjY2VzczogKHJlc3VsdDogSFRUUFJlc3BvbnNlKSA9PiB2b2lkLFxyXG4gICAgZmFpbHVyZTogKGVycm9yOiBhbnkpID0+IHZvaWRcclxuICApOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWFrZSBhIEhFQUQgcmVxdWVzdFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHVybCB7c3RyaW5nfSBUaGUgdXJsIHRvIHNlbmQgdGhlIHJlcXVlc3QgdG9cclxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyB7T2JqZWN0fSBQYXJhbWV0ZXJzIHRvIHNlbmQgd2l0aCB0aGUgcmVxdWVzdFxyXG4gICAqIEBwYXJhbSBoZWFkZXJzIHtPYmplY3R9IFRoZSBoZWFkZXJzIHRvIHNldCBmb3IgdGhpcyByZXF1ZXN0XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8SFRUUFJlc3BvbnNlPn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgb24gc3VjY2VzcywgYW5kIHJlamVjdCBvbiBmYWlsdXJlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGhlYWQodXJsOiBzdHJpbmcsIHBhcmFtZXRlcnM6IGFueSwgaGVhZGVyczogYW55KTogUHJvbWlzZTxIVFRQUmVzcG9uc2U+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1ha2UgYSBzeW5jIEhFQUQgcmVxdWVzdFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHVybCB7c3RyaW5nfSBUaGUgdXJsIHRvIHNlbmQgdGhlIHJlcXVlc3QgdG9cclxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyB7T2JqZWN0fSBQYXJhbWV0ZXJzIHRvIHNlbmQgd2l0aCB0aGUgcmVxdWVzdFxyXG4gICAqIEBwYXJhbSBoZWFkZXJzIHtPYmplY3R9IFRoZSBoZWFkZXJzIHRvIHNldCBmb3IgdGhpcyByZXF1ZXN0XHJcbiAgICogQHBhcmFtIHN1Y2Nlc3Mge2Z1bmN0aW9ufSBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3Qgc3VjY2VlZFxyXG4gICAqIEBwYXJhbSBmYWlsdXJlIHtmdW5jdGlvbn0gQSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSByZXF1ZXN0IGZhaWxlZFxyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHJldHVybnMgYSBzdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZSByZXF1ZXN0SWRcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBtZXRob2ROYW1lOiAnaGVhZCcsXHJcbiAgICBzeW5jOiB0cnVlLFxyXG4gIH0pXHJcbiAgaGVhZFN5bmMoXHJcbiAgICB1cmw6IHN0cmluZyxcclxuICAgIHBhcmFtZXRlcnM6IGFueSxcclxuICAgIGhlYWRlcnM6IGFueSxcclxuICAgIHN1Y2Nlc3M6IChyZXN1bHQ6IEhUVFBSZXNwb25zZSkgPT4gdm9pZCxcclxuICAgIGZhaWx1cmU6IChlcnJvcjogYW55KSA9PiB2b2lkXHJcbiAgKTogc3RyaW5nIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1ha2UgYW4gT1BUSU9OUyByZXF1ZXN0XHJcbiAgICpcclxuICAgKiBAcGFyYW0gdXJsIHtzdHJpbmd9IFRoZSB1cmwgdG8gc2VuZCB0aGUgcmVxdWVzdCB0b1xyXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIHtPYmplY3R9IFBhcmFtZXRlcnMgdG8gc2VuZCB3aXRoIHRoZSByZXF1ZXN0XHJcbiAgICogQHBhcmFtIGhlYWRlcnMge09iamVjdH0gVGhlIGhlYWRlcnMgdG8gc2V0IGZvciB0aGlzIHJlcXVlc3RcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxIVFRQUmVzcG9uc2U+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSBvbiBzdWNjZXNzLCBhbmQgcmVqZWN0IG9uIGZhaWx1cmVcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgb3B0aW9ucyh1cmw6IHN0cmluZywgcGFyYW1ldGVyczogYW55LCBoZWFkZXJzOiBhbnkpOiBQcm9taXNlPEhUVFBSZXNwb25zZT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWFrZSBhbiBzeW5jIE9QVElPTlMgcmVxdWVzdFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHVybCB7c3RyaW5nfSBUaGUgdXJsIHRvIHNlbmQgdGhlIHJlcXVlc3QgdG9cclxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyB7T2JqZWN0fSBQYXJhbWV0ZXJzIHRvIHNlbmQgd2l0aCB0aGUgcmVxdWVzdFxyXG4gICAqIEBwYXJhbSBoZWFkZXJzIHtPYmplY3R9IFRoZSBoZWFkZXJzIHRvIHNldCBmb3IgdGhpcyByZXF1ZXN0XHJcbiAgICogQHBhcmFtIHN1Y2Nlc3Mge2Z1bmN0aW9ufSBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3Qgc3VjY2VlZFxyXG4gICAqIEBwYXJhbSBmYWlsdXJlIHtmdW5jdGlvbn0gQSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSByZXF1ZXN0IGZhaWxlZFxyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHJldHVybnMgYSBzdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZSByZXF1ZXN0SWRcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBtZXRob2ROYW1lOiAnb3B0aW9ucycsXHJcbiAgICBzeW5jOiB0cnVlLFxyXG4gIH0pXHJcbiAgb3B0aW9uc1N5bmMoXHJcbiAgICB1cmw6IHN0cmluZyxcclxuICAgIHBhcmFtZXRlcnM6IGFueSxcclxuICAgIGhlYWRlcnM6IGFueSxcclxuICAgIHN1Y2Nlc3M6IChyZXN1bHQ6IEhUVFBSZXNwb25zZSkgPT4gdm9pZCxcclxuICAgIGZhaWx1cmU6IChlcnJvcjogYW55KSA9PiB2b2lkXHJcbiAgKTogc3RyaW5nIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHVybCB7c3RyaW5nfSBUaGUgdXJsIHRvIHNlbmQgdGhlIHJlcXVlc3QgdG9cclxuICAgKiBAcGFyYW0gYm9keSB7T2JqZWN0fSBUaGUgYm9keSBvZiB0aGUgcmVxdWVzdFxyXG4gICAqIEBwYXJhbSBoZWFkZXJzIHtPYmplY3R9IFRoZSBoZWFkZXJzIHRvIHNldCBmb3IgdGhpcyByZXF1ZXN0XHJcbiAgICogQHBhcmFtIGZpbGVQYXRoIHtzdHJpbmd9IFRoZSBsb2NhbCBwYXRoKHMpIG9mIHRoZSBmaWxlKHMpIHRvIHVwbG9hZFxyXG4gICAqIEBwYXJhbSBuYW1lIHtzdHJpbmd9IFRoZSBuYW1lKHMpIG9mIHRoZSBwYXJhbWV0ZXIgdG8gcGFzcyB0aGUgZmlsZShzKSBhbG9uZyBhc1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IHJldHVybnMgYSBGaWxlRW50cnkgcHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSBvbiBzdWNjZXNzLCBhbmQgcmVqZWN0IG9uIGZhaWx1cmVcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgdXBsb2FkRmlsZSh1cmw6IHN0cmluZywgYm9keTogYW55LCBoZWFkZXJzOiBhbnksIGZpbGVQYXRoOiBzdHJpbmcgfCBzdHJpbmdbXSwgbmFtZTogc3RyaW5nIHwgc3RyaW5nW10pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcGFyYW0gdXJsIHtzdHJpbmd9IFRoZSB1cmwgdG8gc2VuZCB0aGUgcmVxdWVzdCB0b1xyXG4gICAqIEBwYXJhbSBib2R5IHtPYmplY3R9IFRoZSBib2R5IG9mIHRoZSByZXF1ZXN0XHJcbiAgICogQHBhcmFtIGhlYWRlcnMge09iamVjdH0gVGhlIGhlYWRlcnMgdG8gc2V0IGZvciB0aGlzIHJlcXVlc3RcclxuICAgKiBAcGFyYW0gZmlsZVBhdGgge3N0cmluZ30gVGhlIGxvY2FsIHBhdGgocykgb2YgdGhlIGZpbGUocykgdG8gdXBsb2FkXHJcbiAgICogQHBhcmFtIG5hbWUge3N0cmluZ30gVGhlIG5hbWUocykgb2YgdGhlIHBhcmFtZXRlciB0byBwYXNzIHRoZSBmaWxlKHMpIGFsb25nIGFzXHJcbiAgICogQHBhcmFtIHN1Y2Nlc3Mge2Z1bmN0aW9ufSBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3Qgc3VjY2VlZFxyXG4gICAqIEBwYXJhbSBmYWlsdXJlIHtmdW5jdGlvbn0gQSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSByZXF1ZXN0IGZhaWxlZFxyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHJldHVybnMgYSBzdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZSByZXF1ZXN0SWRcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBtZXRob2ROYW1lOiAndXBsb2FkRmlsZScsXHJcbiAgICBzeW5jOiB0cnVlLFxyXG4gIH0pXHJcbiAgdXBsb2FkRmlsZVN5bmMoXHJcbiAgICB1cmw6IHN0cmluZyxcclxuICAgIGJvZHk6IGFueSxcclxuICAgIGhlYWRlcnM6IGFueSxcclxuICAgIGZpbGVQYXRoOiBzdHJpbmcgfCBzdHJpbmdbXSxcclxuICAgIG5hbWU6IHN0cmluZyB8IHN0cmluZ1tdLFxyXG4gICAgc3VjY2VzczogKHJlc3VsdDogYW55KSA9PiB2b2lkLFxyXG4gICAgZmFpbHVyZTogKGVycm9yOiBhbnkpID0+IHZvaWRcclxuICApOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcGFyYW0gdXJsIHtzdHJpbmd9IFRoZSB1cmwgdG8gc2VuZCB0aGUgcmVxdWVzdCB0b1xyXG4gICAqIEBwYXJhbSBib2R5IHtPYmplY3R9IFRoZSBib2R5IG9mIHRoZSByZXF1ZXN0XHJcbiAgICogQHBhcmFtIGhlYWRlcnMge09iamVjdH0gVGhlIGhlYWRlcnMgdG8gc2V0IGZvciB0aGlzIHJlcXVlc3RcclxuICAgKiBAcGFyYW0gZmlsZVBhdGgge3N0cmluZ30gVGhlIHBhdGggdG8gZG93bmxvYWQgdGhlIGZpbGUgdG8sIGluY2x1ZGluZyB0aGUgZmlsZSBuYW1lLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IHJldHVybnMgYSBGaWxlRW50cnkgcHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSBvbiBzdWNjZXNzLCBhbmQgcmVqZWN0IG9uIGZhaWx1cmVcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZG93bmxvYWRGaWxlKHVybDogc3RyaW5nLCBib2R5OiBhbnksIGhlYWRlcnM6IGFueSwgZmlsZVBhdGg6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEBwYXJhbSB1cmwge3N0cmluZ30gVGhlIHVybCB0byBzZW5kIHRoZSByZXF1ZXN0IHRvXHJcbiAgICogQHBhcmFtIGJvZHkge09iamVjdH0gVGhlIGJvZHkgb2YgdGhlIHJlcXVlc3RcclxuICAgKiBAcGFyYW0gaGVhZGVycyB7T2JqZWN0fSBUaGUgaGVhZGVycyB0byBzZXQgZm9yIHRoaXMgcmVxdWVzdFxyXG4gICAqIEBwYXJhbSBmaWxlUGF0aCB7c3RyaW5nfSBUaGUgcGF0aCB0byBkb3dubG9hZCB0aGUgZmlsZSB0bywgaW5jbHVkaW5nIHRoZSBmaWxlIG5hbWUuXHJcbiAgICogQHBhcmFtIHN1Y2Nlc3Mge2Z1bmN0aW9ufSBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3Qgc3VjY2VlZFxyXG4gICAqIEBwYXJhbSBmYWlsdXJlIHtmdW5jdGlvbn0gQSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSByZXF1ZXN0IGZhaWxlZFxyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHJldHVybnMgYSBzdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZSByZXF1ZXN0SWRcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBtZXRob2ROYW1lOiAnZG93bmxvYWRGaWxlJyxcclxuICAgIHN5bmM6IHRydWUsXHJcbiAgfSlcclxuICBkb3dubG9hZEZpbGVTeW5jKFxyXG4gICAgdXJsOiBzdHJpbmcsXHJcbiAgICBib2R5OiBhbnksXHJcbiAgICBoZWFkZXJzOiBhbnksXHJcbiAgICBmaWxlUGF0aDogc3RyaW5nLFxyXG4gICAgc3VjY2VzczogKHJlc3VsdDogYW55KSA9PiB2b2lkLFxyXG4gICAgZmFpbHVyZTogKGVycm9yOiBhbnkpID0+IHZvaWRcclxuICApOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcGFyYW0gdXJsIHtzdHJpbmd9IFRoZSB1cmwgdG8gc2VuZCB0aGUgcmVxdWVzdCB0b1xyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtPYmplY3R9IG9wdGlvbnMgZm9yIGluZGl2aWR1YWwgcmVxdWVzdFxyXG4gICAqIEBwYXJhbSBvcHRpb25zLm1ldGhvZCB7c3RyaW5nfSByZXF1ZXN0IG1ldGhvZFxyXG4gICAqIEBwYXJhbSBvcHRpb25zLmRhdGEge09iamVjdH0gcGF5bG9hZCB0byBiZSBzZW5kIHRvIHRoZSBzZXJ2ZXIgKG9ubHkgYXBwbGljYWJsZSBvbiBwb3N0LCBwdXQgb3IgcGF0Y2ggbWV0aG9kcylcclxuICAgKiBAcGFyYW0gb3B0aW9ucy5wYXJhbXMge09iamVjdH0gcXVlcnkgcGFyYW1zIHRvIGJlIGFwcGVuZGVkIHRvIHRoZSBVUkwgKG9ubHkgYXBwbGljYWJsZSBvbiBnZXQsIGhlYWQsIGRlbGV0ZSwgdXBsb2FkIG9yIGRvd25sb2FkIG1ldGhvZHMpXHJcbiAgICogQHBhcmFtIG9wdGlvbnMuc2VyaWFsaXplciB7c3RyaW5nfSBkYXRhIHNlcmlhbGl6ZXIgdG8gYmUgdXNlZCAob25seSBhcHBsaWNhYmxlIG9uIHBvc3QsIHB1dCBvciBwYXRjaCBtZXRob2RzKSwgZGVmYXVsdHMgdG8gZ2xvYmFsIHNlcmlhbGl6ZXIgdmFsdWUsIHNlZSBzZXREYXRhU2VyaWFsaXplciBmb3Igc3VwcG9ydGVkIHZhbHVlc1xyXG4gICAqIEBwYXJhbSBvcHRpb25zLnRpbWVvdXQge251bWJlcn0gdGltZW91dCB2YWx1ZSBmb3IgdGhlIHJlcXVlc3QgaW4gc2Vjb25kcywgZGVmYXVsdHMgdG8gZ2xvYmFsIHRpbWVvdXQgdmFsdWVcclxuICAgKiBAcGFyYW0gb3B0aW9ucy5oZWFkZXJzIHtPYmplY3R9IGhlYWRlcnMgb2JqZWN0IChrZXkgdmFsdWUgcGFpciksIHdpbGwgYmUgbWVyZ2VkIHdpdGggZ2xvYmFsIHZhbHVlc1xyXG4gICAqIEBwYXJhbSBvcHRpb25zLmZpbGVQYXRoIHtzdHJpbmd9IGZpbGUgcGF0aChzKSB0byBiZSB1c2VkIGR1cmluZyB1cGxvYWQgYW5kIGRvd25sb2FkIHNlZSB1cGxvYWRGaWxlIGFuZCBkb3dubG9hZEZpbGUgZm9yIGRldGFpbGVkIGluZm9ybWF0aW9uXHJcbiAgICogQHBhcmFtIG9wdGlvbnMubmFtZSB7c3RyaW5nfSBuYW1lKHMpIHRvIGJlIHVzZWQgZHVyaW5nIHVwbG9hZCBzZWUgdXBsb2FkRmlsZSBmb3IgZGV0YWlsZWQgaW5mb3JtYXRpb25cclxuICAgKiBAcGFyYW0gb3B0aW9ucy5yZXNwb25zZVR5cGUge3N0cmluZ30gcmVzcG9uc2UgdHlwZSwgZGVmYXVsdHMgdG8gdGV4dFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEhUVFBSZXNwb25zZT59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIG9uIHN1Y2Nlc3MsIGFuZCByZWplY3Qgb24gZmFpbHVyZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZW5kUmVxdWVzdChcclxuICAgIHVybDogc3RyaW5nLFxyXG4gICAgb3B0aW9uczoge1xyXG4gICAgICBtZXRob2Q6ICdnZXQnIHwgJ3Bvc3QnIHwgJ3B1dCcgfCAncGF0Y2gnIHwgJ2hlYWQnIHwgJ2RlbGV0ZScgfCAnb3B0aW9ucycgfCAndXBsb2FkJyB8ICdkb3dubG9hZCc7XHJcbiAgICAgIGRhdGE/OiB7IFtpbmRleDogc3RyaW5nXTogYW55IH07XHJcbiAgICAgIHBhcmFtcz86IHsgW2luZGV4OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfTtcclxuICAgICAgc2VyaWFsaXplcj86ICdqc29uJyB8ICd1cmxlbmNvZGVkJyB8ICd1dGY4JyB8ICdtdWx0aXBhcnQnIHwgJ3Jhdyc7XHJcbiAgICAgIHRpbWVvdXQ/OiBudW1iZXI7XHJcbiAgICAgIGhlYWRlcnM/OiB7IFtpbmRleDogc3RyaW5nXTogc3RyaW5nIH07XHJcbiAgICAgIGZpbGVQYXRoPzogc3RyaW5nIHwgc3RyaW5nW107XHJcbiAgICAgIG5hbWU/OiBzdHJpbmcgfCBzdHJpbmdbXTtcclxuICAgICAgcmVzcG9uc2VUeXBlPzogJ3RleHQnIHwgJ2FycmF5YnVmZmVyJyB8ICdibG9iJyB8ICdqc29uJztcclxuICAgIH1cclxuICApOiBQcm9taXNlPEhUVFBSZXNwb25zZT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcGFyYW0gdXJsIHtzdHJpbmd9IFRoZSB1cmwgdG8gc2VuZCB0aGUgcmVxdWVzdCB0b1xyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtPYmplY3R9IG9wdGlvbnMgZm9yIGluZGl2aWR1YWwgcmVxdWVzdFxyXG4gICAqIEBwYXJhbSBvcHRpb25zLm1ldGhvZCB7c3RyaW5nfSByZXF1ZXN0IG1ldGhvZFxyXG4gICAqIEBwYXJhbSBvcHRpb25zLmRhdGEge09iamVjdH0gcGF5bG9hZCB0byBiZSBzZW5kIHRvIHRoZSBzZXJ2ZXIgKG9ubHkgYXBwbGljYWJsZSBvbiBwb3N0LCBwdXQgb3IgcGF0Y2ggbWV0aG9kcylcclxuICAgKiBAcGFyYW0gb3B0aW9ucy5wYXJhbXMge09iamVjdH0gcXVlcnkgcGFyYW1zIHRvIGJlIGFwcGVuZGVkIHRvIHRoZSBVUkwgKG9ubHkgYXBwbGljYWJsZSBvbiBnZXQsIGhlYWQsIGRlbGV0ZSwgdXBsb2FkIG9yIGRvd25sb2FkIG1ldGhvZHMpXHJcbiAgICogQHBhcmFtIG9wdGlvbnMuc2VyaWFsaXplciB7c3RyaW5nfSBkYXRhIHNlcmlhbGl6ZXIgdG8gYmUgdXNlZCAob25seSBhcHBsaWNhYmxlIG9uIHBvc3QsIHB1dCBvciBwYXRjaCBtZXRob2RzKSwgZGVmYXVsdHMgdG8gZ2xvYmFsIHNlcmlhbGl6ZXIgdmFsdWUsIHNlZSBzZXREYXRhU2VyaWFsaXplciBmb3Igc3VwcG9ydGVkIHZhbHVlc1xyXG4gICAqIEBwYXJhbSBvcHRpb25zLnRpbWVvdXQge251bWJlcn0gdGltZW91dCB2YWx1ZSBmb3IgdGhlIHJlcXVlc3QgaW4gc2Vjb25kcywgZGVmYXVsdHMgdG8gZ2xvYmFsIHRpbWVvdXQgdmFsdWVcclxuICAgKiBAcGFyYW0gb3B0aW9ucy5oZWFkZXJzIHtPYmplY3R9IGhlYWRlcnMgb2JqZWN0IChrZXkgdmFsdWUgcGFpciksIHdpbGwgYmUgbWVyZ2VkIHdpdGggZ2xvYmFsIHZhbHVlc1xyXG4gICAqIEBwYXJhbSBvcHRpb25zLmZpbGVQYXRoIHtzdHJpbmd9IGZpbGUgcGF0aChzKSB0byBiZSB1c2VkIGR1cmluZyB1cGxvYWQgYW5kIGRvd25sb2FkIHNlZSB1cGxvYWRGaWxlIGFuZCBkb3dubG9hZEZpbGUgZm9yIGRldGFpbGVkIGluZm9ybWF0aW9uXHJcbiAgICogQHBhcmFtIG9wdGlvbnMubmFtZSB7c3RyaW5nfSBuYW1lKHMpIHRvIGJlIHVzZWQgZHVyaW5nIHVwbG9hZCBzZWUgdXBsb2FkRmlsZSBmb3IgZGV0YWlsZWQgaW5mb3JtYXRpb25cclxuICAgKiBAcGFyYW0gb3B0aW9ucy5yZXNwb25zZVR5cGUge3N0cmluZ30gcmVzcG9uc2UgdHlwZSwgZGVmYXVsdHMgdG8gdGV4dFxyXG4gICAqIEBwYXJhbSBzdWNjZXNzIHtmdW5jdGlvbn0gQSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSByZXF1ZXN0IHN1Y2NlZWRcclxuICAgKiBAcGFyYW0gZmFpbHVyZSB7ZnVuY3Rpb259IEEgY2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBmYWlsZWRcclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSByZXR1cm5zIGEgc3RyaW5nIHRoYXQgcmVwcmVzZW50cyB0aGUgcmVxdWVzdElkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgbWV0aG9kTmFtZTogJ3NlbmRSZXF1ZXN0JyxcclxuICAgIHN5bmM6IHRydWUsXHJcbiAgfSlcclxuICBzZW5kUmVxdWVzdFN5bmMoXHJcbiAgICB1cmw6IHN0cmluZyxcclxuICAgIG9wdGlvbnM6IHtcclxuICAgICAgbWV0aG9kOiAnZ2V0JyB8ICdwb3N0JyB8ICdwdXQnIHwgJ3BhdGNoJyB8ICdoZWFkJyB8ICdkZWxldGUnIHwgJ29wdGlvbnMnIHwgJ3VwbG9hZCcgfCAnZG93bmxvYWQnO1xyXG4gICAgICBkYXRhPzogeyBbaW5kZXg6IHN0cmluZ106IGFueSB9O1xyXG4gICAgICBwYXJhbXM/OiB7IFtpbmRleDogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyIH07XHJcbiAgICAgIHNlcmlhbGl6ZXI/OiAnanNvbicgfCAndXJsZW5jb2RlZCcgfCAndXRmOCcgfCAnbXVsdGlwYXJ0JztcclxuICAgICAgdGltZW91dD86IG51bWJlcjtcclxuICAgICAgaGVhZGVycz86IHsgW2luZGV4OiBzdHJpbmddOiBzdHJpbmcgfTtcclxuICAgICAgZmlsZVBhdGg/OiBzdHJpbmcgfCBzdHJpbmdbXTtcclxuICAgICAgbmFtZT86IHN0cmluZyB8IHN0cmluZ1tdO1xyXG4gICAgICByZXNwb25zZVR5cGU/OiAndGV4dCcgfCAnYXJyYXlidWZmZXInIHwgJ2Jsb2InIHwgJ2pzb24nO1xyXG4gICAgfSxcclxuICAgIHN1Y2Nlc3M6IChyZXN1bHQ6IEhUVFBSZXNwb25zZSkgPT4gdm9pZCxcclxuICAgIGZhaWx1cmU6IChlcnJvcjogYW55KSA9PiB2b2lkXHJcbiAgKTogc3RyaW5nIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSByZXF1ZXN0SWQge3N0cmluZ30gVGhlIFJlcXVlc3RJZCBvZiB0aGUgcmVxdWVzdCB0byBhYm9ydFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBhYm9ydChyZXF1ZXN0SWQ6IHN0cmluZyk6IFByb21pc2U8QWJvcnRlZFJlc3BvbnNlPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBpbml0aWFsaXplQXBwcm9vdigpOiB2b2lkIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIGFwcHJvb3ZTZXREYXRhSGFzaEluVG9rZW4oZGF0YUhhc2g6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgYXBwcm9vdlNldEJpbmRpbmdIZWFkZXIoaGVhZGVyOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRBcHByb292TG9nZ2FibGVUb2tlbihob3N0OiBzdHJpbmcpOiBQcm9taXNlPEFwcHJvb3ZMb2dnYWJsZVRva2VuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==