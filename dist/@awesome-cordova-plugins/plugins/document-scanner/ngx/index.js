import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
export var DocumentScannerSourceType;
(function (DocumentScannerSourceType) {
    /**
     * Scan directly from device camera.
     * This is the default.
     */
    DocumentScannerSourceType[DocumentScannerSourceType["CAMERA"] = 1] = "CAMERA";
    /**
     * Scan from an image already stored on device.
     */
    DocumentScannerSourceType[DocumentScannerSourceType["GALLERY"] = 0] = "GALLERY";
})(DocumentScannerSourceType || (DocumentScannerSourceType = {}));
var DocumentScanner = /** @class */ (function (_super) {
    __extends(DocumentScanner, _super);
    function DocumentScanner() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DocumentScanner.prototype.scanDoc = function (opts) { return cordova(this, "scanDoc", { "callbackOrder": "reverse" }, arguments); };
    DocumentScanner.pluginName = "DocumentScanner";
    DocumentScanner.plugin = "cordova-plugin-document-scanner";
    DocumentScanner.pluginRef = "scan";
    DocumentScanner.repo = "https://github.com/NeutrinosPlatform/cordova-plugin-document-scanner";
    DocumentScanner.platforms = ["Android", "iOS"];
    DocumentScanner.decorators = [
        { type: Injectable }
    ];
    return DocumentScanner;
}(AwesomeCordovaNativePlugin));
export { DocumentScanner };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZG9jdW1lbnQtc2Nhbm5lci9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQztBQUU1RixNQUFNLENBQU4sSUFBWSx5QkFXWDtBQVhELFdBQVkseUJBQXlCO0lBQ25DOzs7T0FHRztJQUNILDZFQUFVLENBQUE7SUFFVjs7T0FFRztJQUNILCtFQUFXLENBQUE7QUFDYixDQUFDLEVBWFcseUJBQXlCLEtBQXpCLHlCQUF5QixRQVdwQzs7SUFnRW9DLG1DQUEwQjs7OztJQVU3RCxpQ0FBTyxhQUFDLElBQTZCOzs7Ozs7O2dCQVh0QyxVQUFVOzswQkE3RVg7RUE4RXFDLDBCQUEwQjtTQUFsRCxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5cclxuZXhwb3J0IGVudW0gRG9jdW1lbnRTY2FubmVyU291cmNlVHlwZSB7XHJcbiAgLyoqXHJcbiAgICogU2NhbiBkaXJlY3RseSBmcm9tIGRldmljZSBjYW1lcmEuXHJcbiAgICogVGhpcyBpcyB0aGUgZGVmYXVsdC5cclxuICAgKi9cclxuICBDQU1FUkEgPSAxLFxyXG5cclxuICAvKipcclxuICAgKiBTY2FuIGZyb20gYW4gaW1hZ2UgYWxyZWFkeSBzdG9yZWQgb24gZGV2aWNlLlxyXG4gICAqL1xyXG4gIEdBTExFUlkgPSAwLFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERvY3VtZW50U2Nhbm5lck9wdGlvbnMge1xyXG4gIC8qKlxyXG4gICAqIENob29zZSB0byBzY2FuIGZyb20gY2FtZXJhIG9yIGV4aXN0aW5nIGltYWdlIGZpbGUuIE9ubHkgdmFsaWQgZm9yIEFuZHJvaWQuXHJcbiAgICovXHJcbiAgc291cmNlVHlwZT86IERvY3VtZW50U2Nhbm5lclNvdXJjZVR5cGU7XHJcblxyXG4gIC8qKlxyXG4gICAqIEZpbGVuYW1lIHRvIHNhdmUgc2Nhbm5lZCBpbWFnZSB0byAobWludXMgZXh0ZW5zaW9uLCB3aGljaCBpcyBhbHdheXMgXCIucG5nXCIpLlxyXG4gICAqIE9ubHkgdmFsaWQgZm9yIGlPUy4gQ2FsbGVyIGlzIHJlc3BvbnNpYmxlIGZvciBjbGVhbmluZyB1cCBhbnkgZmlsZXMgY3JlYXRlZFxyXG4gICAqIGlmIHRoaXMgcGFyYW1ldGVyIGlzIHNldCB0byBhbnl0aGluZyBvdGhlciB0aGFuIHRoZSBkZWZhdWx0IHZhbHVlLFxyXG4gICAqIHdoaWNoIGlzIFwiaW1hZ2VcIi5cclxuICAgKi9cclxuICBmaWxlTmFtZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogUXVhbGl0eSB0byB1c2Ugd2hlbiBjYXB0dXJpbmcgdGhlIGltYWdlLCBtdXN0IGJlIGEgZmxvYXQgdmFsdWVcclxuICAgKiBmcm9tIDEuMChkZWZhdWx0IC0gSGlnaGVzdCBxdWFsaXR5KSB0byA1LjAoTG93ZXN0IFF1YWxpdHkpLiBBbnkgdmFsdWVcclxuICAgKiBpbiBiZXR3ZWVuIHdpbGwgYmUgYWNjZXB0ZWQuIEFueSB2YWx1ZSBub3QgZXF1YWwgdG8gb3Igbm90IGJldHdlZW4gdGhlc2UgdmFsdWVzXHJcbiAgICogIHdpbGwgZGVmYXVsdCB0byB0aGUgaGlnaGVzdCBxdWFsaXR5IG9mIDEuMC5cclxuICAgKi9cclxuICBxdWFsaXR5PzogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBJZiB0aGUgaW1hZ2Ugc2hvdWxkIGJlIHJldHVybmVkIGFzIGEgYmFzZTY0IGVuY29kaW5nIGluc3RlYWQgb2YgYXMgYSBmaWxlIFVSTC5cclxuICAgKiBJZiB0cnVlLCB0aGUgcGx1Z2luIHdpbGwgcmV0dXJuIHRoZSBzY2FubmVkIGltYWdlIGFzIGJhc2U2NC4gSWYgZmFsc2UsXHJcbiAgICogdGhlIHBsdWdpbiB3aWxsIHJldHVybiB0aGUgaW1hZ2UgVVJMIG9mIHRoZSBpbWFnZS5cclxuICAgKi9cclxuICByZXR1cm5CYXNlNjQ/OiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgRG9jdW1lbnQgU2Nhbm5lclxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gcHJvY2Vzc2VzIGltYWdlcyBvZiBkb2N1bWVudHMsIGNvbXBlbnNhdGluZyBmb3IgcGVyc3BlY3RpdmUuXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IERvY3VtZW50U2Nhbm5lciwgRG9jdW1lbnRTY2FubmVyT3B0aW9ucyB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9kb2N1bWVudC1zY2FubmVyL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZG9jdW1lbnRTY2FubmVyOiBEb2N1bWVudFNjYW5uZXIpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogbGV0IG9wdHM6IERvY3VtZW50U2Nhbm5lck9wdGlvbnMgPSB7fTtcclxuICogdGhpcy5kb2N1bWVudFNjYW5uZXIuc2NhbkRvY3VtZW50KG9wdHMpXHJcbiAqICAgLnRoZW4oKHJlczogc3RyaW5nKSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICogQGludGVyZmFjZXNcclxuICogRG9jdW1lbnRTY2FubmVyT3B0aW9uc1xyXG4gKiBAZW51bXNcclxuICogRG9jdW1lbnRTY2FubmVyU291cmNlVHlwZVxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0RvY3VtZW50U2Nhbm5lcicsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZG9jdW1lbnQtc2Nhbm5lcicsXHJcbiAgcGx1Z2luUmVmOiAnc2NhbicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9OZXV0cmlub3NQbGF0Zm9ybS9jb3Jkb3ZhLXBsdWdpbi1kb2N1bWVudC1zY2FubmVyJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRG9jdW1lbnRTY2FubmVyIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFNjYW4gYSBkb2N1bWVudFxyXG4gICAqXHJcbiAgICogQHBhcmFtIG9wdHMge0RvY3VtZW50U2Nhbm5lck9wdGlvbnN9IG9wdGlvbmFsIHBhcmFtZXRlciBmb3IgY29udHJvbGxpbmcgc2Nhbm5pbmdcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBmaWxlIFVSTCBvZiBzY2FubmVkIGRvY3VtZW50IGltYWdlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxyXG4gIH0pXHJcbiAgc2NhbkRvYyhvcHRzPzogRG9jdW1lbnRTY2FubmVyT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==