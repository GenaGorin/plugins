import { __extends } from "tslib";
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Injectable } from '@angular/core';
var TapticEngine = /** @class */ (function (_super) {
    __extends(TapticEngine, _super);
    function TapticEngine() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TapticEngine.prototype.selection = function () { return cordova(this, "selection", {}, arguments); };
    TapticEngine.prototype.notification = function (options) { return cordova(this, "notification", {}, arguments); };
    TapticEngine.prototype.impact = function (options) { return cordova(this, "impact", {}, arguments); };
    TapticEngine.prototype.gestureSelectionStart = function () { return cordova(this, "gestureSelectionStart", {}, arguments); };
    TapticEngine.prototype.gestureSelectionChanged = function () { return cordova(this, "gestureSelectionChanged", {}, arguments); };
    TapticEngine.prototype.gestureSelectionEnd = function () { return cordova(this, "gestureSelectionEnd", {}, arguments); };
    TapticEngine.pluginName = "TapticEngine";
    TapticEngine.plugin = "cordova-plugin-taptic-engine";
    TapticEngine.pluginRef = "TapticEngine";
    TapticEngine.repo = "https://github.com/EddyVerbruggen/cordova-plugin-taptic-engine";
    TapticEngine.platforms = ["iOS"];
    TapticEngine.decorators = [
        { type: Injectable }
    ];
    return TapticEngine;
}(AwesomeCordovaNativePlugin));
export { TapticEngine };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvdGFwdGljLWVuZ2luZS9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7QUFDNUYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7SUFnQ1QsZ0NBQTBCOzs7O0lBTzFELGdDQUFTO0lBWVQsbUNBQVksYUFBQyxPQUFrRDtJQWEvRCw2QkFBTSxhQUFDLE9BQWdEO0lBVXZELDRDQUFxQjtJQVVyQiw4Q0FBdUI7SUFVdkIsMENBQW1COzs7Ozs7O2dCQS9EcEIsVUFBVTs7dUJBaENYO0VBaUNrQywwQkFBMEI7U0FBL0MsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBUYXB0aWMgRW5naW5lXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBbiBJb25pYyBwbHVnaW4gdG8gdXNlIFRhcHRpYyBFbmdpbmUgQVBJIG9uIGlQaG9uZSA3LCA3IFBsdXMgb3IgbmV3ZXIuXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IFRhcHRpY0VuZ2luZSB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy90YXB0aWMtZW5naW5lL25neCc7XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHRhcHRpYzogVGFwdGljRW5naW5lKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIHRoaXMudGFwdGljLnNlbGVjdGlvbigpO1xyXG4gKlxyXG4gKiB0aGlzLnRhcHRpYy5ub3RpZmljYXRpb24oKTtcclxuICpcclxuICogdGhpcy50YXB0aWMuaW1wYWN0KCk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ1RhcHRpY0VuZ2luZScsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tdGFwdGljLWVuZ2luZScsXHJcbiAgcGx1Z2luUmVmOiAnVGFwdGljRW5naW5lJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0VkZHlWZXJicnVnZ2VuL2NvcmRvdmEtcGx1Z2luLXRhcHRpYy1lbmdpbmUnLFxyXG4gIHBsYXRmb3JtczogWydpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgVGFwdGljRW5naW5lIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFVzZSBzZWxlY3Rpb24gZmVlZGJhY2sgZ2VuZXJhdG9ycyB0byBpbmRpY2F0ZSBhIGNoYW5nZSBpbiBzZWxlY3Rpb24uXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIG9uIHN1Y2Nlc3MgYW5kIHJlamVjdHMgb24gZXJyb3JcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2VsZWN0aW9uKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVc2UgdGhpcyB0byBpbmRpY2F0ZSBzdWNjZXNzL2ZhaWx1cmUvd2FybmluZyB0byB0aGUgdXNlci5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtPYmplY3R9IHNob3VsZCBiZSBvZiB0aGUgdHlwZSB7IHR5cGU6ICdzdWNjZXNzJyB9IChvciAnd2FybmluZycvJ2Vycm9yJylcclxuICAgKiBAcGFyYW0geydzdWNjZXNzJyB8ICd3YXJuaW5nJyB8ICdlcnJvcid9IG9wdGlvbnMudHlwZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb24gc3VjY2VzcyBhbmQgcmVqZWN0cyBvbiBlcnJvclxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBub3RpZmljYXRpb24ob3B0aW9uczogeyB0eXBlOiAnc3VjY2VzcycgfCAnd2FybmluZycgfCAnZXJyb3InIH0pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXNlIHRoaXMgdG8gaW5kaWNhdGUgc3VjY2Vzcy9mYWlsdXJlL3dhcm5pbmcgdG8gdGhlIHVzZXIuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7T2JqZWN0fSBzaG91bGQgYmUgb2YgdGhlIHR5cGUgeyBzdHlsZTogJ2xpZ2h0JyB9IChvciAnbWVkaXVtJy8naGVhdnknKVxyXG4gICAqIEBwYXJhbSB7J2xpZ2h0JyB8ICdtZWRpdW0nIHwgJ2hlYXZ5J30gb3B0aW9ucy50eXBlXHJcbiAgICogQHBhcmFtIG9wdGlvbnMuc3R5bGVcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIG9uIHN1Y2Nlc3MgYW5kIHJlamVjdHMgb24gZXJyb3JcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaW1wYWN0KG9wdGlvbnM6IHsgc3R5bGU6ICdsaWdodCcgfCAnbWVkaXVtJyB8ICdoZWF2eScgfSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUZWxsIHRoZSB0YXB0aWMgZW5naW5lIHRoYXQgYSBnZXN0dXJlIGZvciBhIHNlbGVjdGlvbiBjaGFuZ2UgaXMgc3RhcnRpbmcuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXN0dXJlU2VsZWN0aW9uU3RhcnQoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRlbGwgdGhlIHRhcHRpYyBlbmdpbmUgdGhhdCBhIHNlbGVjdGlvbiBjaGFuZ2VkIGR1cmluZyBhIGdlc3R1cmUuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXN0dXJlU2VsZWN0aW9uQ2hhbmdlZCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGVsbCB0aGUgdGFwdGljIGVuZ2luZSB3ZSBhcmUgZG9uZSB3aXRoIGEgZ2VzdHVyZS4gVGhpcyBuZWVkcyB0byBiZSBjYWxsZWQgbGVzdCByZXNvdXJjZXMgYXJlIG5vdCBwcm9wZXJseSByZWN5Y2xlZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdlc3R1cmVTZWxlY3Rpb25FbmQoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19