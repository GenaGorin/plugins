var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var WebSocketServerOriginal = /** @class */ (function (_super) {
    __extends(WebSocketServerOriginal, _super);
    function WebSocketServerOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebSocketServerOriginal.prototype.getInterfaces = function () { return cordova(this, "getInterfaces", {}, arguments); };
    WebSocketServerOriginal.prototype.start = function (port, options) { return cordova(this, "start", { "observable": true, "clearFunction": "stop" }, arguments); };
    WebSocketServerOriginal.prototype.onFunctionToObservable = function (fnName) {
        return new Observable(function (observer) {
            var id = window.cordova.plugins.wsserver[fnName](observer.next.bind(observer), observer.error.bind(observer));
            return function () { return window.cordova.plugins.wsserver.removeCallback(id); };
        });
    };
    /**
     * Watches for new messages
     *
     * @returns {Observable<WebSocketMessage>}
     */
    WebSocketServerOriginal.prototype.watchMessage = function () {
        return this.onFunctionToObservable('onMessage');
    };
    /**
     * Watches for new opened connections
     *
     * @returns {Observable<WebSocketConnection>}
     */
    WebSocketServerOriginal.prototype.watchOpen = function () {
        return this.onFunctionToObservable('onOpen');
    };
    /**
     * Watches for closed connections
     *
     * @returns {Observable<WebSocketClose>}
     */
    WebSocketServerOriginal.prototype.watchClose = function () {
        return this.onFunctionToObservable('onClose');
    };
    /**
     * Watches for any websocket failures
     *
     * @returns {Observable<WebSocketFailure>}
     */
    WebSocketServerOriginal.prototype.watchFailure = function () {
        return this.onFunctionToObservable('onFailure');
    };
    WebSocketServerOriginal.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    WebSocketServerOriginal.prototype.send = function (conn, msg) { return cordova(this, "send", {}, arguments); };
    WebSocketServerOriginal.prototype.close = function (conn, code, reason) { return cordova(this, "close", {}, arguments); };
    WebSocketServerOriginal.pluginName = "WebSocketServer";
    WebSocketServerOriginal.plugin = "cordova-plugin-websocket-server";
    WebSocketServerOriginal.pluginRef = "cordova.plugins.wsserver";
    WebSocketServerOriginal.repo = "https://github.com/becvert/cordova-plugin-websocket-server";
    WebSocketServerOriginal.platforms = ["Android", "iOS"];
    return WebSocketServerOriginal;
}(AwesomeCordovaNativePlugin));
var WebSocketServer = new WebSocketServerOriginal();
export { WebSocketServer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvd2ViLXNvY2tldC1zZXJ2ZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7QUFDNUYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUEyR0csbUNBQTBCOzs7O0lBTzdELHVDQUFhO0lBZWIsK0JBQUssYUFBQyxJQUFZLEVBQUUsT0FBeUI7SUFJckMsZ0RBQXNCLEdBQTlCLFVBQWtDLE1BQWM7UUFDOUMsT0FBTyxJQUFJLFVBQVUsQ0FBSSxVQUFDLFFBQVE7WUFDaEMsSUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFFaEgsT0FBTyxjQUFNLE9BQUEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsRUFBbEQsQ0FBa0QsQ0FBQztRQUNsRSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsc0NBQVksR0FBWjtRQUNFLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsbUNBQVMsR0FBVDtRQUNFLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsb0NBQVUsR0FBVjtRQUNFLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsc0NBQVksR0FBWjtRQUNFLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFRRCw4QkFBSTtJQVlKLDhCQUFJLGFBQUMsSUFBeUIsRUFBRSxHQUFXO0lBYTNDLCtCQUFLLGFBQUMsSUFBeUIsRUFBRSxJQUFZLEVBQUUsTUFBYzs7Ozs7OzBCQWxOL0Q7RUE2R3FDLDBCQUEwQjtTQUFsRCxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5kZWNsYXJlIGNvbnN0IHdpbmRvdzogYW55O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBXZWJTb2NrZXRJbnRlcmZhY2VzIHtcclxuICBba2V5OiBzdHJpbmddOiBXZWJTb2NrZXRJbnRlcmZhY2U7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgV2ViU29ja2V0SW50ZXJmYWNlIHtcclxuICBpcHY0QWRkcmVzc2VzOiBzdHJpbmdbXTtcclxuICBpcHY2QWRkcmVzc2VzOiBzdHJpbmdbXTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBXZWJTb2NrZXRPcHRpb25zIHtcclxuICBvcmlnaW5zPzogc3RyaW5nW107XHJcbiAgcHJvdG9jb2xzPzogc3RyaW5nW107XHJcbiAgdGNwTm9EZWxheT86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgV2ViU29ja2V0SWRlbnRpZmllciB7XHJcbiAgdXVpZDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFdlYlNvY2tldFNlcnZlckRldGFpbHMge1xyXG4gIGFkZHI6IHN0cmluZztcclxuICBwb3J0OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgV2ViU29ja2V0RmFpbHVyZSBleHRlbmRzIFdlYlNvY2tldFNlcnZlckRldGFpbHMge1xyXG4gIHJlYXNvbjogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFdlYlNvY2tldE1lc3NhZ2Uge1xyXG4gIGNvbm46IFdlYlNvY2tldENvbm5lY3Rpb247XHJcbiAgbXNnOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgV2ViU29ja2V0Q2xvc2Uge1xyXG4gIGNvbm46IFdlYlNvY2tldENvbm5lY3Rpb247XHJcbiAgY29kZTogbnVtYmVyO1xyXG4gIHJlYXNvbjogc3RyaW5nO1xyXG4gIHdhc0NsZWFuOiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFdlYlNvY2tldENvbm5lY3Rpb24gZXh0ZW5kcyBXZWJTb2NrZXRJZGVudGlmaWVyIHtcclxuICByZW1vdGVBdHRyOiBzdHJpbmc7XHJcbiAgc3RhdGU6ICdvcGVuJyB8ICdjbG9zZWQnO1xyXG4gIGh0dHBGaWVsZHM6IEh0dHBGaWVsZHM7XHJcbiAgcmVzb3VyY2U6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBIdHRwRmllbGRzIHtcclxuICAnQWNjZXB0LUVuY29kaW5nJzogc3RyaW5nO1xyXG4gICdBY2NlcHQtTGFuZ3VhZ2UnOiBzdHJpbmc7XHJcbiAgJ0NhY2hlLUNvbnRyb2wnOiBzdHJpbmc7XHJcbiAgQ29ubmVjdGlvbjogc3RyaW5nO1xyXG4gIEhvc3Q6IHN0cmluZztcclxuICBPcmlnaW46IHN0cmluZztcclxuICBQcmFnbWE6IHN0cmluZztcclxuICAnU2VjLVdlYlNvY2tldC1FeHRlbnNpb25zJzogc3RyaW5nO1xyXG4gICdTZWMtV2ViU29ja2V0LUtleSc6IHN0cmluZztcclxuICAnU2VjLVdlYlNvY2tldC1WZXJzaW9uJzogc3RyaW5nO1xyXG4gIFVwZ3JhZGU6IHN0cmluZztcclxuICAnVXNlci1BZ2VudCc6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIFdlYlNvY2tldCBTZXJ2ZXJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgcGx1Z2luIGFsbG93cyB5b3UgdG8gcnVuIGEgc2luZ2xlLCBsaWdodHdlaWdodCwgYmFyZWJvbmUgV2ViU29ja2V0IFNlcnZlci5cclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgV2ViU29ja2V0U2VydmVyIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3dlYi1zb2NrZXQtc2VydmVyJztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSB3c3NlcnZlcjogV2ViU29ja2V0U2VydmVyKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIC8vIHN0YXJ0IHdlYnNvY2tldCBzZXJ2ZXJcclxuICogdGhpcy53c3NlcnZlci5zdGFydCg4ODg4LCB7fSkuc3Vic2NyaWJlKHtcclxuICogICBuZXh0OiBzZXJ2ZXIgPT4gY29uc29sZS5sb2coYExpc3RlbmluZyBvbiAke3NlcnZlci5hZGRyfToke3NlcnZlci5wb3J0fWApLFxyXG4gKiAgIGVycm9yOiBlcnJvciA9PiBjb25zb2xlLmxvZyhgVW5leHBlY3RlZCBlcnJvcmAsIGVycm9yKTtcclxuICogfSk7XHJcbiAqXHJcbiAqIC8vIHdhdGNoIGZvciBhbnkgbWVzc2FnZXNcclxuICogdGhpcy53c3NlcnZlci53YXRjaE1lc3NhZ2UoKS5zdWJzY3JpYmUocmVzdWx0ID0+IHtcclxuICogICBjb25zb2xlLmxvZyhgUmVjZWl2ZWQgbWVzc2FnZSAke3Jlc3VsdC5tc2d9IGZyb20gJHtyZXN1bHQuY29ubi51dWlkfWApO1xyXG4gKiB9KTtcclxuICpcclxuICogLy8gc2VuZCBtZXNzYWdlIHRvIGNvbm5lY3Rpb24gd2l0aCBzcGVjaWZpZWQgdXVpZFxyXG4gKiB0aGlzLndzc2VydmVyLnNlbmQoeyB1dWlkOiAnOGU3YzRmNDgtZGU2OC00YjZmLThmY2EtMTA2N2EzNTM5NjhkJyB9LCAnSGVsbG8gV29ybGQnKTtcclxuICpcclxuICogLy8gc3RvcCB3ZWJzb2NrZXQgc2VydmVyXHJcbiAqIHRoaXMud3NzZXJ2ZXIuc3RvcCgpLnRoZW4oc2VydmVyID0+IHtcclxuICogICBjb25zb2xlLmxvZyhgU3RvcCBsaXN0ZW5pbmcgb24gJHtzZXJ2ZXIuYWRkcn06JHtzZXJ2ZXIucG9ydH1gKTtcclxuICogfSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ1dlYlNvY2tldFNlcnZlcicsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4td2Vic29ja2V0LXNlcnZlcicsXHJcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLndzc2VydmVyJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2JlY3ZlcnQvY29yZG92YS1wbHVnaW4td2Vic29ja2V0LXNlcnZlcicsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFdlYlNvY2tldFNlcnZlciBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBSZXR1cm4gdGhpcyBkZXZpY2UncyBpbnRlcmZhY2VzXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxXZWJTb2NrZXRJbnRlcmZhY2VzPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0SW50ZXJmYWNlcygpOiBQcm9taXNlPFdlYlNvY2tldEludGVyZmFjZXM+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0YXJ0IHdlYnNvY2tldCBzZXJ2ZXJcclxuICAgKlxyXG4gICAqIEBwYXJhbSBwb3J0IHtudW1iZXJ9IExvY2FsIHBvcnQgb24gd2hpY2ggdGhlIHNlcnZpY2UgcnVucy4gKDAgbWVhbnMgYW55IGZyZWUgcG9ydClcclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7V2ViU29ja2V0T3B0aW9uc30gQWRkaXRpb25hbCBvcHRpb25zIGZvciB3ZWJzb2NrZXRcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxXZWJTb2NrZXRTZXJ2ZXJEZXRhaWxzPn0gUmV0dXJucyBPYnNlcnZhYmxlIHdoZXJlIGFsbCBnZW5lcmljIGVycm9yIGNhbiBiZSBjYXRjaGVkIChtb3N0bHkgSlNPTkV4Y2VwdGlvbnMpXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcclxuICAgIGNsZWFyRnVuY3Rpb246ICdzdG9wJyxcclxuICB9KVxyXG4gIHN0YXJ0KHBvcnQ6IG51bWJlciwgb3B0aW9uczogV2ViU29ja2V0T3B0aW9ucyk6IE9ic2VydmFibGU8V2ViU29ja2V0U2VydmVyRGV0YWlscz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBvbkZ1bmN0aW9uVG9PYnNlcnZhYmxlPFQ+KGZuTmFtZTogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8VD4oKG9ic2VydmVyKSA9PiB7XHJcbiAgICAgIGNvbnN0IGlkID0gd2luZG93LmNvcmRvdmEucGx1Z2lucy53c3NlcnZlcltmbk5hbWVdKG9ic2VydmVyLm5leHQuYmluZChvYnNlcnZlciksIG9ic2VydmVyLmVycm9yLmJpbmQob2JzZXJ2ZXIpKTtcclxuXHJcbiAgICAgIHJldHVybiAoKSA9PiB3aW5kb3cuY29yZG92YS5wbHVnaW5zLndzc2VydmVyLnJlbW92ZUNhbGxiYWNrKGlkKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogV2F0Y2hlcyBmb3IgbmV3IG1lc3NhZ2VzXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxXZWJTb2NrZXRNZXNzYWdlPn1cclxuICAgKi9cclxuICB3YXRjaE1lc3NhZ2UoKTogT2JzZXJ2YWJsZTxXZWJTb2NrZXRNZXNzYWdlPiB7XHJcbiAgICByZXR1cm4gdGhpcy5vbkZ1bmN0aW9uVG9PYnNlcnZhYmxlKCdvbk1lc3NhZ2UnKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFdhdGNoZXMgZm9yIG5ldyBvcGVuZWQgY29ubmVjdGlvbnNcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPFdlYlNvY2tldENvbm5lY3Rpb24+fVxyXG4gICAqL1xyXG4gIHdhdGNoT3BlbigpOiBPYnNlcnZhYmxlPFdlYlNvY2tldENvbm5lY3Rpb24+IHtcclxuICAgIHJldHVybiB0aGlzLm9uRnVuY3Rpb25Ub09ic2VydmFibGUoJ29uT3BlbicpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogV2F0Y2hlcyBmb3IgY2xvc2VkIGNvbm5lY3Rpb25zXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxXZWJTb2NrZXRDbG9zZT59XHJcbiAgICovXHJcbiAgd2F0Y2hDbG9zZSgpOiBPYnNlcnZhYmxlPFdlYlNvY2tldENsb3NlPiB7XHJcbiAgICByZXR1cm4gdGhpcy5vbkZ1bmN0aW9uVG9PYnNlcnZhYmxlKCdvbkNsb3NlJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBXYXRjaGVzIGZvciBhbnkgd2Vic29ja2V0IGZhaWx1cmVzXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxXZWJTb2NrZXRGYWlsdXJlPn1cclxuICAgKi9cclxuICB3YXRjaEZhaWx1cmUoKTogT2JzZXJ2YWJsZTxXZWJTb2NrZXRGYWlsdXJlPiB7XHJcbiAgICByZXR1cm4gdGhpcy5vbkZ1bmN0aW9uVG9PYnNlcnZhYmxlKCdvbkZhaWx1cmUnKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0b3Agd2Vic29ja2V0IHNlcnZlciBhbmQgY2xvc2VzIGFsbCBjb25uZWN0aW9uc1xyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8V2ViU29ja2V0U2VydmVyRGV0YWlscz59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHN0b3AoKTogUHJvbWlzZTxXZWJTb2NrZXRTZXJ2ZXJEZXRhaWxzPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZW5kIE1lc3NhZ2UgdG8gYSBjb25uZWN0ZWQgZGV2aWNlXHJcbiAgICpcclxuICAgKiBAcGFyYW0gY29ubiB7V2ViU29ja2V0SWRlbnRpZmllcn0gQ29ubmVjdGlvbiB0byBzZW5kIG1lc3NhZ2UgdG9cclxuICAgKiBAcGFyYW0gbXNnIHtzdHJpbmd9IE1lc3NhZ2UgdG8gc2VuZFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZW5kKGNvbm46IFdlYlNvY2tldElkZW50aWZpZXIsIG1zZzogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbG9zZSBzcGVjaWZpYyBjb25uZWN0aW9uIHVzaW5nIHV1aWRcclxuICAgKlxyXG4gICAqIEBwYXJhbSBjb25uIHtXZWJTb2NrZXRJZGVudGlmaWVyfSBDb25uZWN0aW9uIHRvIGNsb3NlXHJcbiAgICogQHBhcmFtIGNvZGUge251bWJlcn0gQ2xvc2UgY29kZSwgZGV0ZXJtaW5lcyBpZiBpdCB3YXMgY2xlYW5cclxuICAgKiBAcGFyYW0gcmVhc29uIHtzdHJpbmd9IFJlYXNvbiBmb3IgY2xvc2luZ1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjbG9zZShjb25uOiBXZWJTb2NrZXRJZGVudGlmaWVyLCBjb2RlOiBudW1iZXIsIHJlYXNvbjogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==