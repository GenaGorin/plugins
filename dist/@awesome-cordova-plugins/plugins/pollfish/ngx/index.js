import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';
var Pollfish = /** @class */ (function (_super) {
    __extends(Pollfish, _super);
    function Pollfish() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Pollfish.prototype.init = function (releaseMode, rewardMode, apiKey, position, padding, requestUUID, offerwallMode) { return cordova(this, "init", {}, arguments); };
    Pollfish.prototype.initWithUserAttributes = function (releaseMode, rewardMode, apiKey, position, padding, requestUUID, offerwallMode, userAttributes) { return cordova(this, "initWithUserAttributes", {}, arguments); };
    Pollfish.prototype.showPollfish = function () { return cordova(this, "showPollfish", {}, arguments); };
    Pollfish.prototype.hidePollfish = function () { return cordova(this, "hidePollfish", {}, arguments); };
    Pollfish.prototype.setEventCallback = function (eventName, callback) { return cordova(this, "setEventCallback", { "sync": true }, arguments); };
    Object.defineProperty(Pollfish.prototype, "EventListener", {
        get: function () { return cordovaPropertyGet(this, "EventListener"); },
        set: function (value) { cordovaPropertySet(this, "EventListener", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Pollfish.prototype, "Position", {
        get: function () { return cordovaPropertyGet(this, "Position"); },
        set: function (value) { cordovaPropertySet(this, "Position", value); },
        enumerable: false,
        configurable: true
    });
    Pollfish.pluginName = "Pollfish";
    Pollfish.plugin = "com.pollfish.cordova_plugin";
    Pollfish.pluginRef = "pollfishplugin";
    Pollfish.repo = "https://github.com/pollfish/cordova-plugin-pollfish";
    Pollfish.platforms = ["Android", "iOS"];
    Pollfish.decorators = [
        { type: Injectable }
    ];
    return Pollfish;
}(AwesomeCordovaNativePlugin));
export { Pollfish };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvcG9sbGZpc2gvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sK0VBQWdFLE1BQU0sK0JBQStCLENBQUM7O0lBa0UvRSw0QkFBMEI7Ozs7SUFrQ3RELHVCQUFJLGFBQ0YsV0FBb0IsRUFDcEIsVUFBbUIsRUFDbkIsTUFBYyxFQUNkLFFBQWdCLEVBQ2hCLE9BQWUsRUFDZixXQUFtQixFQUNuQixhQUFzQjtJQW1CeEIseUNBQXNCLGFBQ3BCLFdBQW9CLEVBQ3BCLFVBQW1CLEVBQ25CLE1BQWMsRUFDZCxRQUFnQixFQUNoQixPQUFlLEVBQ2YsV0FBbUIsRUFDbkIsYUFBc0IsRUFDdEIsY0FBa0I7SUFVcEIsK0JBQVk7SUFTWiwrQkFBWTtJQWNaLG1DQUFnQixhQUFDLFNBQWlCLEVBQUUsUUFBOEI7MEJBbkdsRSxtQ0FBYTs7Ozs7OzBCQVdiLDhCQUFROzs7Ozs7Ozs7Ozs7Z0JBZFQsVUFBVTs7bUJBbEVYO0VBbUU4QiwwQkFBMEI7U0FBM0MsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBDb3Jkb3ZhUHJvcGVydHksIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lIFBvbGxmaXNoXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBQb2xsZmlzaCBJb25pYyBOYXRpdmUgcGx1Z2luIHdyYXBwZXJcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgUG9sbGZpc2ggfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvcG9sbGZpc2gvbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBwb2xsZmlzaDogUG9sbGZpc2gpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy5wb2xsZmlzaC5pbml0KGZhbHNlLCBmYWxzZSwgJ1lPVVJfQVBJX0tFWScsIDEsIDgsICdSRVFVRVNUX1VVSUQnLCBmYWxzZSk7XHJcbiAqXHJcbiAqIHRoaXMucG9sbGZpc2guaW5pdFdpdGhVc2VyQXR0cmlidXRlcyhmYWxzZSwgZmFsc2UsICdZT1VSX0FQSV9LRVknLCAxLCA4LCAnUkVRVUVTVF9VVUlEJywgZmFsc2UsIHtcclxuICogICdnZW5kZXInOiAnMScsXHJcbiAqICAuLi5cclxuICogfSk7XHJcbiAqXHJcbiAqIHRoaXMucG9sbGZpc2guc2hvd1BvbGxmaXNoKCk7XHJcbiAqXHJcbiAqIHRoaXMucG9sbGZpc2guaGlkZVBvbGxmaXNoKCk7XHJcbiAqXHJcbiAqIC8vIEV2ZW50IExpc3RlbmVyc1xyXG4gKlxyXG4gKiB0aGlzLnBvbGxmaXNoLnNldEV2ZW50Q2FsbGJhY2socG9sbGZpc2guRXZlbnRMaXN0ZW5lci5PblBvbGxmaXNoU3VydmV5UmVjZWl2ZWQsIChzdXJ2ZXlJbmZvKSA9PiB7XHJcbiAqICBjb25zb2xlLmxvZyhcIlN1cnZleSBSZWNlaXZlZDogXCIgKyBKU09OLnN0cmluZ2lmeShzdXJ2ZXlJbmZvKSk7XHJcbiAqIH0pO1xyXG4gKlxyXG4gKiB0aGlzLnBvbGxmaXNoLnNldEV2ZW50Q2FsbGJhY2socG9sbGZpc2guRXZlbnRMaXN0ZW5lci5PblBvbGxmaXNoU3VydmV5Q29tcGxldGVkLCAocmVzdWx0KSA9PiB7XHJcbiAqICBjb25zb2xlLmxvZyhcIlN1cnZleSBDb21wbGV0ZWQ6IFwiICsgSlNPTi5zdHJpbmdpZnkoc3VydmV5SW5mbykpO1xyXG4gKiB9KTtcclxuICpcclxuICogdGhpcy5wb2xsZmlzaC5zZXRFdmVudENhbGxiYWNrKHBvbGxmaXNoLkV2ZW50TGlzdGVuZXIuT25Qb2xsZmlzaFVzZXJOb3RFbGlnaWJsZSwgKF8pID0+IHtcclxuICogIGNvbnNvbGUubG9nKFwiUG9sbGZpc2ggVXNlciBOb3QgRWxpZ2libGVcIik7XHJcbiAqIH0pO1xyXG4gKlxyXG4gKiB0aGlzLnBvbGxmaXNoLnNldEV2ZW50Q2FsbGJhY2socG9sbGZpc2guRXZlbnRMaXN0ZW5lci5PblBvbGxmaXNoU3VydmV5Tm90QXZhaWxhYmxlLCAoXykgPT4ge1xyXG4gKiAgY29uc29sZS5sb2coXCJQb2xsZmlzaCBTdXJ2ZXkgbm90IGF2YWlsYWJsZVwiKTtcclxuICogfSk7XHJcbiAqXHJcbiAqIHRoaXMucG9sbGZpc2guc2V0RXZlbnRDYWxsYmFjayhwb2xsZmlzaC5FdmVudExpc3RlbmVyLk9uUG9sbGZpc2hPcGVuZWQsIChfKSA9PiB7XHJcbiAqICBjb25zb2xlLmxvZyhcIlBvbGxmaXNoIFN1cnZleSBwYW5lbCBpcyBvcGVuXCIpO1xyXG4gKiB9KTtcclxuICpcclxuICogdGhpcy5wb2xsZmlzaC5zZXRFdmVudENhbGxiYWNrKHBvbGxmaXNoLkV2ZW50TGlzdGVuZXIuT25Qb2xsZmlzaENsb3NlZCwgKF8pID0+IHtcclxuICogIGNvbnNvbGUubG9nKFwiUG9sbGZpc2ggU3VydmV5IHBhbmVsIGlzIGNsb3NlZFwiKTtcclxuICogfSk7XHJcbiAqXHJcbiAqIHRoaXMucG9sbGZpc2guc2V0RXZlbnRDYWxsYmFjayhwb2xsZmlzaC5FdmVudExpc3RlbmVyLk9uUG9sbGZpc2hVc2VyUmVqZWN0ZWRTdXJ2ZXksIChfKSA9PiB7XHJcbiAqICBjb25zb2xlLmxvZyhcIlBvbGxmaXNoIFVzZXIgUmVqZWN0ZWQgU3VydmV5XCIpO1xyXG4gKiB9KTtcclxuICpcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnUG9sbGZpc2gnLFxyXG4gIHBsdWdpbjogJ2NvbS5wb2xsZmlzaC5jb3Jkb3ZhX3BsdWdpbicsXHJcbiAgcGx1Z2luUmVmOiAncG9sbGZpc2hwbHVnaW4nLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vcG9sbGZpc2gvY29yZG92YS1wbHVnaW4tcG9sbGZpc2gnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBQb2xsZmlzaCBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICBAQ29yZG92YVByb3BlcnR5KClcclxuICBFdmVudExpc3RlbmVyOiB7XHJcbiAgICBPblBvbGxmaXNoQ2xvc2VkOiBzdHJpbmc7XHJcbiAgICBPblBvbGxmaXNoT3BlbmVkOiBzdHJpbmc7XHJcbiAgICBPblBvbGxmaXNoU3VydmV5UmVjZWl2ZWQ6IHN0cmluZztcclxuICAgIE9uUG9sbGZpc2hTdXJ2ZXlDb21wbGV0ZWQ6IHN0cmluZztcclxuICAgIE9uUG9sbGZpc2hVc2VyTm90RWxpZ2libGU6IHN0cmluZztcclxuICAgIE9uUG9sbGZpc2hVc2VyUmVqZWN0ZWRTdXJ2ZXk6IHN0cmluZztcclxuICAgIE9uUG9sbGZpc2hTdXJ2ZXlOb3RBdmFpbGFibGU6IHN0cmluZztcclxuICB9O1xyXG5cclxuICBAQ29yZG92YVByb3BlcnR5KClcclxuICBQb3NpdGlvbjoge1xyXG4gICAgVE9QX0xFRlQ6IG51bWJlcjtcclxuICAgIFRPUF9SSUdIVDogbnVtYmVyO1xyXG4gICAgTUlERExFX0xFRlQ6IG51bWJlcjtcclxuICAgIE1JRERMRV9SSUdIVDogbnVtYmVyO1xyXG4gICAgQk9UVE9NX0xFRlQ6IG51bWJlcjtcclxuICAgIEJPVFRPTV9SSUdIVDogbnVtYmVyO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIGluaXQgUG9sbGZpc2hcclxuICAgKlxyXG4gICAqIEBwYXJhbSByZWxlYXNlTW9kZSB7Ym9vbGVhbn1cclxuICAgKiBAcGFyYW0gcmV3YXJkTW9kZSB7Ym9vbGVhbn1cclxuICAgKiBAcGFyYW0gYXBpS2V5IHtzdHJpbmd9XHJcbiAgICogQHBhcmFtIHBvc2l0aW9uIHtudW1iZXJ9XHJcbiAgICogQHBhcmFtIHBhZGRpbmcge251bWJlcn1cclxuICAgKiBAcGFyYW0gcmVxdWVzdFVVSUQge3N0cmluZ31cclxuICAgKiBAcGFyYW0gb2ZmZXJ3YWxsTW9kZSB7Ym9vbGVhbn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaW5pdChcclxuICAgIHJlbGVhc2VNb2RlOiBib29sZWFuLFxyXG4gICAgcmV3YXJkTW9kZTogYm9vbGVhbixcclxuICAgIGFwaUtleTogc3RyaW5nLFxyXG4gICAgcG9zaXRpb246IG51bWJlcixcclxuICAgIHBhZGRpbmc6IG51bWJlcixcclxuICAgIHJlcXVlc3RVVUlEOiBzdHJpbmcsXHJcbiAgICBvZmZlcndhbGxNb2RlOiBib29sZWFuXHJcbiAgKTogYW55IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIGluaXQgUG9sbGZpc2ggd2l0aCB1c2VyIGF0dHJpYnV0ZXNcclxuICAgKlxyXG4gICAqIEBwYXJhbSByZWxlYXNlTW9kZSB7Ym9vbGVhbn1cclxuICAgKiBAcGFyYW0gcmV3YXJkTW9kZSB7Ym9vbGVhbn1cclxuICAgKiBAcGFyYW0gYXBpS2V5IHtzdHJpbmd9XHJcbiAgICogQHBhcmFtIHBvc2l0aW9uIHtudW1iZXJ9XHJcbiAgICogQHBhcmFtIHBhZGRpbmcge251bWJlcn1cclxuICAgKiBAcGFyYW0gcmVxdWVzdFVVSUQge3N0cmluZ31cclxuICAgKiBAcGFyYW0gb2ZmZXJ3YWxsTW9kZSB7Ym9vbGVhbn1cclxuICAgKiBAcGFyYW0gdXNlckF0dHJpYnV0ZXMge0pzb259XHJcbiAgICovXHJcblxyXG4gIEBDb3Jkb3ZhKClcclxuICBpbml0V2l0aFVzZXJBdHRyaWJ1dGVzKFxyXG4gICAgcmVsZWFzZU1vZGU6IGJvb2xlYW4sXHJcbiAgICByZXdhcmRNb2RlOiBib29sZWFuLFxyXG4gICAgYXBpS2V5OiBzdHJpbmcsXHJcbiAgICBwb3NpdGlvbjogbnVtYmVyLFxyXG4gICAgcGFkZGluZzogbnVtYmVyLFxyXG4gICAgcmVxdWVzdFVVSUQ6IHN0cmluZyxcclxuICAgIG9mZmVyd2FsbE1vZGU6IGJvb2xlYW4sXHJcbiAgICB1c2VyQXR0cmlidXRlczoge31cclxuICApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIG1hbnVhbGx5IHNob3cgUG9sbGZpc2hcclxuICAgKi9cclxuXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNob3dQb2xsZmlzaCgpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIG1hbnVhbGx5IGhpZGUgUG9sbGZpc2hcclxuICAgKi9cclxuXHJcbiAgQENvcmRvdmEoKVxyXG4gIGhpZGVQb2xsZmlzaCgpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHNldCBldmVudCBjYWxsYmFja3NcclxuICAgKlxyXG4gICAqIEBwYXJhbSBldmVudE5hbWVcclxuICAgKiBAcGFyYW0gY2FsbGJhY2tcclxuICAgKi9cclxuXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3luYzogdHJ1ZSxcclxuICB9KVxyXG4gIHNldEV2ZW50Q2FsbGJhY2soZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiAoaW5mbz86IGFueSkgPT4gdm9pZCkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=