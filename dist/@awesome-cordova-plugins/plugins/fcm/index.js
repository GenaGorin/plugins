var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var FCMOriginal = /** @class */ (function (_super) {
    __extends(FCMOriginal, _super);
    function FCMOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FCMOriginal.prototype.getAPNSToken = function () { return cordova(this, "getAPNSToken", {}, arguments); };
    FCMOriginal.prototype.getToken = function () { return cordova(this, "getToken", {}, arguments); };
    FCMOriginal.prototype.onTokenRefresh = function () { return cordova(this, "onTokenRefresh", { "observable": true }, arguments); };
    FCMOriginal.prototype.subscribeToTopic = function (topic) { return cordova(this, "subscribeToTopic", {}, arguments); };
    FCMOriginal.prototype.unsubscribeFromTopic = function (topic) { return cordova(this, "unsubscribeFromTopic", {}, arguments); };
    FCMOriginal.prototype.hasPermission = function () { return cordova(this, "hasPermission", {}, arguments); };
    FCMOriginal.prototype.onNotification = function () { return cordova(this, "onNotification", { "observable": true, "successIndex": 0, "errorIndex": 2 }, arguments); };
    FCMOriginal.prototype.clearAllNotifications = function () { return cordova(this, "clearAllNotifications", {}, arguments); };
    FCMOriginal.prototype.requestPushPermissionIOS = function (options) { return cordova(this, "requestPushPermissionIOS", {}, arguments); };
    FCMOriginal.prototype.createNotificationChannelAndroid = function (channelConfig) { return cordova(this, "createNotificationChannelAndroid", {}, arguments); };
    FCMOriginal.pluginName = "FCM";
    FCMOriginal.plugin = "cordova-plugin-fcm-with-dependecy-updated";
    FCMOriginal.pluginRef = "FCMPlugin";
    FCMOriginal.repo = "https://github.com/andrehtissot/cordova-plugin-fcm-with-dependecy-updated";
    FCMOriginal.platforms = ["Android", "iOS"];
    return FCMOriginal;
}(AwesomeCordovaNativePlugin));
var FCM = new FCMOriginal();
export { FCM };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZmNtL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDO0FBRTVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBNkhULHVCQUEwQjs7OztJQU9qRCwwQkFBWTtJQVVaLHNCQUFRO0lBWVIsNEJBQWM7SUFXZCw4QkFBZ0IsYUFBQyxLQUFhO0lBVzlCLGtDQUFvQixhQUFDLEtBQWE7SUFhbEMsMkJBQWE7SUFjYiw0QkFBYztJQVVkLG1DQUFxQjtJQVdyQixzQ0FBd0IsYUFBQyxPQUEwQztJQWVuRSw4Q0FBZ0MsYUFBQyxhQUFvQzs7Ozs7O2NBalB2RTtFQStIeUIsMEJBQTBCO1NBQXRDLEdBQUciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTm90aWZpY2F0aW9uRGF0YSB7XHJcbiAgLyoqXHJcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBub3RpZmljYXRpb24gd2FzIHByZXNzZWQgb3Igbm90XHJcbiAgICovXHJcblxyXG4gIHdhc1RhcHBlZDogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogTm90aWZpY2F0aW9uIGRhdGEgaGFzaCBpdGVtXHJcbiAgICovXHJcblxyXG4gIFtuYW1lOiBzdHJpbmddOiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVJlcXVlc3RQdXNoUGVybWlzc2lvbklPU09wdGlvbnMge1xyXG4gIC8qKlxyXG4gICAqIE9wdGlvbnMgZXhjbHVzaXZlIGZvciBpT1MgOSBzdXBwb3J0XHJcbiAgICovXHJcbiAgaW9zOVN1cHBvcnQ/OiB7XHJcbiAgICAvKipcclxuICAgICAqIEhvdyBsb25nIGl0IHdpbGwgd2FpdCBmb3IgYSBkZWNpc2lvbiBmcm9tIHRoZSB1c2VyIGJlZm9yZSByZXR1cm5pbmcgYGZhbHNlYCwgZGVmYXVsdHMgdG8gMTBcclxuICAgICAqL1xyXG4gICAgdGltZW91dD86IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICogSG93IGxvbmcgYmV0d2VlbiBlYWNoIHBlcm1pc3Npb24gdmVyaWZpY2F0aW9uLCBkZWZhdWx0cyB0byAwLjNcclxuICAgICAqL1xyXG4gICAgaW50ZXJ2YWw/OiBudW1iZXI7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJQ2hhbm5lbENvbmZpZ3VyYXRpb24ge1xyXG4gIC8qKlxyXG4gICAqIENoYW5uZWwgaWQsIHVzZWQgaW4gdGhlIGFuZHJvaWRfY2hhbm5lbF9pZCBwdXNoIHBheWxvYWQga2V5XHJcbiAgICovXHJcbiAgaWQ6IHN0cmluZztcclxuICAvKipcclxuICAgKiBDaGFubmVsIG5hbWUsIHZpc2libGUgZm9yIHRoZSB1c2VyXHJcbiAgICovXHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIENoYW5uZWwgZGVzY3JpcHRpb24sIHZpc2libGUgZm9yIHRoZSB1c2VyXHJcbiAgICovXHJcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogSW1wb3J0YW5jZSBmb3Igbm90aWZpY2F0aW9ucyBvZiB0aGlzIGNoYW5uZWxcclxuICAgKiBodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9ndWlkZS90b3BpY3MvdWkvbm90aWZpZXJzL25vdGlmaWNhdGlvbnMjaW1wb3J0YW5jZVxyXG4gICAqL1xyXG4gIGltcG9ydGFuY2U/OiAnbm9uZScgfCAnbWluJyB8ICdsb3cnIHwgJ2RlZmF1bHQnIHwgJ2hpZ2gnO1xyXG4gIC8qKlxyXG4gICAqIFZpc2liaWxpdHkgZm9yIG5vdGlmaWNhdGlvbnMgb2YgdGhpcyBjaGFubmVsXHJcbiAgICogaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdHJhaW5pbmcvbm90aWZ5LXVzZXIvYnVpbGQtbm90aWZpY2F0aW9uI2xvY2tzY3JlZW5Ob3RpZmljYXRpb25cclxuICAgKi9cclxuICB2aXNpYmlsaXR5PzogJ3B1YmxpYycgfCAncHJpdmF0ZScgfCAnc2VjcmV0JztcclxuICAvKipcclxuICAgKiBEZWZhdWx0IHNvdW5kIHJlc291cmNlIGZvciBub3RpZmljYXRpb25zIG9mIHRoaXMgY2hhbm5lbFxyXG4gICAqIFRoZSBmaWxlIHNob3VsZCBsb2NhdGVkIGFzIHJlc291cmNlcy9yYXcvW3Jlc291cmNlIG5hbWVdLm1wM1xyXG4gICAqL1xyXG4gIHNvdW5kPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIEVuYWJsZSBsaWdodHMgZm9yIG5vdGlmaWNhdGlvbnMgb2YgdGhpcyBjaGFubmVsXHJcbiAgICovXHJcbiAgbGlnaHRzPzogYm9vbGVhbjtcclxuICAvKipcclxuICAgKiBFbmFibGUgdmlicmF0aW9uIGZvciBub3RpZmljYXRpb25zIG9mIHRoaXMgY2hhbm5lbFxyXG4gICAqL1xyXG4gIHZpYnJhdGlvbj86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBGQ01cclxuICogQGNhcGFjaXRvcmluY29tcGF0aWJsZSB0cnVlXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBQcm92aWRlcyBiYXNpYyBmdW5jdGlvbmFsaXR5IGZvciBGaXJlYmFzZSBDbG91ZCBNZXNzYWdpbmdcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgRkNNIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2ZjbS9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGZjbTogRkNNKSB7fVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy5mY20uc3Vic2NyaWJlVG9Ub3BpYygnbWFya2V0aW5nJyk7XHJcbiAqXHJcbiAqIHRoaXMuZmNtLmdldFRva2VuKCkudGhlbih0b2tlbiA9PiB7XHJcbiAqICAgYmFja2VuZC5yZWdpc3RlclRva2VuKHRva2VuKTtcclxuICogfSk7XHJcbiAqXHJcbiAqIHRoaXMuZmNtLm9uTm90aWZpY2F0aW9uKCkuc3Vic2NyaWJlKGRhdGEgPT4ge1xyXG4gKiAgIGlmKGRhdGEud2FzVGFwcGVkKXtcclxuICogICAgIGNvbnNvbGUubG9nKFwiUmVjZWl2ZWQgaW4gYmFja2dyb3VuZFwiKTtcclxuICogICB9IGVsc2Uge1xyXG4gKiAgICAgY29uc29sZS5sb2coXCJSZWNlaXZlZCBpbiBmb3JlZ3JvdW5kXCIpO1xyXG4gKiAgIH07XHJcbiAqIH0pO1xyXG4gKlxyXG4gKiB0aGlzLmZjbS5vblRva2VuUmVmcmVzaCgpLnN1YnNjcmliZSh0b2tlbiA9PiB7XHJcbiAqICAgYmFja2VuZC5yZWdpc3RlclRva2VuKHRva2VuKTtcclxuICogfSk7XHJcbiAqXHJcbiAqIHRoaXMuZmNtLmhhc1Blcm1pc3Npb24oKS50aGVuKGhhc1Blcm1pc3Npb24gPT4ge1xyXG4gKiAgIGlmIChoYXNQZXJtaXNzaW9uKSB7XHJcbiAqICAgICBjb25zb2xlLmxvZyhcIkhhcyBwZXJtaXNzaW9uIVwiKTtcclxuICogICB9XHJcbiAqIH0pXHJcbiAqXHJcbiAqIHRoaXMuZmNtLmNsZWFyQWxsTm90aWZpY2F0aW9ucygpO1xyXG4gKlxyXG4gKiB0aGlzLmZjbS51bnN1YnNjcmliZUZyb21Ub3BpYygnbWFya2V0aW5nJyk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBOb3RpZmljYXRpb25EYXRhXHJcbiAqIElSZXF1ZXN0UHVzaFBlcm1pc3Npb25JT1NPcHRpb25zXHJcbiAqIElDaGFubmVsQ29uZmlndXJhdGlvblxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0ZDTScsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZmNtLXdpdGgtZGVwZW5kZWN5LXVwZGF0ZWQnLFxyXG4gIHBsdWdpblJlZjogJ0ZDTVBsdWdpbicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9hbmRyZWh0aXNzb3QvY29yZG92YS1wbHVnaW4tZmNtLXdpdGgtZGVwZW5kZWN5LXVwZGF0ZWQnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGQ00gZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogR2V0cyBpb3MgZGV2aWNlJ3MgY3VycmVudCBBUE5TIHRva2VuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIEFQTlMgdG9rZW5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0QVBOU1Rva2VuKCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIGRldmljZSdzIGN1cnJlbnQgcmVnaXN0cmF0aW9uIGlkXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHJlZ2lzdHJhdGlvbiBpZCB0b2tlblxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRUb2tlbigpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRXZlbnQgZmlyaW5nIG9uIHRoZSB0b2tlbiByZWZyZXNoXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxzdHJpbmc+fSBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBub3RpZmllcyB3aXRoIHRoZSBjaGFuZ2Ugb2YgZGV2aWNlJ3MgcmVnaXN0cmF0aW9uIGlkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcclxuICB9KVxyXG4gIG9uVG9rZW5SZWZyZXNoKCk6IE9ic2VydmFibGU8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdWJzY3JpYmVzIHlvdSB0byBhIFt0b3BpY10oaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3Mvbm90aWZpY2F0aW9ucy9hbmRyb2lkL2NvbnNvbGUtdG9waWNzKVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcGljIFRvcGljIHRvIGJlIHN1YnNjcmliZWQgdG9cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSByZXNvbHZpbmcgaW4gcmVzdWx0IG9mIHN1YnNjcmliaW5nIHRvIGEgdG9waWNcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc3Vic2NyaWJlVG9Ub3BpYyh0b3BpYzogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVuc3Vic2NyaWJlcyB5b3UgZnJvbSBhIFt0b3BpY10oaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3Mvbm90aWZpY2F0aW9ucy9hbmRyb2lkL2NvbnNvbGUtdG9waWNzKVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcGljIFRvcGljIHRvIGJlIHVuc3Vic2NyaWJlZCBmcm9tXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgcmVzb2x2aW5nIGluIHJlc3VsdCBvZiB1bnN1YnNjcmliaW5nIGZyb20gYSB0b3BpY1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB1bnN1YnNjcmliZUZyb21Ub3BpYyh0b3BpYzogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNraW5nIGZvciBwZXJtaXNzaW9ucyBvbiBpT1MuIE9uIGFuZHJvaWQsIGl0IGFsd2F5cyByZXR1cm5zIGB0cnVlYC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4gfCBudWxsPn0gUmV0dXJucyBhIFByb21pc2U6XHJcbiAgICogLSB0cnVlOiBwdXNoIHdhcyBhbGxvd2VkIChvciBwbGF0Zm9ybSBpcyBhbmRyb2lkKVxyXG4gICAqIC0gZmFsc2U6IHB1c2ggd2lsbCBub3QgYmUgYXZhaWxhYmxlXHJcbiAgICogLSBudWxsOiBzdGlsbCBub3QgYW5zd2VyZWQsIHJlY29tbWVuZGVkIGNoZWNraW5nIGFnYWluIGxhdGVyLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBoYXNQZXJtaXNzaW9uKCk6IFByb21pc2U8Ym9vbGVhbiB8IG51bGw+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFdhdGNoIGZvciBpbmNvbWluZyBub3RpZmljYXRpb25zXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fSByZXR1cm5zIGFuIG9iamVjdCB3aXRoIGRhdGEgZnJvbSB0aGUgbm90aWZpY2F0aW9uXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcclxuICAgIHN1Y2Nlc3NJbmRleDogMCxcclxuICAgIGVycm9ySW5kZXg6IDIsXHJcbiAgfSlcclxuICBvbk5vdGlmaWNhdGlvbigpOiBPYnNlcnZhYmxlPE5vdGlmaWNhdGlvbkRhdGE+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZXMgZXhpc3RpbmcgcHVzaCBub3RpZmljYXRpb25zIGZyb20gdGhlIG5vdGlmaWNhdGlvbnMgY2VudGVyXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgY2xlYXJBbGxOb3RpZmljYXRpb25zKCk6IHZvaWQge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVxdWVzdCBwdXNoIG5vdGlmaWNhdGlvbiBwZXJtaXNzaW9uLCBhbGVydGluZyB0aGUgdXNlciBpZiBpdCBub3QgaGF2ZSB5ZXQgZGVjaWRlZFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtJUmVxdWVzdFB1c2hQZXJtaXNzaW9uSU9TT3B0aW9uc30gb3B0aW9ucyBPcHRpb25zIGZvciBwdXNoIHJlcXVlc3RcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBwZXJtaXNzaW9uIHN0YXR1c1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZXF1ZXN0UHVzaFBlcm1pc3Npb25JT1Mob3B0aW9ucz86IElSZXF1ZXN0UHVzaFBlcm1pc3Npb25JT1NPcHRpb25zKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGb3IgQW5kcm9pZCwgc29tZSBub3RpZmljYXRpb24gcHJvcGVydGllcyBhcmUgb25seSBkZWZpbmVkIHByb2dyYW1tYXRpY2FsbHkuXHJcbiAgICpcclxuICAgKiBDaGFubmVsIGNhbiBkZWZpbmUgdGhlIGRlZmF1bHQgYmVoYXZpb3IgZm9yIG5vdGlmaWNhdGlvbnMgb24gQW5kcm9pZCA4LjArLlxyXG4gICAqXHJcbiAgICogT25jZSBhIGNoYW5uZWwgaXMgY3JlYXRlZCwgaXQgc3RheXMgdW5jaGFuZ2VhYmxlIHVudGlsIHRoZSB1c2VyIHVuaW5zdGFsbHMgdGhlIGFwcC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBjaGFubmVsQ29uZmlnXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNyZWF0ZU5vdGlmaWNhdGlvbkNoYW5uZWxBbmRyb2lkKGNoYW5uZWxDb25maWc6IElDaGFubmVsQ29uZmlndXJhdGlvbik6IHZvaWQge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=