var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var WechatOriginal = /** @class */ (function (_super) {
    __extends(WechatOriginal, _super);
    function WechatOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WechatOriginal.prototype.isInstalled = function () { return cordova(this, "isInstalled", {}, arguments); };
    WechatOriginal.prototype.share = function (params) { return cordova(this, "share", {}, arguments); };
    WechatOriginal.prototype.auth = function (scope, state) { return cordova(this, "auth", {}, arguments); };
    WechatOriginal.prototype.sendPaymentRequest = function (params) { return cordova(this, "sendPaymentRequest", {}, arguments); };
    WechatOriginal.prototype.jumpToWechat = function (url) { return cordova(this, "jumpToWechat", {}, arguments); };
    WechatOriginal.prototype.chooseInvoiceFromWX = function (params) { return cordova(this, "chooseInvoiceFromWX", {}, arguments); };
    WechatOriginal.prototype.openMiniProgram = function (params) { return cordova(this, "openMiniProgram", {}, arguments); };
    WechatOriginal.pluginName = "Wechat";
    WechatOriginal.plugin = "cordova-plugin-wechat";
    WechatOriginal.pluginRef = "Wechat";
    WechatOriginal.repo = "https://github.com/xu-li/cordova-plugin-wechat.git";
    WechatOriginal.install = "cordova plugin add cordova-plugin-wechat --variable wechatappid=YOUR_WECHAT_APPID";
    WechatOriginal.installVariables = ["wechatappid"];
    WechatOriginal.platforms = ["Android", "iOS"];
    return WechatOriginal;
}(AwesomeCordovaNativePlugin));
var Wechat = new WechatOriginal();
export { Wechat };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvd2VjaGF0L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQWdDaEUsMEJBQTBCOzs7O0lBd0JwRCw0QkFBVztJQStCWCxzQkFBSyxhQUFDLE1BQVc7SUFlakIscUJBQUksYUFBQyxLQUFVLEVBQUUsS0FBVTtJQTBCM0IsbUNBQWtCLGFBQUMsTUFBVztJQTZCOUIsNkJBQVksYUFBQyxHQUFXO0lBbUJ4QixvQ0FBbUIsYUFBQyxNQUFXO0lBbUIvQixnQ0FBZSxhQUFDLE1BQVc7Ozs7Ozs7O2lCQXBNN0I7RUFpQzRCLDBCQUEwQjtTQUF6QyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lIFdlY2hhdFxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQSBjb3Jkb3ZhIHBsdWdpbiwgYSBKUyB2ZXJzaW9uIG9mIFdlY2hhdCBTREtcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgV2VjaGF0IH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3dlY2hhdC9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHdlY2hhdDogV2VjaGF0KSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqXHJcbiAqIHRoaXMud2VjaGF0LmZ1bmN0aW9uTmFtZSgnSGVsbG8nLCAxMjMpXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdXZWNoYXQnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXdlY2hhdCcsXHJcbiAgcGx1Z2luUmVmOiAnV2VjaGF0JyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3h1LWxpL2NvcmRvdmEtcGx1Z2luLXdlY2hhdC5naXQnLFxyXG4gIGluc3RhbGw6ICdjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1wbHVnaW4td2VjaGF0IC0tdmFyaWFibGUgd2VjaGF0YXBwaWQ9WU9VUl9XRUNIQVRfQVBQSUQnLFxyXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnd2VjaGF0YXBwaWQnXSxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgV2VjaGF0IGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIFNjZW5lOiB7XHJcbiAgICBTRVNTSU9OOiAwOyAvLyDogYrlpKnnlYzpnaJcclxuICAgIFRJTUVMSU5FOiAxOyAvLyDmnIvlj4vlnIhcclxuICAgIEZBVk9SSVRFOiAyOyAvLyDmlLbol49cclxuICB9O1xyXG5cclxuICBUeXBlOiB7XHJcbiAgICBBUFA6IDE7XHJcbiAgICBFTU9USU9OOiAyO1xyXG4gICAgRklMRTogMztcclxuICAgIElNQUdFOiA0O1xyXG4gICAgTVVTSUM6IDU7XHJcbiAgICBWSURFTzogNjtcclxuICAgIFdFQlBBR0U6IDc7XHJcbiAgfTtcclxuXHJcbiAgTWluaToge1xyXG4gICAgUkVMRUFTRTogMDsgLy8g5q2j5byP54mIXHJcbiAgICBURVNUOiAxOyAvLyDmtYvor5XniYhcclxuICAgIFBSRVZJRVc6IDI7IC8vIOS9k+mqjOeJiFxyXG4gIH07XHJcblxyXG4gIEBDb3Jkb3ZhKClcclxuICBpc0luc3RhbGxlZCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2hhcmUgYSBtZXNzYWdlIHRvIHdlY2hhdCBhcHBcclxuICAgKlxyXG4gICAqIEBwYXJhbSBwYXJhbXNcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIDxjb2RlPlxyXG4gICAqIHRoaXMud2VjaGF0LnNoYXJlKHtcclxuICAgKiAgICAgbWVzc2FnZToge1xyXG4gICAqICAgICAgICB0aXRsZTogXCJNZXNzYWdlIFRpdGxlXCIsXHJcbiAgICogICAgICAgIGRlc2NyaXB0aW9uOiBcIk1lc3NhZ2UgRGVzY3JpcHRpb24ob3B0aW9uYWwpXCIsXHJcbiAgICogICAgICAgIG1lZGlhVGFnTmFtZTogXCJNZWRpYSBUYWcgTmFtZShvcHRpb25hbClcIixcclxuICAgKiAgICAgICAgdGh1bWI6IFwiaHR0cDovL1lPVVJfVEhVTUJOQUlMX0lNQUdFXCIsXHJcbiAgICogICAgICAgIG1lZGlhOiB7XHJcbiAgICogICAgICAgICAgICB0eXBlOiBXZWNoYXQuVHlwZS5XRUJQQUdFLCAgIC8vIHdlYnBhZ2VcclxuICAgKiAgICAgICAgICAgIHdlYnBhZ2VVcmw6IFwiaHR0cHM6Ly9naXRodWIuY29tL3h1LWxpL2NvcmRvdmEtcGx1Z2luLXdlY2hhdFwiICAgIC8vIHdlYnBhZ2VcclxuICAgKiAgICAgICAgfVxyXG4gICAqICAgIH0sXHJcbiAgICogICAgc2NlbmU6IHRoaXMud2VjaGF0LlNjZW5lLlRJTUVMSU5FICAgLy8gc2hhcmUgdG8gVGltZWxpbmVcclxuICAgKiB9LnRoZW4oKCkgPT4ge1xyXG4gICAqICAgICAgIGNvbnNvbGUubG9nKCdzaGFyZSBzdWNjZXNzJyk7XHJcbiAgICogICAgfSlcclxuICAgKiAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAqICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgKiAgICB9KTtcclxuICAgKiA8L2NvZGU+XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNoYXJlKHBhcmFtczogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNlbmRpbmcgYW4gYXV0aCByZXF1ZXN0IHRvIFdlY2hhdFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHNjb3BlXHJcbiAgICogQHBhcmFtIHN0YXRlXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiA8Y29kZT5cclxuICAgKiB0aGlzLndlY2hhdC5hdXRoLnRoZW4oKHJlcykgPT4geyBhbGVydChyZXMuY29kZSk7IH0pO1xyXG4gICAqIDwvY29kZT5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgYXV0aChzY29wZTogYW55LCBzdGF0ZTogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNlbmQgYSBwYXltZW50IHJlcXVlc3RcclxuICAgKlxyXG4gICAqIEBwYXJhbSBwYXJhbXNcclxuICAgKiBAbGluayBodHRwczovL3BheS53ZWl4aW4ucXEuY29tL3dpa2kvZG9jL2FwaS9hcHAucGhwP2NoYXB0ZXI9OV8xXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiA8Y29kZT5cclxuICAgKiB2YXIgcGFyYW1zID0ge1xyXG4gICAqICAgICBtY2hfaWQ6ICcxMDAwMDEwMCcsIC8vIG1lcmNoYW50IGlkXHJcbiAgICogICAgIHByZXBheV9pZDogJ3d4MjAxNDExMTAxNjM5NTA3Y2JmNmZmZDhiMDc3OTk1MDg3NCcsIC8vIHByZXBheSBpZCByZXR1cm5lZCBmcm9tIHNlcnZlclxyXG4gICAqICAgICBub25jZTogJzFhZGQxYTMwYWM4N2FhMmRiNzJmNTdhMjM3NWQ4ZmVjJywgLy8gbm9uY2Ugc3RyaW5nIHJldHVybmVkIGZyb20gc2VydmVyXHJcbiAgICogICAgIHRpbWVzdGFtcDogJzE0Mzk1MzEzNjQnLCAvLyB0aW1lc3RhbXBcclxuICAgKiAgICAgc2lnbjogJzBDQjAxNTMzQjhDMUVGMTAzMDY1MTc0RjUwQkNBMDAxJywgLy8gc2lnbmVkIHN0cmluZ1xyXG4gICAqIH07XHJcbiAgICogdGhpcy53ZWNoYXQuc2VuZFBheW1lbnRSZXF1ZXN0KHBhcmFtcykudGhlbigoKSA9PiB7XHJcbiAgICogICAgIGNvbnNvbGUubG9nKFwiU3VjY2Vzc1wiKTtcclxuICAgKiB9KS5jYXRjaChlcnJvciA9PiB7XHJcbiAgICogICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgKiB9KTtcclxuICAgKiA8L2NvZGU+XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNlbmRQYXltZW50UmVxdWVzdChwYXJhbXM6IGFueSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBqdW1wVG9CaXpQcm9maWxlIO+8iOi3s+i9rOWIsOafkOS4quW+ruS/oeWFrOS8l+WPt++8iTIwMTYtMTEtMTEg5rWL6K+V5piv5aSx5pWI55qE77yM5ZunXHJcbiAgICpcclxuICAgKiBAcGFyYW0gdXJsXHJcbiAgICogQGxpbmsgaHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwNzIwNDYyNFxyXG4gICAqIEBsaW5rIGh0dHBzOi8vc2VnbWVudGZhdWx0LmNvbS9xLzEwMTAwMDAwMDM5MDc3OTZcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIDxjb2RlPlxyXG4gICAqIHZhciBwYXJhbXMgPSB7XHJcbiAgICogICAgIGluZm86ICdnaF94eHh4eHh4JywgLy8g5YWs5LyX5biQ5Y+35Y6f5aeLSURcclxuICAgKiAgICAgdHlwZTogICdOb3JtYWwnIC8vIOaZrumAmuWPt1xyXG4gICAqIH1cclxuICAgKiBvclxyXG4gICAqIHZhciBwYXJhbXMgPSB7XHJcbiAgICogICAgIGluZm86ICdleHRNc2cnLCAvLyDnm7jlhbPnmoTnoazku7bkuoznu7TnoIHkuLJcclxuICAgKiAgICAgdHlwZTogICdEZXZpY2UnIC8vIOehrOS7tuWPt1xyXG4gICAqIH07XHJcbiAgICogdGhpcy53ZWNoYXQuanVtcFRvQml6UHJvZmlsZShwYXJhbXMpLnRoZW4oKCk9PiB7XHJcbiAgICogICAgIGNvbnNvbGUubG9nKFwiU3VjY2Vzc1wiKTtcclxuICAgKiB9KS5jYXRjaChlcnJvciA9PiB7XHJcbiAgICogICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgKiB9KTtcclxuICAgKiA8L2NvZGU+XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGp1bXBUb1dlY2hhdCh1cmw6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBjaG9vc2VJbnZvaWNlRnJvbVdYIGV4cTpjaG9vc2UgaW52b2ljZXMgZnJvbSBXZWNoYXQgY2FyZCBsaXN0XHJcbiAgICpcclxuICAgKiBAcGFyYW0gcGFyYW1zXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiA8Y29kZT5cclxuICAgKiBwYXJhbXM6IHNpZ25UeXBlLCBjYXJkU2lnbiwgbm9uY2VTdHIsIHRpbWVTdGFtcCAgYWxsIHJlcXVpcmVkXHJcbiAgICogdGhpcy53ZWNoYXQuY2hvb3NlSW52b2ljZUZyb21XWChwYXJhbXMpLnRoZW4oKCkgPT4ge1xyXG4gICAqICAgICBjb25zb2xlLmxvZyhcIlN1Y2Nlc3NcIik7XHJcbiAgICogfSkuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAqICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICogfSk7XHJcbiAgICogPC9jb2RlPlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjaG9vc2VJbnZvaWNlRnJvbVdYKHBhcmFtczogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG9wZW5NaW5pUHJvZ3JhbSBleHE6YXBwIG9wZW5zIHdlY2hhdCBtaW5pIHByb2dyYW1cclxuICAgKlxyXG4gICAqIEBwYXJhbSBwYXJhbXNcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIDxjb2RlPlxyXG4gICAqIHBhcmFtczogdXNlck5hbWUsIHBhdGgsIG1pbmlwcm9ncmFtVHlwZSAgYWxsIHJlcXVpcmVkXHJcbiAgICogV2VjaGF0Lm9wZW5NaW5pUHJvZ3JhbShwYXJhbXMsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICogICAgIGFsZXJ0KGRhdGEuZXh0TXNnKTtcclxuICAgKiB9LCBmdW5jdGlvbiAocmVhc29uKSB7XHJcbiAgICogICAgIGFsZXJ0KFwiRmFpbGVkOiBcIiArIHJlYXNvbik7XHJcbiAgICogfSk7XHJcbiAgICogPC9jb2RlPlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBvcGVuTWluaVByb2dyYW0ocGFyYW1zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=