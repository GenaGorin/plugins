import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var Wechat = /** @class */ (function (_super) {
    __extends(Wechat, _super);
    function Wechat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Wechat.prototype.isInstalled = function () { return cordova(this, "isInstalled", {}, arguments); };
    Wechat.prototype.share = function (params) { return cordova(this, "share", {}, arguments); };
    Wechat.prototype.auth = function (scope, state) { return cordova(this, "auth", {}, arguments); };
    Wechat.prototype.sendPaymentRequest = function (params) { return cordova(this, "sendPaymentRequest", {}, arguments); };
    Wechat.prototype.jumpToWechat = function (url) { return cordova(this, "jumpToWechat", {}, arguments); };
    Wechat.prototype.chooseInvoiceFromWX = function (params) { return cordova(this, "chooseInvoiceFromWX", {}, arguments); };
    Wechat.prototype.openMiniProgram = function (params) { return cordova(this, "openMiniProgram", {}, arguments); };
    Wechat.pluginName = "Wechat";
    Wechat.plugin = "cordova-plugin-wechat";
    Wechat.pluginRef = "Wechat";
    Wechat.repo = "https://github.com/xu-li/cordova-plugin-wechat.git";
    Wechat.install = "cordova plugin add cordova-plugin-wechat --variable wechatappid=YOUR_WECHAT_APPID";
    Wechat.installVariables = ["wechatappid"];
    Wechat.platforms = ["Android", "iOS"];
    Wechat.decorators = [
        { type: Injectable }
    ];
    return Wechat;
}(AwesomeCordovaNativePlugin));
export { Wechat };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvd2VjaGF0L25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQWdDaEUsMEJBQTBCOzs7O0lBd0JwRCw0QkFBVztJQStCWCxzQkFBSyxhQUFDLE1BQVc7SUFlakIscUJBQUksYUFBQyxLQUFVLEVBQUUsS0FBVTtJQTBCM0IsbUNBQWtCLGFBQUMsTUFBVztJQTZCOUIsNkJBQVksYUFBQyxHQUFXO0lBbUJ4QixvQ0FBbUIsYUFBQyxNQUFXO0lBbUIvQixnQ0FBZSxhQUFDLE1BQVc7Ozs7Ozs7OztnQkFwSzVCLFVBQVU7O2lCQWhDWDtFQWlDNEIsMEJBQTBCO1NBQXpDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG4vKipcclxuICogQG5hbWUgV2VjaGF0XHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBIGNvcmRvdmEgcGx1Z2luLCBhIEpTIHZlcnNpb24gb2YgV2VjaGF0IFNES1xyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBXZWNoYXQgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvd2VjaGF0L25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgd2VjaGF0OiBXZWNoYXQpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICpcclxuICogdGhpcy53ZWNoYXQuZnVuY3Rpb25OYW1lKCdIZWxsbycsIDEyMylcclxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ1dlY2hhdCcsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4td2VjaGF0JyxcclxuICBwbHVnaW5SZWY6ICdXZWNoYXQnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20veHUtbGkvY29yZG92YS1wbHVnaW4td2VjaGF0LmdpdCcsXHJcbiAgaW5zdGFsbDogJ2NvcmRvdmEgcGx1Z2luIGFkZCBjb3Jkb3ZhLXBsdWdpbi13ZWNoYXQgLS12YXJpYWJsZSB3ZWNoYXRhcHBpZD1ZT1VSX1dFQ0hBVF9BUFBJRCcsXHJcbiAgaW5zdGFsbFZhcmlhYmxlczogWyd3ZWNoYXRhcHBpZCddLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBXZWNoYXQgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgU2NlbmU6IHtcclxuICAgIFNFU1NJT046IDA7IC8vIOiBiuWkqeeVjOmdolxyXG4gICAgVElNRUxJTkU6IDE7IC8vIOaci+WPi+WciFxyXG4gICAgRkFWT1JJVEU6IDI7IC8vIOaUtuiXj1xyXG4gIH07XHJcblxyXG4gIFR5cGU6IHtcclxuICAgIEFQUDogMTtcclxuICAgIEVNT1RJT046IDI7XHJcbiAgICBGSUxFOiAzO1xyXG4gICAgSU1BR0U6IDQ7XHJcbiAgICBNVVNJQzogNTtcclxuICAgIFZJREVPOiA2O1xyXG4gICAgV0VCUEFHRTogNztcclxuICB9O1xyXG5cclxuICBNaW5pOiB7XHJcbiAgICBSRUxFQVNFOiAwOyAvLyDmraPlvI/niYhcclxuICAgIFRFU1Q6IDE7IC8vIOa1i+ivleeJiFxyXG4gICAgUFJFVklFVzogMjsgLy8g5L2T6aqM54mIXHJcbiAgfTtcclxuXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzSW5zdGFsbGVkKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTaGFyZSBhIG1lc3NhZ2UgdG8gd2VjaGF0IGFwcFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHBhcmFtc1xyXG4gICAqIEBleGFtcGxlXHJcbiAgICogPGNvZGU+XHJcbiAgICogdGhpcy53ZWNoYXQuc2hhcmUoe1xyXG4gICAqICAgICBtZXNzYWdlOiB7XHJcbiAgICogICAgICAgIHRpdGxlOiBcIk1lc3NhZ2UgVGl0bGVcIixcclxuICAgKiAgICAgICAgZGVzY3JpcHRpb246IFwiTWVzc2FnZSBEZXNjcmlwdGlvbihvcHRpb25hbClcIixcclxuICAgKiAgICAgICAgbWVkaWFUYWdOYW1lOiBcIk1lZGlhIFRhZyBOYW1lKG9wdGlvbmFsKVwiLFxyXG4gICAqICAgICAgICB0aHVtYjogXCJodHRwOi8vWU9VUl9USFVNQk5BSUxfSU1BR0VcIixcclxuICAgKiAgICAgICAgbWVkaWE6IHtcclxuICAgKiAgICAgICAgICAgIHR5cGU6IFdlY2hhdC5UeXBlLldFQlBBR0UsICAgLy8gd2VicGFnZVxyXG4gICAqICAgICAgICAgICAgd2VicGFnZVVybDogXCJodHRwczovL2dpdGh1Yi5jb20veHUtbGkvY29yZG92YS1wbHVnaW4td2VjaGF0XCIgICAgLy8gd2VicGFnZVxyXG4gICAqICAgICAgICB9XHJcbiAgICogICAgfSxcclxuICAgKiAgICBzY2VuZTogdGhpcy53ZWNoYXQuU2NlbmUuVElNRUxJTkUgICAvLyBzaGFyZSB0byBUaW1lbGluZVxyXG4gICAqIH0udGhlbigoKSA9PiB7XHJcbiAgICogICAgICAgY29uc29sZS5sb2coJ3NoYXJlIHN1Y2Nlc3MnKTtcclxuICAgKiAgICB9KVxyXG4gICAqICAgIC5jYXRjaChlcnJvciA9PiB7XHJcbiAgICogICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAqICAgIH0pO1xyXG4gICAqIDwvY29kZT5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2hhcmUocGFyYW1zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2VuZGluZyBhbiBhdXRoIHJlcXVlc3QgdG8gV2VjaGF0XHJcbiAgICpcclxuICAgKiBAcGFyYW0gc2NvcGVcclxuICAgKiBAcGFyYW0gc3RhdGVcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIDxjb2RlPlxyXG4gICAqIHRoaXMud2VjaGF0LmF1dGgudGhlbigocmVzKSA9PiB7IGFsZXJ0KHJlcy5jb2RlKTsgfSk7XHJcbiAgICogPC9jb2RlPlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBhdXRoKHNjb3BlOiBhbnksIHN0YXRlOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2VuZCBhIHBheW1lbnQgcmVxdWVzdFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHBhcmFtc1xyXG4gICAqIEBsaW5rIGh0dHBzOi8vcGF5LndlaXhpbi5xcS5jb20vd2lraS9kb2MvYXBpL2FwcC5waHA/Y2hhcHRlcj05XzFcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIDxjb2RlPlxyXG4gICAqIHZhciBwYXJhbXMgPSB7XHJcbiAgICogICAgIG1jaF9pZDogJzEwMDAwMTAwJywgLy8gbWVyY2hhbnQgaWRcclxuICAgKiAgICAgcHJlcGF5X2lkOiAnd3gyMDE0MTExMDE2Mzk1MDdjYmY2ZmZkOGIwNzc5OTUwODc0JywgLy8gcHJlcGF5IGlkIHJldHVybmVkIGZyb20gc2VydmVyXHJcbiAgICogICAgIG5vbmNlOiAnMWFkZDFhMzBhYzg3YWEyZGI3MmY1N2EyMzc1ZDhmZWMnLCAvLyBub25jZSBzdHJpbmcgcmV0dXJuZWQgZnJvbSBzZXJ2ZXJcclxuICAgKiAgICAgdGltZXN0YW1wOiAnMTQzOTUzMTM2NCcsIC8vIHRpbWVzdGFtcFxyXG4gICAqICAgICBzaWduOiAnMENCMDE1MzNCOEMxRUYxMDMwNjUxNzRGNTBCQ0EwMDEnLCAvLyBzaWduZWQgc3RyaW5nXHJcbiAgICogfTtcclxuICAgKiB0aGlzLndlY2hhdC5zZW5kUGF5bWVudFJlcXVlc3QocGFyYW1zKS50aGVuKCgpID0+IHtcclxuICAgKiAgICAgY29uc29sZS5sb2coXCJTdWNjZXNzXCIpO1xyXG4gICAqIH0pLmNhdGNoKGVycm9yID0+IHtcclxuICAgKiAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAqIH0pO1xyXG4gICAqIDwvY29kZT5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2VuZFBheW1lbnRSZXF1ZXN0KHBhcmFtczogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGp1bXBUb0JpelByb2ZpbGUg77yI6Lez6L2s5Yiw5p+Q5Liq5b6u5L+h5YWs5LyX5Y+377yJMjAxNi0xMS0xMSDmtYvor5XmmK/lpLHmlYjnmoTvvIzlm6dcclxuICAgKlxyXG4gICAqIEBwYXJhbSB1cmxcclxuICAgKiBAbGluayBodHRwczovL3NlZ21lbnRmYXVsdC5jb20vYS8xMTkwMDAwMDA3MjA0NjI0XHJcbiAgICogQGxpbmsgaHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3EvMTAxMDAwMDAwMzkwNzc5NlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogPGNvZGU+XHJcbiAgICogdmFyIHBhcmFtcyA9IHtcclxuICAgKiAgICAgaW5mbzogJ2doX3h4eHh4eHgnLCAvLyDlhazkvJfluJDlj7fljp/lp4tJRFxyXG4gICAqICAgICB0eXBlOiAgJ05vcm1hbCcgLy8g5pmu6YCa5Y+3XHJcbiAgICogfVxyXG4gICAqIG9yXHJcbiAgICogdmFyIHBhcmFtcyA9IHtcclxuICAgKiAgICAgaW5mbzogJ2V4dE1zZycsIC8vIOebuOWFs+eahOehrOS7tuS6jOe7tOeggeS4slxyXG4gICAqICAgICB0eXBlOiAgJ0RldmljZScgLy8g56Gs5Lu25Y+3XHJcbiAgICogfTtcclxuICAgKiB0aGlzLndlY2hhdC5qdW1wVG9CaXpQcm9maWxlKHBhcmFtcykudGhlbigoKT0+IHtcclxuICAgKiAgICAgY29uc29sZS5sb2coXCJTdWNjZXNzXCIpO1xyXG4gICAqIH0pLmNhdGNoKGVycm9yID0+IHtcclxuICAgKiAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAqIH0pO1xyXG4gICAqIDwvY29kZT5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAganVtcFRvV2VjaGF0KHVybDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGNob29zZUludm9pY2VGcm9tV1ggZXhxOmNob29zZSBpbnZvaWNlcyBmcm9tIFdlY2hhdCBjYXJkIGxpc3RcclxuICAgKlxyXG4gICAqIEBwYXJhbSBwYXJhbXNcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIDxjb2RlPlxyXG4gICAqIHBhcmFtczogc2lnblR5cGUsIGNhcmRTaWduLCBub25jZVN0ciwgdGltZVN0YW1wICBhbGwgcmVxdWlyZWRcclxuICAgKiB0aGlzLndlY2hhdC5jaG9vc2VJbnZvaWNlRnJvbVdYKHBhcmFtcykudGhlbigoKSA9PiB7XHJcbiAgICogICAgIGNvbnNvbGUubG9nKFwiU3VjY2Vzc1wiKTtcclxuICAgKiB9KS5jYXRjaChlcnJvciA9PiB7XHJcbiAgICogICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgKiB9KTtcclxuICAgKiA8L2NvZGU+XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNob29zZUludm9pY2VGcm9tV1gocGFyYW1zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogb3Blbk1pbmlQcm9ncmFtIGV4cTphcHAgb3BlbnMgd2VjaGF0IG1pbmkgcHJvZ3JhbVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHBhcmFtc1xyXG4gICAqIEBleGFtcGxlXHJcbiAgICogPGNvZGU+XHJcbiAgICogcGFyYW1zOiB1c2VyTmFtZSwgcGF0aCwgbWluaXByb2dyYW1UeXBlICBhbGwgcmVxdWlyZWRcclxuICAgKiBXZWNoYXQub3Blbk1pbmlQcm9ncmFtKHBhcmFtcywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgKiAgICAgYWxlcnQoZGF0YS5leHRNc2cpO1xyXG4gICAqIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgKiAgICAgYWxlcnQoXCJGYWlsZWQ6IFwiICsgcmVhc29uKTtcclxuICAgKiB9KTtcclxuICAgKiA8L2NvZGU+XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIG9wZW5NaW5pUHJvZ3JhbShwYXJhbXM6IGFueSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==