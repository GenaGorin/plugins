var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var MLKitTranslateOriginal = /** @class */ (function (_super) {
    __extends(MLKitTranslateOriginal, _super);
    function MLKitTranslateOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MLKitTranslateOriginal.prototype.translate = function (text, targetLanguage, sourceLanguage) { return cordova(this, "translate", {}, arguments); };
    MLKitTranslateOriginal.prototype.identifyLanguage = function (text) { return cordova(this, "identifyLanguage", {}, arguments); };
    MLKitTranslateOriginal.prototype.getDownloadedModels = function () { return cordova(this, "getDownloadedModels", {}, arguments); };
    MLKitTranslateOriginal.prototype.getAvailableModels = function () { return cordova(this, "getAvailableModels", {}, arguments); };
    MLKitTranslateOriginal.prototype.downloadModel = function (code) { return cordova(this, "downloadModel", {}, arguments); };
    MLKitTranslateOriginal.prototype.deleteModel = function (code) { return cordova(this, "deleteModel", {}, arguments); };
    MLKitTranslateOriginal.pluginName = "MLKitTranslate";
    MLKitTranslateOriginal.plugin = "cordova-plugin-mlkit-translate";
    MLKitTranslateOriginal.pluginRef = "MLKitTranslate";
    MLKitTranslateOriginal.repo = "https://github.com/rigelglen/cordova-plugin-mlkit-translate";
    MLKitTranslateOriginal.platforms = ["Android", "iOS"];
    return MLKitTranslateOriginal;
}(AwesomeCordovaNativePlugin));
var MLKitTranslate = new MLKitTranslateOriginal();
export { MLKitTranslate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvbWxraXQtdHJhbnNsYXRlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQStDeEQsa0NBQTBCOzs7O0lBVzVELGtDQUFTLGFBQUMsSUFBWSxFQUFFLGNBQXNCLEVBQUUsY0FBdUI7SUFXdkUseUNBQWdCLGFBQUMsSUFBWTtJQVU3Qiw0Q0FBbUI7SUFVbkIsMkNBQWtCO0lBV2xCLHNDQUFhLGFBQUMsSUFBWTtJQVcxQixvQ0FBVyxhQUFDLElBQVk7Ozs7Ozt5QkFoSDFCO0VBZ0RvQywwQkFBMEI7U0FBakQsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIHRoZSBsYW5ndWFnZSBvYmplY3Qgd2hpY2ggd2lsbCBiZSByZXR1cm5lZCBieSBgZG93bmxvYWRNb2RlbGAsIGBkZWxldGVNb2RlbGAsIGBnZXRBdmFpbGFibGVNb2RlbHNgIGFuZCBgZ2V0RG93bmxvYWRlZE1vZGVsc2AgbWV0aG9kcy5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTGFuZ3VhZ2VNb2RlbCB7XHJcbiAgLyoqXHJcbiAgICogQkNQLTQ3IGxhbmd1YWdlIGNvZGUgb2YgdGhlIGxhbmd1YWdlLiBGb3IgZXhhbXBsZTogZW5cclxuICAgKiBGb3IgZnVsbCBsaXN0IG9mIGxhbmd1YWdlcyBjb2Rlcywgc2VlIGh0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlLmNvbS9kb2NzL21sLWtpdC90cmFuc2xhdGlvbi1sYW5ndWFnZS1zdXBwb3J0XHJcbiAgICovXHJcbiAgY29kZTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBEaXNwbGF5IG5hbWUgb2YgdGhlIGxhbmd1YWdlLiBGb3IgZXhhbXBsZTogRW5nbGlzaFxyXG4gICAqL1xyXG4gIGRpc3BsYXlOYW1lOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBNTEtpdFRyYW5zbGF0ZVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogUGx1Z2luIHRoYXQgaW1wbGVtZW50cyBNTEtpdCBUcmFuc2xhdGlvbiBhbmQgTGFuZ3VhZ2UgSWRlbnRpZmljYXRpb24gZmVhdHVyZXMuXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IE1MS2l0VHJhbnNsYXRlIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL21sLWtpdC10cmFuc2xhdGUnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIG1sa2l0VHJhbnNsYXRlOiBNTEtpdFRyYW5zbGF0ZSkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiB0aGlzLm1sa2l0VHJhbnNsYXRlLnRyYW5zbGF0ZSgnSGVsbG8nLCAnZW4nLCAnZXMnKVxyXG4gKiAgIC50aGVuKChyZXN1bHRUZXh0OiBzdHJpbmcpID0+IGNvbnNvbGUubG9nKHJlcykpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogc3RyaW5nKSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIExhbmd1YWdlTW9kZWxcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnTUxLaXRUcmFuc2xhdGUnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLW1sa2l0LXRyYW5zbGF0ZScsXHJcbiAgcGx1Z2luUmVmOiAnTUxLaXRUcmFuc2xhdGUnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vcmlnZWxnbGVuL2NvcmRvdmEtcGx1Z2luLW1sa2l0LXRyYW5zbGF0ZScsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE1MS2l0VHJhbnNsYXRlIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFRyYW5zbGF0ZXMgdGV4dCBmcm9tIG9uZSBsYW5ndWFnZSB0byBhbm90aGVyLiBSZXF1aXJlcyB0aGUgc291cmNlIGFuZCB0YXJnZXQgbGFuZ3VhZ2VzIG5lZWQgdG8gYmUgZG93bmxvYWRlZC5cclxuICAgKiBJZiBub3QgdGhlIGxhbmd1YWdlcyBhcmUgZG93bmxvYWRlZCBpbiB0aGUgYmFja2dyb3VuZCBhdXRvbWF0aWNhbGx5LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHRleHQge3N0cmluZ30gdGV4dCB0byBiZSB0cmFuc2xhdGVkXHJcbiAgICogQHBhcmFtIHRhcmdldExhbmd1YWdlIHtzdHJpbmd9IEJDUC00NyBsYW5ndWFnZSBjb2RlIG9mIHRoZSBsYW5ndWFnZSB0byB0cmFuc2xhdGUgdG9cclxuICAgKiBAcGFyYW0gc291cmNlTGFuZ3VhZ2Uge3N0cmluZz19IChvcHRpb25hbCkgQkNQLTQ3IGxhbmd1YWdlIGNvZGUgb2YgdGhlIGxhbmd1YWdlIHRvIHRyYW5zbGF0ZSB0by4gSWYgbm90IHByb3ZpZGVkLCBzb3VyY2UgbGFuZ3VhZ2UgaXMgaW5mZXJyZWQgZnJvbSB0ZXh0XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSB0cmFuc2xhdGVkIHRleHRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgdHJhbnNsYXRlKHRleHQ6IHN0cmluZywgdGFyZ2V0TGFuZ3VhZ2U6IHN0cmluZywgc291cmNlTGFuZ3VhZ2U/OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGV0ZXJtaW5lcyB0aGUgbGFuZ3VhZ2Ugb2YgYSBzdHJpbmcgb2YgdGV4dC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB0ZXh0IHtzdHJpbmd9IHRleHQgdG8gYmUgdHJhbnNsYXRlZFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPExhbmd1YWdlTW9kZWw+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGlkZW50aWZpZWQgbGFuZ3VhZ2VcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaWRlbnRpZnlMYW5ndWFnZSh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPExhbmd1YWdlTW9kZWw+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExpc3Qgb2YgbGFuZ3VhZ2UgbW9kZWxzIHRoYXQgaGF2ZSBiZWVuIGRvd25sb2FkZWQgdG8gdGhlIGRldmljZS5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPExhbmd1YWdlTW9kZWxbXT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhbiBhcnJheSBvZiBsYW5ndWFnZXMgdGhhdCBoYXZlIGJlZW4gZG93bmxvYWRlZC5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0RG93bmxvYWRlZE1vZGVscygpOiBQcm9taXNlPExhbmd1YWdlTW9kZWxbXT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTGlzdCBvZiBsYW5ndWFnZSBtb2RlbHMgdGhhdCBjYW4gYmUgZG93bmxvYWRlZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPExhbmd1YWdlTW9kZWxbXT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhbiBhcnJheSBvZiBwb3NzaWJsZSBsYW5ndWFnZXMgdGhhdCBjYW4gYmUgZG93bmxvYWRlZC5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0QXZhaWxhYmxlTW9kZWxzKCk6IFByb21pc2U8TGFuZ3VhZ2VNb2RlbFtdPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEb3dubG9hZHMgYSBzcGVjaWZpZWQgbGFuZ3VhZ2UgbW9kZWwuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gY29kZSB7c3RyaW5nfSBCQ1AtNDcgbGFuZ3VhZ2UgY29kZSBvZiB0aGUgbGFuZ3VhZ2UgdG8gZG93bmxvYWRcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxMYW5ndWFnZU1vZGVsPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBkb3dubG9hZGVkIGxhbmd1YWdlLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBkb3dubG9hZE1vZGVsKGNvZGU6IHN0cmluZyk6IFByb21pc2U8TGFuZ3VhZ2VNb2RlbD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGVsZXRlcyBhIHNwZWNpZmllZCBsYW5ndWFnZSBtb2RlbC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBjb2RlIHtzdHJpbmd9IEJDUC00NyBsYW5ndWFnZSBjb2RlIG9mIHRoZSBsYW5ndWFnZSB0byBkZWxldGVcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxMYW5ndWFnZU1vZGVsPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBkZWxldGVkIGxhbmd1YWdlLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBkZWxldGVNb2RlbChjb2RlOiBzdHJpbmcpOiBQcm9taXNlPExhbmd1YWdlTW9kZWw+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19