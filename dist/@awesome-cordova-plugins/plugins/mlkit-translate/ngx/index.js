import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var MLKitTranslate = /** @class */ (function (_super) {
    __extends(MLKitTranslate, _super);
    function MLKitTranslate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MLKitTranslate.prototype.translate = function (text, targetLanguage, sourceLanguage) { return cordova(this, "translate", {}, arguments); };
    MLKitTranslate.prototype.identifyLanguage = function (text) { return cordova(this, "identifyLanguage", {}, arguments); };
    MLKitTranslate.prototype.getDownloadedModels = function () { return cordova(this, "getDownloadedModels", {}, arguments); };
    MLKitTranslate.prototype.getAvailableModels = function () { return cordova(this, "getAvailableModels", {}, arguments); };
    MLKitTranslate.prototype.downloadModel = function (code) { return cordova(this, "downloadModel", {}, arguments); };
    MLKitTranslate.prototype.deleteModel = function (code) { return cordova(this, "deleteModel", {}, arguments); };
    MLKitTranslate.pluginName = "MLKitTranslate";
    MLKitTranslate.plugin = "cordova-plugin-mlkit-translate";
    MLKitTranslate.pluginRef = "MLKitTranslate";
    MLKitTranslate.repo = "https://github.com/rigelglen/cordova-plugin-mlkit-translate";
    MLKitTranslate.platforms = ["Android", "iOS"];
    MLKitTranslate.decorators = [
        { type: Injectable }
    ];
    return MLKitTranslate;
}(AwesomeCordovaNativePlugin));
export { MLKitTranslate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvbWxraXQtdHJhbnNsYXRlL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQStDeEQsa0NBQTBCOzs7O0lBVzVELGtDQUFTLGFBQUMsSUFBWSxFQUFFLGNBQXNCLEVBQUUsY0FBdUI7SUFXdkUseUNBQWdCLGFBQUMsSUFBWTtJQVU3Qiw0Q0FBbUI7SUFVbkIsMkNBQWtCO0lBV2xCLHNDQUFhLGFBQUMsSUFBWTtJQVcxQixvQ0FBVyxhQUFDLElBQVk7Ozs7Ozs7Z0JBakV6QixVQUFVOzt5QkEvQ1g7RUFnRG9DLDBCQUEwQjtTQUFqRCxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgaXMgdGhlIGxhbmd1YWdlIG9iamVjdCB3aGljaCB3aWxsIGJlIHJldHVybmVkIGJ5IGBkb3dubG9hZE1vZGVsYCwgYGRlbGV0ZU1vZGVsYCwgYGdldEF2YWlsYWJsZU1vZGVsc2AgYW5kIGBnZXREb3dubG9hZGVkTW9kZWxzYCBtZXRob2RzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBMYW5ndWFnZU1vZGVsIHtcclxuICAvKipcclxuICAgKiBCQ1AtNDcgbGFuZ3VhZ2UgY29kZSBvZiB0aGUgbGFuZ3VhZ2UuIEZvciBleGFtcGxlOiBlblxyXG4gICAqIEZvciBmdWxsIGxpc3Qgb2YgbGFuZ3VhZ2VzIGNvZGVzLCBzZWUgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvbWwta2l0L3RyYW5zbGF0aW9uLWxhbmd1YWdlLXN1cHBvcnRcclxuICAgKi9cclxuICBjb2RlOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIERpc3BsYXkgbmFtZSBvZiB0aGUgbGFuZ3VhZ2UuIEZvciBleGFtcGxlOiBFbmdsaXNoXHJcbiAgICovXHJcbiAgZGlzcGxheU5hbWU6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIE1MS2l0VHJhbnNsYXRlXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBQbHVnaW4gdGhhdCBpbXBsZW1lbnRzIE1MS2l0IFRyYW5zbGF0aW9uIGFuZCBMYW5ndWFnZSBJZGVudGlmaWNhdGlvbiBmZWF0dXJlcy5cclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgTUxLaXRUcmFuc2xhdGUgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvbWwta2l0LXRyYW5zbGF0ZSc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgbWxraXRUcmFuc2xhdGU6IE1MS2l0VHJhbnNsYXRlKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIHRoaXMubWxraXRUcmFuc2xhdGUudHJhbnNsYXRlKCdIZWxsbycsICdlbicsICdlcycpXHJcbiAqICAgLnRoZW4oKHJlc3VsdFRleHQ6IHN0cmluZykgPT4gY29uc29sZS5sb2cocmVzKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBzdHJpbmcpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogQGludGVyZmFjZXNcclxuICogTGFuZ3VhZ2VNb2RlbFxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdNTEtpdFRyYW5zbGF0ZScsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tbWxraXQtdHJhbnNsYXRlJyxcclxuICBwbHVnaW5SZWY6ICdNTEtpdFRyYW5zbGF0ZScsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9yaWdlbGdsZW4vY29yZG92YS1wbHVnaW4tbWxraXQtdHJhbnNsYXRlJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTUxLaXRUcmFuc2xhdGUgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogVHJhbnNsYXRlcyB0ZXh0IGZyb20gb25lIGxhbmd1YWdlIHRvIGFub3RoZXIuIFJlcXVpcmVzIHRoZSBzb3VyY2UgYW5kIHRhcmdldCBsYW5ndWFnZXMgbmVlZCB0byBiZSBkb3dubG9hZGVkLlxyXG4gICAqIElmIG5vdCB0aGUgbGFuZ3VhZ2VzIGFyZSBkb3dubG9hZGVkIGluIHRoZSBiYWNrZ3JvdW5kIGF1dG9tYXRpY2FsbHkuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gdGV4dCB7c3RyaW5nfSB0ZXh0IHRvIGJlIHRyYW5zbGF0ZWRcclxuICAgKiBAcGFyYW0gdGFyZ2V0TGFuZ3VhZ2Uge3N0cmluZ30gQkNQLTQ3IGxhbmd1YWdlIGNvZGUgb2YgdGhlIGxhbmd1YWdlIHRvIHRyYW5zbGF0ZSB0b1xyXG4gICAqIEBwYXJhbSBzb3VyY2VMYW5ndWFnZSB7c3RyaW5nPX0gKG9wdGlvbmFsKSBCQ1AtNDcgbGFuZ3VhZ2UgY29kZSBvZiB0aGUgbGFuZ3VhZ2UgdG8gdHJhbnNsYXRlIHRvLiBJZiBub3QgcHJvdmlkZWQsIHNvdXJjZSBsYW5ndWFnZSBpcyBpbmZlcnJlZCBmcm9tIHRleHRcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHRyYW5zbGF0ZWQgdGV4dFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB0cmFuc2xhdGUodGV4dDogc3RyaW5nLCB0YXJnZXRMYW5ndWFnZTogc3RyaW5nLCBzb3VyY2VMYW5ndWFnZT86IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZXRlcm1pbmVzIHRoZSBsYW5ndWFnZSBvZiBhIHN0cmluZyBvZiB0ZXh0LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHRleHQge3N0cmluZ30gdGV4dCB0byBiZSB0cmFuc2xhdGVkXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8TGFuZ3VhZ2VNb2RlbD59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgaWRlbnRpZmllZCBsYW5ndWFnZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpZGVudGlmeUxhbmd1YWdlKHRleHQ6IHN0cmluZyk6IFByb21pc2U8TGFuZ3VhZ2VNb2RlbD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTGlzdCBvZiBsYW5ndWFnZSBtb2RlbHMgdGhhdCBoYXZlIGJlZW4gZG93bmxvYWRlZCB0byB0aGUgZGV2aWNlLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8TGFuZ3VhZ2VNb2RlbFtdPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGFuIGFycmF5IG9mIGxhbmd1YWdlcyB0aGF0IGhhdmUgYmVlbiBkb3dubG9hZGVkLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXREb3dubG9hZGVkTW9kZWxzKCk6IFByb21pc2U8TGFuZ3VhZ2VNb2RlbFtdPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMaXN0IG9mIGxhbmd1YWdlIG1vZGVscyB0aGF0IGNhbiBiZSBkb3dubG9hZGVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8TGFuZ3VhZ2VNb2RlbFtdPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGFuIGFycmF5IG9mIHBvc3NpYmxlIGxhbmd1YWdlcyB0aGF0IGNhbiBiZSBkb3dubG9hZGVkLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRBdmFpbGFibGVNb2RlbHMoKTogUHJvbWlzZTxMYW5ndWFnZU1vZGVsW10+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERvd25sb2FkcyBhIHNwZWNpZmllZCBsYW5ndWFnZSBtb2RlbC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBjb2RlIHtzdHJpbmd9IEJDUC00NyBsYW5ndWFnZSBjb2RlIG9mIHRoZSBsYW5ndWFnZSB0byBkb3dubG9hZFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPExhbmd1YWdlTW9kZWw+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGRvd25sb2FkZWQgbGFuZ3VhZ2UuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGRvd25sb2FkTW9kZWwoY29kZTogc3RyaW5nKTogUHJvbWlzZTxMYW5ndWFnZU1vZGVsPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZWxldGVzIGEgc3BlY2lmaWVkIGxhbmd1YWdlIG1vZGVsLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGNvZGUge3N0cmluZ30gQkNQLTQ3IGxhbmd1YWdlIGNvZGUgb2YgdGhlIGxhbmd1YWdlIHRvIGRlbGV0ZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPExhbmd1YWdlTW9kZWw+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGRlbGV0ZWQgbGFuZ3VhZ2UuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGRlbGV0ZU1vZGVsKGNvZGU6IHN0cmluZyk6IFByb21pc2U8TGFuZ3VhZ2VNb2RlbD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=