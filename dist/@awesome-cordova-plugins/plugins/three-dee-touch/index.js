var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordovaFunctionOverride, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var ThreeDeeTouchOriginal = /** @class */ (function (_super) {
    __extends(ThreeDeeTouchOriginal, _super);
    function ThreeDeeTouchOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThreeDeeTouchOriginal.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    ThreeDeeTouchOriginal.prototype.watchForceTouches = function () { return cordova(this, "watchForceTouches", { "observable": true }, arguments); };
    ThreeDeeTouchOriginal.prototype.configureQuickActions = function (quickActions) { return cordova(this, "configureQuickActions", { "sync": true }, arguments); };
    ThreeDeeTouchOriginal.prototype.onHomeIconPressed = function () { return cordovaFunctionOverride(this, "onHomeIconPressed", {}, arguments); };
    ThreeDeeTouchOriginal.prototype.enableLinkPreview = function () { return cordova(this, "enableLinkPreview", { "sync": true }, arguments); };
    ThreeDeeTouchOriginal.prototype.disableLinkPreview = function () { return cordova(this, "disableLinkPreview", { "sync": true }, arguments); };
    ThreeDeeTouchOriginal.pluginName = "ThreeDeeTouch";
    ThreeDeeTouchOriginal.plugin = "cordova-plugin-3dtouch";
    ThreeDeeTouchOriginal.pluginRef = "ThreeDeeTouch";
    ThreeDeeTouchOriginal.repo = "https://github.com/EddyVerbruggen/cordova-plugin-3dtouch";
    ThreeDeeTouchOriginal.platforms = ["iOS"];
    return ThreeDeeTouchOriginal;
}(AwesomeCordovaNativePlugin));
var ThreeDeeTouch = new ThreeDeeTouchOriginal();
export { ThreeDeeTouch };
//# sourceMappingURL=data:application/json;base64,