var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var BackgroundFetchOriginal = /** @class */ (function (_super) {
    __extends(BackgroundFetchOriginal, _super);
    function BackgroundFetchOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BackgroundFetchOriginal.prototype.configure = function (config) { return cordova(this, "configure", { "callbackOrder": "reverse" }, arguments); };
    BackgroundFetchOriginal.prototype.start = function () { return cordova(this, "start", {}, arguments); };
    BackgroundFetchOriginal.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    BackgroundFetchOriginal.prototype.finish = function (taskId) { return cordova(this, "finish", { "sync": true }, arguments); };
    BackgroundFetchOriginal.prototype.status = function () { return cordova(this, "status", {}, arguments); };
    BackgroundFetchOriginal.pluginName = "BackgroundFetch";
    BackgroundFetchOriginal.plugin = "cordova-plugin-background-fetch";
    BackgroundFetchOriginal.pluginRef = "BackgroundFetch";
    BackgroundFetchOriginal.repo = "https://github.com/transistorsoft/cordova-plugin-background-fetch";
    BackgroundFetchOriginal.platforms = ["iOS"];
    return BackgroundFetchOriginal;
}(AwesomeCordovaNativePlugin));
var BackgroundFetch = new BackgroundFetchOriginal();
export { BackgroundFetch };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYmFja2dyb3VuZC1mZXRjaC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQzs7SUEwRHZELG1DQUEwQjs7OztJQVU3RCxtQ0FBUyxhQUFDLE1BQTZCO0lBV3ZDLCtCQUFLO0lBVUwsOEJBQUk7SUFZSixnQ0FBTSxhQUFDLE1BQWM7SUFRckIsZ0NBQU07Ozs7OzswQkE3R1I7RUEwRHFDLDBCQUEwQjtTQUFsRCxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCYWNrZ3JvdW5kRmV0Y2hDb25maWcge1xyXG4gIC8qKlxyXG4gICAqIFNldCB0cnVlIHRvIGNlYXNlIGJhY2tncm91bmQtZmV0Y2ggZnJvbSBvcGVyYXRpbmcgYWZ0ZXIgdXNlciBcImNsb3Nlc1wiIHRoZSBhcHAuIERlZmF1bHRzIHRvIHRydWUuXHJcbiAgICovXHJcbiAgc3RvcE9uVGVybWluYXRlPzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIEJhY2tncm91bmQgRmV0Y2hcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIGlPUyBCYWNrZ3JvdW5kIEZldGNoIEltcGxlbWVudGF0aW9uLiBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9yZWZlcmVuY2UvdWlraXQvdWlhcHBsaWNhdGlvbiMxNjU3Mzk5XHJcbiAqIGlPUyBCYWNrZ3JvdW5kIEZldGNoIGlzIGJhc2ljYWxseSBhbiBBUEkgd2hpY2ggd2FrZXMgdXAgeW91ciBhcHAgYWJvdXQgZXZlcnkgMTUgbWludXRlcyAoZHVyaW5nIHRoZSB1c2VyJ3MgcHJpbWUtdGltZSBob3VycykgYW5kIHByb3ZpZGVzIHlvdXIgYXBwIGV4YWN0bHkgMzBzIG9mIGJhY2tncm91bmQgcnVubmluZy10aW1lLiBUaGlzIHBsdWdpbiB3aWxsIGV4ZWN1dGUgeW91ciBwcm92aWRlZCBjYWxsYmFja0ZuIHdoZW5ldmVyIGEgYmFja2dyb3VuZC1mZXRjaCBldmVudCBvY2N1cnMuIFRoZXJlIGlzIG5vIHdheSB0byBpbmNyZWFzZSB0aGUgcmF0ZSB3aGljaCBhIGZldGNoLWV2ZW50IG9jY3VycyBhbmQgdGhpcyBwbHVnaW4gc2V0cyB0aGUgcmF0ZSB0byB0aGUgbW9zdCBmcmVxdWVudCBwb3NzaWJsZSB2YWx1ZSBvZiBVSUFwcGxpY2F0aW9uQmFja2dyb3VuZEZldGNoSW50ZXJ2YWxNaW5pbXVtIC0tIGlPUyBkZXRlcm1pbmVzIHRoZSByYXRlIGF1dG9tYXRpY2FsbHkgYmFzZWQgdXBvbiBkZXZpY2UgdXNhZ2UgYW5kIHRpbWUtb2YtZGF5IChpZTogZmV0Y2gtcmF0ZSBpcyBhYm91dCB+MTVtaW4gZHVyaW5nIHByaW1lLXRpbWUgaG91cnM7IGxlc3MgZnJlcXVlbnRseSB3aGVuIHRoZSB1c2VyIGlzIHByZXN1bWVkIHRvIGJlIHNsZWVwaW5nLCBhdCAzYW0gZm9yIGV4YW1wbGUpLlxyXG4gKiBGb3IgbW9yZSBkZXRhaWwsIHBsZWFzZSBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3RyYW5zaXN0b3Jzb2Z0L2NvcmRvdmEtcGx1Z2luLWJhY2tncm91bmQtZmV0Y2hcclxuICogQHVzYWdlXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgQmFja2dyb3VuZEZldGNoLCBCYWNrZ3JvdW5kRmV0Y2hDb25maWcgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvYmFja2dyb3VuZC1mZXRjaC9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGJhY2tncm91bmRGZXRjaDogQmFja2dyb3VuZEZldGNoKSB7XHJcbiAqXHJcbiAqICAgY29uc3QgY29uZmlnOiBCYWNrZ3JvdW5kRmV0Y2hDb25maWcgPSB7XHJcbiAqICAgICBzdG9wT25UZXJtaW5hdGU6IGZhbHNlLCAvLyBTZXQgdHJ1ZSB0byBjZWFzZSBiYWNrZ3JvdW5kLWZldGNoIGZyb20gb3BlcmF0aW5nIGFmdGVyIHVzZXIgXCJjbG9zZXNcIiB0aGUgYXBwLiBEZWZhdWx0cyB0byB0cnVlLlxyXG4gKiAgIH1cclxuICpcclxuICogICBiYWNrZ3JvdW5kRmV0Y2guY29uZmlndXJlKGNvbmZpZylcclxuICogICAgICAudGhlbigoKSA9PiB7XHJcbiAqICAgICAgICAgIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kIEZldGNoIGluaXRpYWxpemVkJyk7XHJcbiAqXHJcbiAqICAgICAgICAgIHRoaXMuYmFja2dyb3VuZEZldGNoLmZpbmlzaCgpO1xyXG4gKlxyXG4gKiAgICAgIH0pXHJcbiAqICAgICAgLmNhdGNoKGUgPT4gY29uc29sZS5sb2coJ0Vycm9yIGluaXRpYWxpemluZyBiYWNrZ3JvdW5kIGZldGNoJywgZSkpO1xyXG4gKlxyXG4gKiAgIC8vIFN0YXJ0IHRoZSBiYWNrZ3JvdW5kLWZldGNoIEFQSS4gWW91ciBjYWxsYmFja0ZuIHByb3ZpZGVkIHRvICNjb25maWd1cmUgd2lsbCBiZSBleGVjdXRlZCBlYWNoIHRpbWUgYSBiYWNrZ3JvdW5kLWZldGNoIGV2ZW50IG9jY3Vycy4gTk9URSB0aGUgI2NvbmZpZ3VyZSBtZXRob2QgYXV0b21hdGljYWxseSBjYWxscyAjc3RhcnQuIFlvdSBkbyBub3QgaGF2ZSB0byBjYWxsIHRoaXMgbWV0aG9kIGFmdGVyIHlvdSAjY29uZmlndXJlIHRoZSBwbHVnaW5cclxuICogICBiYWNrZ3JvdW5kRmV0Y2guc3RhcnQoKTtcclxuICpcclxuICogICAvLyBTdG9wIHRoZSBiYWNrZ3JvdW5kLWZldGNoIEFQSSBmcm9tIGZpcmluZyBmZXRjaCBldmVudHMuIFlvdXIgY2FsbGJhY2tGbiBwcm92aWRlZCB0byAjY29uZmlndXJlIHdpbGwgbm8gbG9uZ2VyIGJlIGV4ZWN1dGVkLlxyXG4gKiAgIGJhY2tncm91bmRGZXRjaC5zdG9wKCk7XHJcbiAqXHJcbiAqXHJcbiAqIH1cclxuICpcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIEJhY2tncm91bmRGZXRjaENvbmZpZ1xyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0JhY2tncm91bmRGZXRjaCcsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYmFja2dyb3VuZC1mZXRjaCcsXHJcbiAgcGx1Z2luUmVmOiAnQmFja2dyb3VuZEZldGNoJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3RyYW5zaXN0b3Jzb2Z0L2NvcmRvdmEtcGx1Z2luLWJhY2tncm91bmQtZmV0Y2gnLFxyXG4gIHBsYXRmb3JtczogWydpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQmFja2dyb3VuZEZldGNoIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIENvbmZpZ3VyZXMgdGhlIHBsdWdpbidzIGZldGNoIGNhbGxiYWNrRm5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7QmFja2dyb3VuZEZldGNoQ29uZmlnfSBjb25maWcgQ29uZmlndXJhdGlvbiBmb3IgcGx1Z2luXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgfSlcclxuICBjb25maWd1cmUoY29uZmlnOiBCYWNrZ3JvdW5kRmV0Y2hDb25maWcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RhcnQgdGhlIGJhY2tncm91bmQtZmV0Y2ggQVBJLlxyXG4gICAqIFlvdXIgY2FsbGJhY2tGbiBwcm92aWRlZCB0byAjY29uZmlndXJlIHdpbGwgYmUgZXhlY3V0ZWQgZWFjaCB0aW1lIGEgYmFja2dyb3VuZC1mZXRjaCBldmVudCBvY2N1cnMuIE5PVEUgdGhlICNjb25maWd1cmUgbWV0aG9kIGF1dG9tYXRpY2FsbHkgY2FsbHMgI3N0YXJ0LiBZb3UgZG8gbm90IGhhdmUgdG8gY2FsbCB0aGlzIG1ldGhvZCBhZnRlciB5b3UgI2NvbmZpZ3VyZSB0aGUgcGx1Z2luXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzdGFydCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RvcCB0aGUgYmFja2dyb3VuZC1mZXRjaCBBUEkgZnJvbSBmaXJpbmcgZmV0Y2ggZXZlbnRzLiBZb3VyIGNhbGxiYWNrRm4gcHJvdmlkZWQgdG8gI2NvbmZpZ3VyZSB3aWxsIG5vIGxvbmdlciBiZSBleGVjdXRlZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHN0b3AoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFlvdSBNVVNUIGNhbGwgdGhpcyBtZXRob2QgaW4geW91ciBmZXRjaCBjYWxsYmFja0ZuIHByb3ZpZGVkIHRvICNjb25maWd1cmUgaW4gb3JkZXIgdG8gc2lnbmFsIHRvIGlPUyB0aGF0IHlvdXIgZmV0Y2ggYWN0aW9uIGlzIGNvbXBsZXRlLiBpT1MgcHJvdmlkZXMgb25seSAzMHMgb2YgYmFja2dyb3VuZC10aW1lIGZvciBhIGZldGNoLWV2ZW50IC0tIGlmIHlvdSBleGNlZWQgdGhpcyAzMHMsIGlPUyB3aWxsIGtpbGwgeW91ciBhcHAuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gdGFza0lkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3luYzogdHJ1ZSxcclxuICB9KVxyXG4gIGZpbmlzaCh0YXNrSWQ6IHN0cmluZyk6IHZvaWQge31cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJuIHRoZSBzdGF0dXMgb2YgdGhlIGJhY2tncm91bmQtZmV0Y2hcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHN0YXR1cygpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=