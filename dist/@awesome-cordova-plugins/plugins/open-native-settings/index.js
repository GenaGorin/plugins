var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var OpenNativeSettingsOriginal = /** @class */ (function (_super) {
    __extends(OpenNativeSettingsOriginal, _super);
    function OpenNativeSettingsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OpenNativeSettingsOriginal.prototype.open = function (setting) { return cordova(this, "open", {}, arguments); };
    OpenNativeSettingsOriginal.pluginName = "OpenNativeSettings";
    OpenNativeSettingsOriginal.plugin = "cordova-open-native-settings";
    OpenNativeSettingsOriginal.pluginRef = "cordova.plugins.settings";
    OpenNativeSettingsOriginal.repo = "https://github.com/guyromb/Cordova-open-native-settings";
    OpenNativeSettingsOriginal.platforms = ["Android", "iOS"];
    return OpenNativeSettingsOriginal;
}(AwesomeCordovaNativePlugin));
var OpenNativeSettings = new OpenNativeSettingsOriginal();
export { OpenNativeSettings };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvb3Blbi1uYXRpdmUtc2V0dGluZ3MvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBbUdwRCxzQ0FBMEI7Ozs7SUFRaEUsaUNBQUksYUFBQyxPQUFtQzs7Ozs7OzZCQTVHMUM7RUFvR3dDLDBCQUEwQjtTQUFyRCxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG4vKipcclxuICogQG5hbWUgT3BlbiBOYXRpdmUgU2V0dGluZ3NcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFBsdWdpbiB0byBvcGVuIG5hdGl2ZSBzY3JlZW5zIG9mIGlPUy9hbmRyb2lkIHNldHRpbmdzXHJcbiAqIEB1c2FnZVxyXG4gKiBZb3UgY2FuIG9wZW4gYW55IG9mIHRoZXNlIHNldHRpbmdzOlxyXG4gKiBgYGBcclxuICogIFwiYWJvdXRcIiwgLy8gaW9zXHJcbiAqICBcImFjY2Vzc2liaWxpdHlcIiwgLy8gaW9zLCBhbmRyb2lkXHJcbiAqICBcImFjY291bnRcIiwgLy8gaW9zLCBhbmRyb2lkXHJcbiAqICBcImFpcnBsYW5lX21vZGVcIiwgLy8gaW9zLCBhbmRyb2lkXHJcbiAqICBcImFwblwiLCAvLyBhbmRyb2lkXHJcbiAqICBcImFwcGxpY2F0aW9uX2RldGFpbHNcIiwgLy8gaW9zLCBhbmRyb2lkXHJcbiAqICBcImFwcGxpY2F0aW9uX2RldmVsb3BtZW50XCIsIC8vIGFuZHJvaWRcclxuICogIFwiYXBwbGljYXRpb25cIiwgLy8gYW5kcm9pZFxyXG4gKiAgXCJhdXRvbG9ja1wiLCAvLyBpb3NcclxuICogIFwiYmF0dGVyeV9vcHRpbWl6YXRpb25cIiwgLy8gYW5kcm9pZFxyXG4gKiAgXCJibHVldG9vdGhcIiwgLy8gaW9zLCBhbmRyb2lkXHJcbiAqICBcImNhc3RsZVwiLCAvLyBpb3NcclxuICogIFwiY2FwdGlvbmluZ1wiLCAvLyBhbmRyb2lkXHJcbiAqICBcImNhc3RcIiwgLy8gYW5kcm9pZFxyXG4gKiAgXCJjZWxsdWxhcl91c2FnZVwiLCAvLyBpb3NcclxuICogIFwiY29uZmlndXJhdGlvbl9saXN0XCIsIC8vIGlvc1xyXG4gKiAgXCJkYXRhX3JvYW1pbmdcIiwgLy8gYW5kcm9pZFxyXG4gKiAgXCJkYXRlXCIsIC8vIGlvcywgYW5kcm9pZFxyXG4gKiAgXCJkaXNwbGF5XCIsIC8vIGlvcywgYW5kcm9pZFxyXG4gKiAgXCJkcmVhbVwiLCAvLyBhbmRyb2lkXHJcbiAqICBcImZhY2V0aW1lXCIsIC8vIGlvc1xyXG4gKiAgXCJob21lXCIsIC8vIGFuZHJvaWRcclxuICogIFwia2V5Ym9hcmRcIiwgLy8gaW9zLCBhbmRyb2lkXHJcbiAqICBcImtleWJvYXJkX3N1YnR5cGVcIiwgLy8gYW5kcm9pZFxyXG4gKiAgXCJsb2NhbGVcIiwgLy8gaW9zLCBhbmRyb2lkXHJcbiAqIFwibG9jYXRpb25cIiwgLy8gaW9zLCBhbmRyb2lkXHJcbiAqIFwibG9jYXRpb25zXCIsIC8vIGlvc1xyXG4gKiBcIm1hbmFnZV9hbGxfYXBwbGljYXRpb25zXCIsIC8vIGFuZHJvaWRcclxuICogXCJtYW5hZ2VfYXBwbGljYXRpb25zXCIsIC8vIGFuZHJvaWRcclxuICogXCJtZW1vcnlfY2FyZFwiLCAvLyBhbmRyb2lkXHJcbiAqIFwibXVzaWNcIiwgLy8gaW9zXHJcbiAqIFwibXVzaWNfZXF1YWxpemVyXCIsIC8vIGlvc1xyXG4gKiBcIm11c2ljX3ZvbHVtZVwiLCAvLyBpb3NcclxuICogXCJuZXR3b3JrXCIsIC8vIGlvcywgYW5kcm9pZFxyXG4gKiBcIm5pa2VfaXBvZFwiLCAvLyBpb3NcclxuICogXCJuZmNzaGFyaW5nXCIsIC8vIGFuZHJvaWRcclxuICogXCJuZmNfcGF5bWVudFwiLCAvLyBhbmRyb2lkXHJcbiAqIFwibmZjX3NldHRpbmdzXCIsIC8vIGFuZHJvaWRcclxuICogXCJub3Rlc1wiLCAvLyBpb3NcclxuICogXCJub3RpZmljYXRpb25faWRcIiwgLy8gaW9zXHJcbiAqIFwicGFzc2Jvb2tcIiwgLy8gaW9zXHJcbiAqIFwicGhvbmVcIiwgLy8gaW9zXHJcbiAqIFwicGhvdG9zXCIsIC8vIGlvc1xyXG4gKiBcInByaW50XCIsIC8vIGFuZHJvaWRcclxuICogXCJwcml2YWN5XCIsIC8vIGFuZHJvaWRcclxuICogXCJxdWlja19sYXVuY2hcIiwgLy8gYW5kcm9pZFxyXG4gKiBcInJlc2V0XCIsIC8vIGlvc1xyXG4gKiBcInJpbmd0b25lXCIsIC8vIGlvc1xyXG4gKiBcImJyb3dzZXJcIiwgLy8gaW9zXHJcbiAqIFwic2VhcmNoXCIsIC8vIGlvcywgYW5kcm9pZFxyXG4gKiBcInNlY3VyaXR5XCIsIC8vIGFuZHJvaWRcclxuICogXCJzZXR0aW5nc1wiLCAvLyBpb3MsIGFuZHJvaWRcclxuICogXCJzaG93X3JlZ3VsYXRvcnlfaW5mb1wiLFxyXG4gKiBcInNvdW5kXCIsIC8vIGlvcywgYW5kcm9pZFxyXG4gKiBcInNvZnR3YXJlX3VwZGF0ZVwiLCAvLyBpb3NcclxuICogXCJzdG9yYWdlXCIsIC8vIGlvcywgYW5kcm9pZFxyXG4gKiBcInN0b3JlXCIsIC8vIGlvcywgYW5kcm9pZFxyXG4gKiBcInN5bmNcIiwgLy8gYW5kcm9pZFxyXG4gKiBcInRldGhlcmluZ1wiLCAvLyBpb3NcclxuICogXCJ0d2l0dGVyXCIsIC8vIGlvc1xyXG4gKiBcInRvdWNoXCIsIC8vIGlvc1xyXG4gKiBcInVzYWdlXCIsIC8vIGlvcywgYW5kcm9pZFxyXG4gKiBcInVzZXJfZGljdGlvbmFyeVwiLCAvLyBhbmRyb2lkXHJcbiAqIFwidmlkZW9cIiwgLy8gaW9zXHJcbiAqIFwidm9pY2VfaW5wdXRcIiwgLy8gYW5kcm9pZFxyXG4gKiBcInZwblwiLCAvLyBpb3NcclxuICogXCJ3YWxscGFwZXJcIiwgLy8gaW9zXHJcbiAqIFwid2lmaV9pcFwiLCAvLyBhbmRyb2lkXHJcbiAqIFwid2lmaVwiLCAvLyBpb3MsIGFuZHJvaWRcclxuICogXCJ3aXJlbGVzc1wiIC8vIGFuZHJvaWRcclxuICogIGBgYFxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IE9wZW5OYXRpdmVTZXR0aW5ncyB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9vcGVuLW5hdGl2ZS1zZXR0aW5ncy9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIG9wZW5OYXRpdmVTZXR0aW5nczogT3Blbk5hdGl2ZVNldHRpbmdzKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ09wZW5OYXRpdmVTZXR0aW5ncycsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1vcGVuLW5hdGl2ZS1zZXR0aW5ncycsXHJcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLnNldHRpbmdzJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2d1eXJvbWIvQ29yZG92YS1vcGVuLW5hdGl2ZS1zZXR0aW5ncycsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE9wZW5OYXRpdmVTZXR0aW5ncyBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBPcGVucyBhIHNldHRpbmcgZGlhbG9nXHJcbiAgICpcclxuICAgKiBAcGFyYW0gc2V0dGluZyB7c3RyaW5nfGFycmF5fSBzZXR0aW5nIG5hbWVcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBvcGVuKHNldHRpbmc6IHN0cmluZyB8IFtzdHJpbmcsIGJvb2xlYW5dKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19