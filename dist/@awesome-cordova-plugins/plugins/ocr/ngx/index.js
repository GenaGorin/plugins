import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
export var OCRSourceType;
(function (OCRSourceType) {
    /**
     * Normal processing from a file URL. This is the overall recommended choice
     * for most applications. The distinction between file and native URLs is
     * only relevant on iOS; under Android `NORMFILEURL` and `NORMNATIVEURL`
     * are interchangeable.
     */
    OCRSourceType[OCRSourceType["NORMFILEURL"] = 0] = "NORMFILEURL";
    /**
     * Normal processing from a native URL. Since this source type uses deprecated
     * OS APIs to interact with the camera plugin, it is best avoided, especially
     * if ongoing forward compatibility is a concern. For further information, see
     * https://github.com/NeutrinosPlatform/cordova-plugin-mobile-ocr#plugin-usage
     * Under Android, this is equivalent to `NORMFILEURL`.
     */
    OCRSourceType[OCRSourceType["NORMNATIVEURL"] = 1] = "NORMNATIVEURL";
    /**
     * Fast processing from a file URL. As the compression done internally causes
     * a significant loss in extraction quality, it should only be preferred when
     * dealing with large images containing significant amounts of text, where
     * the execution time required to perform normal processing is prohibitive.
     * The distinction between file and native URLs is only relevant on iOS;
     * under Android `FASTFILEURL` and `FASTNATIVEURL` are interchangeable.
     */
    OCRSourceType[OCRSourceType["FASTFILEURL"] = 2] = "FASTFILEURL";
    /**
     * Fast processing from a native URL. See comments above for `FASTFILEURL`
     * concerning quality loss.
     *
     * The distinction between file and native URLs is only relevant on iOS;
     * under Android `FASTFILEURL` and `FASTNATIVEURL` are interchangeable.
     */
    OCRSourceType[OCRSourceType["FASTNATIVEURL"] = 3] = "FASTNATIVEURL";
    /**
     * Normal processing from a base64-encoded string. Quality is equivalent
     * to `NORMFILEURL`, but due to significantly higher memory requirements,
     * is only appropriate for use with very small images.
     */
    OCRSourceType[OCRSourceType["BASE64"] = 4] = "BASE64";
})(OCRSourceType || (OCRSourceType = {}));
var OCR = /** @class */ (function (_super) {
    __extends(OCR, _super);
    function OCR() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OCR.prototype.recText = function (sourceType, source) { return cordova(this, "recText", {}, arguments); };
    OCR.pluginName = "OCR";
    OCR.plugin = "cordova-plugin-mobile-ocr";
    OCR.pluginRef = "textocr";
    OCR.repo = "https://github.com/NeutrinosPlatform/cordova-plugin-mobile-ocr";
    OCR.platforms = ["Android", "iOS"];
    OCR.decorators = [
        { type: Injectable }
    ];
    return OCR;
}(AwesomeCordovaNativePlugin));
export { OCR };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvb2NyL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDO0FBRTVGLE1BQU0sQ0FBTixJQUFZLGFBMkNYO0FBM0NELFdBQVksYUFBYTtJQUN2Qjs7Ozs7T0FLRztJQUNILCtEQUFlLENBQUE7SUFFZjs7Ozs7O09BTUc7SUFDSCxtRUFBaUIsQ0FBQTtJQUVqQjs7Ozs7OztPQU9HO0lBQ0gsK0RBQWUsQ0FBQTtJQUVmOzs7Ozs7T0FNRztJQUNILG1FQUFpQixDQUFBO0lBRWpCOzs7O09BSUc7SUFDSCxxREFBVSxDQUFBO0FBQ1osQ0FBQyxFQTNDVyxhQUFhLEtBQWIsYUFBYSxRQTJDeEI7O0lBMkd3Qix1QkFBMEI7Ozs7SUFTakQscUJBQU8sYUFBQyxVQUF5QixFQUFFLE1BQWM7Ozs7Ozs7Z0JBVmxELFVBQVU7O2NBeEpYO0VBeUp5QiwwQkFBMEI7U0FBdEMsR0FBRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuXHJcbmV4cG9ydCBlbnVtIE9DUlNvdXJjZVR5cGUge1xyXG4gIC8qKlxyXG4gICAqIE5vcm1hbCBwcm9jZXNzaW5nIGZyb20gYSBmaWxlIFVSTC4gVGhpcyBpcyB0aGUgb3ZlcmFsbCByZWNvbW1lbmRlZCBjaG9pY2VcclxuICAgKiBmb3IgbW9zdCBhcHBsaWNhdGlvbnMuIFRoZSBkaXN0aW5jdGlvbiBiZXR3ZWVuIGZpbGUgYW5kIG5hdGl2ZSBVUkxzIGlzXHJcbiAgICogb25seSByZWxldmFudCBvbiBpT1M7IHVuZGVyIEFuZHJvaWQgYE5PUk1GSUxFVVJMYCBhbmQgYE5PUk1OQVRJVkVVUkxgXHJcbiAgICogYXJlIGludGVyY2hhbmdlYWJsZS5cclxuICAgKi9cclxuICBOT1JNRklMRVVSTCA9IDAsXHJcblxyXG4gIC8qKlxyXG4gICAqIE5vcm1hbCBwcm9jZXNzaW5nIGZyb20gYSBuYXRpdmUgVVJMLiBTaW5jZSB0aGlzIHNvdXJjZSB0eXBlIHVzZXMgZGVwcmVjYXRlZFxyXG4gICAqIE9TIEFQSXMgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgY2FtZXJhIHBsdWdpbiwgaXQgaXMgYmVzdCBhdm9pZGVkLCBlc3BlY2lhbGx5XHJcbiAgICogaWYgb25nb2luZyBmb3J3YXJkIGNvbXBhdGliaWxpdHkgaXMgYSBjb25jZXJuLiBGb3IgZnVydGhlciBpbmZvcm1hdGlvbiwgc2VlXHJcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL05ldXRyaW5vc1BsYXRmb3JtL2NvcmRvdmEtcGx1Z2luLW1vYmlsZS1vY3IjcGx1Z2luLXVzYWdlXHJcbiAgICogVW5kZXIgQW5kcm9pZCwgdGhpcyBpcyBlcXVpdmFsZW50IHRvIGBOT1JNRklMRVVSTGAuXHJcbiAgICovXHJcbiAgTk9STU5BVElWRVVSTCA9IDEsXHJcblxyXG4gIC8qKlxyXG4gICAqIEZhc3QgcHJvY2Vzc2luZyBmcm9tIGEgZmlsZSBVUkwuIEFzIHRoZSBjb21wcmVzc2lvbiBkb25lIGludGVybmFsbHkgY2F1c2VzXHJcbiAgICogYSBzaWduaWZpY2FudCBsb3NzIGluIGV4dHJhY3Rpb24gcXVhbGl0eSwgaXQgc2hvdWxkIG9ubHkgYmUgcHJlZmVycmVkIHdoZW5cclxuICAgKiBkZWFsaW5nIHdpdGggbGFyZ2UgaW1hZ2VzIGNvbnRhaW5pbmcgc2lnbmlmaWNhbnQgYW1vdW50cyBvZiB0ZXh0LCB3aGVyZVxyXG4gICAqIHRoZSBleGVjdXRpb24gdGltZSByZXF1aXJlZCB0byBwZXJmb3JtIG5vcm1hbCBwcm9jZXNzaW5nIGlzIHByb2hpYml0aXZlLlxyXG4gICAqIFRoZSBkaXN0aW5jdGlvbiBiZXR3ZWVuIGZpbGUgYW5kIG5hdGl2ZSBVUkxzIGlzIG9ubHkgcmVsZXZhbnQgb24gaU9TO1xyXG4gICAqIHVuZGVyIEFuZHJvaWQgYEZBU1RGSUxFVVJMYCBhbmQgYEZBU1ROQVRJVkVVUkxgIGFyZSBpbnRlcmNoYW5nZWFibGUuXHJcbiAgICovXHJcbiAgRkFTVEZJTEVVUkwgPSAyLFxyXG5cclxuICAvKipcclxuICAgKiBGYXN0IHByb2Nlc3NpbmcgZnJvbSBhIG5hdGl2ZSBVUkwuIFNlZSBjb21tZW50cyBhYm92ZSBmb3IgYEZBU1RGSUxFVVJMYFxyXG4gICAqIGNvbmNlcm5pbmcgcXVhbGl0eSBsb3NzLlxyXG4gICAqXHJcbiAgICogVGhlIGRpc3RpbmN0aW9uIGJldHdlZW4gZmlsZSBhbmQgbmF0aXZlIFVSTHMgaXMgb25seSByZWxldmFudCBvbiBpT1M7XHJcbiAgICogdW5kZXIgQW5kcm9pZCBgRkFTVEZJTEVVUkxgIGFuZCBgRkFTVE5BVElWRVVSTGAgYXJlIGludGVyY2hhbmdlYWJsZS5cclxuICAgKi9cclxuICBGQVNUTkFUSVZFVVJMID0gMyxcclxuXHJcbiAgLyoqXHJcbiAgICogTm9ybWFsIHByb2Nlc3NpbmcgZnJvbSBhIGJhc2U2NC1lbmNvZGVkIHN0cmluZy4gUXVhbGl0eSBpcyBlcXVpdmFsZW50XHJcbiAgICogdG8gYE5PUk1GSUxFVVJMYCwgYnV0IGR1ZSB0byBzaWduaWZpY2FudGx5IGhpZ2hlciBtZW1vcnkgcmVxdWlyZW1lbnRzLFxyXG4gICAqIGlzIG9ubHkgYXBwcm9wcmlhdGUgZm9yIHVzZSB3aXRoIHZlcnkgc21hbGwgaW1hZ2VzLlxyXG4gICAqL1xyXG4gIEJBU0U2NCA9IDQsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGb3VyIHBvaW50cyAob3JkZXJlZCBpbiBjbG9ja3dpc2UgZGlyZWN0aW9uKSB0aGF0IGVuY2xvc2UgYSB0ZXh0XHJcbiAqIGNvbXBvbmVudC4gTWF5IG5vdCBiZSBheGlzLWFsaWduZWQgZHVlIHRvIHBlcnNwZWN0aXZlIHNrZXcuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE9DUkNvcm5lcnMge1xyXG4gIHgxOiBudW1iZXI7XHJcbiAgeTE6IG51bWJlcjtcclxuICB4MjogbnVtYmVyO1xyXG4gIHkyOiBudW1iZXI7XHJcbiAgeDM6IG51bWJlcjtcclxuICB5MzogbnVtYmVyO1xyXG4gIHg0OiBudW1iZXI7XHJcbiAgeTQ6IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGF4aXMtYWxpZ25lZCBib3VuZGluZyByZWN0YW5nbGUuIGB4YCBhbmQgYHlgIHJlcHJlc2VudCB0aGUgdG9wIGxlZnQuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE9DUlJlY3Qge1xyXG4gIHg6IG51bWJlcjtcclxuICB5OiBudW1iZXI7XHJcbiAgaGVpZ2h0OiBudW1iZXI7XHJcbiAgd2lkdGg6IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoaXMgaXMgdGhlIHJldHVybiB2YWx1ZSBmcm9tIHRoZSBgcmVjVGV4dGAgbWV0aG9kLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBPQ1JSZXN1bHQge1xyXG4gIC8qKlxyXG4gICAqIFdhcyBhbnkgdGV4dCBleHRyYWN0ZWQ/IElmIGBmb3VuZFRleHRgIGlzIGZhbHNlLCBubyBvdGhlciBmaWVsZHMgYXJlXHJcbiAgICogcmV0dXJuZWQuIElmIGZvdW5kVGV4dCBpcyB0cnVlLCBhbGwgb3RoZXIgZmllbGRzIGFyZSByZWxpYWJsZS5cclxuICAgKi9cclxuICBmb3VuZFRleHQ6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIEEgYmxvY2sgaXMgdGhlIGxhcmdlc3QgdW5pdCBvZiB0ZXh0LCB3aGljaCBjYW4gYmUgdGhvdWdodCBvZiBhcyBhIHBhcmFncmFwaC5cclxuICAgKiBUaGlzIGZpZWxkIGNvbnNpc3RzIG9mIHNldmVyYWwgcGFyYWxsZWwgYXJyYXlzLCBzbyB0aGUgdGV4dCBpbiBgYmxvY2t0ZXh0WzBdYFxyXG4gICAqIGlzIGJvdW5kZWQgYnkgYGJsb2NrcG9pbnRzWzBdYCBhbmQgYGJsb2NrZnJhbWVbMF1gLlxyXG4gICAqL1xyXG4gIGJsb2Nrczoge1xyXG4gICAgYmxvY2t0ZXh0OiBzdHJpbmdbXTtcclxuICAgIGJsb2NrcG9pbnRzOiBPQ1JDb3JuZXJzW107XHJcbiAgICBibG9ja2ZyYW1lOiBPQ1JSZWN0W107XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQSBsaW5lIGlzIHRoZSBjZW50cmFsIHVuaXQgb2YgdGV4dCwgY29udGFpbmluZyBzZXZlcmFsIGVsZW1lbnRzLiBBIGJsb2NrXHJcbiAgICogY2FuIGNvbnRhaW4gTiBsaW5lcy4gVGhpcyBmaWVsZCBjb25zaXN0cyBvZiBzZXZlcmFsIHBhcmFsbGVsIGFycmF5cywgc28gdGhlXHJcbiAgICogdGV4dCBpbiBgbGluZXRleHRbMF1gIGlzIGJvdW5kZWQgYnkgYGxpbmVwb2ludHNbMF1gIGFuZCBgbGluZWZyYW1lWzBdYC5cclxuICAgKi9cclxuICBsaW5lczoge1xyXG4gICAgbGluZXRleHQ6IHN0cmluZ1tdO1xyXG4gICAgbGluZXBvaW50czogT0NSQ29ybmVyc1tdO1xyXG4gICAgbGluZWZyYW1lOiBPQ1JSZWN0W107XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQSB3b3JkIChvciBlbGVtZW50KSBpcyB0aGUgc21hbGxlc3QgdW5pdCBvZiB0ZXh0LiBUaGlzIGZpZWxkIGNvbnNpc3RzIG9mXHJcbiAgICogc2V2ZXJhbCBwYXJhbGxlbCBhcnJheXMsIHNvIHRoZSB0ZXh0IGluIGB3b3JkdGV4dFswXWAgaXMgYm91bmRlZCBieVxyXG4gICAqIGB3b3JkcG9pbnRzWzBdYCBhbmQgYHdvcmRmcmFtZVswXWAuXHJcbiAgICovXHJcbiAgd29yZHM6IHtcclxuICAgIHdvcmR0ZXh0OiBzdHJpbmdbXTtcclxuICAgIHdvcmRwb2ludHM6IE9DUkNvcm5lcnNbXTtcclxuICAgIHdvcmRmcmFtZTogT0NSUmVjdFtdO1xyXG4gIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBPQ1JcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgcGx1Z2luIGF0dGVtcHRzIHRvIGlkZW50aWZ5IGFuZCBleHRyYWN0IHRleHQgZnJvbSBhbiBpbWFnZS5cclxuICogUGxlYXNlIG5vdGU6IFRoaXMgcGx1Z2luIGRlcGVuZHMgb24gdGhlIEdvb2dsZU1vYmlsZVZpc2lvbiBwb2Qgd2hpY2ggaXMgcmVmZXJlbmNpbmcgVUlXZWJ2aWV3LCB0aGF0IGhhcyBiZWVuIGRlcHJlY2F0ZWQgYnkgQXBwbGUuXHJcbiAqIERvbid0IHVzZSB0aGlzIHBsdWdpbiBpbiBhbiBhcHAgaW50ZW5kZWQgZm9yIEFwcCBTdG9yZSBhcyB5b3Ugd2lsbCBnZXQgYSByZXZpZXcgcmVqZWN0aW9uIGZyb20gQXBwbGU6IGBEZXByZWNhdGVkIEFQSSBVc2FnZSDigJQgQXBwbGUgd2lsbCBzdG9wIGFjY2VwdGluZyBzdWJtaXNzaW9ucyBvZiBhcHBzIHRoYXQgdXNlIFVJV2ViVmlldyBBUElzYFxyXG4gKiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBmb2xsb3dpbmcgR2l0aHViIGlzc3VlIFtHb29nbGUgTW9iaWxlIFZpc2lvbiByZWx5aW5nIG9uIGRlcHJlY2F0ZWQgVUlXZWJ2aWV3XShodHRwczovL2dpdGh1Yi5jb20vTmV1dHJpbm9zUGxhdGZvcm0vY29yZG92YS1wbHVnaW4tbW9iaWxlLW9jci9pc3N1ZXMvMjcpLlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBPQ1IsIE9DUlNvdXJjZVR5cGUgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvb2NyL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgb2NyOiBPQ1IpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy5vY3IucmVjVGV4dChPQ1JTb3VyY2VUeXBlLk5PUk1GSUxFVVJMLCBcImZpbGU6Ly9wYXRoL3RvL2ltYWdlLnBuZ1wiKVxyXG4gKiAgIC50aGVuKChyZXM6IE9DUlJlc3VsdCkgPT4gY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocmVzKSkpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBPQ1JDb3JuZXJzXHJcbiAqIE9DUlJlY3RcclxuICogT0NSUmVzdWx0XHJcbiAqIEBlbnVtc1xyXG4gKiBPQ1JTb3VyY2VUeXBlXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnT0NSJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1tb2JpbGUtb2NyJyxcclxuICBwbHVnaW5SZWY6ICd0ZXh0b2NyJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL05ldXRyaW5vc1BsYXRmb3JtL2NvcmRvdmEtcGx1Z2luLW1vYmlsZS1vY3InLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBPQ1IgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogRXh0cmFjdCB0ZXh0IGZyb20gaW1hZ2VcclxuICAgKlxyXG4gICAqIEBwYXJhbSBzb3VyY2VUeXBlIHtPQ1JTb3VyY2VUeXBlfSB0eXBlIG9mIGltYWdlIHNvdXJjZVxyXG4gICAqIEBwYXJhbSBzb3VyY2Uge3N0cmluZ30gaW1hZ2Ugc291cmNlIChlaXRoZXIgZmlsZSBVUkwgb3IgYmFzZTY0IHN0cmluZylcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxPQ1JSZXN1bHQ+fSBleHRyYWN0ZWQgdGV4dCBhbmQgZ2VvbWV0cnlcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVjVGV4dChzb3VyY2VUeXBlOiBPQ1JTb3VyY2VUeXBlLCBzb3VyY2U6IHN0cmluZyk6IFByb21pc2U8T0NSUmVzdWx0PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==