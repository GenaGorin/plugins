import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var CustomUISDK = /** @class */ (function (_super) {
    __extends(CustomUISDK, _super);
    function CustomUISDK() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CustomUISDK.prototype.fetchAuthCode = function (clientId, mid) { return cordova(this, "fetchAuthCode", {}, arguments); };
    CustomUISDK.prototype.isPaytmAppInstalled = function () { return cordova(this, "isPaytmAppInstalled", {}, arguments); };
    CustomUISDK.prototype.checkHasInstrument = function (mid) { return cordova(this, "checkHasInstrument", {}, arguments); };
    CustomUISDK.prototype.initPaytmSDK = function (mid, orderId, txnToken, amount, isStaging, callbackUrl) { return cordova(this, "initPaytmSDK", {}, arguments); };
    CustomUISDK.prototype.goForWalletTransaction = function (paymentFlow) { return cordova(this, "goForWalletTransaction", {}, arguments); };
    CustomUISDK.prototype.appInvoke = function () { return cordova(this, "appInvoke", {}, arguments); };
    CustomUISDK.prototype.goForNewCardTransaction = function (cardNumber, cardExpiry, cardCvv, cardType, paymentFlow, channelCode, issuingBankCode, emiChannelId, authMode, saveCard) { return cordova(this, "goForNewCardTransaction", {}, arguments); };
    CustomUISDK.prototype.goForSavedCardTransaction = function (cardId, cardCvv, cardType, paymentFlow, channelCode, issuingBankCode, emiChannelId, authMode) { return cordova(this, "goForSavedCardTransaction", {}, arguments); };
    CustomUISDK.prototype.goForNetBankingTransaction = function (netBankingCode, paymentFlow) { return cordova(this, "goForNetBankingTransaction", {}, arguments); };
    CustomUISDK.prototype.goForUpiCollectTransaction = function (upiCode, paymentFlow, saveVPA) { return cordova(this, "goForUpiCollectTransaction", {}, arguments); };
    CustomUISDK.prototype.getUpiIntentList = function () { return cordova(this, "getUpiIntentList", {}, arguments); };
    CustomUISDK.prototype.goForUpiIntentTransaction = function (appName, paymentFlow) { return cordova(this, "goForUpiIntentTransaction", {}, arguments); };
    CustomUISDK.prototype.goForUpiPushTransaction = function (paymentFlow, bankAccountJson, vpaName, merchantDetailsJson) { return cordova(this, "goForUpiPushTransaction", {}, arguments); };
    CustomUISDK.prototype.fetchUpiBalance = function (bankAccountJson, vpaName) { return cordova(this, "fetchUpiBalance", {}, arguments); };
    CustomUISDK.prototype.setUpiMpin = function (bankAccountJson, vpaName) { return cordova(this, "setUpiMpin", {}, arguments); };
    CustomUISDK.prototype.getBin = function (cardSixDigit, tokenType, token, mid, referenceId) { return cordova(this, "getBin", {}, arguments); };
    CustomUISDK.prototype.fetchNBList = function (tokenType, token, mid, orderId, referenceId) { return cordova(this, "fetchNBList", {}, arguments); };
    CustomUISDK.prototype.fetchEmiDetails = function (channelCode, cardType) { return cordova(this, "fetchEmiDetails", {}, arguments); };
    CustomUISDK.prototype.getLastNBSavedBank = function () { return cordova(this, "getLastNBSavedBank", {}, arguments); };
    CustomUISDK.prototype.getLastSavedVPA = function () { return cordova(this, "getLastSavedVPA", {}, arguments); };
    CustomUISDK.prototype.isAuthCodeValid = function (clientId, authCode) { return cordova(this, "isAuthCodeValid", {}, arguments); };
    CustomUISDK.prototype.getEnvironment = function () { return cordova(this, "getEnvironment", {}, arguments); };
    CustomUISDK.prototype.setEnvironment = function (environment) { return cordova(this, "setEnvironment", {}, arguments); };
    CustomUISDK.pluginName = "cordova-paytm-customuisdk";
    CustomUISDK.plugin = "cordova-paytm-customuisdk";
    CustomUISDK.pluginRef = "paytm.customuisdk";
    CustomUISDK.repo = "https://github.com/paytm/paytm-customuisdk-cordova";
    CustomUISDK.install = "";
    CustomUISDK.installVariables = [];
    CustomUISDK.platforms = ["Android, iOS"];
    CustomUISDK.decorators = [
        { type: Injectable }
    ];
    return CustomUISDK;
}(AwesomeCordovaNativePlugin));
export { CustomUISDK };
//# sourceMappingURL=data:application/json;base64,