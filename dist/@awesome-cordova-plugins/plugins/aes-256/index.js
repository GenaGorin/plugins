var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var AES256Original = /** @class */ (function (_super) {
    __extends(AES256Original, _super);
    function AES256Original() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AES256Original.prototype.encrypt = function (secureKey, secureIV, data) { return cordova(this, "encrypt", {}, arguments); };
    AES256Original.prototype.decrypt = function (secureKey, secureIV, data) { return cordova(this, "decrypt", {}, arguments); };
    AES256Original.prototype.generateSecureKey = function (password) { return cordova(this, "generateSecureKey", {}, arguments); };
    AES256Original.prototype.generateSecureIV = function (password) { return cordova(this, "generateSecureIV", {}, arguments); };
    AES256Original.pluginName = "AES256";
    AES256Original.plugin = "cordova-plugin-aes256-encryption";
    AES256Original.pluginRef = "cordova.plugins.AES256";
    AES256Original.repo = "https://github.com/Ideas2IT/cordova-aes256";
    AES256Original.platforms = ["Android", "iOS"];
    AES256Original.install = "ionic cordova plugin add cordova-plugin-aes256-encryption";
    return AES256Original;
}(AwesomeCordovaNativePlugin));
var AES256 = new AES256Original();
export { AES256 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYWVzLTI1Ni9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQzs7SUF1RGhFLDBCQUEwQjs7OztJQVVwRCx3QkFBTyxhQUFDLFNBQWlCLEVBQUUsUUFBZ0IsRUFBRSxJQUFZO0lBYXpELHdCQUFPLGFBQUMsU0FBaUIsRUFBRSxRQUFnQixFQUFFLElBQVk7SUFZekQsa0NBQWlCLGFBQUMsUUFBZ0I7SUFZbEMsaUNBQWdCLGFBQUMsUUFBZ0I7Ozs7Ozs7aUJBdkduQztFQXdENEIsMEJBQTBCO1NBQXpDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG4vKipcclxuICogQG5hbWUgQUVTMjU2XHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGlzIGNvcmRvdmEgaW9uaWMgcGx1Z2luIGFsbG93cyB5b3UgdG8gcGVyZm9ybSBBRVMgMjU2IGVuY3J5cHRpb24gYW5kIGRlY3J5cHRpb24gb24gdGhlIHBsYWluIHRleHQuXHJcbiAqIEl0J3MgYSBjcm9zcy1wbGF0Zm9ybSBwbHVnaW4gd2hpY2ggc3VwcG9ydHMgYm90aCBBbmRyb2lkIGFuZCBpT1MuXHJcbiAqIFRoZSBlbmNyeXB0aW9uIGFuZCBkZWNyeXB0aW9uIGFyZSBwZXJmb3JtZWQgb24gdGhlIGRldmljZSBuYXRpdmUgbGF5ZXIgc28gdGhhdCB0aGUgcGVyZm9ybWFuY2UgaXMgbXVjaCBmYXN0ZXIuXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IEFFUzI1NiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9hZXMtMjU2L25neCc7XHJcbiAqXHJcbiAqIHByaXZhdGUgc2VjdXJlS2V5OiBzdHJpbmc7XHJcbiAqIHByaXZhdGUgc2VjdXJlSVY6IHN0cmluZztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBhZXMyNTY6IEFFUzI1Nikge1xyXG4gKiAgICB0aGlzLmdlbmVyYXRlU2VjdXJlS2V5QW5kSVYoKTsgLy8gVG8gZ2VuZXJhdGUgdGhlIHJhbmRvbSBzZWN1cmVLZXkgYW5kIHNlY3VyZUlWXHJcbiAqIH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIGFzeW5jIGdlbmVyYXRlU2VjdXJlS2V5QW5kSVYoKSB7XHJcbiAqICAgIHRoaXMuc2VjdXJlS2V5ID0gYXdhaXQgdGhpcy5hZXMyNTYuZ2VuZXJhdGVTZWN1cmVLZXkoJ3JhbmRvbSBwYXNzd29yZCAxMjM0NScpOyAvLyBSZXR1cm5zIGEgMzIgYnl0ZXMgc3RyaW5nXHJcbiAqICAgIHRoaXMuc2VjdXJlSVYgPSBhd2FpdCB0aGlzLmFlczI1Ni5nZW5lcmF0ZVNlY3VyZUlWKCdyYW5kb20gcGFzc3dvcmQgMTIzNDUnKTsgLy8gUmV0dXJucyBhIDE2IGJ5dGVzIHN0cmluZ1xyXG4gKiB9XHJcbiAqXHJcbiAqIHRoaXMuYWVzMjU2LmVuY3J5cHQodGhpcy5zZWN1cmVLZXksIHRoaXMuc2VjdXJlSVYsICd0ZXN0ZGF0YScpXHJcbiAqICAgLnRoZW4ocmVzID0+IGNvbnNvbGUubG9nKCdFbmNyeXB0ZWQgRGF0YTogJyxyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiB0aGlzLmFlczI1Ni5kZWNyeXB0KHRoaXMuc2VjdXJlS2V5LCB0aGlzLnNlY3VyZUlWLCAnZW5jcnlwdGVkRGF0YScpXHJcbiAqICAgLnRoZW4ocmVzID0+IGNvbnNvbGUubG9nKCdEZWNyeXB0ZWQgRGF0YSA6ICcscmVzKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICpcclxuICogdGhpcy5hZXMyNTYuZ2VuZXJhdGVTZWN1cmVLZXkoJ3JhbmRvbSBwYXNzd29yZCAxMjM0NScpXHJcbiAqICAgLnRoZW4ocmVzID0+IGNvbnNvbGUubG9nKCdTZWN1cmUgS2V5IDogJyxyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKlxyXG4gKiB0aGlzLmFlczI1Ni5nZW5lcmF0ZVNlY3VyZUlWKCdyYW5kb20gcGFzc3dvcmQgMTIzNDUnKVxyXG4gKiAgIC50aGVuKHJlcyA9PiBjb25zb2xlLmxvZygnU2VjdXJlIElWIDogJyxyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdBRVMyNTYnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWFlczI1Ni1lbmNyeXB0aW9uJyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuQUVTMjU2JyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0lkZWFzMklUL2NvcmRvdmEtYWVzMjU2JyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxuICBpbnN0YWxsOiAnaW9uaWMgY29yZG92YSBwbHVnaW4gYWRkIGNvcmRvdmEtcGx1Z2luLWFlczI1Ni1lbmNyeXB0aW9uJyxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQUVTMjU2IGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZnVuY3Rpb24gdXNlZCB0byBwZXJmb3JtIHRoZSBhZXMyNTYgZW5jcnlwdGlvblxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlY3VyZUtleSBBIDMyIGJ5dGVzIHN0cmluZywgd2hpY2ggd2lsbCB1c2VkIGFzIGlucHV0IGtleSBmb3IgQUVTMjU2IGVuY3J5cHRpb24uXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlY3VyZUlWIEEgMTYgYnl0ZXMgc3RyaW5nLCB3aGljaCB3aWxsIHVzZWQgYXMgaW5pdGlhbCB2ZWN0b3IgZm9yIEFFUzI1NiBlbmNyeXB0aW9uLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIEEgc3RyaW5nIHdoaWNoIHdpbGwgYmUgZW5jcnlwdGVkXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGVuY3J5cHRpb24gaGFwcGVucy4gVGhlIHN1Y2Nlc3MgcmVzcG9uc2Ugd2lsbCByZXR1cm5zIGVuY3J5cHRlZCBkYXRhLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBlbmNyeXB0KHNlY3VyZUtleTogc3RyaW5nLCBzZWN1cmVJVjogc3RyaW5nLCBkYXRhOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBmdW5jdGlvbiB1c2VkIHRvIHBlcmZvcm0gdGhlIGFlczI1NiBkZWNyeXB0aW9uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VjdXJlS2V5IEEgMzIgYnl0ZXMgc3RyaW5nLCB3aGljaCB3aWxsIHVzZWQgYXMgaW5wdXQga2V5IGZvciBBRVMyNTYgZGVjcnlwdGlvbi5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VjdXJlSVYgQSAxNiBieXRlcyBzdHJpbmcsIHdoaWNoIHdpbGwgdXNlZCBhcyBpbml0aWFsIHZlY3RvciBmb3IgQUVTMjU2IGRlY3J5cHRpb24uXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGEgQW4gQUVTMjU2IGVuY3J5cHRlZCBkYXRhIHdoaWNoIHdpbGwgYmUgZGVjcnlwdGVkLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBkZWNyeXB0aW9uIGhhcHBlbnMuIFRoZSBzdWNjZXNzIHJlc3BvbnNlIHdpbGwgcmV0dXJucyBkZWNyeXB0ZWQgZGF0YS5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZGVjcnlwdChzZWN1cmVLZXk6IHN0cmluZywgc2VjdXJlSVY6IHN0cmluZywgZGF0YTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgZnVuY3Rpb24gdXNlZCB0byBnZW5lcmF0ZSBhIHNlY3VyZSBrZXkgYmFzZWQgb24gYW4gcGFzc3dvcmQuIFBlcmZlY3QgaWYgeW91IHdhbnQgdG8gZGVsZWdhdGUgdGhlIGtleSBnZW5lcmF0aW9uIGZvciBlbmNyeXB0aW9uIHRvIHRoZSBwbHVnaW4uXHJcbiAgICogTWFrZSBzdXJlIHRvIHNhdmUgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGlzIGZ1bmN0aW9uIHNvbWV3aGVyZSBzbyB5b3VyIGVuY3J5cHRlZCBkYXRhIGNhbiBiZSBkZWNyeXB0ZWQgaW4gdGhlIGZ1dHVyZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBBIHJhbmRvbSBzdHJpbmcsIHdoaWNoIHdpbGwgYmUgdXNlZCBhcyBpbnB1dCBmb3IgYSBQQktERjIgZnVuY3Rpb25cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4ga2V5IGlzIGdlbmVyYXRlZC5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2VuZXJhdGVTZWN1cmVLZXkocGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIGZ1bmN0aW9uIHVzZWQgdG8gZ2VuZXJhdGUgYSBzZWN1cmUgSVYgYmFzZWQgb24gYW4gcGFzc3dvcmQuIFBlcmZlY3QgaWYgeW91IHdhbnQgdG8gZGVsZWdhdGUgdGhlIElWIGdlbmVyYXRpb24gZm9yIGVuY3J5cHRpb24gdG8gdGhlIHBsdWdpbi5cclxuICAgKiBNYWtlIHN1cmUgdG8gc2F2ZSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoaXMgZnVuY3Rpb24gc29tZXdoZXJlIHNvIHlvdXIgZW5jcnlwdGVkIGRhdGEgY2FuIGJlIGRlY3J5cHRlZCBpbiB0aGUgZnV0dXJlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIEEgcmFuZG9tIHN0cmluZywgd2hpY2ggd2lsbCBiZSB1c2VkIGFzIGlucHV0IGZvciBhIFBCS0RGMiBmdW5jdGlvblxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBJViBpcyBnZW5lcmF0ZWQuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdlbmVyYXRlU2VjdXJlSVYocGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==