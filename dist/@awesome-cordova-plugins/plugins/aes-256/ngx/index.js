import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var AES256 = /** @class */ (function (_super) {
    __extends(AES256, _super);
    function AES256() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AES256.prototype.encrypt = function (secureKey, secureIV, data) { return cordova(this, "encrypt", {}, arguments); };
    AES256.prototype.decrypt = function (secureKey, secureIV, data) { return cordova(this, "decrypt", {}, arguments); };
    AES256.prototype.generateSecureKey = function (password) { return cordova(this, "generateSecureKey", {}, arguments); };
    AES256.prototype.generateSecureIV = function (password) { return cordova(this, "generateSecureIV", {}, arguments); };
    AES256.pluginName = "AES256";
    AES256.plugin = "cordova-plugin-aes256-encryption";
    AES256.pluginRef = "cordova.plugins.AES256";
    AES256.repo = "https://github.com/Ideas2IT/cordova-aes256";
    AES256.platforms = ["Android", "iOS"];
    AES256.install = "ionic cordova plugin add cordova-plugin-aes256-encryption";
    AES256.decorators = [
        { type: Injectable }
    ];
    return AES256;
}(AwesomeCordovaNativePlugin));
export { AES256 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYWVzLTI1Ni9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQzs7SUF1RGhFLDBCQUEwQjs7OztJQVVwRCx3QkFBTyxhQUFDLFNBQWlCLEVBQUUsUUFBZ0IsRUFBRSxJQUFZO0lBYXpELHdCQUFPLGFBQUMsU0FBaUIsRUFBRSxRQUFnQixFQUFFLElBQVk7SUFZekQsa0NBQWlCLGFBQUMsUUFBZ0I7SUFZbEMsaUNBQWdCLGFBQUMsUUFBZ0I7Ozs7Ozs7O2dCQWhEbEMsVUFBVTs7aUJBdkRYO0VBd0Q0QiwwQkFBMEI7U0FBekMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBBRVMyNTZcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgY29yZG92YSBpb25pYyBwbHVnaW4gYWxsb3dzIHlvdSB0byBwZXJmb3JtIEFFUyAyNTYgZW5jcnlwdGlvbiBhbmQgZGVjcnlwdGlvbiBvbiB0aGUgcGxhaW4gdGV4dC5cclxuICogSXQncyBhIGNyb3NzLXBsYXRmb3JtIHBsdWdpbiB3aGljaCBzdXBwb3J0cyBib3RoIEFuZHJvaWQgYW5kIGlPUy5cclxuICogVGhlIGVuY3J5cHRpb24gYW5kIGRlY3J5cHRpb24gYXJlIHBlcmZvcm1lZCBvbiB0aGUgZGV2aWNlIG5hdGl2ZSBsYXllciBzbyB0aGF0IHRoZSBwZXJmb3JtYW5jZSBpcyBtdWNoIGZhc3Rlci5cclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgQUVTMjU2IH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2Flcy0yNTYvbmd4JztcclxuICpcclxuICogcHJpdmF0ZSBzZWN1cmVLZXk6IHN0cmluZztcclxuICogcHJpdmF0ZSBzZWN1cmVJVjogc3RyaW5nO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGFlczI1NjogQUVTMjU2KSB7XHJcbiAqICAgIHRoaXMuZ2VuZXJhdGVTZWN1cmVLZXlBbmRJVigpOyAvLyBUbyBnZW5lcmF0ZSB0aGUgcmFuZG9tIHNlY3VyZUtleSBhbmQgc2VjdXJlSVZcclxuICogfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogYXN5bmMgZ2VuZXJhdGVTZWN1cmVLZXlBbmRJVigpIHtcclxuICogICAgdGhpcy5zZWN1cmVLZXkgPSBhd2FpdCB0aGlzLmFlczI1Ni5nZW5lcmF0ZVNlY3VyZUtleSgncmFuZG9tIHBhc3N3b3JkIDEyMzQ1Jyk7IC8vIFJldHVybnMgYSAzMiBieXRlcyBzdHJpbmdcclxuICogICAgdGhpcy5zZWN1cmVJViA9IGF3YWl0IHRoaXMuYWVzMjU2LmdlbmVyYXRlU2VjdXJlSVYoJ3JhbmRvbSBwYXNzd29yZCAxMjM0NScpOyAvLyBSZXR1cm5zIGEgMTYgYnl0ZXMgc3RyaW5nXHJcbiAqIH1cclxuICpcclxuICogdGhpcy5hZXMyNTYuZW5jcnlwdCh0aGlzLnNlY3VyZUtleSwgdGhpcy5zZWN1cmVJViwgJ3Rlc3RkYXRhJylcclxuICogICAudGhlbihyZXMgPT4gY29uc29sZS5sb2coJ0VuY3J5cHRlZCBEYXRhOiAnLHJlcykpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIHRoaXMuYWVzMjU2LmRlY3J5cHQodGhpcy5zZWN1cmVLZXksIHRoaXMuc2VjdXJlSVYsICdlbmNyeXB0ZWREYXRhJylcclxuICogICAudGhlbihyZXMgPT4gY29uc29sZS5sb2coJ0RlY3J5cHRlZCBEYXRhIDogJyxyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKlxyXG4gKiB0aGlzLmFlczI1Ni5nZW5lcmF0ZVNlY3VyZUtleSgncmFuZG9tIHBhc3N3b3JkIDEyMzQ1JylcclxuICogICAudGhlbihyZXMgPT4gY29uc29sZS5sb2coJ1NlY3VyZSBLZXkgOiAnLHJlcykpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqXHJcbiAqIHRoaXMuYWVzMjU2LmdlbmVyYXRlU2VjdXJlSVYoJ3JhbmRvbSBwYXNzd29yZCAxMjM0NScpXHJcbiAqICAgLnRoZW4ocmVzID0+IGNvbnNvbGUubG9nKCdTZWN1cmUgSVYgOiAnLHJlcykpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0FFUzI1NicsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYWVzMjU2LWVuY3J5cHRpb24nLFxyXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5BRVMyNTYnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vSWRlYXMySVQvY29yZG92YS1hZXMyNTYnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG4gIGluc3RhbGw6ICdpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1wbHVnaW4tYWVzMjU2LWVuY3J5cHRpb24nLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBBRVMyNTYgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBmdW5jdGlvbiB1c2VkIHRvIHBlcmZvcm0gdGhlIGFlczI1NiBlbmNyeXB0aW9uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VjdXJlS2V5IEEgMzIgYnl0ZXMgc3RyaW5nLCB3aGljaCB3aWxsIHVzZWQgYXMgaW5wdXQga2V5IGZvciBBRVMyNTYgZW5jcnlwdGlvbi5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VjdXJlSVYgQSAxNiBieXRlcyBzdHJpbmcsIHdoaWNoIHdpbGwgdXNlZCBhcyBpbml0aWFsIHZlY3RvciBmb3IgQUVTMjU2IGVuY3J5cHRpb24uXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGEgQSBzdHJpbmcgd2hpY2ggd2lsbCBiZSBlbmNyeXB0ZWRcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gZW5jcnlwdGlvbiBoYXBwZW5zLiBUaGUgc3VjY2VzcyByZXNwb25zZSB3aWxsIHJldHVybnMgZW5jcnlwdGVkIGRhdGEuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGVuY3J5cHQoc2VjdXJlS2V5OiBzdHJpbmcsIHNlY3VyZUlWOiBzdHJpbmcsIGRhdGE6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIGZ1bmN0aW9uIHVzZWQgdG8gcGVyZm9ybSB0aGUgYWVzMjU2IGRlY3J5cHRpb25cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWN1cmVLZXkgQSAzMiBieXRlcyBzdHJpbmcsIHdoaWNoIHdpbGwgdXNlZCBhcyBpbnB1dCBrZXkgZm9yIEFFUzI1NiBkZWNyeXB0aW9uLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWN1cmVJViBBIDE2IGJ5dGVzIHN0cmluZywgd2hpY2ggd2lsbCB1c2VkIGFzIGluaXRpYWwgdmVjdG9yIGZvciBBRVMyNTYgZGVjcnlwdGlvbi5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YSBBbiBBRVMyNTYgZW5jcnlwdGVkIGRhdGEgd2hpY2ggd2lsbCBiZSBkZWNyeXB0ZWQuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGRlY3J5cHRpb24gaGFwcGVucy4gVGhlIHN1Y2Nlc3MgcmVzcG9uc2Ugd2lsbCByZXR1cm5zIGRlY3J5cHRlZCBkYXRhLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBkZWNyeXB0KHNlY3VyZUtleTogc3RyaW5nLCBzZWN1cmVJVjogc3RyaW5nLCBkYXRhOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBmdW5jdGlvbiB1c2VkIHRvIGdlbmVyYXRlIGEgc2VjdXJlIGtleSBiYXNlZCBvbiBhbiBwYXNzd29yZC4gUGVyZmVjdCBpZiB5b3Ugd2FudCB0byBkZWxlZ2F0ZSB0aGUga2V5IGdlbmVyYXRpb24gZm9yIGVuY3J5cHRpb24gdG8gdGhlIHBsdWdpbi5cclxuICAgKiBNYWtlIHN1cmUgdG8gc2F2ZSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoaXMgZnVuY3Rpb24gc29tZXdoZXJlIHNvIHlvdXIgZW5jcnlwdGVkIGRhdGEgY2FuIGJlIGRlY3J5cHRlZCBpbiB0aGUgZnV0dXJlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIEEgcmFuZG9tIHN0cmluZywgd2hpY2ggd2lsbCBiZSB1c2VkIGFzIGlucHV0IGZvciBhIFBCS0RGMiBmdW5jdGlvblxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBrZXkgaXMgZ2VuZXJhdGVkLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZW5lcmF0ZVNlY3VyZUtleShwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgZnVuY3Rpb24gdXNlZCB0byBnZW5lcmF0ZSBhIHNlY3VyZSBJViBiYXNlZCBvbiBhbiBwYXNzd29yZC4gUGVyZmVjdCBpZiB5b3Ugd2FudCB0byBkZWxlZ2F0ZSB0aGUgSVYgZ2VuZXJhdGlvbiBmb3IgZW5jcnlwdGlvbiB0byB0aGUgcGx1Z2luLlxyXG4gICAqIE1ha2Ugc3VyZSB0byBzYXZlIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhpcyBmdW5jdGlvbiBzb21ld2hlcmUgc28geW91ciBlbmNyeXB0ZWQgZGF0YSBjYW4gYmUgZGVjcnlwdGVkIGluIHRoZSBmdXR1cmUuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgQSByYW5kb20gc3RyaW5nLCB3aGljaCB3aWxsIGJlIHVzZWQgYXMgaW5wdXQgZm9yIGEgUEJLREYyIGZ1bmN0aW9uXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIElWIGlzIGdlbmVyYXRlZC5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2VuZXJhdGVTZWN1cmVJVihwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19