var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
/**
 * TokeniseType: define the behaviour of of saving card option inside the SDKs.
 */
export var TokeniseType;
(function (TokeniseType) {
    /**
     * none: tokenise is off
     */
    TokeniseType["none"] = "none";
    /**
     * merchantMandatory: tokenise is forced
     */
    TokeniseType["merchantMandatory"] = "merchantMandatory";
    /**
     * userMandatory: tokenise is forced as per user approval
     */
    TokeniseType["userMandatory"] = "userMandatory";
    /**
     * userOptinoal: tokenise if optional as per user approval
     */
    TokeniseType["userOptinoal"] = "userOptinoal";
})(TokeniseType || (TokeniseType = {}));
/**
 * TokeniseFromat: the returned token format
 */
export var TokeniseFromat;
(function (TokeniseFromat) {
    /**
     * none: no format
     */
    TokeniseFromat["none"] = "1";
    /**
     * hex32: Hex with 32 length
     */
    TokeniseFromat["hex32"] = "2";
    /**
     * alphaNum20: alpha numeric 20 length
     */
    TokeniseFromat["alphaNum20"] = "3";
    /**
     * digit22: digits with 22 length
     */
    TokeniseFromat["digit22"] = "3";
    /**
     * digit16: digits with 16 length
     */
    TokeniseFromat["digit16"] = "5";
    /**
     * alphaNum32: alpha numeric 32 length
     */
    TokeniseFromat["alphaNum32"] = "6";
})(TokeniseFromat || (TokeniseFromat = {}));
/**
 * TransactionType
 */
export var TransactionType;
(function (TransactionType) {
    /**
     * sale
     */
    TransactionType["sale"] = "sale";
    /**
     * authorize / capture option
     */
    TransactionType["authorize"] = "auth";
})(TransactionType || (TransactionType = {}));
/**
 * TransactionClass
 */
export var TransactionClass;
(function (TransactionClass) {
    /**
     * ecom: default transaction
     */
    TransactionClass["ecom"] = "ecom";
    /**
     * recurring: recurring transaction
     */
    TransactionClass["recurring"] = "recur";
})(TransactionClass || (TransactionClass = {}));
/**
 * AlternativePaymentMethod
 */
export var AlternativePaymentMethod;
(function (AlternativePaymentMethod) {
    /**
     * unionpay: for supporting payment with unionpay
     */
    AlternativePaymentMethod["unionPay"] = "unionpay";
    /**
     * stcpay: for supporting payment with stcpay
     */
    AlternativePaymentMethod["stcPay"] = "stcpay";
    /**
     * valu: for supporting payment with valu
     */
    AlternativePaymentMethod["valu"] = "valu";
    /**
     * meezaqr: for supporting payment with meezaqr
     */
    AlternativePaymentMethod["meezaQR"] = "meezaqr";
    /**
     * omannet: for supporting payment with omannet
     */
    AlternativePaymentMethod["omannet"] = "omannet";
    /**
     * knetcredit: for supporting payment with knetcredit
     */
    AlternativePaymentMethod["knetCredit"] = "knetcredit";
    /**
     * knetdebit: for supporting payment with knetdebit
     */
    AlternativePaymentMethod["knetDebit"] = "knetdebit";
    /**
     * fawry: for supporting payment with fawry
     */
    AlternativePaymentMethod["fawry"] = "fawry";
})(AlternativePaymentMethod || (AlternativePaymentMethod = {}));
var PayTabsOriginal = /** @class */ (function (_super) {
    __extends(PayTabsOriginal, _super);
    function PayTabsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PayTabsOriginal.prototype.startCardPayment = function (configuration) { return cordova(this, "startCardPayment", {}, arguments); };
    PayTabsOriginal.prototype.startApplePayPayment = function (configuration) { return cordova(this, "startApplePayPayment", {}, arguments); };
    PayTabsOriginal.prototype.startAlternativePaymentMethod = function (configuration) { return cordova(this, "startAlternativePaymentMethod", {}, arguments); };
    PayTabsOriginal.pluginName = "PayTabs";
    PayTabsOriginal.plugin = "com.paytabs.cordova.plugin";
    PayTabsOriginal.pluginRef = "com.paytabs.cordova.plugin";
    PayTabsOriginal.repo = "https://github.com/paytabscom/paytabs-cordova";
    PayTabsOriginal.platforms = ["Android", "iOS"];
    return PayTabsOriginal;
}(AwesomeCordovaNativePlugin));
var PayTabs = new PayTabsOriginal();
export { PayTabs };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvcGF5dGFicy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQztBQWtSNUY7O0dBRUc7QUFDSCxNQUFNLENBQU4sSUFBWSxZQWlCWDtBQWpCRCxXQUFZLFlBQVk7SUFDdEI7O09BRUc7SUFDSCw2QkFBYSxDQUFBO0lBQ2I7O09BRUc7SUFDSCx1REFBdUMsQ0FBQTtJQUN2Qzs7T0FFRztJQUNILCtDQUErQixDQUFBO0lBQy9COztPQUVHO0lBQ0gsNkNBQTZCLENBQUE7QUFDL0IsQ0FBQyxFQWpCVyxZQUFZLEtBQVosWUFBWSxRQWlCdkI7QUFFRDs7R0FFRztBQUNILE1BQU0sQ0FBTixJQUFZLGNBeUJYO0FBekJELFdBQVksY0FBYztJQUN4Qjs7T0FFRztJQUNILDRCQUFVLENBQUE7SUFDVjs7T0FFRztJQUNILDZCQUFXLENBQUE7SUFDWDs7T0FFRztJQUNILGtDQUFnQixDQUFBO0lBQ2hCOztPQUVHO0lBQ0gsK0JBQWEsQ0FBQTtJQUNiOztPQUVHO0lBQ0gsK0JBQWEsQ0FBQTtJQUNiOztPQUVHO0lBQ0gsa0NBQWdCLENBQUE7QUFDbEIsQ0FBQyxFQXpCVyxjQUFjLEtBQWQsY0FBYyxRQXlCekI7QUFFRDs7R0FFRztBQUNILE1BQU0sQ0FBTixJQUFZLGVBU1g7QUFURCxXQUFZLGVBQWU7SUFDekI7O09BRUc7SUFDSCxnQ0FBYSxDQUFBO0lBQ2I7O09BRUc7SUFDSCxxQ0FBa0IsQ0FBQTtBQUNwQixDQUFDLEVBVFcsZUFBZSxLQUFmLGVBQWUsUUFTMUI7QUFFRDs7R0FFRztBQUNILE1BQU0sQ0FBTixJQUFZLGdCQVNYO0FBVEQsV0FBWSxnQkFBZ0I7SUFDMUI7O09BRUc7SUFDSCxpQ0FBYSxDQUFBO0lBQ2I7O09BRUc7SUFDSCx1Q0FBbUIsQ0FBQTtBQUNyQixDQUFDLEVBVFcsZ0JBQWdCLEtBQWhCLGdCQUFnQixRQVMzQjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxDQUFOLElBQVksd0JBaUNYO0FBakNELFdBQVksd0JBQXdCO0lBQ2xDOztPQUVHO0lBQ0gsaURBQXFCLENBQUE7SUFDckI7O09BRUc7SUFDSCw2Q0FBaUIsQ0FBQTtJQUNqQjs7T0FFRztJQUNILHlDQUFhLENBQUE7SUFDYjs7T0FFRztJQUNILCtDQUFtQixDQUFBO0lBQ25COztPQUVHO0lBQ0gsK0NBQW1CLENBQUE7SUFDbkI7O09BRUc7SUFDSCxxREFBeUIsQ0FBQTtJQUN6Qjs7T0FFRztJQUNILG1EQUF1QixDQUFBO0lBQ3ZCOztPQUVHO0lBQ0gsMkNBQWUsQ0FBQTtBQUNqQixDQUFDLEVBakNXLHdCQUF3QixLQUF4Qix3QkFBd0IsUUFpQ25DOztJQTRENEIsMkJBQTBCOzs7O0lBU3JELGtDQUFnQixhQUFDLGFBQXNDO0lBV3ZELHNDQUFvQixhQUFDLGFBQXNDO0lBVzNELCtDQUE2QixhQUFDLGFBQXNDOzs7Ozs7a0JBbGV0RTtFQW1jNkIsMEJBQTBCO1NBQTFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG4vKipcclxuICogUGF5bWVudFNES0NvbmZpZ3VyYXRpb246IHBheW1lbnQgcmVxdWVzdCBjb25maWd1cmF0aW9uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFBheW1lbnRTREtDb25maWd1cmF0aW9uIHtcclxuICAvKipcclxuICAgKiBtZXJjaGFudCBwcm9maWxlIGlkXHJcbiAgICovXHJcbiAgcHJvZmlsZUlEOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogbWVyY2hhbnQgc2VydmVyIGtleVxyXG4gICAqL1xyXG4gIHNlcnZlcktleTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIG1lcmNoYW50IGNsaWVudCBrZXlcclxuICAgKi9cclxuICBjbGllbnRLZXk6IHN0cmluZztcclxuICAvKipcclxuICAgKiB0cmFuc2FjdGlvbiB0eXBlOiByZWZlciB0byBUcmFuc2FjdGlvblR5cGUgZW51bVxyXG4gICAqL1xyXG4gIHRyYW5zYWN0aW9uVHlwZT86IHN0cmluZztcclxuICAvKipcclxuICAgKiB0cmFuc2FjdGlvbiBjbGFzczogcmVmZXIgdG8gVHJhbnNhY3Rpb25DbGFzcyBlbnVtXHJcbiAgICovXHJcbiAgdHJhbnNhY3Rpb25DbGFzcz86IHN0cmluZztcclxuICAvKipcclxuICAgKiBvcmRlciBvciBjYXJ0IGlkXHJcbiAgICovXHJcbiAgY2FydElEOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogcGF5bWVudCBjdXJyZW5jeVxyXG4gICAqL1xyXG4gIGN1cnJlbmN5OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogYW1vdW50XHJcbiAgICovXHJcbiAgYW1vdW50OiBudW1iZXI7XHJcbiAgLyoqXHJcbiAgICogb3JkZXIgb3IgY2FydCBkZXNjcmlwdGlvblxyXG4gICAqL1xyXG4gIGNhcnREZXNjcmlwdGlvbjogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIHVzZXIgaW50ZXJmYWNlIGxhbmd1YWdlIGNvZGUoZW4sIGFyLCAuLilcclxuICAgKi9cclxuICBsYW5ndWFnZUNvZGU/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogdmFsaWRhdGUgc2hpcHBpbmcgaW5mb1xyXG4gICAqL1xyXG4gIGZvcmNlU2hpcHBpbmdJbmZvPzogYm9vbGVhbjtcclxuICAvKipcclxuICAgKiB2YWxpZGF0ZSBiaWxsaW5nIGluZm9cclxuICAgKi9cclxuICBzaG93QmlsbGluZ0luZm8/OiBib29sZWFuO1xyXG4gIC8qKlxyXG4gICAqIGhhbmRsZSBtaXNzaW5nIHNoaXBwaW5nIGluZm8gYnkgc2hvd2luZyBzaGlwcGluZyBpbmZvIHNlY3Rpb25cclxuICAgKi9cclxuICBzaG93U2hpcHBpbmdJbmZvPzogYm9vbGVhbjtcclxuICAvKipcclxuICAgKiBjb25maWd1cmVkIGJpbGxpbmcgZGV0YWlsc1xyXG4gICAqL1xyXG4gIGJpbGxpbmdEZXRhaWxzPzogUGF5bWVudFNES0JpbGxpbmdEZXRhaWxzO1xyXG4gIC8qKlxyXG4gICAqIGNvbmZpZ3VyZWQgc2hpcHBpbmcgZGV0YWlsc1xyXG4gICAqL1xyXG4gIHNoaXBwaW5nRGV0YWlscz86IFBheW1lbnRTREtTaGlwcGluZ0RldGFpbHM7XHJcbiAgLyoqXHJcbiAgICogbWVyY2hhbnQgY291bnRyeSBjb2RlXHJcbiAgICovXHJcbiAgbWVyY2hhbnRDb3VudHJ5Q29kZTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIHRpdGxlIG9mIHRoZSBzY3JlZW5cclxuICAgKi9cclxuICBzY3JlZW5UaXRsZT86IHN0cmluZztcclxuICAvKipcclxuICAgKiBtZXJjaGFudCBuYW1lXHJcbiAgICovXHJcbiAgbWVyY2hhbnROYW1lPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIHNlcnZlciBpcFxyXG4gICAqL1xyXG4gIHNlcnZlcklQPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIHRva2VuaXNlIHR5cGU6IHJlZmVyIHRvIFRva2Vpc2VUeXBlIGVudW1cclxuICAgKi9cclxuICB0b2tlbmlzZVR5cGU/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogdG9rZW4gZm9ybWF0OiByZWZlciB0byBUb2tlaXNlRm9ybWF0IGVudW1cclxuICAgKi9cclxuICB0b2tlbkZvcm1hdD86IHN0cmluZztcclxuICAvKipcclxuICAgKiBvcHRpb24gdG8gaGlkZSBvciBzaG93IGNhcmQgc2Nhbm5lciBidXR0b25cclxuICAgKi9cclxuICBoaWRlQ2FyZFNjYW5uZXI/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogbWVyY2hhbnQgYXBwbGUgcGF5IGJ1bmRsZSBpZFxyXG4gICAqL1xyXG4gIG1lcmNoYW50QXBwbGVQYXlJZGVudGlmaWVyPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIG1pbml6ZSB0aGUgdmxhaWRhdGlvbiBvbiBhcHBsZSBwYXkgYmlsbGluZyBhbmQgc2hpcHBpbmcgaW5mb1xyXG4gICAqL1xyXG4gIHNpbXBsaWZ5QXBwbGVQYXlWYWxpZGF0aW9uPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIHN1cHBvcnRlZCBhcHBsZSBwYXkgbmV0d29ya3NcclxuICAgKi9cclxuICBzdXBwb3J0ZWRBcHBsZVBheU5ldHdvcmtzPzogW3N0cmluZ107XHJcbiAgLyoqXHJcbiAgICogcmV0dXJuZWQgdG9rZW5cclxuICAgKi9cclxuICB0b2tlbj86IHN0cmluZztcclxuICAvKipcclxuICAgKiByZXR1cm5lZCB0cmFuc2FjdGlvbiByZWZlcmVuY2VcclxuICAgKi9cclxuICB0cmFuc2FjdGlvblJlZmVyZW5jZT86IHN0cmluZztcclxuICAvKipcclxuICAgKiBzYW1zdW5nIFRva2VuXHJcbiAgICovXHJcbiAgc2Ftc3VuZ1Rva2VuPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIGN1c3RvbWl6ZWQgdGhlbWVcclxuICAgKi9cclxuICB0aGVtZT86IFBheW1lbnRTREtUaGVtZTtcclxuICAvKipcclxuICAgKiBsaXN0IG9mIGFsdGVybmF0aXZlIHBheW1lbnQgbWV0aG9kc1xyXG4gICAqL1xyXG4gIGFsdGVybmF0aXZlUGF5bWVudE1ldGhvZHM/OiBbc3RyaW5nXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFBheW1lbnRTREtCaWxsaW5nRGV0YWlsc1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQYXltZW50U0RLQmlsbGluZ0RldGFpbHMge1xyXG4gIC8qKlxyXG4gICAqIGJpbGxpbmc6IGN1c3RvbWVyIG5hbWVcclxuICAgKi9cclxuICBuYW1lPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIGJpbGxpbmc6IGN1c3RvbWVyIGVtYWlsXHJcbiAgICovXHJcbiAgZW1haWw/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogYmlsbGluZzogY3VzdG9tZXIgcGhvbmVcclxuICAgKi9cclxuICBwaG9uZT86IHN0cmluZztcclxuICAvKipcclxuICAgKiBiaWxsaW5nOiBjdXN0b21lciBhZGRyZXNzIGxpbmVcclxuICAgKi9cclxuICBhZGRyZXNzTGluZT86IHN0cmluZztcclxuICAvKipcclxuICAgKiBiaWxsaW5nOiBjdXN0b21lciBjaXR5XHJcbiAgICovXHJcbiAgY2l0eT86IHN0cmluZztcclxuICAvKipcclxuICAgKiBiaWxsaW5nOiBjdXN0b21lciBzdGF0ZVxyXG4gICAqL1xyXG4gIHN0YXRlPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIGJpbGxpbmc6IGN1c3RvbWVyIGNvdW50cnkgY29kZVxyXG4gICAqL1xyXG4gIGNvdW50cnlDb2RlPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIGJpbGxpbmc6IGN1c3RvbWVyIHppcCBjb2RlXHJcbiAgICovXHJcbiAgemlwPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogUGF5bWVudFNES1NoaXBwaW5nRGV0YWlsc1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQYXltZW50U0RLU2hpcHBpbmdEZXRhaWxzIHtcclxuICAvKipcclxuICAgKiAgc2hpcHBpbmc6IGN1c3RvbWVyIG5hbWVcclxuICAgKi9cclxuICBuYW1lPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIHNoaXBwaW5nOiBjdXN0b21lciBlbWFpbFxyXG4gICAqL1xyXG4gIGVtYWlsPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIHNoaXBwaW5nOiBjdXN0b21lciBwaG9uZVxyXG4gICAqL1xyXG4gIHBob25lPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIHNoaXBwaW5nOiBjdXN0b21lciBhZGRyZXNzIGxpbmVcclxuICAgKi9cclxuICBhZGRyZXNzTGluZT86IHN0cmluZztcclxuICAvKipcclxuICAgKiBzaGlwcGluZzogY3VzdG9tZXIgY2l0eVxyXG4gICAqL1xyXG4gIGNpdHk/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogc2hpcHBpbmc6IGN1c3RvbWVyIHN0YXRlXHJcbiAgICovXHJcbiAgc3RhdGU/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogc2hpcHBpbmc6IGN1c3RvbWVyIGNvdW50cnkgY29kZVxyXG4gICAqL1xyXG4gIGNvdW50cnlDb2RlPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIHNoaXBwaW5nOiBjdXN0b21lciB6aXAgY29kZVxyXG4gICAqL1xyXG4gIHppcD86IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIFBheW1lbnRTREtUaGVtZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQYXltZW50U0RLVGhlbWUge1xyXG4gIC8qKlxyXG4gICAqIHRoZW1lOiBwcmltYXJ5IGNvbG9yXHJcbiAgICovXHJcbiAgcHJpbWFyeUNvbG9yPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIHRoZW1lOiBwcmltYXJ5IGZvbnQgY29sb3JcclxuICAgKi9cclxuICBwcmltYXJ5Rm9udENvbG9yPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIHRoZW1lOiBwcmltYXJ5IGZvbnRcclxuICAgKi9cclxuICBwcmltYXJ5Rm9udD86IHN0cmluZztcclxuICAvKipcclxuICAgKiB0aGVtZTogc2Vjb25kYXJ5IGNvbG9yXHJcbiAgICovXHJcbiAgc2Vjb25kYXJ5Q29sb3I/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogdGhlbWU6IHNlY29uZGFyeSBmb250IGNvbG9yXHJcbiAgICovXHJcbiAgc2Vjb25kYXJ5Rm9udENvbG9yPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIHRoZW1lOiBzZWNvbmRhcnkgZm9udFxyXG4gICAqL1xyXG4gIHNlY29uZGFyeUZvbnQ/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogdGhlbWU6IHN0cm9rZSBjb2xvclxyXG4gICAqL1xyXG4gIHN0cm9rZUNvbG9yPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIHRoZW1lOiBwcmltYXJ5IGNvbG9yXHJcbiAgICovXHJcbiAgc3Ryb2tlVGhpbmNrbmVzcz86IG51bWJlcjtcclxuICAvKipcclxuICAgKiB0aGVtZTogaW5wdXQgY29ybmVyIHJhZGl1c1xyXG4gICAqL1xyXG4gIGlucHV0c0Nvcm5lclJhZGl1cz86IG51bWJlcjtcclxuICAvKipcclxuICAgKiB0aGVtZTogYnV0dG9uIGNvbG9yXHJcbiAgICovXHJcbiAgYnV0dG9uQ29sb3I/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogdGhlbWU6IGJ1dHRvbiBmb250IGNvbG9yXHJcbiAgICovXHJcbiAgYnV0dG9uRm9udENvbG9yPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIHRoZW1lOiBidXR0b24gZm9udFxyXG4gICAqL1xyXG4gIGJ1dHRvbkZvbnQ/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogdGhlbWU6IHRpdGxlIGZvbnQgY29sb3JcclxuICAgKi9cclxuICB0aXRsZUZvbnRDb2xvcj86IHN0cmluZztcclxuICAvKipcclxuICAgKiB0aGVtZTogdGl0bGUgZm9udFxyXG4gICAqL1xyXG4gIHRpdGxlRm9udD86IHN0cmluZztcclxuICAvKipcclxuICAgKiB0aGVtZTogYmFja2dyb3VuZCBjb2xvclxyXG4gICAqL1xyXG4gIGJhY2tncm91bmRDb2xvcj86IHN0cmluZztcclxuICAvKipcclxuICAgKiB0aGVtZTogcGxhY2Vob2xkZXIgY29sb3JcclxuICAgKi9cclxuICBwbGFjZWhvbGRlckNvbG9yPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogVG9rZW5pc2VUeXBlOiBkZWZpbmUgdGhlIGJlaGF2aW91ciBvZiBvZiBzYXZpbmcgY2FyZCBvcHRpb24gaW5zaWRlIHRoZSBTREtzLlxyXG4gKi9cclxuZXhwb3J0IGVudW0gVG9rZW5pc2VUeXBlIHtcclxuICAvKipcclxuICAgKiBub25lOiB0b2tlbmlzZSBpcyBvZmZcclxuICAgKi9cclxuICBub25lID0gJ25vbmUnLFxyXG4gIC8qKlxyXG4gICAqIG1lcmNoYW50TWFuZGF0b3J5OiB0b2tlbmlzZSBpcyBmb3JjZWRcclxuICAgKi9cclxuICBtZXJjaGFudE1hbmRhdG9yeSA9ICdtZXJjaGFudE1hbmRhdG9yeScsXHJcbiAgLyoqXHJcbiAgICogdXNlck1hbmRhdG9yeTogdG9rZW5pc2UgaXMgZm9yY2VkIGFzIHBlciB1c2VyIGFwcHJvdmFsXHJcbiAgICovXHJcbiAgdXNlck1hbmRhdG9yeSA9ICd1c2VyTWFuZGF0b3J5JyxcclxuICAvKipcclxuICAgKiB1c2VyT3B0aW5vYWw6IHRva2VuaXNlIGlmIG9wdGlvbmFsIGFzIHBlciB1c2VyIGFwcHJvdmFsXHJcbiAgICovXHJcbiAgdXNlck9wdGlub2FsID0gJ3VzZXJPcHRpbm9hbCcsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUb2tlbmlzZUZyb21hdDogdGhlIHJldHVybmVkIHRva2VuIGZvcm1hdFxyXG4gKi9cclxuZXhwb3J0IGVudW0gVG9rZW5pc2VGcm9tYXQge1xyXG4gIC8qKlxyXG4gICAqIG5vbmU6IG5vIGZvcm1hdFxyXG4gICAqL1xyXG4gIG5vbmUgPSAnMScsXHJcbiAgLyoqXHJcbiAgICogaGV4MzI6IEhleCB3aXRoIDMyIGxlbmd0aFxyXG4gICAqL1xyXG4gIGhleDMyID0gJzInLFxyXG4gIC8qKlxyXG4gICAqIGFscGhhTnVtMjA6IGFscGhhIG51bWVyaWMgMjAgbGVuZ3RoXHJcbiAgICovXHJcbiAgYWxwaGFOdW0yMCA9ICczJyxcclxuICAvKipcclxuICAgKiBkaWdpdDIyOiBkaWdpdHMgd2l0aCAyMiBsZW5ndGhcclxuICAgKi9cclxuICBkaWdpdDIyID0gJzMnLFxyXG4gIC8qKlxyXG4gICAqIGRpZ2l0MTY6IGRpZ2l0cyB3aXRoIDE2IGxlbmd0aFxyXG4gICAqL1xyXG4gIGRpZ2l0MTYgPSAnNScsXHJcbiAgLyoqXHJcbiAgICogYWxwaGFOdW0zMjogYWxwaGEgbnVtZXJpYyAzMiBsZW5ndGhcclxuICAgKi9cclxuICBhbHBoYU51bTMyID0gJzYnLFxyXG59XHJcblxyXG4vKipcclxuICogVHJhbnNhY3Rpb25UeXBlXHJcbiAqL1xyXG5leHBvcnQgZW51bSBUcmFuc2FjdGlvblR5cGUge1xyXG4gIC8qKlxyXG4gICAqIHNhbGVcclxuICAgKi9cclxuICBzYWxlID0gJ3NhbGUnLFxyXG4gIC8qKlxyXG4gICAqIGF1dGhvcml6ZSAvIGNhcHR1cmUgb3B0aW9uXHJcbiAgICovXHJcbiAgYXV0aG9yaXplID0gJ2F1dGgnLFxyXG59XHJcblxyXG4vKipcclxuICogVHJhbnNhY3Rpb25DbGFzc1xyXG4gKi9cclxuZXhwb3J0IGVudW0gVHJhbnNhY3Rpb25DbGFzcyB7XHJcbiAgLyoqXHJcbiAgICogZWNvbTogZGVmYXVsdCB0cmFuc2FjdGlvblxyXG4gICAqL1xyXG4gIGVjb20gPSAnZWNvbScsXHJcbiAgLyoqXHJcbiAgICogcmVjdXJyaW5nOiByZWN1cnJpbmcgdHJhbnNhY3Rpb25cclxuICAgKi9cclxuICByZWN1cnJpbmcgPSAncmVjdXInLFxyXG59XHJcblxyXG4vKipcclxuICogQWx0ZXJuYXRpdmVQYXltZW50TWV0aG9kXHJcbiAqL1xyXG5leHBvcnQgZW51bSBBbHRlcm5hdGl2ZVBheW1lbnRNZXRob2Qge1xyXG4gIC8qKlxyXG4gICAqIHVuaW9ucGF5OiBmb3Igc3VwcG9ydGluZyBwYXltZW50IHdpdGggdW5pb25wYXlcclxuICAgKi9cclxuICB1bmlvblBheSA9ICd1bmlvbnBheScsXHJcbiAgLyoqXHJcbiAgICogc3RjcGF5OiBmb3Igc3VwcG9ydGluZyBwYXltZW50IHdpdGggc3RjcGF5XHJcbiAgICovXHJcbiAgc3RjUGF5ID0gJ3N0Y3BheScsXHJcbiAgLyoqXHJcbiAgICogdmFsdTogZm9yIHN1cHBvcnRpbmcgcGF5bWVudCB3aXRoIHZhbHVcclxuICAgKi9cclxuICB2YWx1ID0gJ3ZhbHUnLFxyXG4gIC8qKlxyXG4gICAqIG1lZXphcXI6IGZvciBzdXBwb3J0aW5nIHBheW1lbnQgd2l0aCBtZWV6YXFyXHJcbiAgICovXHJcbiAgbWVlemFRUiA9ICdtZWV6YXFyJyxcclxuICAvKipcclxuICAgKiBvbWFubmV0OiBmb3Igc3VwcG9ydGluZyBwYXltZW50IHdpdGggb21hbm5ldFxyXG4gICAqL1xyXG4gIG9tYW5uZXQgPSAnb21hbm5ldCcsXHJcbiAgLyoqXHJcbiAgICoga25ldGNyZWRpdDogZm9yIHN1cHBvcnRpbmcgcGF5bWVudCB3aXRoIGtuZXRjcmVkaXRcclxuICAgKi9cclxuICBrbmV0Q3JlZGl0ID0gJ2tuZXRjcmVkaXQnLFxyXG4gIC8qKlxyXG4gICAqIGtuZXRkZWJpdDogZm9yIHN1cHBvcnRpbmcgcGF5bWVudCB3aXRoIGtuZXRkZWJpdFxyXG4gICAqL1xyXG4gIGtuZXREZWJpdCA9ICdrbmV0ZGViaXQnLFxyXG4gIC8qKlxyXG4gICAqIGZhd3J5OiBmb3Igc3VwcG9ydGluZyBwYXltZW50IHdpdGggZmF3cnlcclxuICAgKi9cclxuICBmYXdyeSA9ICdmYXdyeScsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBQYXlUYWJzXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBIHBsdWdpbiB0aGF0IGFsbG93cyB5b3UgdG8gdXNlIFBheVRhYnMncyBOYXRpdmUgU0RLcyBmb3IgQW5kcm9pZCBhbmQgaU9TLlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBQYXlUYWJzIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BheXRhYnMvbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBwYXl0YWJzOiBQYXlUYWJzKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqIGxldCBiaWxsaW5nRGV0YWlsczogUGF5bWVudFNES0JpbGxpbmdEZXRhaWxzID0ge1xyXG4gKiAgICBuYW1lOiBcIkpvaG4gU21pdGhcIixcclxuICogICAgZW1haWw6IFwiZW1haWxAZG9tYWluLmNvbVwiLFxyXG4gKiAgICBwaG9uZTogXCIrMjAxMTExMTExMTExXCIsXHJcbiAqICAgIGFkZHJlc3NMaW5lOiBcIkFkZHJlc3MgbGluZVwiLFxyXG4gKiAgICBjaXR5OiBcIkR1YmFpXCIsXHJcbiAqICAgIHN0YXRlOiBcIkR1YmFpXCIsXHJcbiAqICAgIGNvdW50cnlDb2RlOiBcIkFFXCIsXHJcbiAqICAgIHppcDogXCIxMjM0XCJcclxuICogIH07XHJcbiAqXHJcbiAqIHZhciBjb25maWd1cmF0aW9uOiBQYXltZW50U0RLQ29uZmlndXJhdGlvbiA9IHtcclxuICogICAgcHJvZmlsZUlEOiBcIipwcm9maWxlIGlkKlwiLFxyXG4gKiAgICBzZXJ2ZXJLZXk6IFwiKnNlcnZlciBrZXkqXCIsXHJcbiAqICAgIGNsaWVudEtleTogXCIqY2xlaW50IGtleSpcIixcclxuICogICAgY2FydElEOiBcIjEyMzQ1XCIsXHJcbiAqICAgIGN1cnJlbmN5OiBcIlVTRFwiLFxyXG4gKiAgICBjYXJ0RGVzY3JpcHRpb246IFwiRmxvd2Vyc1wiLFxyXG4gKiAgICBtZXJjaGFudENvdW50cnlDb2RlOiBcImFlXCIsXHJcbiAqICAgIG1lcmNoYW50TmFtZTogXCJGbG93ZXJzIFN0b3JlXCIsXHJcbiAqICAgIGFtb3VudDogMjAsXHJcbiAqICAgIHNjcmVlblRpdGxlOlwiUGF5IHdpdGggQ2FyZFwiLFxyXG4gKiAgICBiaWxsaW5nRGV0YWlsczogYmlsbGluZ0RldGFpbHNcclxuICogIH1cclxuICpcclxuICogdGhpcy5wYXl0YWJzLnN0YXJ0Q2FyZFBheW1lbnQoY29uZmlndXJhdGlvbilcclxuICogICAgICAgICAgICAgICAgLnRoZW4ocmVzdWx0ID0+IGNvbnNvbGUubG9nKHJlc3VsdCkpXHJcbiAqICAgICAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIHRoaXMucGF5dGFicy5zdGFydEFwcGxlUGF5UGF5bWVudChjb25maWd1cmF0aW9uKVxyXG4gKiAgICAgICAgICAgICAgICAudGhlbihyZXN1bHQgPT4gY29uc29sZS5sb2cocmVzdWx0KSlcclxuICogICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogdGhpcy5wYXl0YWJzLnN0YXJ0QWx0ZXJuYXRpdmVQYXltZW50TWV0aG9kKGNvbmZpZ3VyYXRpb24pXHJcbiAqICAgICAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiBjb25zb2xlLmxvZyhyZXN1bHQpKVxyXG4gKiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdQYXlUYWJzJyxcclxuICBwbHVnaW46ICdjb20ucGF5dGFicy5jb3Jkb3ZhLnBsdWdpbicsXHJcbiAgcGx1Z2luUmVmOiAnY29tLnBheXRhYnMuY29yZG92YS5wbHVnaW4nLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vcGF5dGFic2NvbS9wYXl0YWJzLWNvcmRvdmEnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBQYXlUYWJzIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFN0YXJ0IENhcmQgUGF5bWVudFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHBhcmFtcyB7UGF5bWVudFNES0NvbmZpZ3VyYXRpb259IHBheW1lbnQgcmVxdWVzdCBjb25maWd1cmF0aW9uXHJcbiAgICogQHBhcmFtIGNvbmZpZ3VyYXRpb25cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdHJhbnNhY3Rpb24gZGV0YWlscywgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHN0YXJ0Q2FyZFBheW1lbnQoY29uZmlndXJhdGlvbjogUGF5bWVudFNES0NvbmZpZ3VyYXRpb24pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBTdGFydCBBcHBsZVBheSBQYXltZW50XHJcbiAgICpcclxuICAgKiBAcGFyYW0gcGFyYW1zIHtQYXltZW50U0RLQ29uZmlndXJhdGlvbn0gcGF5bWVudCByZXF1ZXN0IGNvbmZpZ3VyYXRpb25cclxuICAgKiBAcGFyYW0gY29uZmlndXJhdGlvblxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0cmFuc2FjdGlvbiBkZXRhaWxzLCBvciByZWplY3RzIHdpdGggYW4gZXJyb3JcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc3RhcnRBcHBsZVBheVBheW1lbnQoY29uZmlndXJhdGlvbjogUGF5bWVudFNES0NvbmZpZ3VyYXRpb24pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBTdGFydCBBbHRlcm5hdGl2ZSBQYXltZW50IE1ldGhvZFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHBhcmFtcyB7UGF5bWVudFNES0NvbmZpZ3VyYXRpb259IHBheW1lbnQgcmVxdWVzdCBjb25maWd1cmF0aW9uXHJcbiAgICogQHBhcmFtIGNvbmZpZ3VyYXRpb25cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdHJhbnNhY3Rpb24gZGV0YWlscywgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHN0YXJ0QWx0ZXJuYXRpdmVQYXltZW50TWV0aG9kKGNvbmZpZ3VyYXRpb246IFBheW1lbnRTREtDb25maWd1cmF0aW9uKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19