import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var Stripe = /** @class */ (function (_super) {
    __extends(Stripe, _super);
    function Stripe() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Stripe.prototype.setPublishableKey = function (publishableKey) { return cordova(this, "setPublishableKey", {}, arguments); };
    Stripe.prototype.createCardToken = function (params) { return cordova(this, "createCardToken", {}, arguments); };
    Stripe.prototype.createBankAccountToken = function (params) { return cordova(this, "createBankAccountToken", {}, arguments); };
    Stripe.prototype.validateCardNumber = function (cardNumber) { return cordova(this, "validateCardNumber", {}, arguments); };
    Stripe.prototype.validateCVC = function (cvc) { return cordova(this, "validateCVC", {}, arguments); };
    Stripe.prototype.validateExpiryDate = function (expMonth, expYear) { return cordova(this, "validateExpiryDate", {}, arguments); };
    Stripe.prototype.getCardType = function (cardNumber) { return cordova(this, "getCardType", {}, arguments); };
    Stripe.pluginName = "Stripe";
    Stripe.plugin = "cordova-plugin-stripe";
    Stripe.pluginRef = "cordova.plugins.stripe";
    Stripe.repo = "https://github.com/zyramedia/cordova-plugin-stripe";
    Stripe.platforms = ["Android", "Browser", "iOS"];
    Stripe.decorators = [
        { type: Injectable }
    ];
    return Stripe;
}(AwesomeCordovaNativePlugin));
export { Stripe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvc3RyaXBlL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQThJaEUsMEJBQTBCOzs7O0lBUXBELGtDQUFpQixhQUFDLGNBQXNCO0lBV3hDLGdDQUFlLGFBQUMsTUFBNkI7SUFXN0MsdUNBQXNCLGFBQUMsTUFBK0I7SUFXdEQsbUNBQWtCLGFBQUMsVUFBa0I7SUFXckMsNEJBQVcsYUFBQyxHQUFXO0lBWXZCLG1DQUFrQixhQUFDLFFBQWdCLEVBQUUsT0FBZTtJQVdwRCw0QkFBVyxhQUFDLFVBQWtCOzs7Ozs7O2dCQTVFL0IsVUFBVTs7aUJBOUlYO0VBK0k0QiwwQkFBMEI7U0FBekMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RyaXBlQ2FyZFRva2VuUGFyYW1zIHtcclxuICAvKipcclxuICAgKiBDYXJkIG51bWJlclxyXG4gICAqL1xyXG4gIG51bWJlcjogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIEV4cGlyeSBtb250aFxyXG4gICAqL1xyXG4gIGV4cE1vbnRoOiBudW1iZXI7XHJcbiAgLyoqXHJcbiAgICogRXhwaXJ5IHllYXJcclxuICAgKi9cclxuICBleHBZZWFyOiBudW1iZXI7XHJcbiAgLyoqXHJcbiAgICogQ1ZDIC8gQ1ZWXHJcbiAgICovXHJcbiAgY3ZjPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIENhcmRob2xkZXIgbmFtZVxyXG4gICAqL1xyXG4gIG5hbWU/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogQWRkcmVzcyBsaW5lIDFcclxuICAgKi9cclxuICBhZGRyZXNzX2xpbmUxPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIEFkZHJlc3MgbGluZSAyXHJcbiAgICovXHJcbiAgYWRkcmVzc19saW5lMj86IHN0cmluZztcclxuICAvKipcclxuICAgKiBDaXR5XHJcbiAgICovXHJcbiAgYWRkcmVzc19jaXR5Pzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFN0YXRlIC8gUHJvdmluY2VcclxuICAgKi9cclxuICBhZGRyZXNzX3N0YXRlPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIENvdW50cnlcclxuICAgKi9cclxuICBhZGRyZXNzX2NvdW50cnk/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogUG9zdGFsIGNvZGUgLyBaSVAgQ29kZVxyXG4gICAqL1xyXG4gIHBvc3RhbENvZGU/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogMy1sZXR0ZXIgSVNPIGNvZGUgZm9yIGN1cnJlbmN5XHJcbiAgICovXHJcbiAgY3VycmVuY3k/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RyaXBlQmFua0FjY291bnRQYXJhbXMge1xyXG4gIC8qKlxyXG4gICAqIFJvdXRpbmcgbnVtYmVyLlxyXG4gICAqL1xyXG4gIHJvdXRpbmdfbnVtYmVyOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogQWNjb3VudCBudW1iZXIuXHJcbiAgICovXHJcbiAgYWNjb3VudF9udW1iZXI6IHN0cmluZztcclxuICAvKipcclxuICAgKiBDdXJyZW5jeSBjb2RlLiBFeGFtcGxlOiBgVVNEYC5cclxuICAgKi9cclxuICBjdXJyZW5jeTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIENvdW50cnkgY29kZS4gRXhhbXBsZTogYFVTYC5cclxuICAgKi9cclxuICBjb3VudHJ5OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogQWNjb3VudCBob2xkZXIgbmFtZS5cclxuICAgKi9cclxuICBhY2NvdW50X2hvbGRlcl9uYW1lPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIEFjY291bnQgaG9sZGVyIHR5cGUuIFRoaXMgY2FuIGJlIGBpbmRpdmlkdWFsYCBvciBgY29tcGFueWAuXHJcbiAgICovXHJcbiAgYWNjb3VudF9ob2xkZXJfdHlwZT86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTdHJpcGVDYXJkVG9rZW5SZXMge1xyXG4gIC8qKlxyXG4gICAqIENhcmQgT2JqZWN0LlxyXG4gICAqL1xyXG4gIGNhcmQ6IHtcclxuICAgIGJyYW5kOiBzdHJpbmc7XHJcbiAgICBleHBfbW9udGg6IG51bWJlcjtcclxuICAgIGV4cF95ZWFyOiBudW1iZXI7XHJcbiAgICBmdW5kaW5nOiBzdHJpbmc7XHJcbiAgICBsYXN0NDogc3RyaW5nO1xyXG4gIH07XHJcbiAgLyoqXHJcbiAgICogVG9rZW4gUmVxdWVzdCBEYXRlIFRpbWUuXHJcbiAgICovXHJcbiAgY3JlYXRlZDogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIENhcmQgVG9rZW4uXHJcbiAgICovXHJcbiAgaWQ6IHN0cmluZztcclxuICAvKipcclxuICAgKiBTb3VyY2UgVHlwZSAoY2FyZCBvciBhY2NvdW50KS5cclxuICAgKi9cclxuICB0eXBlOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBTdHJpcGVcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEEgcGx1Z2luIHRoYXQgYWxsb3dzIHlvdSB0byB1c2UgU3RyaXBlJ3MgTmF0aXZlIFNES3MgZm9yIEFuZHJvaWQgYW5kIGlPUy5cclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgU3RyaXBlIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3N0cmlwZS9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0cmlwZTogU3RyaXBlKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIHRoaXMuc3RyaXBlLnNldFB1Ymxpc2hhYmxlS2V5KCdteV9wdWJsaXNoYWJsZV9rZXknKTtcclxuICpcclxuICogbGV0IGNhcmQgPSB7XHJcbiAqICBudW1iZXI6ICc0MjQyNDI0MjQyNDI0MjQyJyxcclxuICogIGV4cE1vbnRoOiAxMixcclxuICogIGV4cFllYXI6IDIwMjAsXHJcbiAqICBjdmM6ICcyMjAnXHJcbiAqIH1cclxuICpcclxuICogdGhpcy5zdHJpcGUuY3JlYXRlQ2FyZFRva2VuKGNhcmQpXHJcbiAqICAgIC50aGVuKHRva2VuID0+IGNvbnNvbGUubG9nKHRva2VuLmlkKSlcclxuICogICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIFN0cmlwZUNhcmRUb2tlblBhcmFtc1xyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ1N0cmlwZScsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc3RyaXBlJyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuc3RyaXBlJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3p5cmFtZWRpYS9jb3Jkb3ZhLXBsdWdpbi1zdHJpcGUnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ0Jyb3dzZXInLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFN0cmlwZSBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBTZXQgcHVibGlzaGFibGUga2V5XHJcbiAgICpcclxuICAgKiBAcGFyYW0gcHVibGlzaGFibGVLZXkge3N0cmluZ30gUHVibGlzaGFibGUga2V5XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldFB1Ymxpc2hhYmxlS2V5KHB1Ymxpc2hhYmxlS2V5OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBDcmVkaXQgQ2FyZCBUb2tlblxyXG4gICAqXHJcbiAgICogQHBhcmFtIHBhcmFtcyB7U3RyaXBlQ2FyZFRva2VuUGFyYW1zfSBDcmVkaXQgY2FyZCBpbmZvcm1hdGlvblxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFN0cmlwZUNhcmRUb2tlblJlcz59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgdG9rZW4gb2JqZWN0LCBvciByZWplY3RzIHdpdGggYW4gZXJyb3JcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgY3JlYXRlQ2FyZFRva2VuKHBhcmFtczogU3RyaXBlQ2FyZFRva2VuUGFyYW1zKTogUHJvbWlzZTxTdHJpcGVDYXJkVG9rZW5SZXM+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIGJhbmsgYWNjb3VudCB0b2tlblxyXG4gICAqXHJcbiAgICogQHBhcmFtIHBhcmFtcyB7U3RyaXBlQmFua0FjY291bnRQYXJhbXN9IEJhbmsgYWNjb3VudCBpbmZvcm1hdGlvblxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgdG9rZW4sIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvclxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjcmVhdGVCYW5rQWNjb3VudFRva2VuKHBhcmFtczogU3RyaXBlQmFua0FjY291bnRQYXJhbXMpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVmFsaWRhdGVzIGEgY3JlZGl0IGNhcmQgbnVtYmVyXHJcbiAgICpcclxuICAgKiBAcGFyYW0gY2FyZE51bWJlciB7c3RyaW5nfSBDcmVkaXQgY2FyZCBudW1iZXJcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIHRoZSBudW1iZXIgaXMgdmFsaWQsIGFuZCByZWplY3RzIGlmIGl0J3MgaW52YWxpZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB2YWxpZGF0ZUNhcmROdW1iZXIoY2FyZE51bWJlcjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZhbGlkYXRlcyBhIENWQyBudW1iZXJcclxuICAgKlxyXG4gICAqIEBwYXJhbSBjdmMge3N0cmluZ30gQ1ZDIG51bWJlclxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgaWYgdGhlIG51bWJlciBpcyB2YWxpZCwgYW5kIHJlamVjdHMgaWYgaXQncyBpbnZhbGlkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHZhbGlkYXRlQ1ZDKGN2Yzogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZhbGlkYXRlcyBhbiBleHBpcnkgZGF0ZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIGV4cE1vbnRoIHtzdHJpbmd9IGV4cGlyeSBtb250aCAoMCAtIDExKVxyXG4gICAqIEBwYXJhbSBleHBZZWFyIHtzdHJpbmd9IGV4cGlyeSB5ZWFyXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBpZiB0aGUgZGF0ZSBpcyB2YWxpZCwgYW5kIHJlamVjdHMgaWYgaXQncyBpbnZhbGlkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHZhbGlkYXRlRXhwaXJ5RGF0ZShleHBNb250aDogc3RyaW5nLCBleHBZZWFyOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGEgY2FyZCB0eXBlIGZyb20gY2FyZCBudW1iZXJcclxuICAgKlxyXG4gICAqIEBwYXJhbSBjYXJkTnVtYmVyIHtzdHJpbmd9IENhcmQgbnVtYmVyXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBjcmVkaXQgY2FyZCB0eXBlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldENhcmRUeXBlKGNhcmROdW1iZXI6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==