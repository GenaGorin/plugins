var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var StripeOriginal = /** @class */ (function (_super) {
    __extends(StripeOriginal, _super);
    function StripeOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StripeOriginal.prototype.setPublishableKey = function (publishableKey) { return cordova(this, "setPublishableKey", {}, arguments); };
    StripeOriginal.prototype.createCardToken = function (params) { return cordova(this, "createCardToken", {}, arguments); };
    StripeOriginal.prototype.createBankAccountToken = function (params) { return cordova(this, "createBankAccountToken", {}, arguments); };
    StripeOriginal.prototype.validateCardNumber = function (cardNumber) { return cordova(this, "validateCardNumber", {}, arguments); };
    StripeOriginal.prototype.validateCVC = function (cvc) { return cordova(this, "validateCVC", {}, arguments); };
    StripeOriginal.prototype.validateExpiryDate = function (expMonth, expYear) { return cordova(this, "validateExpiryDate", {}, arguments); };
    StripeOriginal.prototype.getCardType = function (cardNumber) { return cordova(this, "getCardType", {}, arguments); };
    StripeOriginal.pluginName = "Stripe";
    StripeOriginal.plugin = "cordova-plugin-stripe";
    StripeOriginal.pluginRef = "cordova.plugins.stripe";
    StripeOriginal.repo = "https://github.com/zyramedia/cordova-plugin-stripe";
    StripeOriginal.platforms = ["Android", "Browser", "iOS"];
    return StripeOriginal;
}(AwesomeCordovaNativePlugin));
var Stripe = new StripeOriginal();
export { Stripe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvc3RyaXBlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQThJaEUsMEJBQTBCOzs7O0lBUXBELGtDQUFpQixhQUFDLGNBQXNCO0lBV3hDLGdDQUFlLGFBQUMsTUFBNkI7SUFXN0MsdUNBQXNCLGFBQUMsTUFBK0I7SUFXdEQsbUNBQWtCLGFBQUMsVUFBa0I7SUFXckMsNEJBQVcsYUFBQyxHQUFXO0lBWXZCLG1DQUFrQixhQUFDLFFBQWdCLEVBQUUsT0FBZTtJQVdwRCw0QkFBVyxhQUFDLFVBQWtCOzs7Ozs7aUJBMU5oQztFQStJNEIsMEJBQTBCO1NBQXpDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFN0cmlwZUNhcmRUb2tlblBhcmFtcyB7XHJcbiAgLyoqXHJcbiAgICogQ2FyZCBudW1iZXJcclxuICAgKi9cclxuICBudW1iZXI6IHN0cmluZztcclxuICAvKipcclxuICAgKiBFeHBpcnkgbW9udGhcclxuICAgKi9cclxuICBleHBNb250aDogbnVtYmVyO1xyXG4gIC8qKlxyXG4gICAqIEV4cGlyeSB5ZWFyXHJcbiAgICovXHJcbiAgZXhwWWVhcjogbnVtYmVyO1xyXG4gIC8qKlxyXG4gICAqIENWQyAvIENWVlxyXG4gICAqL1xyXG4gIGN2Yz86IHN0cmluZztcclxuICAvKipcclxuICAgKiBDYXJkaG9sZGVyIG5hbWVcclxuICAgKi9cclxuICBuYW1lPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIEFkZHJlc3MgbGluZSAxXHJcbiAgICovXHJcbiAgYWRkcmVzc19saW5lMT86IHN0cmluZztcclxuICAvKipcclxuICAgKiBBZGRyZXNzIGxpbmUgMlxyXG4gICAqL1xyXG4gIGFkZHJlc3NfbGluZTI/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogQ2l0eVxyXG4gICAqL1xyXG4gIGFkZHJlc3NfY2l0eT86IHN0cmluZztcclxuICAvKipcclxuICAgKiBTdGF0ZSAvIFByb3ZpbmNlXHJcbiAgICovXHJcbiAgYWRkcmVzc19zdGF0ZT86IHN0cmluZztcclxuICAvKipcclxuICAgKiBDb3VudHJ5XHJcbiAgICovXHJcbiAgYWRkcmVzc19jb3VudHJ5Pzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFBvc3RhbCBjb2RlIC8gWklQIENvZGVcclxuICAgKi9cclxuICBwb3N0YWxDb2RlPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIDMtbGV0dGVyIElTTyBjb2RlIGZvciBjdXJyZW5jeVxyXG4gICAqL1xyXG4gIGN1cnJlbmN5Pzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFN0cmlwZUJhbmtBY2NvdW50UGFyYW1zIHtcclxuICAvKipcclxuICAgKiBSb3V0aW5nIG51bWJlci5cclxuICAgKi9cclxuICByb3V0aW5nX251bWJlcjogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIEFjY291bnQgbnVtYmVyLlxyXG4gICAqL1xyXG4gIGFjY291bnRfbnVtYmVyOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogQ3VycmVuY3kgY29kZS4gRXhhbXBsZTogYFVTRGAuXHJcbiAgICovXHJcbiAgY3VycmVuY3k6IHN0cmluZztcclxuICAvKipcclxuICAgKiBDb3VudHJ5IGNvZGUuIEV4YW1wbGU6IGBVU2AuXHJcbiAgICovXHJcbiAgY291bnRyeTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIEFjY291bnQgaG9sZGVyIG5hbWUuXHJcbiAgICovXHJcbiAgYWNjb3VudF9ob2xkZXJfbmFtZT86IHN0cmluZztcclxuICAvKipcclxuICAgKiBBY2NvdW50IGhvbGRlciB0eXBlLiBUaGlzIGNhbiBiZSBgaW5kaXZpZHVhbGAgb3IgYGNvbXBhbnlgLlxyXG4gICAqL1xyXG4gIGFjY291bnRfaG9sZGVyX3R5cGU/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RyaXBlQ2FyZFRva2VuUmVzIHtcclxuICAvKipcclxuICAgKiBDYXJkIE9iamVjdC5cclxuICAgKi9cclxuICBjYXJkOiB7XHJcbiAgICBicmFuZDogc3RyaW5nO1xyXG4gICAgZXhwX21vbnRoOiBudW1iZXI7XHJcbiAgICBleHBfeWVhcjogbnVtYmVyO1xyXG4gICAgZnVuZGluZzogc3RyaW5nO1xyXG4gICAgbGFzdDQ6IHN0cmluZztcclxuICB9O1xyXG4gIC8qKlxyXG4gICAqIFRva2VuIFJlcXVlc3QgRGF0ZSBUaW1lLlxyXG4gICAqL1xyXG4gIGNyZWF0ZWQ6IHN0cmluZztcclxuICAvKipcclxuICAgKiBDYXJkIFRva2VuLlxyXG4gICAqL1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogU291cmNlIFR5cGUgKGNhcmQgb3IgYWNjb3VudCkuXHJcbiAgICovXHJcbiAgdHlwZTogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgU3RyaXBlXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBIHBsdWdpbiB0aGF0IGFsbG93cyB5b3UgdG8gdXNlIFN0cmlwZSdzIE5hdGl2ZSBTREtzIGZvciBBbmRyb2lkIGFuZCBpT1MuXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IFN0cmlwZSB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9zdHJpcGUvbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBzdHJpcGU6IFN0cmlwZSkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiB0aGlzLnN0cmlwZS5zZXRQdWJsaXNoYWJsZUtleSgnbXlfcHVibGlzaGFibGVfa2V5Jyk7XHJcbiAqXHJcbiAqIGxldCBjYXJkID0ge1xyXG4gKiAgbnVtYmVyOiAnNDI0MjQyNDI0MjQyNDI0MicsXHJcbiAqICBleHBNb250aDogMTIsXHJcbiAqICBleHBZZWFyOiAyMDIwLFxyXG4gKiAgY3ZjOiAnMjIwJ1xyXG4gKiB9XHJcbiAqXHJcbiAqIHRoaXMuc3RyaXBlLmNyZWF0ZUNhcmRUb2tlbihjYXJkKVxyXG4gKiAgICAudGhlbih0b2tlbiA9PiBjb25zb2xlLmxvZyh0b2tlbi5pZCkpXHJcbiAqICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBTdHJpcGVDYXJkVG9rZW5QYXJhbXNcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdTdHJpcGUnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXN0cmlwZScsXHJcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLnN0cmlwZScsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS96eXJhbWVkaWEvY29yZG92YS1wbHVnaW4tc3RyaXBlJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdCcm93c2VyJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBTdHJpcGUgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogU2V0IHB1Ymxpc2hhYmxlIGtleVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHB1Ymxpc2hhYmxlS2V5IHtzdHJpbmd9IFB1Ymxpc2hhYmxlIGtleVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXRQdWJsaXNoYWJsZUtleShwdWJsaXNoYWJsZUtleTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgQ3JlZGl0IENhcmQgVG9rZW5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBwYXJhbXMge1N0cmlwZUNhcmRUb2tlblBhcmFtc30gQ3JlZGl0IGNhcmQgaW5mb3JtYXRpb25cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxTdHJpcGVDYXJkVG9rZW5SZXM+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHRva2VuIG9iamVjdCwgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNyZWF0ZUNhcmRUb2tlbihwYXJhbXM6IFN0cmlwZUNhcmRUb2tlblBhcmFtcyk6IFByb21pc2U8U3RyaXBlQ2FyZFRva2VuUmVzPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgYSBiYW5rIGFjY291bnQgdG9rZW5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBwYXJhbXMge1N0cmlwZUJhbmtBY2NvdW50UGFyYW1zfSBCYW5rIGFjY291bnQgaW5mb3JtYXRpb25cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHRva2VuLCBvciByZWplY3RzIHdpdGggYW4gZXJyb3JcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgY3JlYXRlQmFua0FjY291bnRUb2tlbihwYXJhbXM6IFN0cmlwZUJhbmtBY2NvdW50UGFyYW1zKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZhbGlkYXRlcyBhIGNyZWRpdCBjYXJkIG51bWJlclxyXG4gICAqXHJcbiAgICogQHBhcmFtIGNhcmROdW1iZXIge3N0cmluZ30gQ3JlZGl0IGNhcmQgbnVtYmVyXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBpZiB0aGUgbnVtYmVyIGlzIHZhbGlkLCBhbmQgcmVqZWN0cyBpZiBpdCdzIGludmFsaWRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgdmFsaWRhdGVDYXJkTnVtYmVyKGNhcmROdW1iZXI6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWYWxpZGF0ZXMgYSBDVkMgbnVtYmVyXHJcbiAgICpcclxuICAgKiBAcGFyYW0gY3ZjIHtzdHJpbmd9IENWQyBudW1iZXJcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIHRoZSBudW1iZXIgaXMgdmFsaWQsIGFuZCByZWplY3RzIGlmIGl0J3MgaW52YWxpZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB2YWxpZGF0ZUNWQyhjdmM6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWYWxpZGF0ZXMgYW4gZXhwaXJ5IGRhdGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSBleHBNb250aCB7c3RyaW5nfSBleHBpcnkgbW9udGggKDAgLSAxMSlcclxuICAgKiBAcGFyYW0gZXhwWWVhciB7c3RyaW5nfSBleHBpcnkgeWVhclxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgaWYgdGhlIGRhdGUgaXMgdmFsaWQsIGFuZCByZWplY3RzIGlmIGl0J3MgaW52YWxpZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB2YWxpZGF0ZUV4cGlyeURhdGUoZXhwTW9udGg6IHN0cmluZywgZXhwWWVhcjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBhIGNhcmQgdHlwZSBmcm9tIGNhcmQgbnVtYmVyXHJcbiAgICpcclxuICAgKiBAcGFyYW0gY2FyZE51bWJlciB7c3RyaW5nfSBDYXJkIG51bWJlclxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgY3JlZGl0IGNhcmQgdHlwZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRDYXJkVHlwZShjYXJkTnVtYmVyOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=