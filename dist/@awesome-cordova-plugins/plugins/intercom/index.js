var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var IntercomOriginal = /** @class */ (function (_super) {
    __extends(IntercomOriginal, _super);
    function IntercomOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IntercomOriginal.prototype.registerIdentifiedUser = function (options) { return cordova(this, "registerIdentifiedUser", {}, arguments); };
    IntercomOriginal.prototype.registerUnidentifiedUser = function (options) { return cordova(this, "registerUnidentifiedUser", {}, arguments); };
    IntercomOriginal.prototype.reset = function () { return cordova(this, "reset", {}, arguments); };
    IntercomOriginal.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    IntercomOriginal.prototype.setSecureMode = function (secureHash, secureData) { return cordova(this, "setSecureMode", {}, arguments); };
    IntercomOriginal.prototype.setUserHash = function (secureHash) { return cordova(this, "setUserHash", {}, arguments); };
    IntercomOriginal.prototype.updateUser = function (attributes) { return cordova(this, "updateUser", {}, arguments); };
    IntercomOriginal.prototype.logEvent = function (eventName, metaData) { return cordova(this, "logEvent", {}, arguments); };
    IntercomOriginal.prototype.displayMessenger = function () { return cordova(this, "displayMessenger", {}, arguments); };
    IntercomOriginal.prototype.displayMessageComposer = function () { return cordova(this, "displayMessageComposer", {}, arguments); };
    IntercomOriginal.prototype.displayMessageComposerWithInitialMessage = function (initialMessage) { return cordova(this, "displayMessageComposerWithInitialMessage", {}, arguments); };
    IntercomOriginal.prototype.displayConversationsList = function () { return cordova(this, "displayConversationsList", {}, arguments); };
    IntercomOriginal.prototype.displayHelpCenter = function () { return cordova(this, "displayHelpCenter", {}, arguments); };
    IntercomOriginal.prototype.unreadConversationCount = function () { return cordova(this, "unreadConversationCount", {}, arguments); };
    IntercomOriginal.prototype.setLauncherVisibility = function (visibility) { return cordova(this, "setLauncherVisibility", {}, arguments); };
    IntercomOriginal.prototype.setInAppMessageVisibility = function (visibility) { return cordova(this, "setInAppMessageVisibility", {}, arguments); };
    IntercomOriginal.prototype.hideMessenger = function () { return cordova(this, "hideMessenger", {}, arguments); };
    IntercomOriginal.prototype.registerForPush = function () { return cordova(this, "registerForPush", {}, arguments); };
    IntercomOriginal.prototype.sendPushTokenToIntercom = function (token) { return cordova(this, "sendPushTokenToIntercom", {}, arguments); };
    IntercomOriginal.prototype.displayCarousel = function (carouselId) { return cordova(this, "displayCarousel", {}, arguments); };
    IntercomOriginal.prototype.displayArticle = function (articleId) { return cordova(this, "displayArticle", {}, arguments); };
    IntercomOriginal.prototype.setBottomPadding = function (bottomPadding) { return cordova(this, "setBottomPadding", {}, arguments); };
    IntercomOriginal.prototype.displaySurvey = function (surveyId) { return cordova(this, "displaySurvey", {}, arguments); };
    IntercomOriginal.pluginName = "Intercom";
    IntercomOriginal.plugin = "cordova-plugin-intercom";
    IntercomOriginal.pluginRef = "intercom";
    IntercomOriginal.repo = "https://github.com/intercom/intercom-cordova";
    IntercomOriginal.platforms = ["Android", "iOS"];
    return IntercomOriginal;
}(AwesomeCordovaNativePlugin));
var Intercom = new IntercomOriginal();
export { Intercom };
//# sourceMappingURL=data:application/json;base64,