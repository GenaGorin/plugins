import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var Cooee = /** @class */ (function (_super) {
    __extends(Cooee, _super);
    function Cooee() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Cooee.prototype.sendEvent = function (eventName, eventProperties) { return cordova(this, "sendEvent", {}, arguments); };
    Cooee.prototype.updateUserProfile = function (userProfile) { return cordova(this, "updateUserProfile", {}, arguments); };
    Cooee.prototype.setCurrentScreen = function (screenName) { return cordova(this, "setCurrentScreen", {}, arguments); };
    Cooee.prototype.getUserID = function () { return cordova(this, "getUserID", {}, arguments); };
    Cooee.prototype.addCooeeCTAListener = function () { return cordova(this, "addCooeeCTAListener", { "eventObservable": true, "event": "onCooeeCTAListener", "element": "document" }, arguments); };
    Cooee.pluginName = "Cooee";
    Cooee.plugin = "@letscooee/cordova-plugin";
    Cooee.pluginRef = "cordova.plugins.Cooee";
    Cooee.repo = "https://github.com/letscooee/cordova-plugin-cooee";
    Cooee.install = "ionic cordova plugin add @letscooee/cordova-plugin --variable COOEE_APP_ID=appId";
    Cooee.installVariables = ["COOEE_APP_ID"];
    Cooee.platforms = ["Android", "iOS"];
    Cooee.decorators = [
        { type: Injectable }
    ];
    return Cooee;
}(AwesomeCordovaNativePlugin));
export { Cooee };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvbGV0cy1jb29lZS9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQztBQUM1RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQWlDUCx5QkFBMEI7Ozs7SUFRbkQseUJBQVMsYUFBQyxTQUFpQixFQUFFLGVBQW9DO0lBVWpFLGlDQUFpQixhQUFDLFdBQWdDO0lBVWxELGdDQUFnQixhQUFDLFVBQWtCO0lBU25DLHlCQUFTO0lBYVQsbUNBQW1COzs7Ozs7Ozs7Z0JBbkRwQixVQUFVOztnQkFsQ1g7RUFtQzJCLDBCQUEwQjtTQUF4QyxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG4vKipcclxuICogQG5hbWUgTGV0cyBDb29lZVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQUkgZHJpdmVuIFBlcnNvbmFsaXNlZCBOb3RpZmljYXRpb25zIGZvciBCZXR0ZXIgQ3VzdG9tZXIgRW5nYWdlbWVudFxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBDb29lZSB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9sZXRzLWNvb2VlL254JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBjb29lZTogQ29vZWUpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICpcclxuICogdGhpcy5jb29lZS5mdW5jdGlvbk5hbWUoJ0hlbGxvJywgMTIzKVxyXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnQ29vZWUnLFxyXG4gIHBsdWdpbjogJ0BsZXRzY29vZWUvY29yZG92YS1wbHVnaW4nLFxyXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5Db29lZScsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9sZXRzY29vZWUvY29yZG92YS1wbHVnaW4tY29vZWUnLFxyXG4gIGluc3RhbGw6ICdpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgQGxldHNjb29lZS9jb3Jkb3ZhLXBsdWdpbiAtLXZhcmlhYmxlIENPT0VFX0FQUF9JRD1hcHBJZCcsXHJcbiAgaW5zdGFsbFZhcmlhYmxlczogWydDT09FRV9BUFBfSUQnXSxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQ29vZWUgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogU2VuZCB0aGUgZ2l2ZW4gdXNlciBkYXRhIGFuZCB1c2VyIHByb3BlcnRpZXMgdG8gdGhlIHNlcnZlci5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHNvIHVzZXIgY2FuIGJlIG5vdGlmaWVkLlxyXG4gICAqIEBwYXJhbSBldmVudE5hbWUge3N0cmluZ30gTmFtZSBvZiB0aGUgZXZlbnRcclxuICAgKiBAcGFyYW0gZXZlbnRQcm9wZXJ0aWVzIHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSBQcm9wZXJ0aWVzIG9mIHRoZSBldmVudFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZW5kRXZlbnQoZXZlbnROYW1lOiBzdHJpbmcsIGV2ZW50UHJvcGVydGllczogUmVjb3JkPHN0cmluZywgYW55Pik6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZW5kIHRoZSBnaXZlbiB1c2VyIGRhdGEgYW5kIHVzZXIgcHJvcGVydGllcyB0byB0aGUgc2VydmVyLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2Ugc28gdXNlciBjYW4gYmUgbm90aWZpZWQuXHJcbiAgICogQHBhcmFtIHVzZXJQcm9maWxlIHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSBVc2VyIGRhdGEgdG8gc2VuZCB0byB0aGUgc2VydmVyXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHVwZGF0ZVVzZXJQcm9maWxlKHVzZXJQcm9maWxlOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNlbmQgdGhlIGdpdmVuIHNjcmVlbiBuYW1lIHdpdGggZXZlcnkgZXZlbnQuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSBzbyB1c2VyIGNhbiBiZSBub3RpZmllZC5cclxuICAgKiBAcGFyYW0gc2NyZWVuTmFtZSB7c3RyaW5nfSBTY3JlZW4gbmFtZSB0byBzZW5kIHRvIHRoZSBzZXJ2ZXJcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2V0Q3VycmVudFNjcmVlbihzY3JlZW5OYW1lOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUHJvdmlkZSBDb29lZSdzIHVzZXJJRCBhc3NpZ25lZCB0byB0aGUgY3VycmVudCB1c2VyLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2Ugd2l0aCB1c2VySWQuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldFVzZXJJRCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUHJvdmlkZXMgY2FsbGJhY2sgZm9yIHRoZSBvbkNvb2VlQ1RBTGlzdGVuZXIgZXZlbnQuXHJcbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxBbnk+fSBSZXR1cm5zIGFuIG9ic2VydmFibGUgcmVjb3JkLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGV2ZW50T2JzZXJ2YWJsZTogdHJ1ZSxcclxuICAgIGV2ZW50OiAnb25Db29lZUNUQUxpc3RlbmVyJyxcclxuICAgIGVsZW1lbnQ6IGRvY3VtZW50LFxyXG4gIH0pXHJcbiAgYWRkQ29vZWVDVEFMaXN0ZW5lcigpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=