var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var SpeechRecognitionOriginal = /** @class */ (function (_super) {
    __extends(SpeechRecognitionOriginal, _super);
    function SpeechRecognitionOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SpeechRecognitionOriginal.prototype.isRecognitionAvailable = function () { return cordova(this, "isRecognitionAvailable", {}, arguments); };
    SpeechRecognitionOriginal.prototype.startListening = function (options) { return cordova(this, "startListening", { "callbackOrder": "reverse", "observable": true }, arguments); };
    SpeechRecognitionOriginal.prototype.stopListening = function () { return cordova(this, "stopListening", {}, arguments); };
    SpeechRecognitionOriginal.prototype.getSupportedLanguages = function () { return cordova(this, "getSupportedLanguages", {}, arguments); };
    SpeechRecognitionOriginal.prototype.hasPermission = function () { return cordova(this, "hasPermission", {}, arguments); };
    SpeechRecognitionOriginal.prototype.requestPermission = function () { return cordova(this, "requestPermission", {}, arguments); };
    SpeechRecognitionOriginal.pluginName = "SpeechRecognition";
    SpeechRecognitionOriginal.plugin = "cordova-plugin-speechrecognition";
    SpeechRecognitionOriginal.pluginRef = "plugins.speechRecognition";
    SpeechRecognitionOriginal.repo = "https://github.com/pbakondy/cordova-plugin-speechrecognition";
    SpeechRecognitionOriginal.platforms = ["Android", "iOS"];
    return SpeechRecognitionOriginal;
}(AwesomeCordovaNativePlugin));
var SpeechRecognition = new SpeechRecognitionOriginal();
export { SpeechRecognition };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvc3BlZWNoLXJlY29nbml0aW9uL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDO0FBQzVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBMEdLLHFDQUEwQjs7OztJQU8vRCxrREFBc0I7SUFjdEIsMENBQWMsYUFBQyxPQUEyQztJQVExRCx5Q0FBYTtJQVViLGlEQUFxQjtJQVVyQix5Q0FBYTtJQVViLDZDQUFpQjs7Ozs7OzRCQXZLbkI7RUE0R3VDLDBCQUEwQjtTQUFwRCxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmV4cG9ydCB0eXBlIFNwZWVjaFJlY29nbml0aW9uTGlzdGVuaW5nT3B0aW9ucyA9XHJcbiAgfCBTcGVlY2hSZWNvZ25pdGlvbkxpc3RlbmluZ09wdGlvbnNJT1NcclxuICB8IFNwZWVjaFJlY29nbml0aW9uTGlzdGVuaW5nT3B0aW9uc0FuZHJvaWQ7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNwZWVjaFJlY29nbml0aW9uTGlzdGVuaW5nT3B0aW9uc0lPUyB7XHJcbiAgLyoqXHJcbiAgICogdXNlZCBsYW5ndWFnZSBmb3IgcmVjb2duaXRpb24gKGRlZmF1bHQgYFwiZW4tVVNcImApXHJcbiAgICovXHJcbiAgbGFuZ3VhZ2U/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIHVtYmVyIG9mIHJldHVybiBtYXRjaGVzIChkZWZhdWx0IGA1YClcclxuICAgKi9cclxuICBtYXRjaGVzPzogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBBbGxvdyBwYXJ0aWFsIHJlc3VsdHMgdG8gYmUgcmV0dXJuZWQgKGRlZmF1bHQgYGZhbHNlYClcclxuICAgKi9cclxuICBzaG93UGFydGlhbD86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BlZWNoUmVjb2duaXRpb25MaXN0ZW5pbmdPcHRpb25zQW5kcm9pZCB7XHJcbiAgLyoqXHJcbiAgICogdXNlZCBsYW5ndWFnZSBmb3IgcmVjb2duaXRpb24gKGRlZmF1bHQgYFwiZW4tVVNcImApXHJcbiAgICovXHJcbiAgbGFuZ3VhZ2U/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIG51bWJlciBvZiByZXR1cm4gbWF0Y2hlcyAobWF4aW11bSBudW1iZXIgb2YgbWF0Y2hlcylcclxuICAgKi9cclxuICBtYXRjaGVzPzogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBkaXNwbGF5ZWQgcHJvbXB0IG9mIGxpc3RlbmVyIHBvcHVwIHdpbmRvd1xyXG4gICAqL1xyXG4gIHByb21wdD86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogZGlzcGxheSBsaXN0ZW5lciBwb3B1cCB3aW5kb3cgd2l0aCBwcm9tcHQgKGRlZmF1bHQgYHRydWVgKVxyXG4gICAqL1xyXG4gIHNob3dQb3B1cD86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIEFsbG93IHBhcnRpYWwgcmVzdWx0cyB0byBiZSByZXR1cm5lZCAoZGVmYXVsdCBgZmFsc2VgKVxyXG4gICAqL1xyXG4gIHNob3dQYXJ0aWFsPzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIFNwZWVjaCBSZWNvZ25pdGlvblxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gZG9lcyBzcGVlY2ggcmVjb2duaXRpb24gdXNpbmcgY2xvdWQgc2VydmljZXNcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgU3BlZWNoUmVjb2duaXRpb24gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvc3BlZWNoLXJlY29nbml0aW9uL25neCc7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc3BlZWNoUmVjb2duaXRpb246IFNwZWVjaFJlY29nbml0aW9uKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqXHJcbiAqXHJcbiAqIC8vIENoZWNrIGZlYXR1cmUgYXZhaWxhYmxlXHJcbiAqIHRoaXMuc3BlZWNoUmVjb2duaXRpb24uaXNSZWNvZ25pdGlvbkF2YWlsYWJsZSgpXHJcbiAqICAgLnRoZW4oKGF2YWlsYWJsZTogYm9vbGVhbikgPT4gY29uc29sZS5sb2coYXZhaWxhYmxlKSlcclxuICpcclxuICogLy8gU3RhcnQgdGhlIHJlY29nbml0aW9uIHByb2Nlc3NcclxuICogdGhpcy5zcGVlY2hSZWNvZ25pdGlvbi5zdGFydExpc3RlbmluZyhvcHRpb25zKVxyXG4gKiAgIC5zdWJzY3JpYmUoXHJcbiAqICAgICAobWF0Y2hlczogc3RyaW5nW10pID0+IGNvbnNvbGUubG9nKG1hdGNoZXMpLFxyXG4gKiAgICAgKG9uZXJyb3IpID0+IGNvbnNvbGUubG9nKCdlcnJvcjonLCBvbmVycm9yKVxyXG4gKiAgIClcclxuICpcclxuICogLy8gU3RvcCB0aGUgcmVjb2duaXRpb24gcHJvY2VzcyAoaU9TIG9ubHkpXHJcbiAqIHRoaXMuc3BlZWNoUmVjb2duaXRpb24uc3RvcExpc3RlbmluZygpXHJcbiAqXHJcbiAqIC8vIEdldCB0aGUgbGlzdCBvZiBzdXBwb3J0ZWQgbGFuZ3VhZ2VzXHJcbiAqIHRoaXMuc3BlZWNoUmVjb2duaXRpb24uZ2V0U3VwcG9ydGVkTGFuZ3VhZ2VzKClcclxuICogICAudGhlbihcclxuICogICAgIChsYW5ndWFnZXM6IHN0cmluZ1tdKSA9PiBjb25zb2xlLmxvZyhsYW5ndWFnZXMpLFxyXG4gKiAgICAgKGVycm9yKSA9PiBjb25zb2xlLmxvZyhlcnJvcilcclxuICogICApXHJcbiAqXHJcbiAqIC8vIENoZWNrIHBlcm1pc3Npb25cclxuICogdGhpcy5zcGVlY2hSZWNvZ25pdGlvbi5oYXNQZXJtaXNzaW9uKClcclxuICogICAudGhlbigoaGFzUGVybWlzc2lvbjogYm9vbGVhbikgPT4gY29uc29sZS5sb2coaGFzUGVybWlzc2lvbikpXHJcbiAqXHJcbiAqIC8vIFJlcXVlc3QgcGVybWlzc2lvbnNcclxuICogdGhpcy5zcGVlY2hSZWNvZ25pdGlvbi5yZXF1ZXN0UGVybWlzc2lvbigpXHJcbiAqICAgLnRoZW4oXHJcbiAqICAgICAoKSA9PiBjb25zb2xlLmxvZygnR3JhbnRlZCcpLFxyXG4gKiAgICAgKCkgPT4gY29uc29sZS5sb2coJ0RlbmllZCcpXHJcbiAqICAgKVxyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdTcGVlY2hSZWNvZ25pdGlvbicsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc3BlZWNocmVjb2duaXRpb24nLFxyXG4gIHBsdWdpblJlZjogJ3BsdWdpbnMuc3BlZWNoUmVjb2duaXRpb24nLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vcGJha29uZHkvY29yZG92YS1wbHVnaW4tc3BlZWNocmVjb2duaXRpb24nLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBTcGVlY2hSZWNvZ25pdGlvbiBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBDaGVjayBmZWF0dXJlIGF2YWlsYWJsZVxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzUmVjb2duaXRpb25BdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdGFydCB0aGUgcmVjb2duaXRpb24gcHJvY2Vzc1xyXG4gICAqXHJcbiAgICogQHBhcmFtIG9wdGlvbnNcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTwgc3RyaW5nW10gPn0gbGlzdCBvZiByZWNvZ25pemVkIHRlcm1zXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxyXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcclxuICB9KVxyXG4gIHN0YXJ0TGlzdGVuaW5nKG9wdGlvbnM/OiBTcGVlY2hSZWNvZ25pdGlvbkxpc3RlbmluZ09wdGlvbnMpOiBPYnNlcnZhYmxlPHN0cmluZ1tdPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdG9wIHRoZSByZWNvZ25pdGlvbiBwcm9jZXNzXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHN0b3BMaXN0ZW5pbmcoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgdGhlIGxpc3Qgb2Ygc3VwcG9ydGVkIGxhbmd1YWdlc1xyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8IHN0cmluZ1tdID59IGxpc3Qgb2YgbGFuZ3VhZ2VzXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldFN1cHBvcnRlZExhbmd1YWdlcygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBwZXJtaXNzaW9uXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gaGFzIHBlcm1pc3Npb25cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaGFzUGVybWlzc2lvbigpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlcXVlc3QgcGVybWlzc2lvbnNcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZXF1ZXN0UGVybWlzc2lvbigpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19