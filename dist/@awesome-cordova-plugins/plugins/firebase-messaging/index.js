var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var FirebaseMessagingOriginal = /** @class */ (function (_super) {
    __extends(FirebaseMessagingOriginal, _super);
    function FirebaseMessagingOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseMessagingOriginal.prototype.onMessage = function () { return cordova(this, "onMessage", { "observable": true, "callbackOrder": "reverse" }, arguments); };
    FirebaseMessagingOriginal.prototype.onBackgroundMessage = function () { return cordova(this, "onBackgroundMessage", { "observable": true, "callbackOrder": "reverse" }, arguments); };
    FirebaseMessagingOriginal.prototype.requestPermission = function (options) { return cordova(this, "requestPermission", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.getInstanceId = function () { return cordova(this, "getInstanceId", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.getToken = function (type) { return cordova(this, "getToken", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.onTokenRefresh = function () { return cordova(this, "onTokenRefresh", { "observable": true, "callbackOrder": "reverse" }, arguments); };
    FirebaseMessagingOriginal.prototype.subscribe = function (topic) { return cordova(this, "subscribe", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.unsubscribe = function (topic) { return cordova(this, "unsubscribe", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.getBadge = function () { return cordova(this, "getBadge", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.setBadge = function (value) { return cordova(this, "setBadge", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.deleteToken = function () { return cordova(this, "deleteToken", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.pluginName = "FirebaseMessaging";
    FirebaseMessagingOriginal.plugin = "cordova-plugin-firebase-messaging";
    FirebaseMessagingOriginal.pluginRef = "cordova.plugins.firebase.messaging";
    FirebaseMessagingOriginal.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-messaging";
    FirebaseMessagingOriginal.platforms = ["Android", "iOS"];
    return FirebaseMessagingOriginal;
}(AwesomeCordovaNativePlugin));
var FirebaseMessaging = new FirebaseMessagingOriginal();
export { FirebaseMessaging };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZmlyZWJhc2UtbWVzc2FnaW5nL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDO0FBQzVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBb0VLLHFDQUEwQjs7OztJQU8vRCxxQ0FBUztJQVVULCtDQUFtQjtJQVluQiw2Q0FBaUIsYUFBQyxPQUFpQztJQVFuRCx5Q0FBYTtJQWNiLG9DQUFRLGFBQUMsSUFBaUM7SUFXMUMsMENBQWM7SUFXZCxxQ0FBUyxhQUFDLEtBQWE7SUFXdkIsdUNBQVcsYUFBQyxLQUFhO0lBVXpCLG9DQUFRO0lBV1Isb0NBQVEsYUFBQyxLQUFhO0lBVXRCLHVDQUFXOzs7Ozs7NEJBekxiO0VBc0V1QywwQkFBMEI7U0FBcEQsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElGaXJlYmFzZUdDTU1lc3NhZ2Uge1xyXG4gIGdjbToge1xyXG4gICAgYm9keTogc3RyaW5nO1xyXG4gICAgdGl0bGU6IHN0cmluZztcclxuICAgIHNvdW5kOiBzdHJpbmc7XHJcbiAgICBpY29uOiBzdHJpbmc7XHJcbiAgICB0YWc6IHN0cmluZztcclxuICAgIGNvbG9yOiBzdHJpbmc7XHJcbiAgICBjbGlja0FjdGlvbjogc3RyaW5nO1xyXG4gIH07XHJcbiAgJ2dvb2dsZS5tZXNzYWdlX2lkJzogc3RyaW5nO1xyXG4gICdnb29nbGUuc2VudF90aW1lJzogbnVtYmVyO1xyXG4gIFtrZXk6IHN0cmluZ106IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJRmlyZWJhc2VBUFNNZXNzYWdlIHtcclxuICBhcHM6IHtcclxuICAgIGFsZXJ0OiB7XHJcbiAgICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICAgIGJvZHk6IHN0cmluZztcclxuICAgIH07XHJcbiAgICBiYWRnZT86IG51bWJlcjtcclxuICB9O1xyXG4gICdnY20ubWVzc2FnZV9pZCc6ICdzdHJpbmcnO1xyXG4gIFtrZXk6IHN0cmluZ106IGFueTtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgSUZpcmViYXNlTWVzc2FnZSA9IElGaXJlYmFzZUFQU01lc3NhZ2UgfCBJRmlyZWJhc2VHQ01NZXNzYWdlO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUmVxdWVzdFBlcm1pc3Npb25PcHRpb25zIHtcclxuICBmb3JjZVNob3c/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBGaXJlYmFzZU1lc3NhZ2luZ1Rva2VuVHlwZSA9ICdhcG5zLWJ1ZmZlcicgfCAnYXBucy1zdHJpbmcnO1xyXG5cclxuLyoqXHJcbiAqIEBiZXRhXHJcbiAqIEBuYW1lIEZpcmViYXNlIE1lc3NhZ2luZ1xyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQ29yZG92YSBwbHVnaW4gZm9yIEZpcmViYXNlIE1lc3NhZ2luZ1xyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBGaXJlYmFzZU1lc3NhZ2luZyB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9maXJlYmFzZS1tZXNzYWdpbmcvbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBmaXJlYmFzZU1lc3NhZ2luZzogRmlyZWJhc2VNZXNzYWdpbmcpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICpcclxuICogdGhpcy5maXJlYmFzZU1lc3NhZ2luZy5sb2dFdmVudCgncGFnZV92aWV3Jywge3BhZ2U6IFwiZGFzaGJvYXJkXCJ9KVxyXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIElGaXJlYmFzZU1lc3NhZ2VcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdGaXJlYmFzZU1lc3NhZ2luZycsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZmlyZWJhc2UtbWVzc2FnaW5nJyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuZmlyZWJhc2UubWVzc2FnaW5nJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2NoZW1lcmlzdWsvY29yZG92YS1wbHVnaW4tZmlyZWJhc2UtbWVzc2FnaW5nJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRmlyZWJhc2VNZXNzYWdpbmcgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogQ2FsbGVkIHdoZW4gYSBwdXNoIG1lc3NhZ2UgcmVjZWl2ZWQgd2hpbGUgYXBwIGlzIGluIGZvcmVncm91bmQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgb2JzZXJ2YWJsZTogdHJ1ZSwgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnIH0pXHJcbiAgb25NZXNzYWdlKCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsZWQgd2hlbiBhIHB1c2ggbWVzc2FnZSByZWNlaXZlZCB3aGlsZSBhcHAgaXMgaW4gYmFja2dyb3VuZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBvYnNlcnZhYmxlOiB0cnVlLCBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScgfSlcclxuICBvbkJhY2tncm91bmRNZXNzYWdlKCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHcmFudCBwZXJtaXNzaW9uIHRvIHJlY2VpdmUgcHVzaCBub3RpZmljYXRpb25zICh3aWxsIHRyaWdnZXIgcHJvbXB0IG9uIGlPUykuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0lSZXF1ZXN0UGVybWlzc2lvbk9wdGlvbnN9IFtvcHRpb25zXVxyXG4gICAqIEBwYXJhbSBvcHRpb25zLmZvcmNlU2hvd1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgcmVxdWVzdFBlcm1pc3Npb24ob3B0aW9ucz86IHsgZm9yY2VTaG93PzogYm9vbGVhbiB9KTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgYSBwcm9taXNlIHRoYWYgZnVsZmlsbHMgd2l0aCB0aGUgZGV2aWNlIGluc3RhbmNlIElEXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgZ2V0SW5zdGFuY2VJZCgpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBhIHByb21pc2UgdGhhdCBmdWxmaWxscyB3aXRoIHRoZSBjdXJyZW50IEZDTSB0b2tlblxyXG4gICAqXHJcbiAgICogVGhpcyBtZXRob2QgYWxzbyBhY2NlcHRzIG9wdGlvbmFsIGFyZ3VtZW50IHR5cGUuXHJcbiAgICogQ3VycmVudGx5IGlPUyBpbXBsZW1lbnRhdGlvbiBzdXBwb3J0cyB2YWx1ZXMgXCJhcG5zLWJ1ZmZlclwiIGFuZCBcImFwbnMtc3RyaW5nXCIgdGhhdCBkZWZpbmVzIHByZXNlbnRhdGlvbiBvZiByZXNvbHZlZCBBUE5TIHRva2VuLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtGaXJlYmFzZU1lc3NhZ2luZ1Rva2VuVHlwZX0gW3R5cGVdIGlPUyBvbmx5LiBEZWZpbmVzIHByZXNlbnRhdGlvbiBvZiByZXNvbHZlZCBBUE5TIHRva2VuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBnZXRUb2tlbih0eXBlPzogRmlyZWJhc2VNZXNzYWdpbmdUb2tlblR5cGUpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVHJpZ2dlcnMgZXZlcnkgdGltZSB3aGVuIEZDTSB0b2tlbiB1cGRhdGVkLlxyXG4gICAqIFlvdSBzaG91bGQgdXN1YWxseSBjYWxsIGdldFRva2VuIHRvIGdldCBhbiB1cGRhdGVkIHRva2VuIGFuZCBzZW5kIGl0IHRvIHNlcnZlci5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPHZvaWQ+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgb2JzZXJ2YWJsZTogdHJ1ZSwgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnIH0pXHJcbiAgb25Ub2tlblJlZnJlc2goKTogT2JzZXJ2YWJsZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdWJzY3JpYmUgdG8gdG9waWMgaW4gYmFja2dyb3VuZC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BpY1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG51bGw+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHN1YnNjcmliZSh0b3BpYzogc3RyaW5nKTogUHJvbWlzZTxudWxsPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVbnN1YnNjcmliZSBmcm9tIHRvcGljIGluIGJhY2tncm91bmQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9waWNcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxudWxsPn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICB1bnN1YnNjcmliZSh0b3BpYzogc3RyaW5nKTogUHJvbWlzZTxudWxsPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWFkcyBjdXJyZW50IGJhZGdlIG51bWJlciAoaWYgc3VwcG9ydGVkKS5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG51bWJlcj59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgZ2V0QmFkZ2UoKTogUHJvbWlzZTxudW1iZXI+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgY3VycmVudCBiYWRnZSBudW1iZXIgKGlmIHN1cHBvcnRlZCkuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxudWxsPn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzZXRCYWRnZSh2YWx1ZTogbnVtYmVyKTogUHJvbWlzZTxudWxsPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXZva2UgdGhlIGN1cnJlbnQgRkNNIHRva2VuLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8bnVsbD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgZGVsZXRlVG9rZW4oKTogUHJvbWlzZTxudWxsPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==