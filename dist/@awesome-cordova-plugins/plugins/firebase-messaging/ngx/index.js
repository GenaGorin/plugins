import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var FirebaseMessaging = /** @class */ (function (_super) {
    __extends(FirebaseMessaging, _super);
    function FirebaseMessaging() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseMessaging.prototype.onMessage = function () { return cordova(this, "onMessage", { "observable": true, "callbackOrder": "reverse" }, arguments); };
    FirebaseMessaging.prototype.onBackgroundMessage = function () { return cordova(this, "onBackgroundMessage", { "observable": true, "callbackOrder": "reverse" }, arguments); };
    FirebaseMessaging.prototype.requestPermission = function (options) { return cordova(this, "requestPermission", { "sync": true }, arguments); };
    FirebaseMessaging.prototype.getInstanceId = function () { return cordova(this, "getInstanceId", { "sync": true }, arguments); };
    FirebaseMessaging.prototype.getToken = function (type) { return cordova(this, "getToken", { "sync": true }, arguments); };
    FirebaseMessaging.prototype.onTokenRefresh = function () { return cordova(this, "onTokenRefresh", { "observable": true, "callbackOrder": "reverse" }, arguments); };
    FirebaseMessaging.prototype.subscribe = function (topic) { return cordova(this, "subscribe", { "sync": true }, arguments); };
    FirebaseMessaging.prototype.unsubscribe = function (topic) { return cordova(this, "unsubscribe", { "sync": true }, arguments); };
    FirebaseMessaging.prototype.getBadge = function () { return cordova(this, "getBadge", { "sync": true }, arguments); };
    FirebaseMessaging.prototype.setBadge = function (value) { return cordova(this, "setBadge", { "sync": true }, arguments); };
    FirebaseMessaging.prototype.deleteToken = function () { return cordova(this, "deleteToken", { "sync": true }, arguments); };
    FirebaseMessaging.pluginName = "FirebaseMessaging";
    FirebaseMessaging.plugin = "cordova-plugin-firebase-messaging";
    FirebaseMessaging.pluginRef = "cordova.plugins.firebase.messaging";
    FirebaseMessaging.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-messaging";
    FirebaseMessaging.platforms = ["Android", "iOS"];
    FirebaseMessaging.decorators = [
        { type: Injectable }
    ];
    return FirebaseMessaging;
}(AwesomeCordovaNativePlugin));
export { FirebaseMessaging };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZmlyZWJhc2UtbWVzc2FnaW5nL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDO0FBQzVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBb0VLLHFDQUEwQjs7OztJQU8vRCxxQ0FBUztJQVVULCtDQUFtQjtJQVluQiw2Q0FBaUIsYUFBQyxPQUFpQztJQVFuRCx5Q0FBYTtJQWNiLG9DQUFRLGFBQUMsSUFBaUM7SUFXMUMsMENBQWM7SUFXZCxxQ0FBUyxhQUFDLEtBQWE7SUFXdkIsdUNBQVcsYUFBQyxLQUFhO0lBVXpCLG9DQUFRO0lBV1Isb0NBQVEsYUFBQyxLQUFhO0lBVXRCLHVDQUFXOzs7Ozs7O2dCQXBIWixVQUFVOzs0QkFyRVg7RUFzRXVDLDBCQUEwQjtTQUFwRCxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUZpcmViYXNlR0NNTWVzc2FnZSB7XHJcbiAgZ2NtOiB7XHJcbiAgICBib2R5OiBzdHJpbmc7XHJcbiAgICB0aXRsZTogc3RyaW5nO1xyXG4gICAgc291bmQ6IHN0cmluZztcclxuICAgIGljb246IHN0cmluZztcclxuICAgIHRhZzogc3RyaW5nO1xyXG4gICAgY29sb3I6IHN0cmluZztcclxuICAgIGNsaWNrQWN0aW9uOiBzdHJpbmc7XHJcbiAgfTtcclxuICAnZ29vZ2xlLm1lc3NhZ2VfaWQnOiBzdHJpbmc7XHJcbiAgJ2dvb2dsZS5zZW50X3RpbWUnOiBudW1iZXI7XHJcbiAgW2tleTogc3RyaW5nXTogYW55O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElGaXJlYmFzZUFQU01lc3NhZ2Uge1xyXG4gIGFwczoge1xyXG4gICAgYWxlcnQ6IHtcclxuICAgICAgdGl0bGU6IHN0cmluZztcclxuICAgICAgYm9keTogc3RyaW5nO1xyXG4gICAgfTtcclxuICAgIGJhZGdlPzogbnVtYmVyO1xyXG4gIH07XHJcbiAgJ2djbS5tZXNzYWdlX2lkJzogJ3N0cmluZyc7XHJcbiAgW2tleTogc3RyaW5nXTogYW55O1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBJRmlyZWJhc2VNZXNzYWdlID0gSUZpcmViYXNlQVBTTWVzc2FnZSB8IElGaXJlYmFzZUdDTU1lc3NhZ2U7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElSZXF1ZXN0UGVybWlzc2lvbk9wdGlvbnMge1xyXG4gIGZvcmNlU2hvdz86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEZpcmViYXNlTWVzc2FnaW5nVG9rZW5UeXBlID0gJ2FwbnMtYnVmZmVyJyB8ICdhcG5zLXN0cmluZyc7XHJcblxyXG4vKipcclxuICogQGJldGFcclxuICogQG5hbWUgRmlyZWJhc2UgTWVzc2FnaW5nXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBDb3Jkb3ZhIHBsdWdpbiBmb3IgRmlyZWJhc2UgTWVzc2FnaW5nXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IEZpcmViYXNlTWVzc2FnaW5nIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2ZpcmViYXNlLW1lc3NhZ2luZy9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGZpcmViYXNlTWVzc2FnaW5nOiBGaXJlYmFzZU1lc3NhZ2luZykgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKlxyXG4gKiB0aGlzLmZpcmViYXNlTWVzc2FnaW5nLmxvZ0V2ZW50KCdwYWdlX3ZpZXcnLCB7cGFnZTogXCJkYXNoYm9hcmRcIn0pXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICogQGludGVyZmFjZXNcclxuICogSUZpcmViYXNlTWVzc2FnZVxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0ZpcmViYXNlTWVzc2FnaW5nJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1maXJlYmFzZS1tZXNzYWdpbmcnLFxyXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5maXJlYmFzZS5tZXNzYWdpbmcnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vY2hlbWVyaXN1ay9jb3Jkb3ZhLXBsdWdpbi1maXJlYmFzZS1tZXNzYWdpbmcnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGaXJlYmFzZU1lc3NhZ2luZyBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBDYWxsZWQgd2hlbiBhIHB1c2ggbWVzc2FnZSByZWNlaXZlZCB3aGlsZSBhcHAgaXMgaW4gZm9yZWdyb3VuZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBvYnNlcnZhYmxlOiB0cnVlLCBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScgfSlcclxuICBvbk1lc3NhZ2UoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGxlZCB3aGVuIGEgcHVzaCBtZXNzYWdlIHJlY2VpdmVkIHdoaWxlIGFwcCBpcyBpbiBiYWNrZ3JvdW5kLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7IG9ic2VydmFibGU6IHRydWUsIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyB9KVxyXG4gIG9uQmFja2dyb3VuZE1lc3NhZ2UoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdyYW50IHBlcm1pc3Npb24gdG8gcmVjZWl2ZSBwdXNoIG5vdGlmaWNhdGlvbnMgKHdpbGwgdHJpZ2dlciBwcm9tcHQgb24gaU9TKS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7SVJlcXVlc3RQZXJtaXNzaW9uT3B0aW9uc30gW29wdGlvbnNdXHJcbiAgICogQHBhcmFtIG9wdGlvbnMuZm9yY2VTaG93XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICByZXF1ZXN0UGVybWlzc2lvbihvcHRpb25zPzogeyBmb3JjZVNob3c/OiBib29sZWFuIH0pOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBhIHByb21pc2UgdGhhZiBmdWxmaWxscyB3aXRoIHRoZSBkZXZpY2UgaW5zdGFuY2UgSURcclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBnZXRJbnN0YW5jZUlkKCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGZ1bGZpbGxzIHdpdGggdGhlIGN1cnJlbnQgRkNNIHRva2VuXHJcbiAgICpcclxuICAgKiBUaGlzIG1ldGhvZCBhbHNvIGFjY2VwdHMgb3B0aW9uYWwgYXJndW1lbnQgdHlwZS5cclxuICAgKiBDdXJyZW50bHkgaU9TIGltcGxlbWVudGF0aW9uIHN1cHBvcnRzIHZhbHVlcyBcImFwbnMtYnVmZmVyXCIgYW5kIFwiYXBucy1zdHJpbmdcIiB0aGF0IGRlZmluZXMgcHJlc2VudGF0aW9uIG9mIHJlc29sdmVkIEFQTlMgdG9rZW4uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0ZpcmViYXNlTWVzc2FnaW5nVG9rZW5UeXBlfSBbdHlwZV0gaU9TIG9ubHkuIERlZmluZXMgcHJlc2VudGF0aW9uIG9mIHJlc29sdmVkIEFQTlMgdG9rZW5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIGdldFRva2VuKHR5cGU/OiBGaXJlYmFzZU1lc3NhZ2luZ1Rva2VuVHlwZSk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUcmlnZ2VycyBldmVyeSB0aW1lIHdoZW4gRkNNIHRva2VuIHVwZGF0ZWQuXHJcbiAgICogWW91IHNob3VsZCB1c3VhbGx5IGNhbGwgZ2V0VG9rZW4gdG8gZ2V0IGFuIHVwZGF0ZWQgdG9rZW4gYW5kIHNlbmQgaXQgdG8gc2VydmVyLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge09ic2VydmFibGU8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBvYnNlcnZhYmxlOiB0cnVlLCBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScgfSlcclxuICBvblRva2VuUmVmcmVzaCgpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN1YnNjcmliZSB0byB0b3BpYyBpbiBiYWNrZ3JvdW5kLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcGljXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8bnVsbD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgc3Vic2NyaWJlKHRvcGljOiBzdHJpbmcpOiBQcm9taXNlPG51bGw+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVuc3Vic2NyaWJlIGZyb20gdG9waWMgaW4gYmFja2dyb3VuZC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BpY1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG51bGw+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHVuc3Vic2NyaWJlKHRvcGljOiBzdHJpbmcpOiBQcm9taXNlPG51bGw+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlYWRzIGN1cnJlbnQgYmFkZ2UgbnVtYmVyIChpZiBzdXBwb3J0ZWQpLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8bnVtYmVyPn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBnZXRCYWRnZSgpOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyBjdXJyZW50IGJhZGdlIG51bWJlciAoaWYgc3VwcG9ydGVkKS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG51bGw+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHNldEJhZGdlKHZhbHVlOiBudW1iZXIpOiBQcm9taXNlPG51bGw+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldm9rZSB0aGUgY3VycmVudCBGQ00gdG9rZW4uXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxudWxsPn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBkZWxldGVUb2tlbigpOiBQcm9taXNlPG51bGw+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19