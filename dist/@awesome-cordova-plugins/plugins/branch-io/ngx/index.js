import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var BranchIo = /** @class */ (function (_super) {
    __extends(BranchIo, _super);
    function BranchIo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BranchIo.prototype.setDebug = function (enable) { return cordova(this, "setDebug", { "otherPromise": true }, arguments); };
    BranchIo.prototype.disableTracking = function (disable) { return cordova(this, "disableTracking", { "otherPromise": true }, arguments); };
    BranchIo.prototype.initSession = function () { return cordova(this, "initSession", { "otherPromise": true }, arguments); };
    BranchIo.prototype.initSessionWithCallback = function () { return cordova(this, "initSessionWithCallback", { "observable": true }, arguments); };
    BranchIo.prototype.setRequestMetadata = function () { return cordova(this, "setRequestMetadata", { "otherPromise": true }, arguments); };
    BranchIo.prototype.setCookieBasedMatching = function (linkDomain) { return cordova(this, "setCookieBasedMatching", { "otherPromise": true }, arguments); };
    BranchIo.prototype.getFirstReferringParams = function () { return cordova(this, "getFirstReferringParams", { "otherPromise": true }, arguments); };
    BranchIo.prototype.getLatestReferringParams = function () { return cordova(this, "getLatestReferringParams", { "otherPromise": true }, arguments); };
    BranchIo.prototype.setIdentity = function (userId) { return cordova(this, "setIdentity", { "otherPromise": true }, arguments); };
    BranchIo.prototype.logout = function () { return cordova(this, "logout", { "otherPromise": true }, arguments); };
    BranchIo.prototype.userCompletedAction = function (eventName, metaData) { return cordova(this, "userCompletedAction", { "otherPromise": true }, arguments); };
    BranchIo.prototype.sendCommerceEvent = function (event, metaData) { return cordova(this, "sendCommerceEvent", { "otherPromise": true }, arguments); };
    BranchIo.prototype.sendBranchEvent = function (event, metaData) { return cordova(this, "sendBranchEvent", { "otherPromise": true }, arguments); };
    BranchIo.prototype.createBranchUniversalObject = function (properties) { return cordova(this, "createBranchUniversalObject", { "otherPromise": true }, arguments); };
    BranchIo.prototype.loadRewards = function (bucket) { return cordova(this, "loadRewards", { "otherPromise": true }, arguments); };
    BranchIo.prototype.redeemRewards = function (value, bucket) { return cordova(this, "redeemRewards", { "otherPromise": true }, arguments); };
    BranchIo.prototype.creditHistory = function () { return cordova(this, "creditHistory", { "otherPromise": true }, arguments); };
    BranchIo.pluginName = "BranchIo";
    BranchIo.plugin = "branch-cordova-sdk";
    BranchIo.pluginRef = "Branch";
    BranchIo.repo = "https://github.com/BranchMetrics/cordova-ionic-phonegap-branch-deep-linking";
    BranchIo.platforms = ["iOS", "Android"];
    BranchIo.decorators = [
        { type: Injectable }
    ];
    return BranchIo;
}(AwesomeCordovaNativePlugin));
export { BranchIo };
//# sourceMappingURL=data:application/json;base64,