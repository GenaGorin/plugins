import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var SqliteDbCopy = /** @class */ (function (_super) {
    __extends(SqliteDbCopy, _super);
    function SqliteDbCopy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SqliteDbCopy.prototype.copy = function (dbname, location) { return cordova(this, "copy", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    SqliteDbCopy.prototype.checkDbOnStorage = function (dbname, source) { return cordova(this, "checkDbOnStorage", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    SqliteDbCopy.prototype.copyDbFromStorage = function (dbname, location, source, deleteolddb) { return cordova(this, "copyDbFromStorage", { "successIndex": 4, "errorIndex": 5 }, arguments); };
    SqliteDbCopy.prototype.copyDbToStorage = function (dbname, location, destination, overwrite) { return cordova(this, "copyDbToStorage", { "successIndex": 4, "errorIndex": 5 }, arguments); };
    SqliteDbCopy.prototype.remove = function (dbname, location) { return cordova(this, "remove", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    SqliteDbCopy.pluginName = "cordova-plugin-dbcopy";
    SqliteDbCopy.plugin = "cordova-plugin-dbcopy";
    SqliteDbCopy.pluginRef = "window.plugins.sqlDB";
    SqliteDbCopy.repo = "https://github.com/an-rahulpandey/cordova-plugin-dbcopy";
    SqliteDbCopy.platforms = ["Android", "iOS"];
    SqliteDbCopy.decorators = [
        { type: Injectable }
    ];
    return SqliteDbCopy;
}(AwesomeCordovaNativePlugin));
export { SqliteDbCopy };
//# sourceMappingURL=data:application/json;base64,