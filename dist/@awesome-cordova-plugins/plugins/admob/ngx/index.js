import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var Admob = /** @class */ (function (_super) {
    __extends(Admob, _super);
    function Admob() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Admob.prototype.setOptions = function (options) { return cordova(this, "setOptions", {}, arguments); };
    Admob.prototype.createBannerView = function (options) { return cordova(this, "createBannerView", {}, arguments); };
    Admob.prototype.showBannerAd = function (show) { return cordova(this, "showBannerAd", {}, arguments); };
    Admob.prototype.destroyBannerView = function () { return cordova(this, "destroyBannerView", {}, arguments); };
    Admob.prototype.requestInterstitialAd = function (options) { return cordova(this, "requestInterstitialAd", {}, arguments); };
    Admob.prototype.showInterstitialAd = function () { return cordova(this, "showInterstitialAd", {}, arguments); };
    Admob.prototype.requestRewardedAd = function (options) { return cordova(this, "requestRewardedAd", {}, arguments); };
    Admob.prototype.showRewardedAd = function () { return cordova(this, "showRewardedAd", {}, arguments); };
    Admob.prototype.onAdLoaded = function () { return cordova(this, "onAdLoaded", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdLoaded", "element": "document" }, arguments); };
    Admob.prototype.onAdFailedToLoad = function () { return cordova(this, "onAdFailedToLoad", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdFailedToLoad", "element": "document" }, arguments); };
    Admob.prototype.onAdOpened = function () { return cordova(this, "onAdOpened", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdOpened", "element": "document" }, arguments); };
    Admob.prototype.onAdClosed = function () { return cordova(this, "onAdClosed", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdClosed", "element": "document" }, arguments); };
    Admob.prototype.onAdLeftApplication = function () { return cordova(this, "onAdLeftApplication", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdLeftApplication", "element": "document" }, arguments); };
    Admob.prototype.onRewardedAd = function () { return cordova(this, "onRewardedAd", { "eventObservable": true, "event": "appfeel.cordova.admob.onRewardedAd", "element": "document" }, arguments); };
    Admob.prototype.onRewardedAdVideoStarted = function () { return cordova(this, "onRewardedAdVideoStarted", { "eventObservable": true, "event": "appfeel.cordova.admob.onRewardedAdVideoStarted", "element": "document" }, arguments); };
    Admob.prototype.onRewardedAdVideoCompleted = function () { return cordova(this, "onRewardedAdVideoCompleted", { "eventObservable": true, "event": "appfeel.cordova.admob.onRewardedAdVideoCompleted", "element": "document" }, arguments); };
    Object.defineProperty(Admob.prototype, "AD_SIZE", {
        get: function () { return cordovaPropertyGet(this, "AD_SIZE"); },
        set: function (value) { cordovaPropertySet(this, "AD_SIZE", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Admob.prototype, "AD_TYPE", {
        get: function () { return cordovaPropertyGet(this, "AD_TYPE"); },
        set: function (value) { cordovaPropertySet(this, "AD_TYPE", value); },
        enumerable: false,
        configurable: true
    });
    Admob.pluginName = "AdMob";
    Admob.plugin = "cordova-admob";
    Admob.pluginRef = "admob";
    Admob.repo = "https://github.com/appfeel/admob-google-cordova";
    Admob.platforms = ["Android", "iOS", "Browser"];
    Admob.decorators = [
        { type: Injectable }
    ];
    return Admob;
}(AwesomeCordovaNativePlugin));
export { Admob };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYWRtb2Ivbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sK0VBQWdFLE1BQU0sK0JBQStCLENBQUM7QUFDN0csT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUFrU1AseUJBQTBCOzs7O0lBb0NuRCwwQkFBVSxhQUFDLE9BQXVDO0lBV2xELGdDQUFnQixhQUFDLE9BQXdDO0lBV3pELDRCQUFZLGFBQUMsSUFBYztJQVMzQixpQ0FBaUI7SUFZakIscUNBQXFCLGFBQUMsT0FBd0M7SUFVOUQsa0NBQWtCO0lBY2xCLGlDQUFpQixhQUFDLE9BQXdDO0lBVTFELDhCQUFjO0lBc0JkLDBCQUFVO0lBc0JWLGdDQUFnQjtJQXVCaEIsMEJBQVU7SUF1QlYsMEJBQVU7SUF1QlYsbUNBQW1CO0lBc0JuQiw0QkFBWTtJQXNCWix3Q0FBd0I7SUFzQnhCLDBDQUEwQjswQkE1UmpCLDBCQUFPOzs7Ozs7MEJBY1AsMEJBQU87Ozs7Ozs7Ozs7OztnQkF2QmpCLFVBQVU7O2dCQW5TWDtFQW9TMkIsMEJBQTBCO1NBQXhDLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIENvcmRvdmFQcm9wZXJ0eSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBZG1vYkJhc2VPcHRpb25zIHtcclxuICAvKipcclxuICAgKiAoT3B0aW9uYWwpIFlvdXIgaW50ZXJzdGl0aWFsIGlkIGNvZGUgZnJvbSB5b3VyIEFkTW9iIGFjY291bnQuIERlZmF1bHRzIHRvIGJhbm5lckFkSWRcclxuICAgKi9cclxuICBpbnRlcnN0aXRpYWxBZElkPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiAoT3B0aW9uYWwpIEluZGljYXRlcyB3aGV0aGVyIHRvIHB1dCBiYW5uZXIgYWRzIGF0IHRvcCB3aGVuIHNldCB0byB0cnVlIG9yIGF0IGJvdHRvbSB3aGVuIHNldCB0byBmYWxzZS4gRGVmYXVsdHMgdG8gZmFsc2VcclxuICAgKi9cclxuICBiYW5uZXJBdFRvcD86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIChPcHRpb25hbCkgU2V0IHRvIHRydWUgdG8gcmVjZWl2ZSB0ZXN0IGFkcyAoZG8gbm90IHRlc3Qgd2l0aCByZWFsIGFkcyBhcyB5b3VyIGFjY291bnQgbWF5IGJlIGJhbm5lZCkuIERlZmF1bHRzIHRvIGZhbHNlXHJcbiAgICovXHJcbiAgaXNUZXN0aW5nPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogKE9wdGlvbmFsKSBBdXRvIHNob3cgYmFubmVyIGFkcyB3aGVuIGF2YWlsYWJsZSAob25BZExvYWRlZCBldmVudCBpcyBjYWxsZWQpLiBEZWZhdWx0cyB0byB0cnVlXHJcbiAgICovXHJcbiAgYXV0b1Nob3dCYW5uZXI/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiAoT3B0aW9uYWwpIEF1dG8gc2hvdyBpbnRlcnN0aXRpYWwgYWRzIHdoZW4gYXZhaWxhYmxlIChvbkFkTG9hZGVkIGV2ZW50IGlzIGNhbGxlZCkuIERlZmF1bHRzIHRvIHRydWVcclxuICAgKi9cclxuICBhdXRvU2hvd0ludGVyc3RpdGlhbD86IGJvb2xlYW47XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBBZG1vYk9wdGlvbnMgZXh0ZW5kcyBBZG1vYkJhc2VPcHRpb25zIHtcclxuICAvKipcclxuICAgKiBZb3VyIGJhbm5lciBpZCBjb2RlIGZyb20geW91ciBBZE1vYiBhY2NvdW50IChodHRwczovL3N1cHBvcnQuZ29vZ2xlLmNvbS9hZG1vYi9hbnN3ZXIvNzM1NjQzMT9obD1lbilcclxuICAgKi9cclxuICBiYW5uZXJBZElkOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIERlcHJlY2F0ZWQuIE5vdyBpcyBvbmx5IHVzZWQgaW4gd2ViLiBJdCB3aWxsIGJlIHVzZWQgYXMgYSBiYW5uZXJBZElkIG9ubHkgaW4gY2FzZSBpdCBpcyB1bmRlZmluZWQuXHJcbiAgICovXHJcbiAgcHVibGlzaGVySWQ/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIChPcHRpb25hbCkgWW91ciB0YXBweCBpZCBmb3IgaU9TIGFwcHMuIElmIEFkbW9iIGlzIGNvbmZpZ3VyZWQsIGl0IGlzIGFsc28gdXNlZCB0byBiYWNrZmlsbCB5b3VyIGxvc3QgaW52ZW50b3J5ICh3aGVuIHRoZXJlIGFyZSBubyBBZG1vYiBhZHMgYXZhaWxhYmxlKVxyXG4gICAqL1xyXG4gIHRhcHB4SWRpT1M/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIChPcHRpb25hbCkgWW91ciB0YXBweCBpZCBmb3IgQW5kcm9pZCBhcHBzLiBBZG1vYiBpcyBjb25maWd1cmVkLCBpdCBpcyBhbHNvIHVzZWQgdG8gYmFja2ZpbGwgeW91ciBsb3N0IGludmVudG9yeSB3aGVuIHRoZXJlIGFyZSBubyBBZG1vYiBhZHMgYXZhaWxhYmxlXHJcbiAgICovXHJcbiAgdGFwcHhJZEFuZHJvaWQ/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkTW9iIHJld2FyZGVkIGlkIChodHRwczovL3N1cHBvcnQuZ29vZ2xlLmNvbS9hZG1vYi9hbnN3ZXIvNzM1NjQzMT9obD1lbilcclxuICAgKi9cclxuICByZXdhcmRlZEFkSWQ/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIChPcHRpb25hbCkgQXV0byBzaG93IHJld2FyZGVkIGFkcyB3aGVuIGF2YWlsYWJsZSAob25BZExvYWRlZCBldmVudCBpcyBjYWxsZWQpLiBEZWZhdWx0cyB0byB0cnVlXHJcbiAgICovXHJcbiAgYXV0b1Nob3dSZXdhcmRlZD86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIChPcHRpb25hbCkgSWYgYW55IG9mIHRhcHB4SWQgaXMgcHJlc2VudCwgaXQgdGVsbHMgdGhlIHBlcmNlbnRhZ2Ugb2YgdHJhZmZpYyBkaXZlcnRlZCB0byB0YXBweC4gRGVmYXVsdHMgdG8gMC41ICg1MCUgb2YgdGhlIHRyYWZmaWMgd2lsbCBiZSByZXF1ZXN0ZWQgdG8gVGFwcHgpXHJcbiAgICovXHJcbiAgdGFwcHhTaGFyZT86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogKE9wdGlvbmFsKSBJbmRpY2F0ZXMgdGhlIHNpemUgb2YgYmFubmVyIGFkc1xyXG4gICAqL1xyXG4gIGFkU2l6ZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogKE9wdGlvbmFsKSBBbGxvdyBiYW5uZXIgb3ZlcmxhcCB3ZWJ2aWV3LiBEZWZhdWx0IGZhbHNlXHJcbiAgICovXHJcbiAgb3ZlcmxhcD86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIChPcHRpb25hbCkgU2V0IHRvIHRydWUgdG8gYXZvaWQgaW9zNyBzdGF0dXMgYmFyIG92ZXJsYXAuIERlZmF1bHQgZmFsc2VcclxuICAgKi9cclxuICBvZmZzZXRTdGF0dXNCYXI/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiAoT3B0aW9ucykgQSBKU09OIG9iamVjdCB3aXRoIGFkZGl0aW9uYWwge2tleTogdmFsdWV9IHBhaXJzXHJcbiAgICovXHJcbiAgYWRFeHRyYXM/OiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWRtb2JXZWJPcHRpb25zIGV4dGVuZHMgQWRtb2JCYXNlT3B0aW9ucyB7XHJcbiAgLyoqXHJcbiAgICogKFJlcXVpcmVkKSBBZFNlbnNlIFB1Ymxpc2hlciBJRCAoaHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRzZW5zZS9hbnN3ZXIvMTA1NTE2KVxyXG4gICAqL1xyXG4gIHB1Ymxpc2hlcklkOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIChSZXF1aXJlZCkgWW91ciBhZCBzbG90IGNvZGUgZnJvbSB5b3VyIEFkU2Vuc2UgYWNjb3VudC4gT25seSBmb3IgYnJvd3NlciBwbGF0Zm9ybSBodHRwczovL3N1cHBvcnQuZ29vZ2xlLmNvbS9hZHNlbnNlL2Fuc3dlci8xMDU1MTZcclxuICAgKi9cclxuICBhZFNsb3Q6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogKE9wdGlvbmFsKSBJbmRpY2F0ZXMgaWYgc2hvdyBhIGNsb3NlIGJ1dHRvbiBvbiBpbnRlcnN0aXRpYWwgYnJvd3NlciBhZHMuIE9ubHkgZm9yIGJyb3dzZXIgcGxhdGZvcm1cclxuICAgKi9cclxuICBpbnRlcnN0aXRpYWxTaG93Q2xvc2VCdXR0b24/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiAoT3B0aW9uYWwpIEluZGljYXRlcyB0aGUgbnVtYmVyIG9mIHNlY29uZHMgdGhhdCB0aGUgaW50ZXJzdGl0aWFsIGFkIHdhaXRzIGJlZm9yZSBzaG93IHRoZSBjbG9zZSBidXR0b24uIE9ubHkgZm9yIGJyb3dzZXIgcGxhdGZvcm1cclxuICAgKi9cclxuICBzZWNvbmRzVG9TaG93Q2xvc2VCdXR0b24/OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIChPcHRpb25hbCkgSW5kaWNhdGVzIHRoZSBudW1iZXIgb2Ygc2Vjb25kcyB0aGF0IHRoZSBpbnRlcnN0aXRpYWwgYWQgd2FpdHMgYmVmb3JlIGNsb3NlIHRoZSBhZC4gT25seSBmb3IgYnJvd3NlciBwbGF0Zm9ybVxyXG4gICAqL1xyXG4gIHNlY29uZHNUb0Nsb3NlSW50ZXJzdGl0aWFsPzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFkTW9iRXZlbnQge1xyXG4gIC8qKlxyXG4gICAqIChPcHRpb25hbCkgQWRNb2Igc3VwcG9ydGVkIHR5cGUgYXMgc2VlbiBpbiBBRF9UWVBFXHJcbiAgICovXHJcbiAgYWRUeXBlPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiAoT3B0aW9uYWwpIEFkTW9iIGVycm9yIGNvZGVcclxuICAgKi9cclxuICBlcnJvcj86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogKE9wdGlvbmFsKSBBZE1vYiBlcnJvciByZWFzb25cclxuICAgKi9cclxuICByZWFzb24/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBBZE1vYlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogTW9zdCBjb21wbGV0ZSBBZG1vYiBwbHVnaW4gd2l0aCBzdXBwb3J0IGZvciBbVGFwcHhdKGh0dHA6Ly93d3cudGFwcHguY29tLz9oPWRlYzMzNGQ2MzI4Nzc3MmRlODU5YmRiNGU5NzdmY2U2KSBhZHMuXHJcbiAqIE1vbmV0aXplIHlvdXIgYXBwcyBhbmQgZ2FtZXMgd2l0aCBBZE1vYiBhZHMsIHVzaW5nIGxhdGVzdCBHb29nbGUgQWRNb2IgU0RLLiBXaXRoIHRoaXMgcGx1Z2luIHlvdSBjYW4gc2hvdyBBZE1vYiBhZHMgZWFzaWx5IVxyXG4gKlxyXG4gKiBTdXBwb3J0czoqKlxyXG4gKiAtIEJhbm5lciBhZHMgKHRvcCBhbmQgYm90dG9tKVxyXG4gKiAtIEludGVyc3RpdGlhbCBhZHNcclxuICogLSBSZXdhcmRlZCBhZHNcclxuICogLSBbVGFwcHhdKGh0dHA6Ly93d3cudGFwcHguY29tLz9oPWRlYzMzNGQ2MzI4Nzc3MmRlODU5YmRiNGU5NzdmY2U2KSBhZHNcclxuICogQHVzYWdlXHJcbiAqIE5vdGU6KiogTm8gYWRzIHdpbGwgYmUgc2VydmVkIG9uIGFwcHMgd2l0aCBwYWNrYWdlIG5hbWUgYGlvLmlvbmljLnN0YXJ0ZXJgLiBUaGlzIGlzIHRoZSBkZWZhdWx0IHBhY2thZ2UgbmFtZSBmb3IgbmV3IGBpb25pY2AgYXBwcy4gTWFrZSBzdXJlIHRvIHJlbmFtZSB0aGUgcGFja2FnZSBuYW1lIHNvIGFkcyBjYW4gYmUgZGlzcGxheWVkLlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IEFkbW9iLCBBZG1vYk9wdGlvbnMgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvYWRtb2InO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGFkbW9iOiBBZG1vYikge1xyXG4gKiAgICAgLy8gQWRtb2Igb3B0aW9ucyBjb25maWdcclxuICogICAgIGNvbnN0IGFkbW9iT3B0aW9uczogQWRtb2JPcHRpb25zID0ge1xyXG4gKiAgICAgICBiYW5uZXJBZElkOiAnWFhYLVhYWFgtWFhYWCcsXHJcbiAqICAgICAgIGludGVyc3RpdGlhbEFkSWQ6ICdYWFgtWFhYWC1YWFhYJyxcclxuICogICAgICAgcmV3YXJkZWRBZElkOiAnWFhYLVhYWFgtWFhYWCcsXHJcbiAqICAgICAgIGlzVGVzdGluZzogdHJ1ZSxcclxuICogICAgICAgYXV0b1Nob3dCYW5uZXI6IGZhbHNlLFxyXG4gKiAgICAgICBhdXRvU2hvd0ludGVyc3RpdGlhbDogZmFsc2UsXHJcbiAqICAgICAgIGF1dG9TaG93UmV3YXJkZWQ6IGZhbHNlLFxyXG4gKiAgICAgICBhZFNpemU6IHRoaXMuYWRtb2IuQURfU0laRS5CQU5ORVJcclxuICogICAgIH07XHJcbiAqXHJcbiAqICAgICAvLyBTZXQgYWRtb2Igb3B0aW9uc1xyXG4gKiAgICAgdGhpcy5hZG1vYi5zZXRPcHRpb25zKGFkbW9iT3B0aW9ucylcclxuICogICAgICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0FkbW9iIG9wdGlvbnMgaGF2ZSBiZWVuIHN1Y2Nlc3NmdWxseSBzZXQnKSlcclxuICogICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKCdFcnJvciBzZXR0aW5nIGFkbW9iIG9wdGlvbnM6JywgZXJyKSk7XHJcbiAqIH1cclxuICpcclxuICpcclxuICpcclxuICogLy8gKE9wdGlvbmFsbHkpIExvYWQgYmFubmVyIGFkLCBpbiBvcmRlciB0byBoYXZlIGl0IHJlYWR5IHRvIHNob3dcclxuICogdGhpcy5hZG1vYi5jcmVhdGVCYW5uZXJWaWV3KClcclxuICogICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygnQmFubmVyIGFkIGxvYWRlZCcpKVxyXG4gKiAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBiYW5uZXIgYWQ6JywgZXJyKSk7XHJcbiAqXHJcbiAqXHJcbiAqIC8vIFNob3cgYmFubmVyIGFkIChjcmVhdGVCYW5uZXJWaWV3IG11c3QgYmUgY2FsbGVkIGJlZm9yZSBhbmQgb25BZExvYWRlZCgpIGV2ZW50IHJhaXNlZClcclxuICogdGhpcy5hZG1vYi5vbkFkTG9hZGVkKCkuc3Vic2NyaWJlKChhZCkgPT4ge1xyXG4gKiAgIGlmIChhZC5hZFR5cGUgPT09IHRoaXMuYWRtb2IuQURfVFlQRS5CQU5ORVIpIHtcclxuICogICAgIHRoaXMuYWRtb2Iuc2hvd0Jhbm5lckFkKClcclxuICogICAgICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0Jhbm5lciBhZCBzaG93bicpKVxyXG4gKiAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNob3dpbmcgYmFubmVyIGFkOicsIGVycikpO1xyXG4gKiAgIH1cclxuICogfSk7XHJcbiAqXHJcbiAqXHJcbiAqIC8vIEhpZGUgYmFubmVyIGFkLCBidXQgZG8gbm90IGRlc3Ryb3kgaXQsIHNvIGl0IGNhbiBiZSBzaG93biBsYXRlciBvblxyXG4gKiAvLyBTZWUgZGVzdHJveUJhbm5lclZpZXcgaW4gb3JkZXIgdG8gaGlkZSBhbmQgZGVzdHJveSBiYW5uZXIgYWRcclxuICogdGhpcy5hZG1vYi5zaG93QmFubmVyQWQoZmFsc2UpXHJcbiAqICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0Jhbm5lciBhZCBoaWRkZW4nKSlcclxuICogICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGhpZGluZyBiYW5uZXIgYWQ6JywgZXJyKSk7XHJcbiAqXHJcbiAqXHJcbiAqXHJcbiAqIC8vIFJlcXVlc3QgYW4gaW50ZXJzdGl0aWFsIGFkLCBpbiBvcmRlciB0byBiZSBzaG93biBsYXRlciBvblxyXG4gKiAvLyBJdCBpcyBwb3NzaWJsZSB0byBhdXRvc2hvdyBpdCB2aWEgb3B0aW9ucyBwYXJhbWV0ZXIsIHNlZSBkb2NzXHJcbiAqIHRoaXMuYWRtb2IucmVxdWVzdEludGVyc3RpdGlhbEFkKClcclxuICogICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygnSW50ZXJzdGl0aWFsIGFkIGxvYWRlZCcpKVxyXG4gKiAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBpbnRlcnN0aXRpYWwgYWQ6JywgZXJyKSk7XHJcbiAqXHJcbiAqXHJcbiAqIC8vIFNob3cgYW4gaW50ZXJzdGl0aWFsIGFkIChyZXF1ZXN0SW50ZXJzdGl0aWFsQWQgbXVzdCBiZSBjYWxsZWQgYmVmb3JlKVxyXG4gKiB0aGlzLmFkbW9iLm9uQWRMb2FkZWQoKS5zdWJzY3JpYmUoKGFkKSA9PiB7XHJcbiAqICAgaWYgKGFkLmFkVHlwZSA9PT0gdGhpcy5hZG1vYi5BRF9UWVBFLklOVEVSU1RJVElBTCkge1xyXG4gKiAgICAgdGhpcy5hZG1vYi5zaG93SW50ZXJzdGl0aWFsQWQoKVxyXG4gKiAgICAgICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygnSW50ZXJzdGl0aWFsIGFkIHNob3duJykpXHJcbiAqICAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcignRXJyb3Igc2hvd2luZyBpbnRlcnN0aXRpYWwgYWQ6JywgZXJyKSk7XHJcbiAqICAgfVxyXG4gKiB9KTtcclxuICpcclxuICpcclxuICogLy8gUmVxdWVzdCBhIHJld2FyZGVkIGFkXHJcbiAqIHRoaXMuYWRtb2IucmVxdWVzdFJld2FyZGVkQWQoKVxyXG4gKiAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdSZXdhcmRlZCBhZCBsb2FkZWQnKSlcclxuICogICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgcmV3YXJkZWQgYWQ6JywgZXJyKSk7XHJcbiAqXHJcbiAqXHJcbiAqIC8vIFNob3cgcmV3YXJkZWQgYWQgKHJlcXVlc3RSZXdhcmRlZEFkIG11c3QgYmUgY2FsbGVkIGJlZm9yZSlcclxuICogdGhpcy5hZG1vYi5vbkFkTG9hZGVkKCkuc3Vic2NyaWJlKChhZCkgPT4ge1xyXG4gKiAgIGlmIChhZC5hZFR5cGUgPT09IHRoaXMuYWRtb2IuQURfVFlQRS5SRVdBUkRFRCkge1xyXG4gKiAgICAgdGhpcy5hZG1vYi5zaG93UmV3YXJkZWRBZCgpXHJcbiAqICAgICAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdSZXdhcmRlZCBhZCBzaG93bicpKVxyXG4gKiAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNob3dpbmcgcmV3YXJkZWQgYWQ6JywgZXJyKSk7XHJcbiAqICAgfVxyXG4gKiB9KTtcclxuICpcclxuICpcclxuICogLy8gSGlkZSBhbmQgZGVzdHJveSBiYW5uZXIgb3IgaW50ZXJzdGl0aWFsIGFkXHJcbiAqIHRoaXMuYWRtb2IuZGVzdHJveUJhbm5lclZpZXcoKVxyXG4gKiAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdCYW5uZXIgb3IgaW50ZXJzdGl0aWFsIGFkIGRlc3Ryb3llZCcpKVxyXG4gKiAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcignRXJyb3IgZGVzdHJveWluZyBiYW5uZXIgb3IgaW50ZXJzdGl0aWFsIGFkOicsIGVycikpO1xyXG4gKlxyXG4gKlxyXG4gKlxyXG4gKiAvLyBPbiBBZCBsb2FkZWQgZXZlbnRcclxuICogdGhpcy5hZG1vYi5vbkFkTG9hZGVkKCkuc3Vic2NyaWJlKChhZCkgPT4ge1xyXG4gKiAgIGlmIChhZC5hZFR5cGUgPT09IHRoaXMuYWRtb2IuQURfVFlQRS5CQU5ORVIpIHtcclxuICogICAgIGNvbnNvbGUubG9nKCdCYW5uZXIgYWQgaXMgbG9hZGVkJyk7XHJcbiAqICAgICB0aGlzLmFkbW9iLnNob3dCYW5uZXJBZCgpO1xyXG4gKiAgIH0gZWxzZSBpZiAoYWQuYWRUeXBlID09PSB0aGlzLmFkbW9iLkFEX1RZUEUuSU5URVJTVElUSUFMKSB7XHJcbiAqICAgICBjb25zb2xlLmxvZygnSW50ZXJzdGl0aWFsIGFkIGlzIGxvYWRlZCcpO1xyXG4gKiAgICAgdGhpcy5hZG1vYi5zaG93SW50ZXJzdGl0aWFsQWQoKTtcclxuICogICB9IGVsc2UgaWYgKGFkLmFkVHlwZSA9PT0gdGhpcy5hZG1vYi5BRF9UWVBFLlJFV0FSREVEKSB7XHJcbiAqICAgICBjb25zb2xlLmxvZygnUmV3YXJkZWQgYWQgaXMgbG9hZGVkJyk7XHJcbiAqICAgICB0aGlzLmFkbW9iLnNob3dSZXdhcmRlZEFkKCk7XHJcbiAqICAgfVxyXG4gKiB9KTtcclxuICpcclxuICpcclxuICpcclxuICogLy8gT24gYWQgZmFpbGVkIHRvIGxvYWRcclxuICogdGhpcy5hZG1vYi5vbkFkRmFpbGVkVG9Mb2FkKCkuc3Vic2NyaWJlKGVyciA9PiBjb25zb2xlLmxvZygnRXJyb3IgbG9hZGluZyBhZDonLCBlcnIpKTtcclxuICpcclxuICpcclxuICpcclxuICogLy8gT24gaW50ZXJzdGl0aWFsIGFkIG9wZW5lZFxyXG4gKiB0aGlzLmFkbW9iLm9uQWRPcGVuZWQoKS5zdWJzY3JpYmUoKCkgPT4gY29uc29sZS5sb2coJ0ludGVyc3RpdGlhbCBhZCBvcGVuZWQnKSk7XHJcbiAqXHJcbiAqXHJcbiAqXHJcbiAqIC8vIE9uIGludGVyc3RpdGlhbCBhZCBjbG9zZWRcclxuICogdGhpcy5hZG1vYi5vbkFkQ2xvc2VkKCkuc3Vic2NyaWJlKCgpID0+IGNvbnNvbGUubG9nKCdJbnRlcnN0aXRpYWwgYWQgY2xvc2VkJykpO1xyXG4gKlxyXG4gKlxyXG4gKlxyXG4gKiAvLyBPbiBhZCBjbGlja2VkIGFuZCBsZWZ0IGFwcGxpY2F0aW9uXHJcbiAqIHRoaXMuYWRtb2Iub25BZExlZnRBcHBsaWNhdGlvbigpLnN1YnNjcmliZSgoKSA9PiBjb25zb2xlLmxvZygnQWQgbGVmdGVkIGFwcGxpY2F0aW9uJykpO1xyXG4gKlxyXG4gKlxyXG4gKlxyXG4gKiAvLyBPbiB1c2VyIGFkIHJld2FyZGVkXHJcbiAqIHRoaXMuYWRtb2Iub25SZXdhcmRlZEFkKCkuc3Vic2NyaWJlKCgpID0+IGNvbnNvbGUubG9nKCdUaGUgdXNlciBoYXMgYmVlbiByZXdhcmRlZCcpKTtcclxuICpcclxuICpcclxuICpcclxuICogLy8gT24gcmV3YXJkZWQgYWQgdmlkZW8gc3RhcnRlZFxyXG4gKiB0aGlzLmFkbW9iLm9uUmV3YXJkZWRBZFZpZGVvU3RhcnRlZCgpLnN1YnNjcmliZSgoKSA9PiBjb25zb2xlLmxvZygnUmV3YXJkZWQgYWQgdmllbyBzdGFydGVkJykpO1xyXG4gKlxyXG4gKlxyXG4gKlxyXG4gKiAvLyBPbiByZXdhcmRlZCBhZCB2aWRlbyBjb21wbGV0ZWRcclxuICogdGhpcy5hZG1vYi5vblJld2FyZGVkQWRWaWRlb0NvbXBsZXRlZCgpLnN1YnNjcmliZSgoKSA9PiBjb25zb2xlLmxvZygnUmV3YXJkZWQgYWQgdmlkZW8gY29tcGxldGVkJykpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdBZE1vYicsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1hZG1vYicsXHJcbiAgcGx1Z2luUmVmOiAnYWRtb2InLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vYXBwZmVlbC9hZG1vYi1nb29nbGUtY29yZG92YScsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJywgJ0Jyb3dzZXInXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQWRtb2IgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBlbnVtIHJlcHJlc2VudHMgQWRNb2IncyBzdXBwb3J0ZWQgYWQgc2l6ZXMuXHJcbiAgICogVXNlIG9uZSBvZiB0aGVzZSBjb25zdGFudHMgYXMgYWRTaXplIG9wdGlvbiB3aGVuIGNhbGxpbmcgY3JlYXRlQmFubmVyVmlld1xyXG4gICAqXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICovXHJcbiAgQENvcmRvdmFQcm9wZXJ0eSgpXHJcbiAgcmVhZG9ubHkgQURfU0laRToge1xyXG4gICAgQkFOTkVSOiBzdHJpbmc7XHJcbiAgICBJQUJfTVJFQ1Q6IHN0cmluZztcclxuICAgIElBQl9CQU5ORVI6IHN0cmluZztcclxuICAgIElBQl9MRUFERVJCT0FSRDogc3RyaW5nO1xyXG4gICAgU01BUlRfQkFOTkVSOiBzdHJpbmc7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBlbnVtIHJlcHJlc2VudHMgQWRNb2IncyBzdXBwb3J0ZWQgYWQgdHlwZXNcclxuICAgKlxyXG4gICAqIEByZWFkb25seVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhUHJvcGVydHkoKVxyXG4gIHJlYWRvbmx5IEFEX1RZUEU6IHtcclxuICAgIEJBTk5FUjogc3RyaW5nO1xyXG4gICAgSU5URVJTVElUSUFMOiBzdHJpbmc7XHJcbiAgICBSRVdBUkRFRDogc3RyaW5nO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCB0aGUgb3B0aW9ucyB0byBzdGFydCBkaXNwbGF5aW5nIGFkcy5cclxuICAgKiBBbHRob3VnaCBpdCBpcyBub3QgcmVxdWlyZWQgdG8gY2FsbCB0aGlzIG1ldGhvZCwgYXMgb3B0aW9ucyBjYW4gYmUgc3BlY2lmaWVkIGluIG90aGVyIG1ldGhvZHMsIGl0IGlzIGhpZ2hseSByZWNvbW1lbmRlZFxyXG4gICAqXHJcbiAgICogQHBhcmFtIG9wdGlvbnMge0FkbW9iT3B0aW9uc30gU29tZSBwYXJhbSB0byBjb25maWd1cmUgc29tZXRoaW5nXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBvcHRpb25zIGFyZSBzZXRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2V0T3B0aW9ucyhvcHRpb25zOiBBZG1vYk9wdGlvbnMgfCBBZG1vYldlYk9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIG5ldyBiYW5uZXIgYWQgdmlldy4gQ2FsbCB0aGlzIG1ldGhvZCBpbiBvcmRlciB0byBiZSBhYmxlIHRvIHN0YXJ0IHNob3dpbmcgYmFubmVyc1xyXG4gICAqXHJcbiAgICogQHBhcmFtIG9wdGlvbnMge0FkbW9iT3B0aW9uc30gKE9wdGlvbmFsKSBTZXR1cCBvcHRpb25zXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBiYW5uZXIgdmlldyBpcyBjcmVhdGVkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNyZWF0ZUJhbm5lclZpZXcob3B0aW9ucz86IEFkbW9iT3B0aW9ucyB8IEFkbW9iV2ViT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTaG93IGJhbm5lciBhZHMuIFlvdSBtdXN0IGNhbGwgY3JlYXRlQmFubmVyVmlldyBmaXJzdCwgb3RoZXJ3aXNlIGl0IHdpbGwgcmVzdWx0IGluIGZhaWx1cmUgY2FsbGJhY2sgYW5kIG5vIGFkcyB3aWxsIGJlIHNob3duXHJcbiAgICpcclxuICAgKiBAcGFyYW0gc2hvdyB7Ym9vbGVhbn0gKE9wdGlvbmFsKSBJbmRpY2F0ZXMgd2hldGhlciB0byBzaG93IG9yIGhpZGUgYmFubmVyIGFkcy4gRGVmYXVsdHMgdG8gYHRydWVgXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBiYW5uZXIgc2hvd24gb3IgaGlkZGVuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNob3dCYW5uZXJBZChzaG93PzogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIaWRlIGFuZCBkZXN0cm95IGJhbm5lciB2aWV3LiBDYWxsIHRoaXMgbWV0aG9kIHdoZW4geW91IHdhbnQgdG8gZGVzdHJveSBiYW5uZXIgdmlldy5cclxuICAgKiBJdCBpcyBub3QgbmVjZXNzYXJ5IHRvIGNhbGwgdGhpcyBtZXRob2Qgd2hlbiB0aGUgYXBwIGNsb3NlZCwgYXMgaXQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGNhbGxlZCBieSB0aGUgcGx1Z2luXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGRlc3Ryb3lCYW5uZXJWaWV3KCkge31cclxuXHJcbiAgLyoqXHJcbiAgICogUmVxdWVzdCBhbiBpbnRlcnN0aXRpYWwgYWRcclxuICAgKiBJZiBgb3B0aW9ucy5hdXRvU2hvd0ludGVyc3RpdGlhbGAgaXMgc2V0IHRvIGB0cnVlYCAoZGVmYXVsdCksIHRoZSBhZCB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgZGlzcGxheWVkLlxyXG4gICAqIE90aGVyd2lzZSB5b3UgbmVlZCB0byBzdWJzY3JpYmUgdG8gYG9uQWRMb2FkZWQoKWAgZXZlbnQgYW5kIGNhbGwgYHNob3dJbnRlcnN0aXRpYWxBZCgpYCBhZnRlciBpdCB3aWxsIGJlIHJhaXNlZCBzcGVjaWZ5aW5nIHRoYXQgYW4gaW50ZXJzdGl0aWFsIGFkIGlzIGF2YWlsYWJsZS5cclxuICAgKiBJZiB5b3UgYWxyZWFkeSBjYWxsZWQgYHJlcXVlc3RJbnRlcnN0aXRpYWxBZCgpYCBidXQgdGhlIGludGVyc3RpdGlhbCBoYXMgbmV2ZXIgYmVlbiBzaG93biwgdGhlIHN1Y2Nlc3NpdmUgY2FsbHMgdG8gYHJlcXVlc3RJbnRlcnN0aXRpYWxBZCgpYCB3aWxsIHJlc3VsdCBpbiB0aGUgYWQgYmVpbmcgaW5tZWRpYXRlbHkgYXZhaWxhYmxlICh0aGUgb25lIHRoYXQgd2FzIG9idGFpbmVkIG9uIHRoZSBmaXJzdCBjYWxsKVxyXG4gICAqXHJcbiAgICogQHBhcmFtIG9wdGlvbnMge0FkbW9iT3B0aW9uc30gKE9wdGlvbmFsKSBTZXR1cCBvcHRpb25zXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBpbnRlcnN0aXRpYWwgYWQgaXMgbG9hZGVkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlcXVlc3RJbnRlcnN0aXRpYWxBZChvcHRpb25zPzogQWRtb2JPcHRpb25zIHwgQWRtb2JXZWJPcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNob3cgYW4gaW50ZXJzdGl0aWFsIGFkLiBDYWxsIGl0IGFmdGVyIGByZXF1ZXN0SW50ZXJzdGl0aWFsQWQoKWAgYW5kIGBvbkFkTG9hZGVkKClgIGV2ZW50IHJhaXNlZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgaW50ZXJzdGl0aWFsIGFkIGlzIHNob3duXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNob3dJbnRlcnN0aXRpYWxBZCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVxdWVzdCBhbiByZXdhcmRlZCBhZFxyXG4gICAqIElmIGBvcHRpb25zLmF1dG9TaG93UmV3YXJkZWRgIGlzIHNldCB0byBgdHJ1ZWAgKGRlZmF1bHQpLCB0aGUgYWQgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIGRpc3BsYXllZC5cclxuICAgKiBPdGhlcndpc2UgeW91IG5lZWQgdG8gc3Vic2NyaWJlIHRvIGBvbkFkTG9hZGVkKClgIGVuZW50IGFuZCBjYWxsIGBzaG93UmV3YXJkZWRBZCgpYCBhZnRlciBpdCB3aWxsIGJlIHJhaXNlZCBzcGVjaWZ5aW5nIHRoYXQgYSByZXdhcmRlZCBhZCBpcyBhdmFpbGFibGUuXHJcbiAgICogSWYgeW91IGFscmVhZHkgY2FsbGVkIGByZXF1ZXN0UmV3YXJkZWRBZCgpYCBidXQgdGhlIHJld2FyZGVkIGhhcyBuZXZlciBiZWVuIHNob3duLCB0aGUgc3VjY2Vzc2l2ZSBjYWxscyB0byBgcmVxdWVzdFJld2FyZGVkQWQoKWAgd2lsbCByZXN1bHQgaW4gdGhlIGFkIGJlaW5nIGlubWVkaWF0ZWx5IGF2YWlsYWJsZSAodGhlIG9uZSB0aGF0IHdhcyBvYnRhaW5lZCBvbiB0aGUgZmlyc3QgY2FsbClcclxuICAgKlxyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtBZG1vYk9wdGlvbnN9IChPcHRpb25hbCkgU2V0dXAgb3B0aW9uc1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgcmV3YXJkZWQgYWQgaXMgbG9hZGVkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlcXVlc3RSZXdhcmRlZEFkKG9wdGlvbnM/OiBBZG1vYk9wdGlvbnMgfCBBZG1vYldlYk9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2hvdyBhIHJld2FyZGVkIGFkXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHJld2FyZGVkIGFkIGlzIHNob3duXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNob3dSZXdhcmRlZEFkKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsZWQgd2hlbiBhbiBhZCBpcyByZWNlaXZlZC5cclxuICAgKlxyXG4gICAqIFdBUk5JTkcqOiBvbmx5ICoqaW9uaWNeNCoqLiBPbGRlciB2ZXJzaW9ucyBvZiBpb25pYywgdXNlOlxyXG4gICAqXHJcbiAgICogYGBganNcclxuICAgKiBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHdpbmRvdy5hZG1vYi5ldmVudHMub25BZExvYWRlZCwgKCkgPT4geyB9KTtcclxuICAgKiBgYGBcclxuICAgKlxyXG4gICAqIFBsZWFzZSByZWZlciB0byB0aGUgZG9jdW1lbnRhdGlvbiBvbiBodHRwczovL2FkbW9iLWlvbmljLmNvbS9FdmVudHMuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxBZE1vYkV2ZW50Pn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlIHdoZW4gYW4gYWQgaXMgcmVjZWl2ZWRcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBldmVudE9ic2VydmFibGU6IHRydWUsXHJcbiAgICBldmVudDogJ2FwcGZlZWwuY29yZG92YS5hZG1vYi5vbkFkTG9hZGVkJyxcclxuICAgIGVsZW1lbnQ6IGRvY3VtZW50LFxyXG4gIH0pXHJcbiAgb25BZExvYWRlZCgpOiBPYnNlcnZhYmxlPEFkTW9iRXZlbnQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGxlZCB3aGVuIGFuIGFkIHJlcXVlc3QgZmFpbGVkLlxyXG4gICAqXHJcbiAgICogV0FSTklORyo6IG9ubHkgKippb25pY140KiouIE9sZGVyIHZlcnNpb25zIG9mIGlvbmljLCB1c2U6XHJcbiAgICpcclxuICAgKiBgYGBqc1xyXG4gICAqIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIod2luZG93LmFkbW9iLmV2ZW50cy5vbkFkRmFpbGVkVG9Mb2FkLCAoKSA9PiB7IH0pO1xyXG4gICAqIGBgYFxyXG4gICAqXHJcbiAgICogUGxlYXNlIHJlZmVyIHRvIHRoZSBkb2N1bWVudGF0aW9uIG9uIGh0dHBzOi8vYWRtb2ItaW9uaWMuY29tL0V2ZW50cy5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPEFkTW9iRXZlbnQ+fSBSZXR1cm5zIGFuIG9ic2VydmFibGUgd2hlbiBhbiBhZCByZXF1ZXN0IGlzIGZhaWxlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGV2ZW50T2JzZXJ2YWJsZTogdHJ1ZSxcclxuICAgIGV2ZW50OiAnYXBwZmVlbC5jb3Jkb3ZhLmFkbW9iLm9uQWRGYWlsZWRUb0xvYWQnLFxyXG4gICAgZWxlbWVudDogZG9jdW1lbnQsXHJcbiAgfSlcclxuICBvbkFkRmFpbGVkVG9Mb2FkKCk6IE9ic2VydmFibGU8QWRNb2JFdmVudD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbGVkIHdoZW4gYW4gYWQgb3BlbnMgYW4gb3ZlcmxheSB0aGF0IGNvdmVycyB0aGUgc2NyZWVuLlxyXG4gICAqIFBsZWFzZSBub3RlIHRoYXQgb25QYXVzZSBjb3Jkb3ZhIGV2ZW50IGlzIHJhaXNlZCB3aGVuIGFuIGludGVyc3RpdGlhbCBpcyBzaG93bi5cclxuICAgKlxyXG4gICAqIFdBUk5JTkcqOiBvbmx5ICoqaW9uaWNeNCoqLiBPbGRlciB2ZXJzaW9ucyBvZiBpb25pYywgdXNlOlxyXG4gICAqXHJcbiAgICogYGBganNcclxuICAgKiBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHdpbmRvdy5hZG1vYi5ldmVudHMub25BZE9wZW5lZCwgKCkgPT4geyB9KTtcclxuICAgKiBgYGBcclxuICAgKlxyXG4gICAqIFBsZWFzZSByZWZlciB0byB0aGUgZG9jdW1lbnRhdGlvbiBvbiBodHRwczovL2FkbW9iLWlvbmljLmNvbS9FdmVudHMuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxBZE1vYkV2ZW50Pn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlIHdoZW4gYW4gYWQgaXMgb3BlbmVkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgZXZlbnRPYnNlcnZhYmxlOiB0cnVlLFxyXG4gICAgZXZlbnQ6ICdhcHBmZWVsLmNvcmRvdmEuYWRtb2Iub25BZE9wZW5lZCcsXHJcbiAgICBlbGVtZW50OiBkb2N1bWVudCxcclxuICB9KVxyXG4gIG9uQWRPcGVuZWQoKTogT2JzZXJ2YWJsZTxBZE1vYkV2ZW50PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsZWQgd2hlbiB0aGUgdXNlciBpcyBhYm91dCB0byByZXR1cm4gdG8gdGhlIGFwcGxpY2F0aW9uIGFmdGVyIGNsaWNraW5nIG9uIGFuIGFkLlxyXG4gICAqIFBsZWFzZSBub3RlIHRoYXQgb25SZXN1bWUgY29yZG92YSBldmVudCBpcyByYWlzZWQgd2hlbiBhbiBpbnRlcnN0aXRpYWwgaXMgY2xvc2VkLlxyXG4gICAqXHJcbiAgICogV0FSTklORyo6IG9ubHkgKippb25pY140KiouIE9sZGVyIHZlcnNpb25zIG9mIGlvbmljLCB1c2U6XHJcbiAgICpcclxuICAgKiBgYGBqc1xyXG4gICAqIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIod2luZG93LmFkbW9iLmV2ZW50cy5vbkFkQ2xvc2VkLCAoKSA9PiB7IH0pO1xyXG4gICAqIGBgYFxyXG4gICAqXHJcbiAgICogUGxlYXNlIHJlZmVyIHRvIHRoZSBkb2N1bWVudGF0aW9uIG9uIGh0dHBzOi8vYWRtb2ItaW9uaWMuY29tL0V2ZW50cy5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPEFkTW9iRXZlbnQ+fSBSZXR1cm5zIGFuIG9ic2VydmFibGUgd2hlbiBhbiBhZCBpcyBjbG9zZWRcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBldmVudE9ic2VydmFibGU6IHRydWUsXHJcbiAgICBldmVudDogJ2FwcGZlZWwuY29yZG92YS5hZG1vYi5vbkFkQ2xvc2VkJyxcclxuICAgIGVsZW1lbnQ6IGRvY3VtZW50LFxyXG4gIH0pXHJcbiAgb25BZENsb3NlZCgpOiBPYnNlcnZhYmxlPEFkTW9iRXZlbnQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGxlZCB3aGVuIHRoZSB1c2VyIGxlYXZlcyB0aGUgYXBwbGljYXRpb24gYWZ0ZXIgY2xpY2tpbmcgYW4gYWQgKGUuZy4sIHRvIGdvIHRvIHRoZSBicm93c2VyKVxyXG4gICAqXHJcbiAgICogQHJldHVybnMge09ic2VydmFibGU8QWRNb2JFdmVudD59IFJldHVybnMgYW4gb2JzZXJ2YWJsZSB3aGVuIGFuIGFkIGxlYXZlcyB0aGUgYXBwbGljYXRpb24uXHJcbiAgICpcclxuICAgKiBXQVJOSU5HKjogb25seSAqKmlvbmljXjQqKi4gT2xkZXIgdmVyc2lvbnMgb2YgaW9uaWMsIHVzZTpcclxuICAgKlxyXG4gICAqIGBgYGpzXHJcbiAgICogZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3cuYWRtb2IuZXZlbnRzLm9uQWRMZWZ0QXBwbGljYXRpb24sICgpID0+IHsgfSk7XHJcbiAgICogYGBgXHJcbiAgICpcclxuICAgKiBQbGVhc2UgcmVmZXIgdG8gdGhlIGRvY3VtZW50YXRpb24gb24gaHR0cHM6Ly9hZG1vYi1pb25pYy5jb20vRXZlbnRzLlxyXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPEFkTW9iRXZlbnQ+fSBSZXR1cm5zIGFuIG9ic2VydmFibGUgd2hlbiBhcHBsaWNhdGlvbiBpcyBsZWZ0IGR1ZSB0byBhbiBhZCBjbGlja1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGV2ZW50T2JzZXJ2YWJsZTogdHJ1ZSxcclxuICAgIGV2ZW50OiAnYXBwZmVlbC5jb3Jkb3ZhLmFkbW9iLm9uQWRMZWZ0QXBwbGljYXRpb24nLFxyXG4gICAgZWxlbWVudDogZG9jdW1lbnQsXHJcbiAgfSlcclxuICBvbkFkTGVmdEFwcGxpY2F0aW9uKCk6IE9ic2VydmFibGU8QWRNb2JFdmVudD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHVzZXIgaGFzIGJlZW4gcmV3YXJkZWQgYnkgYW4gYWQuXHJcbiAgICpcclxuICAgKiBXQVJOSU5HKjogb25seSAqKmlvbmljXjQqKi4gT2xkZXIgdmVyc2lvbnMgb2YgaW9uaWMsIHVzZTpcclxuICAgKlxyXG4gICAqIGBgYGpzXHJcbiAgICogZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3cuYWRtb2IuZXZlbnRzLm9uUmV3YXJkZWRBZCwgKCkgPT4geyB9KTtcclxuICAgKiBgYGBcclxuICAgKlxyXG4gICAqIFBsZWFzZSByZWZlciB0byB0aGUgZG9jdW1lbnRhdGlvbiBvbiBodHRwczovL2FkbW9iLWlvbmljLmNvbS9FdmVudHMuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxBZE1vYkV2ZW50Pn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlIHdoZW4gdGhlIHVzZXIgcmV3YXJkcyBhbiBhZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGV2ZW50T2JzZXJ2YWJsZTogdHJ1ZSxcclxuICAgIGV2ZW50OiAnYXBwZmVlbC5jb3Jkb3ZhLmFkbW9iLm9uUmV3YXJkZWRBZCcsXHJcbiAgICBlbGVtZW50OiBkb2N1bWVudCxcclxuICB9KVxyXG4gIG9uUmV3YXJkZWRBZCgpOiBPYnNlcnZhYmxlPEFkTW9iRXZlbnQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGxlZCB3aGVuIHRoZSB2aWRlbyBvZiBhIHJld2FyZGVkIGFkIHN0YXJ0ZWQuXHJcbiAgICpcclxuICAgKiBXQVJOSU5HKjogb25seSAqKmlvbmljXjQqKi4gT2xkZXIgdmVyc2lvbnMgb2YgaW9uaWMsIHVzZTpcclxuICAgKlxyXG4gICAqIGBgYGpzXHJcbiAgICogZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3cuYWRtb2IuZXZlbnRzLm9uUmV3YXJkZWRBZFZpZGVvU3RhcnRlZCwgKCkgPT4geyB9KTtcclxuICAgKiBgYGBcclxuICAgKlxyXG4gICAqIFBsZWFzZSByZWZlciB0byB0aGUgZG9jdW1lbnRhdGlvbiBvbiBodHRwczovL2FkbW9iLWlvbmljLmNvbS9FdmVudHMuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxBZE1vYkV2ZW50Pn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlIHdoZW4gdGhlIHZpZGVvIGlzIHN0YXJ0ZWRcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBldmVudE9ic2VydmFibGU6IHRydWUsXHJcbiAgICBldmVudDogJ2FwcGZlZWwuY29yZG92YS5hZG1vYi5vblJld2FyZGVkQWRWaWRlb1N0YXJ0ZWQnLFxyXG4gICAgZWxlbWVudDogZG9jdW1lbnQsXHJcbiAgfSlcclxuICBvblJld2FyZGVkQWRWaWRlb1N0YXJ0ZWQoKTogT2JzZXJ2YWJsZTxBZE1vYkV2ZW50PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsZWQgd2hlbiB0aGUgdmlkZW8gb2YgYSByZXdhcmRlZCBhZCBoYXMgY29tcGxldGVkLlxyXG4gICAqXHJcbiAgICogV0FSTklORyo6IG9ubHkgKippb25pY140KiouIE9sZGVyIHZlcnNpb25zIG9mIGlvbmljLCB1c2U6XHJcbiAgICpcclxuICAgKiBgYGBqc1xyXG4gICAqIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIod2luZG93LmFkbW9iLmV2ZW50cy5vblJld2FyZGVkQWRWaWRlb0NvbXBsZXRlZCwgKCkgPT4geyB9KTtcclxuICAgKiBgYGBcclxuICAgKlxyXG4gICAqIFBsZWFzZSByZWZlciB0byB0aGUgZG9jdW1lbnRhdGlvbiBvbiBodHRwczovL2FkbW9iLWlvbmljLmNvbS9FdmVudHMuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxBZE1vYkV2ZW50Pn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlIHdoZW4gdGhlIHZpZGVvIGlzIGNvbXBsZXRlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGV2ZW50T2JzZXJ2YWJsZTogdHJ1ZSxcclxuICAgIGV2ZW50OiAnYXBwZmVlbC5jb3Jkb3ZhLmFkbW9iLm9uUmV3YXJkZWRBZFZpZGVvQ29tcGxldGVkJyxcclxuICAgIGVsZW1lbnQ6IGRvY3VtZW50LFxyXG4gIH0pXHJcbiAgb25SZXdhcmRlZEFkVmlkZW9Db21wbGV0ZWQoKTogT2JzZXJ2YWJsZTxBZE1vYkV2ZW50PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==