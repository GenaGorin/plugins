import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var Zeroconf = /** @class */ (function (_super) {
    __extends(Zeroconf, _super);
    function Zeroconf() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Zeroconf.prototype.getHostname = function () { return cordova(this, "getHostname", {}, arguments); };
    Zeroconf.prototype.register = function (type, domain, name, port, txtRecord) { return cordova(this, "register", {}, arguments); };
    Zeroconf.prototype.unregister = function (type, domain, name) { return cordova(this, "unregister", {}, arguments); };
    Zeroconf.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    Zeroconf.prototype.watch = function (type, domain) { return cordova(this, "watch", { "observable": true, "clearFunction": "unwatch", "clearWithArgs": true }, arguments); };
    Zeroconf.prototype.unwatch = function (type, domain) { return cordova(this, "unwatch", {}, arguments); };
    Zeroconf.prototype.close = function () { return cordova(this, "close", {}, arguments); };
    Zeroconf.prototype.reInit = function () { return cordova(this, "reInit", {}, arguments); };
    Zeroconf.pluginName = "Zeroconf";
    Zeroconf.plugin = "cordova-plugin-zeroconf";
    Zeroconf.pluginRef = "cordova.plugins.zeroconf";
    Zeroconf.repo = "https://github.com/becvert/cordova-plugin-zeroconf";
    Zeroconf.platforms = ["Android", "iOS"];
    Zeroconf.decorators = [
        { type: Injectable }
    ];
    return Zeroconf;
}(AwesomeCordovaNativePlugin));
export { Zeroconf };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvemVyb2NvbmYvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7QUFDNUYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUEyREosNEJBQTBCOzs7O0lBT3RELDhCQUFXO0lBZVgsMkJBQVEsYUFBQyxJQUFZLEVBQUUsTUFBYyxFQUFFLElBQVksRUFBRSxJQUFZLEVBQUUsU0FBYztJQWFqRiw2QkFBVSxhQUFDLElBQVksRUFBRSxNQUFjLEVBQUUsSUFBWTtJQVVyRCx1QkFBSTtJQWdCSix3QkFBSyxhQUFDLElBQVksRUFBRSxNQUFjO0lBWWxDLDBCQUFPLGFBQUMsSUFBWSxFQUFFLE1BQWM7SUFVcEMsd0JBQUs7SUFVTCx5QkFBTTs7Ozs7OztnQkE5RlAsVUFBVTs7bUJBNURYO0VBNkQ4QiwwQkFBMEI7U0FBM0MsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBaZXJvY29uZlNlcnZpY2Uge1xyXG4gIGRvbWFpbjogc3RyaW5nO1xyXG4gIHR5cGU6IHN0cmluZztcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgcG9ydDogbnVtYmVyO1xyXG4gIGhvc3RuYW1lOiBzdHJpbmc7XHJcbiAgaXB2NEFkZHJlc3Nlczogc3RyaW5nW107XHJcbiAgaXB2NkFkZHJlc3Nlczogc3RyaW5nW107XHJcbiAgdHh0UmVjb3JkOiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgWmVyb2NvbmZSZXN1bHQge1xyXG4gIGFjdGlvbjogJ3JlZ2lzdGVyZWQnIHwgJ2FkZGVkJyB8ICdyZW1vdmVkJyB8ICdyZXNvbHZlZCc7XHJcbiAgc2VydmljZTogWmVyb2NvbmZTZXJ2aWNlO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgWmVyb2NvbmZcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgcGx1Z2luIGFsbG93cyB5b3UgdG8gYnJvd3NlIGFuZCBwdWJsaXNoIFplcm9jb25mL0JvbmpvdXIvbUROUyBzZXJ2aWNlcy5cclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgWmVyb2NvbmYgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvemVyb2NvbmYvbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSB6ZXJvY29uZjogWmVyb2NvbmYpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogLy8gd2F0Y2ggZm9yIHNlcnZpY2VzIG9mIGEgc3BlY2lmaWVkIHR5cGVcclxuICogdGhpcy56ZXJvY29uZi53YXRjaCgnX2h0dHAuX3RjcC4nLCAnbG9jYWwuJykuc3Vic2NyaWJlKHJlc3VsdCA9PiB7XHJcbiAqICAgaWYgKHJlc3VsdC5hY3Rpb24gPT0gJ2FkZGVkJykge1xyXG4gKiAgICAgY29uc29sZS5sb2coJ3NlcnZpY2UgYWRkZWQnLCByZXN1bHQuc2VydmljZSk7XHJcbiAqICAgfSBlbHNlIHtcclxuICogICAgIGNvbnNvbGUubG9nKCdzZXJ2aWNlIHJlbW92ZWQnLCByZXN1bHQuc2VydmljZSk7XHJcbiAqICAgfVxyXG4gKiB9KTtcclxuICpcclxuICogLy8gcHVibGlzaCBhIHplcm9jb25mIHNlcnZpY2Ugb2YgeW91ciBvd25cclxuICogdGhpcy56ZXJvY29uZi5yZWdpc3RlcignX2h0dHAuX3RjcC4nLCAnbG9jYWwuJywgJ0JlY3ZlcnRcXCdzIGlQYWQnLCA4MCwge1xyXG4gKiAgICdmb28nOiAnYmFyJ1xyXG4gKiB9KS50aGVuKHJlc3VsdCA9PiB7XHJcbiAqICAgY29uc29sZS5sb2coJ1NlcnZpY2UgcmVnaXN0ZXJlZCcsIHJlc3VsdC5zZXJ2aWNlKTtcclxuICogfSk7XHJcbiAqXHJcbiAqXHJcbiAqIC8vIHVucmVnaXN0ZXIgeW91ciBzZXJ2aWNlXHJcbiAqIHRoaXMuemVyb2NvbmYudW5yZWdpc3RlcignX2h0dHAuX3RjcC4nLCAnbG9jYWwuJywgJ0JlY3ZlcnRcXCdzIGlQYWQnKTtcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnWmVyb2NvbmYnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXplcm9jb25mJyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuemVyb2NvbmYnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vYmVjdmVydC9jb3Jkb3ZhLXBsdWdpbi16ZXJvY29uZicsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFplcm9jb25mIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhpcyBkZXZpY2UncyBob3N0bmFtZS5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldEhvc3RuYW1lKCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQdWJsaXNoZXMgYSBuZXcgc2VydmljZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9IFNlcnZpY2UgdHlwZSBuYW1lLCBlLmcuIFwiX2h0dHAuX3RjcFwiLlxyXG4gICAqIEBwYXJhbSBkb21haW4ge3N0cmluZ30gRG9tYWluIHNjb3BlIG9mIHRoZSBzZXJ2aWNlLCB0eXBpY2FsbHkgXCJsb2NhbC5cIi5cclxuICAgKiBAcGFyYW0gbmFtZSB7c3RyaW5nfSBVbnF1YWxpZmllZCBzZXJ2aWNlIGluc3RhbmNlIG5hbWUuXHJcbiAgICogQHBhcmFtIHBvcnQge251bWJlcn0gTG9jYWwgcG9ydCBvbiB3aGljaCB0aGUgc2VydmljZSBydW5zLlxyXG4gICAqIEBwYXJhbSB0eHRSZWNvcmQge2FueX0gQXJiaXRyYXJ5IGtleS92YWx1ZSBwYWlycyBkZXNjcmliaW5nIHRoZSBzZXJ2aWNlLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFplcm9jb25mUmVzdWx0Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSByZWdpc3RlcmVkIHNlcnZpY2UuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlZ2lzdGVyKHR5cGU6IHN0cmluZywgZG9tYWluOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgcG9ydDogbnVtYmVyLCB0eHRSZWNvcmQ6IGFueSk6IFByb21pc2U8WmVyb2NvbmZSZXN1bHQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVucmVnaXN0ZXJzIGEgc2VydmljZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9IFNlcnZpY2UgdHlwZSBuYW1lLCBlLmcuIFwiX2h0dHAuX3RjcFwiLlxyXG4gICAqIEBwYXJhbSBkb21haW4ge3N0cmluZ30gRG9tYWluIHNjb3BlIG9mIHRoZSBzZXJ2aWNlLCB0eXBpY2FsbHkgXCJsb2NhbC5cIi5cclxuICAgKiBAcGFyYW0gbmFtZSB7c3RyaW5nfSBVbnF1YWxpZmllZCBzZXJ2aWNlIGluc3RhbmNlIG5hbWUuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHVucmVnaXN0ZXIodHlwZTogc3RyaW5nLCBkb21haW46IHN0cmluZywgbmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVbnJlZ2lzdGVycyBhbGwgcHVibGlzaGVkIHNlcnZpY2VzLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHN0b3AoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdGFydHMgd2F0Y2hpbmcgZm9yIHNlcnZpY2VzIG9mIHRoZSBzcGVjaWZpZWQgdHlwZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9IFNlcnZpY2UgdHlwZSBuYW1lLCBlLmcuIFwiX2h0dHAuX3RjcFwiLlxyXG4gICAqIEBwYXJhbSBkb21haW4ge3N0cmluZ30gRG9tYWluIHNjb3BlIG9mIHRoZSBzZXJ2aWNlLCB0eXBpY2FsbHkgXCJsb2NhbC5cIi5cclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxaZXJvY29uZlJlc3VsdD59IFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IG5vdGlmaWVzIG9mIGVhY2ggc2VydmljZSBhZGRlZCBvciByZW1vdmVkLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIG9ic2VydmFibGU6IHRydWUsXHJcbiAgICBjbGVhckZ1bmN0aW9uOiAndW53YXRjaCcsXHJcbiAgICBjbGVhcldpdGhBcmdzOiB0cnVlLFxyXG4gIH0pXHJcbiAgd2F0Y2godHlwZTogc3RyaW5nLCBkb21haW46IHN0cmluZyk6IE9ic2VydmFibGU8WmVyb2NvbmZSZXN1bHQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0b3BzIHdhdGNoaW5nIGZvciBzZXJ2aWNlcyBvZiB0aGUgc3BlY2lmaWVkIHR5cGUuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gdHlwZSB7c3RyaW5nfSBTZXJ2aWNlIHR5cGUgbmFtZSwgZS5nLiBcIl9odHRwLl90Y3BcIi5cclxuICAgKiBAcGFyYW0gZG9tYWluIHtzdHJpbmd9IERvbWFpbiBzY29wZSBvZiB0aGUgc2VydmljZSwgdHlwaWNhbGx5IFwibG9jYWwuXCIuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHVud2F0Y2godHlwZTogc3RyaW5nLCBkb21haW46IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2xvc2VzIHRoZSBzZXJ2aWNlIGJyb3dzZXIgYW5kIHN0b3BzIHdhdGNoaW5nLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNsb3NlKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmUtaW5pdGlhbGl6ZXMgdGhlIHBsdWdpbiB0byBjbGVhbiBzZXJ2aWNlICYgYnJvd3NlciBzdGF0ZS5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZUluaXQoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZhbWlseSBvZiBhZGRyZXNzZXMgdG8gcmVnaXN0ZXI6IGlwdjQsIGlwdjYgb3IgYW55LlxyXG4gICAqL1xyXG4gIHJlZ2lzdGVyQWRkcmVzc0ZhbWlseTogJ2lwdjQnIHwgJ2lwdjYnIHwgJ2FueSc7XHJcbiAgLyoqXHJcbiAgICogRmFtaWx5IG9mIGFkZHJlc3NlcyB0byB3YXRjaCBmb3I6IGlwdjQsIGlwdjYgb3IgYW55LlxyXG4gICAqL1xyXG4gIHdhdGNoQWRkcmVzc0ZhbWlseTogJ2lwdjQnIHwgJ2lwdjYnIHwgJ2FueSc7XHJcbn1cclxuIl19