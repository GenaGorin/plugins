var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var LaunchReviewOriginal = /** @class */ (function (_super) {
    __extends(LaunchReviewOriginal, _super);
    function LaunchReviewOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LaunchReviewOriginal.prototype.launch = function (appId) { return cordova(this, "launch", { "platforms": ["Android", "iOS"], "callbackOrder": "reverse" }, arguments); };
    LaunchReviewOriginal.prototype.rating = function () { return cordova(this, "rating", { "observable": true }, arguments); };
    LaunchReviewOriginal.prototype.isRatingSupported = function () { return cordova(this, "isRatingSupported", { "platforms": ["Android", "iOS"], "sync": true }, arguments); };
    LaunchReviewOriginal.pluginName = "LaunchReview";
    LaunchReviewOriginal.plugin = "cordova-launch-review";
    LaunchReviewOriginal.pluginRef = "LaunchReview";
    LaunchReviewOriginal.repo = "https://github.com/dpa99c/cordova-launch-review";
    LaunchReviewOriginal.platforms = ["Android", "iOS"];
    return LaunchReviewOriginal;
}(AwesomeCordovaNativePlugin));
var LaunchReview = new LaunchReviewOriginal();
export { LaunchReview };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvbGF1bmNoLXJldmlldy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQztBQUM1RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQWtDQSxnQ0FBMEI7Ozs7SUFXMUQsNkJBQU0sYUFBQyxLQUFjO0lBZXJCLDZCQUFNO0lBV04sd0NBQWlCOzs7Ozs7dUJBekVuQjtFQW9Da0MsMEJBQTBCO1NBQS9DLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBMYXVuY2ggUmV2aWV3XHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBBc3Npc3RzIGluIGxlYXZpbmcgdXNlciByZXZpZXdzL3JhdGluZ3MgaW4gdGhlIEFwcCBTdG9yZXMuXHJcbiAqIC0gTGF1bmNoZXMgdGhlIHBsYXRmb3JtJ3MgQXBwIFN0b3JlIHBhZ2UgZm9yIHRoZSBjdXJyZW50IGFwcCBpbiBvcmRlciBmb3IgdGhlIHVzZXIgdG8gbGVhdmUgYSByZXZpZXcuXHJcbiAqIC0gT24gaU9TICgxMC4zIGFuZCBhYm92ZSkgaW52b2tlcyB0aGUgbmF0aXZlIGluLWFwcCByYXRpbmcgZGlhbG9nIHdoaWNoIGFsbG93cyBhIHVzZXIgdG8gcmF0ZSB5b3VyIGFwcCB3aXRob3V0IG5lZWRpbmcgdG8gb3BlbiB0aGUgQXBwIFN0b3JlLlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBMYXVuY2hSZXZpZXcgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvbGF1bmNoLXJldmlldy9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGxhdW5jaFJldmlldzogTGF1bmNoUmV2aWV3KSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIHRoaXMubGF1bmNoUmV2aWV3LmxhdW5jaCgpXHJcbiAqICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ1N1Y2Nlc3NmdWxseSBsYXVuY2hlZCBzdG9yZSBhcHAnKSk7XHJcbiAqXHJcbiAqIGlmKHRoaXMubGF1bmNoUmV2aWV3LmlzUmF0aW5nU3VwcG9ydGVkKCkpe1xyXG4gKiAgIHRoaXMubGF1bmNoUmV2aWV3LnJhdGluZygpXHJcbiAqICAgICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygnU3VjY2Vzc2Z1bGx5IGxhdW5jaGVkIHJhdGluZyBkaWFsb2cnKSk7XHJcbiAqIH1cclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnTGF1bmNoUmV2aWV3JyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLWxhdW5jaC1yZXZpZXcnLFxyXG4gIHBsdWdpblJlZjogJ0xhdW5jaFJldmlldycsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9kcGE5OWMvY29yZG92YS1sYXVuY2gtcmV2aWV3JyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTGF1bmNoUmV2aWV3IGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIExhdW5jaGVzIEFwcCBTdG9yZSBvbiBjdXJyZW50IHBsYXRmb3JtIGluIG9yZGVyIHRvIGxlYXZlIGEgcmV2aWV3IGZvciBnaXZlbiBhcHAuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gYXBwSWQge3N0cmluZ30gLSAob3B0aW9uYWwpIHRoZSBwbGF0Zm9ybS1zcGVjaWZpYyBhcHAgSUQgdG8gdXNlIHRvIG9wZW4gdGhlIHBhZ2UgaW4gdGhlIHN0b3JlIGFwcC5cclxuICAgKiBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgcGx1Z2luIHdpbGwgdXNlIHRoZSBhcHAgSUQgZm9yIHRoZSBhcHAgaW4gd2hpY2ggdGhlIHBsdWdpbiBpcyBjb250YWluZWQuXHJcbiAgICogT24gQW5kcm9pZCB0aGlzIGlzIHRoZSBmdWxsIHBhY2thZ2UgbmFtZSBvZiB0aGUgYXBwLiBGb3IgZXhhbXBsZSwgZm9yIEdvb2dsZSBNYXBzOiBgY29tLmdvb2dsZS5hbmRyb2lkLmFwcHMubWFwc2BcclxuICAgKiBPbiBpT1MgdGhpcyBpcyB0aGUgQXBwbGUgSUQgb2YgdGhlIGFwcC4gRm9yIGV4YW1wbGUsIGZvciBHb29nbGUgTWFwczogYDU4NTAyNzM1NGBcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLCBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScgfSlcclxuICBsYXVuY2goYXBwSWQ/OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEludm9rZXMgdGhlIG5hdGl2ZSBpbi1hcHAgcmF0aW5nIGRpYWxvZyB3aGljaCBhbGxvd3MgYSB1c2VyIHRvIHJhdGUgeW91ciBhcHAgd2l0aG91dCBuZWVkaW5nIHRvIG9wZW4gdGhlIEFwcCBTdG9yZS5cclxuICAgKiBSZXF1aXJlcyBpT1MgMTAuMyBhbmQgYWJvdmU6IENhbGxpbmcgdGhpcyBvbiBhbnkgcGxhdGZvcm0vdmVyc2lvbiBvdGhlciB0aGFuIGlPUyAxMC4zKyB3aWxsIHJlc3VsdCBpbiB0aGUgZXJyb3IgY2FsbGJhY2suXHJcbiAgICogU3VjY2VzcyBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCB1cCB0byAzIHRpbWVzOlxyXG4gICAqIC0gRmlyc3Q6IGFmdGVyIGBMYXVuY2hSZXZpZXcucmF0aW5nKClgIGlzIGNhbGxlZCBhbmQgdGhlIHJlcXVlc3QgdG8gc2hvdyB0aGUgZGlhbG9nIGlzIHN1Y2Nlc3NmdWwuIFdpbGwgYmUgcGFzc2VkIHRoZSB2YWx1ZSBgcmVxdWVzdGVkYC5cclxuICAgKiAtIFNlY29uZDogaWYgYW5kIHdoZW4gdGhlIFJhdGluZyBkaWFsb2cgaXMgYWN0dWFsbHkgZGlzcGxheWVkLiAgV2lsbCBiZSBwYXNzZWQgdGhlIHZhbHVlIGBzaG93bmAuXHJcbiAgICogLSBUaGlyZDogaWYgYW5kIHdoZW4gdGhlIFJhdGluZyBkaWFsb2cgaXMgZGlzbWlzc2VkLiAgV2lsbCBiZSBwYXNzZWQgdGhlIHZhbHVlIGBkaXNtaXNzZWRgLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge09ic2VydmFibGU8c3RyaW5nPn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7IG9ic2VydmFibGU6IHRydWUgfSlcclxuICByYXRpbmcoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyBpZiB0aGUgY3VycmVudCBwbGF0Zm9ybS92ZXJzaW9uIHN1cHBvcnRzIGluLWFwcCByYXRpbmdzIGRpYWxvZywgaS5lLiBjYWxsaW5nIExhdW5jaFJldmlldy5yYXRpbmcoKS5cclxuICAgKiBXaWxsIHJldHVybiB0cnVlIGlmIGN1cnJlbnQgcGxhdGZvcm0gaXMgaU9TIDEwLjMgb3IgYWJvdmUuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLCBzeW5jOiB0cnVlIH0pXHJcbiAgaXNSYXRpbmdTdXBwb3J0ZWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==