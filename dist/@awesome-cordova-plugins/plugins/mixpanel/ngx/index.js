import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var Mixpanel = /** @class */ (function (_super) {
    __extends(Mixpanel, _super);
    function Mixpanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Mixpanel.prototype.alias = function (aliasId, originalId) { return cordova(this, "alias", {}, arguments); };
    Mixpanel.prototype.distinctId = function () { return cordova(this, "distinctId", {}, arguments); };
    Mixpanel.prototype.flush = function () { return cordova(this, "flush", {}, arguments); };
    Mixpanel.prototype.identify = function (distinctId, usePeople) { return cordova(this, "identify", {}, arguments); };
    Mixpanel.prototype.init = function (token) { return cordova(this, "init", {}, arguments); };
    Mixpanel.prototype.getSuperProperties = function () { return cordova(this, "getSuperProperties", {}, arguments); };
    Mixpanel.prototype.registerSuperProperties = function (superProperties) { return cordova(this, "registerSuperProperties", {}, arguments); };
    Mixpanel.prototype.registerSuperPropertiesOnce = function (superProperties) { return cordova(this, "registerSuperPropertiesOnce", {}, arguments); };
    Mixpanel.prototype.unregisterSuperProperty = function (superPropertyName) { return cordova(this, "unregisterSuperProperty", {}, arguments); };
    Mixpanel.prototype.reset = function () { return cordova(this, "reset", {}, arguments); };
    Mixpanel.prototype.timeEvent = function (eventName) { return cordova(this, "timeEvent", {}, arguments); };
    Mixpanel.prototype.track = function (eventName, eventProperties) { return cordova(this, "track", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    Mixpanel.pluginName = "Mixpanel";
    Mixpanel.plugin = "cordova-plugin-mixpanel";
    Mixpanel.pluginRef = "mixpanel";
    Mixpanel.repo = "https://github.com/samzilverberg/cordova-mixpanel-plugin";
    Mixpanel.platforms = ["Android", "Browser", "iOS"];
    Mixpanel.decorators = [
        { type: Injectable }
    ];
    return Mixpanel;
}(AwesomeCordovaNativePlugin));
export { Mixpanel };
var MixpanelPeople = /** @class */ (function (_super) {
    __extends(MixpanelPeople, _super);
    function MixpanelPeople() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MixpanelPeople.prototype.append = function (appendObject) { return cordova(this, "append", {}, arguments); };
    MixpanelPeople.prototype.deleteUser = function () { return cordova(this, "deleteUser", {}, arguments); };
    MixpanelPeople.prototype.identify = function (distinctId) { return cordova(this, "identify", {}, arguments); };
    MixpanelPeople.prototype.increment = function (peopleProperties) { return cordova(this, "increment", {}, arguments); };
    MixpanelPeople.prototype.setPushId = function (pushId) { return cordova(this, "setPushId", {}, arguments); };
    MixpanelPeople.prototype.set = function (peopleProperties) { return cordova(this, "set", {}, arguments); };
    MixpanelPeople.prototype.setOnce = function (peopleProperties) { return cordova(this, "setOnce", {}, arguments); };
    MixpanelPeople.prototype.trackCharge = function (amount, chargeProperties) { return cordova(this, "trackCharge", {}, arguments); };
    MixpanelPeople.prototype.unset = function (propertiesArray) { return cordova(this, "unset", {}, arguments); };
    MixpanelPeople.prototype.union = function (unionObject) { return cordova(this, "union", {}, arguments); };
    MixpanelPeople.plugin = "cordova-plugin-mixpanel";
    MixpanelPeople.pluginRef = "mixpanel.people";
    MixpanelPeople.pluginName = "Mixpanel";
    MixpanelPeople.decorators = [
        { type: Injectable }
    ];
    return MixpanelPeople;
}(AwesomeCordovaNativePlugin));
export { MixpanelPeople };
//# sourceMappingURL=data:application/json;base64,