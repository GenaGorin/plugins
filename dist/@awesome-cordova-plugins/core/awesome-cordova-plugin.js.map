{"version":3,"file":"awesome-cordova-plugin.js","sourceRoot":"","sources":["../../../src/@awesome-cordova-plugins/core/awesome-cordova-plugin.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAE7B;IAAA;IA2DA,CAAC;IAnDC;;;;OAIG;IACI,oCAAS,GAAhB;QACE,IAAM,WAAW,GAAG,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI,CAAC;QAC/D,OAAO,WAAW,CAAC;IACrB,CAAC;IAED;;OAEG;IACI,oCAAS,GAAhB;QACE,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YACjC,OAAO,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;SACpC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACI,wCAAa,GAApB;QACE,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;OAEG;IACI,uCAAY,GAAnB;QACE,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QACjC,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACI,+CAAoB,GAA3B;QACE,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACI,gDAAqB,GAA5B;QACE,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,OAAO,QAAQ,CAAC;IAClB,CAAC;IAzDM,qCAAU,GAAG,EAAE,CAAC;IAChB,oCAAS,GAAG,EAAE,CAAC;IACf,iCAAM,GAAG,EAAE,CAAC;IACZ,+BAAI,GAAG,EAAE,CAAC;IACV,oCAAS,GAAa,EAAE,CAAC;IACzB,kCAAO,GAAG,EAAE,CAAC;IAqDtB,iCAAC;CAAA,AA3DD,IA2DC;SA3DY,0BAA0B","sourcesContent":["import { checkAvailability } from './decorators/common';\r\nimport { get } from './util';\r\n\r\nexport class AwesomeCordovaNativePlugin {\r\n  static pluginName = '';\r\n  static pluginRef = '';\r\n  static plugin = '';\r\n  static repo = '';\r\n  static platforms: string[] = [];\r\n  static install = '';\r\n\r\n  /**\r\n   * Returns a boolean that indicates whether the plugin is installed\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n  static installed(): boolean {\r\n    const isAvailable = checkAvailability(this.pluginRef) === true;\r\n    return isAvailable;\r\n  }\r\n\r\n  /**\r\n   * Returns the original plugin object\r\n   */\r\n  static getPlugin(): any {\r\n    if (typeof window !== 'undefined') {\r\n      return get(window, this.pluginRef);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Returns the plugin's name\r\n   */\r\n  static getPluginName(): string {\r\n    const pluginName = this.pluginName;\r\n    return pluginName;\r\n  }\r\n\r\n  /**\r\n   * Returns the plugin's reference\r\n   */\r\n  static getPluginRef(): string {\r\n    const pluginRef = this.pluginRef;\r\n    return pluginRef;\r\n  }\r\n\r\n  /**\r\n   * Returns the plugin's install name\r\n   */\r\n  static getPluginInstallName(): string {\r\n    const plugin = this.plugin;\r\n    return plugin;\r\n  }\r\n\r\n  /**\r\n   * Returns the plugin's supported platforms\r\n   */\r\n  static getSupportedPlatforms(): string[] {\r\n    const platform = this.platforms;\r\n    return platform;\r\n  }\r\n}\r\n"]}